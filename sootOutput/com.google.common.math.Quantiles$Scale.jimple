public final class com.google.common.math.Quantiles$Scale extends java.lang.Object
{
    private final int scale;

    private void <init>(int)
    {
        int $i0;
        com.google.common.math.Quantiles$Scale r0;
        boolean $z0;

        r0 := @this: com.google.common.math.Quantiles$Scale;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Quantile scale must be positive");

        r0.<com.google.common.math.Quantiles$Scale: int scale> = $i0;

        return;
    }

    void <init>(int, com.google.common.math.Quantiles$1)
    {
        int $i0;
        com.google.common.math.Quantiles$1 $r1;
        com.google.common.math.Quantiles$Scale r0;

        r0 := @this: com.google.common.math.Quantiles$Scale;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.google.common.math.Quantiles$1;

        specialinvoke r0.<com.google.common.math.Quantiles$Scale: void <init>(int)>($i0);

        return;
    }

    public com.google.common.math.Quantiles$ScaleAndIndex index(int)
    {
        com.google.common.math.Quantiles$ScaleAndIndex $r1;
        com.google.common.math.Quantiles$Scale r0;
        int $i0, $i1;

        r0 := @this: com.google.common.math.Quantiles$Scale;

        $i0 := @parameter0: int;

        $r1 = new com.google.common.math.Quantiles$ScaleAndIndex;

        $i1 = r0.<com.google.common.math.Quantiles$Scale: int scale>;

        specialinvoke $r1.<com.google.common.math.Quantiles$ScaleAndIndex: void <init>(int,int,com.google.common.math.Quantiles$1)>($i1, $i0, null);

        return $r1;
    }

    public com.google.common.math.Quantiles$ScaleAndIndexes indexes(java.util.Collection)
    {
        com.google.common.math.Quantiles$Scale r0;
        com.google.common.math.Quantiles$ScaleAndIndexes $r2;
        int[] $r3;
        java.util.Collection r1;
        int $i0;

        r0 := @this: com.google.common.math.Quantiles$Scale;

        r1 := @parameter0: java.util.Collection;

        $r2 = new com.google.common.math.Quantiles$ScaleAndIndexes;

        $i0 = r0.<com.google.common.math.Quantiles$Scale: int scale>;

        $r3 = staticinvoke <com.google.common.primitives.Ints: int[] toArray(java.util.Collection)>(r1);

        specialinvoke $r2.<com.google.common.math.Quantiles$ScaleAndIndexes: void <init>(int,int[],com.google.common.math.Quantiles$1)>($i0, $r3, null);

        return $r2;
    }

    public transient com.google.common.math.Quantiles$ScaleAndIndexes indexes(int[])
    {
        com.google.common.math.Quantiles$Scale r0;
        int[] $r1;
        com.google.common.math.Quantiles$ScaleAndIndexes $r2;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: com.google.common.math.Quantiles$Scale;

        $r1 := @parameter0: int[];

        $r2 = new com.google.common.math.Quantiles$ScaleAndIndexes;

        $i0 = r0.<com.google.common.math.Quantiles$Scale: int scale>;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (int[]) $r3;

        specialinvoke $r2.<com.google.common.math.Quantiles$ScaleAndIndexes: void <init>(int,int[],com.google.common.math.Quantiles$1)>($i0, $r1, null);

        return $r2;
    }
}
