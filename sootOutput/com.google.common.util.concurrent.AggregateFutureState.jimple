abstract class com.google.common.util.concurrent.AggregateFutureState extends com.google.common.util.concurrent.AbstractFuture$TrustedFuture
{
    private static final com.google.common.util.concurrent.AggregateFutureState$AtomicHelper ATOMIC_HELPER;
    private static final java.util.logging.Logger log;
    private volatile int remaining;
    private volatile java.util.Set seenExceptions;

    static void <clinit>()
    {
        java.lang.Throwable r3;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5;
        com.google.common.util.concurrent.AggregateFutureState$AtomicHelper r7;
        java.util.logging.Logger $r2;
        com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper $r8;
        java.util.logging.Level $r9;
        java.lang.Class r0;
        com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper $r4;
        java.lang.String $r1;

        r0 = class "Lcom/google/common/util/concurrent/AggregateFutureState;";

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.util.concurrent.AggregateFutureState: java.util.logging.Logger log> = $r2;

        r3 = null;

     label1:
        $r4 = new com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper;

        $r5 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AggregateFutureState;", class "Ljava/util/Set;", "seenExceptions");

        $r6 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AggregateFutureState;", "remaining");

        specialinvoke $r4.<com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicIntegerFieldUpdater)>($r5, $r6);

     label2:
        r7 = $r4;

        goto label4;

     label3:
        r3 := @caughtexception;

        $r8 = new com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper;

        specialinvoke $r8.<com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper: void <init>(com.google.common.util.concurrent.AggregateFutureState$1)>(null);

        r7 = $r8;

     label4:
        <com.google.common.util.concurrent.AggregateFutureState: com.google.common.util.concurrent.AggregateFutureState$AtomicHelper ATOMIC_HELPER> = r7;

        if r3 == null goto label5;

        $r2 = <com.google.common.util.concurrent.AggregateFutureState: java.util.logging.Logger log>;

        $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, "SafeAtomicHelper is broken!", r3);

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void <init>(int)
    {
        int $i0;
        com.google.common.util.concurrent.AggregateFutureState r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: void <init>()>();

        r0.<com.google.common.util.concurrent.AggregateFutureState: java.util.Set seenExceptions> = null;

        r0.<com.google.common.util.concurrent.AggregateFutureState: int remaining> = $i0;

        return;
    }

    static java.util.Set access$200(com.google.common.util.concurrent.AggregateFutureState)
    {
        java.util.Set r1;
        com.google.common.util.concurrent.AggregateFutureState $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AggregateFutureState;

        r1 = $r0.<com.google.common.util.concurrent.AggregateFutureState: java.util.Set seenExceptions>;

        return r1;
    }

    static java.util.Set access$202(com.google.common.util.concurrent.AggregateFutureState, java.util.Set)
    {
        java.util.Set $r1;
        com.google.common.util.concurrent.AggregateFutureState $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AggregateFutureState;

        $r1 := @parameter1: java.util.Set;

        $r0.<com.google.common.util.concurrent.AggregateFutureState: java.util.Set seenExceptions> = $r1;

        return $r1;
    }

    static int access$306(com.google.common.util.concurrent.AggregateFutureState)
    {
        int $i0;
        com.google.common.util.concurrent.AggregateFutureState $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AggregateFutureState;

        $i0 = $r0.<com.google.common.util.concurrent.AggregateFutureState: int remaining>;

        $i0 = $i0 + -1;

        $r0.<com.google.common.util.concurrent.AggregateFutureState: int remaining> = $i0;

        return $i0;
    }

    abstract void addInitialException(java.util.Set);

    final void clearSeenExceptions()
    {
        com.google.common.util.concurrent.AggregateFutureState r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState;

        r0.<com.google.common.util.concurrent.AggregateFutureState: java.util.Set seenExceptions> = null;

        return;
    }

    final int decrementRemainingAndGet()
    {
        int $i0;
        com.google.common.util.concurrent.AggregateFutureState r0;
        com.google.common.util.concurrent.AggregateFutureState$AtomicHelper $r1;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState;

        $r1 = <com.google.common.util.concurrent.AggregateFutureState: com.google.common.util.concurrent.AggregateFutureState$AtomicHelper ATOMIC_HELPER>;

        $i0 = virtualinvoke $r1.<com.google.common.util.concurrent.AggregateFutureState$AtomicHelper: int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState)>(r0);

        return $i0;
    }

    final java.util.Set getOrInitSeenExceptions()
    {
        com.google.common.util.concurrent.AggregateFutureState$AtomicHelper $r2;
        java.util.Set r1;
        java.lang.Object $r3;
        com.google.common.util.concurrent.AggregateFutureState r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState;

        r1 = r0.<com.google.common.util.concurrent.AggregateFutureState: java.util.Set seenExceptions>;

        if r1 != null goto label1;

        r1 = staticinvoke <com.google.common.collect.Sets: java.util.Set newConcurrentHashSet()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFutureState: void addInitialException(java.util.Set)>(r1);

        $r2 = <com.google.common.util.concurrent.AggregateFutureState: com.google.common.util.concurrent.AggregateFutureState$AtomicHelper ATOMIC_HELPER>;

        virtualinvoke $r2.<com.google.common.util.concurrent.AggregateFutureState$AtomicHelper: void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set)>(r0, null, r1);

        r1 = r0.<com.google.common.util.concurrent.AggregateFutureState: java.util.Set seenExceptions>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r1 = (java.util.Set) $r3;

     label1:
        return r1;
    }
}
