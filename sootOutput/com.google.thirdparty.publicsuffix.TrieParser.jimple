final class com.google.thirdparty.publicsuffix.TrieParser extends java.lang.Object
{
    private static final com.google.common.base.Joiner PREFIX_JOINER;

    static void <clinit>()
    {
        com.google.common.base.Joiner $r0;

        $r0 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>("");

        <com.google.thirdparty.publicsuffix.TrieParser: com.google.common.base.Joiner PREFIX_JOINER> = $r0;

        return;
    }

    void <init>()
    {
        com.google.thirdparty.publicsuffix.TrieParser r0;

        r0 := @this: com.google.thirdparty.publicsuffix.TrieParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int doParseTrieToBuilder(java.util.Deque, java.lang.CharSequence, int, com.google.common.collect.ImmutableMap$Builder)
    {
        java.lang.CharSequence $r1, $r3;
        com.google.thirdparty.publicsuffix.PublicSuffixType $r6;
        char c3, $c4;
        java.util.Deque r0;
        com.google.common.collect.ImmutableMap$Builder r2;
        int $i0, $i1, i2, $i5;
        java.lang.String $r5;
        com.google.common.base.Joiner r4;

        r0 := @parameter0: java.util.Deque;

        $r1 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        r2 := @parameter3: com.google.common.collect.ImmutableMap$Builder;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        i2 = $i0;

        c3 = 0;

     label1:
        if i2 >= $i1 goto label3;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i2);

        c3 = $c4;

        $i5 = (int) $c4;

        if $i5 == 38 goto label3;

        $i5 = (int) $c4;

        if $i5 == 63 goto label3;

        $i5 = (int) $c4;

        if $i5 == 33 goto label3;

        $i5 = (int) $c4;

        if $i5 == 58 goto label3;

        $i5 = (int) $c4;

        if $i5 != 44 goto label2;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, i2);

        $r3 = staticinvoke <com.google.thirdparty.publicsuffix.TrieParser: java.lang.CharSequence reverse(java.lang.CharSequence)>($r3);

        interfaceinvoke r0.<java.util.Deque: void push(java.lang.Object)>($r3);

        if c3 == 33 goto label4;

        if c3 == 63 goto label4;

        if c3 == 58 goto label4;

        if c3 != 44 goto label5;

     label4:
        r4 = <com.google.thirdparty.publicsuffix.TrieParser: com.google.common.base.Joiner PREFIX_JOINER>;

        $r5 = virtualinvoke r4.<com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>(r0);

        $i5 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i5 <= 0 goto label5;

        $r6 = staticinvoke <com.google.thirdparty.publicsuffix.PublicSuffixType: com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char)>(c3);

        virtualinvoke r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r5, $r6);

     label5:
        i2 = i2 + 1;

        if c3 == 63 goto label8;

        if c3 == 44 goto label8;

     label6:
        if i2 >= $i1 goto label8;

        $i5 = staticinvoke <com.google.thirdparty.publicsuffix.TrieParser: int doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)>(r0, $r1, i2, r2);

        i2 = i2 + $i5;

        c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i2);

        $i5 = (int) c3;

        if $i5 == 63 goto label7;

        c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i2);

        $i5 = (int) c3;

        if $i5 != 44 goto label6;

     label7:
        i2 = i2 + 1;

     label8:
        interfaceinvoke r0.<java.util.Deque: java.lang.Object pop()>();

        $i0 = i2 - $i0;

        return $i0;
    }

    static com.google.common.collect.ImmutableMap parseTrie(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        com.google.common.collect.ImmutableMap $r3;
        int $i0, i1, $i2;
        java.util.ArrayDeque $r2;
        com.google.common.collect.ImmutableMap$Builder $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = staticinvoke <com.google.common.collect.Queues: java.util.ArrayDeque newArrayDeque()>();

        $i2 = staticinvoke <com.google.thirdparty.publicsuffix.TrieParser: int doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)>($r2, $r0, i1, $r1);

        i1 = i1 + $i2;

        goto label1;

     label2:
        $r3 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        return $r3;
    }

    private static java.lang.CharSequence reverse(java.lang.CharSequence)
    {
        java.lang.StringBuilder $r1;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>();

        return $r1;
    }
}
