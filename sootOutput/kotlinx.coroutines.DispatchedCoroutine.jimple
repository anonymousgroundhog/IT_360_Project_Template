public final class kotlinx.coroutines.DispatchedCoroutine extends kotlinx.coroutines.internal.ScopeCoroutine
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU;
    private volatile int _decision;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/DispatchedCoroutine;", "_decision");

        <kotlinx.coroutines.DispatchedCoroutine: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU> = $r0;

        return;
    }

    public void <init>(kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.DispatchedCoroutine r0;
        kotlin.coroutines.Continuation $r2;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlinx.coroutines.DispatchedCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlinx.coroutines.internal.ScopeCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r1, $r2);

        return;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicIntegerFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0;
        kotlinx.coroutines.DispatchedCoroutine r0;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: kotlinx.coroutines.DispatchedCoroutine;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final boolean tryResume()
    {
        java.lang.IllegalStateException $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1, $r4;
        int $i0;
        kotlinx.coroutines.DispatchedCoroutine r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.DispatchedCoroutine;

        r1 = <kotlinx.coroutines.DispatchedCoroutine: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU>;

     label1:
        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label3;
            default: goto label2;
        };

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Already resumed";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return 0;

     label4:
        $r4 = <kotlinx.coroutines.DispatchedCoroutine: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, 0, 2);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        goto label1;
    }

    private final boolean trySuspend()
    {
        java.lang.IllegalStateException $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1, $r4;
        int $i0;
        kotlinx.coroutines.DispatchedCoroutine r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.DispatchedCoroutine;

        r1 = <kotlinx.coroutines.DispatchedCoroutine: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU>;

     label1:
        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label2;
        };

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Already suspended";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return 0;

     label4:
        $r4 = <kotlinx.coroutines.DispatchedCoroutine: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, 0, 1);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        goto label1;
    }

    protected void afterCompletion(java.lang.Object)
    {
        kotlinx.coroutines.DispatchedCoroutine r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.DispatchedCoroutine;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<kotlinx.coroutines.DispatchedCoroutine: void afterResume(java.lang.Object)>($r1);

        return;
    }

    protected void afterResume(java.lang.Object)
    {
        kotlin.coroutines.Continuation $r2, $r3;
        kotlinx.coroutines.DispatchedCoroutine r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.DispatchedCoroutine;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<kotlinx.coroutines.DispatchedCoroutine: boolean tryResume()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<kotlinx.coroutines.DispatchedCoroutine: kotlin.coroutines.Continuation uCont>;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r3 = r0.<kotlinx.coroutines.DispatchedCoroutine: kotlin.coroutines.Continuation uCont>;

        $r1 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object recoverResult(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r3);

        staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: void resumeCancellableWith$default(kotlin.coroutines.Continuation,java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, $r1, null, 2, null);

        return;
    }

    public final java.lang.Object getResult()
    {
        java.lang.Throwable $r3;
        kotlinx.coroutines.CompletedExceptionally $r2;
        kotlinx.coroutines.DispatchedCoroutine r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.DispatchedCoroutine;

        $z0 = specialinvoke r0.<kotlinx.coroutines.DispatchedCoroutine: boolean trySuspend()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r1;

     label1:
        $r1 = virtualinvoke r0.<kotlinx.coroutines.DispatchedCoroutine: java.lang.Object getState$kotlinx_coroutines_core()>();

        $r1 = staticinvoke <kotlinx.coroutines.JobSupportKt: java.lang.Object unboxState(java.lang.Object)>($r1);

        $z0 = $r1 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r2 = (kotlinx.coroutines.CompletedExceptionally) $r1;

        $r3 = $r2.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        throw $r3;
    }
}
