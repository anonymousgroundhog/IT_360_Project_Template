final class kotlinx.coroutines.flow.FlowKt__ErrorsKt extends java.lang.Object
{

    public static final kotlinx.coroutines.flow.Flow 'catch'(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        $r2 = new kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }

    public static final java.lang.Object catchImpl(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r9, r11;
        java.lang.IllegalStateException r7;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1 $r3, $r4;
        kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2 $r10;
        kotlin.coroutines.CoroutineContext $r12;
        kotlinx.coroutines.flow.Flow r0;
        kotlinx.coroutines.flow.FlowCollector r1;
        int $i0;
        java.lang.Object $r5, $r6;
        boolean $z0;
        kotlin.jvm.internal.Ref$ObjectRef r8;

        r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        r1 := @parameter1: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: void <init>(kotlin.coroutines.Continuation)>($r2);

     label02:
        $r4 = $r3;

        $r5 = $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label08;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r7;

     label04:
        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: java.lang.Object L$0>;

        r8 = (kotlin.jvm.internal.Ref$ObjectRef) $r6;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label06:
        goto label11;

     label07:
        r9 := @caughtexception;

        goto label13;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        r8 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke r8.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

     label09:
        $r10 = new kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2;

        specialinvoke $r10.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlin.jvm.internal.Ref$ObjectRef)>(r1, r8);

        r1 = (kotlinx.coroutines.flow.FlowCollector) $r10;

        $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: java.lang.Object L$0> = r8;

        $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$1: int label> = 1;

        $r5 = interfaceinvoke r0.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>(r1, $r3);

     label10:
        if $r5 != $r6 goto label11;

        return $r6;

     label11:
        return null;

     label12:
        r9 := @caughtexception;

     label13:
        $r5 = r8.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        r11 = (java.lang.Throwable) $r5;

        $z0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ErrorsKt: boolean isSameExceptionAs$FlowKt__ErrorsKt(java.lang.Throwable,java.lang.Throwable)>(r9, r11);

        if $z0 != 0 goto label16;

        $r12 = interfaceinvoke $r4.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $z0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ErrorsKt: boolean isCancellationCause$FlowKt__ErrorsKt(java.lang.Throwable,kotlin.coroutines.CoroutineContext)>(r9, $r12);

        if $z0 != 0 goto label16;

        if r11 != null goto label14;

        return r9;

     label14:
        $z0 = r9 instanceof java.util.concurrent.CancellationException;

        if $z0 == 0 goto label15;

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>(r11, r9);

        throw r11;

     label15:
        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>(r9, r11);

        throw r9;

     label16:
        throw r9;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label12;
    }

    private static final boolean isCancellationCause$FlowKt__ErrorsKt(java.lang.Throwable, kotlin.coroutines.CoroutineContext)
    {
        java.lang.Throwable $r0, $r7;
        kotlinx.coroutines.Job$Key r2;
        java.util.concurrent.CancellationException $r6;
        kotlinx.coroutines.Job r5;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Key r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        r3 = (kotlin.coroutines.CoroutineContext$Key) r2;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r3);

        r5 = (kotlinx.coroutines.Job) $r4;

        if r5 == null goto label2;

        $z0 = interfaceinvoke r5.<kotlinx.coroutines.Job: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r6 = interfaceinvoke r5.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        $r7 = (java.lang.Throwable) $r6;

        $z0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ErrorsKt: boolean isSameExceptionAs$FlowKt__ErrorsKt(java.lang.Throwable,java.lang.Throwable)>($r0, $r7);

        return $z0;

     label2:
        return 0;
    }

    private static final boolean isSameExceptionAs$FlowKt__ErrorsKt(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.Throwable;

        if $r1 == null goto label5;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable unwrapImpl(java.lang.Throwable)>($r1);

     label2:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r0 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable unwrapImpl(java.lang.Throwable)>($r0);

     label4:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r0);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public static final kotlinx.coroutines.flow.Flow retry(kotlinx.coroutines.flow.Flow, long, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function4 $r2;
        long $l0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.IllegalArgumentException $r7;
        kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3 $r5;
        kotlinx.coroutines.flow.Flow $r0;
        byte $b1;
        int $i2;
        java.lang.StringBuilder $r3, $r6;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r5 = new kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3;

        specialinvoke $r5.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3: void <init>(long,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($l0, $r1, null);

        $r2 = (kotlin.jvm.functions.Function4) $r5;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow retryWhen(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function4)>($r0, $r2);

        return $r0;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected positive amount of retries, but had ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r7;
    }

    public static kotlinx.coroutines.flow.Flow retry$default(kotlinx.coroutines.flow.Flow, long, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.Flow $r0;
        int $i1, $i2;
        long $l0;
        java.lang.Object $r2;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$1 $r3;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $l0 = 9223372036854775807L;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $r3 = new kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$1: void <init>(kotlin.coroutines.Continuation)>(null);

        $r1 = (kotlin.jvm.functions.Function2) $r3;

     label2:
        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow retry(kotlinx.coroutines.flow.Flow,long,kotlin.jvm.functions.Function2)>($r0, $l0, $r1);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow retryWhen(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function4)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function4 $r1;
        kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function4;

        $r2 = new kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function4)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }
}
