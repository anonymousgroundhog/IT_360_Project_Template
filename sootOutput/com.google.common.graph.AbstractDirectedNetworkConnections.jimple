abstract class com.google.common.graph.AbstractDirectedNetworkConnections extends java.lang.Object implements com.google.common.graph.NetworkConnections
{
    final java.util.Map inEdgeMap;
    final java.util.Map outEdgeMap;
    private int selfLoopCount;

    void <init>(java.util.Map, java.util.Map, int)
    {
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        java.util.Map r1, r2, $r4;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.util.Map) $r3;

        r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map inEdgeMap> = $r4;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.util.Map) $r3;

        r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map outEdgeMap> = $r4;

        $i1 = staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>($i0);

        r0.<com.google.common.graph.AbstractDirectedNetworkConnections: int selfLoopCount> = $i1;

        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 > $i1 goto label1;

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        if $i0 > $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        return;
    }

    static int access$000(com.google.common.graph.AbstractDirectedNetworkConnections)
    {
        int i0;
        com.google.common.graph.AbstractDirectedNetworkConnections $r0;

        $r0 := @parameter0: com.google.common.graph.AbstractDirectedNetworkConnections;

        i0 = $r0.<com.google.common.graph.AbstractDirectedNetworkConnections: int selfLoopCount>;

        return i0;
    }

    public void addInEdge(java.lang.Object, java.lang.Object, boolean)
    {
        java.util.Map r3;
        int i0;
        java.lang.Object r1, r2;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        boolean $z0, $z1;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $z1 = 1;

        if $z0 == 0 goto label1;

        i0 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: int selfLoopCount>;

        i0 = i0 + 1;

        r0.<com.google.common.graph.AbstractDirectedNetworkConnections: int selfLoopCount> = i0;

        staticinvoke <com.google.common.graph.Graphs: int checkPositive(int)>(i0);

     label1:
        r3 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map inEdgeMap>;

        r1 = interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        if r1 != null goto label2;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        return;
    }

    public void addOutEdge(java.lang.Object, java.lang.Object)
    {
        java.util.Map r3;
        java.lang.Object r1, r2;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r3 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map outEdgeMap>;

        r1 = interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        if r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        return;
    }

    public java.lang.Object adjacentNode(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        java.util.Map $r2;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map outEdgeMap>;

        r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        return r1;
    }

    public java.util.Set adjacentNodes()
    {
        com.google.common.collect.Sets$SetView $r3;
        java.util.Set $r1, $r2;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        $r1 = virtualinvoke r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Set predecessors()>();

        $r2 = virtualinvoke r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Set successors()>();

        $r3 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView union(java.util.Set,java.util.Set)>($r1, $r2);

        return $r3;
    }

    public java.util.Set inEdges()
    {
        java.util.Set $r2;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        $r1 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map inEdgeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r2;
    }

    public java.util.Set incidentEdges()
    {
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        com.google.common.graph.AbstractDirectedNetworkConnections$1 $r1;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        $r1 = new com.google.common.graph.AbstractDirectedNetworkConnections$1;

        specialinvoke $r1.<com.google.common.graph.AbstractDirectedNetworkConnections$1: void <init>(com.google.common.graph.AbstractDirectedNetworkConnections)>(r0);

        return $r1;
    }

    public java.util.Set outEdges()
    {
        java.util.Set $r2;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        $r1 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map outEdgeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r2;
    }

    public java.lang.Object removeInEdge(java.lang.Object, boolean)
    {
        java.util.Map r2;
        int i0;
        java.lang.Object r1;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        i0 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: int selfLoopCount>;

        i0 = i0 + -1;

        r0.<com.google.common.graph.AbstractDirectedNetworkConnections: int selfLoopCount> = i0;

        staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>(i0);

     label1:
        r2 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map inEdgeMap>;

        r1 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        return r1;
    }

    public java.lang.Object removeOutEdge(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.graph.AbstractDirectedNetworkConnections r0;
        java.util.Map r2;

        r0 := @this: com.google.common.graph.AbstractDirectedNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.util.Map outEdgeMap>;

        r1 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        return r1;
    }
}
