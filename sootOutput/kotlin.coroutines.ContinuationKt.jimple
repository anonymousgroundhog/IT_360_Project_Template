public final class kotlin.coroutines.ContinuationKt extends java.lang.Object
{

    private static final kotlin.coroutines.Continuation Continuation(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function1)
    {
        kotlin.coroutines.Continuation $r3;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.coroutines.ContinuationKt$Continuation$1 $r2;
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "resumeWith");

        $r2 = new kotlin.coroutines.ContinuationKt$Continuation$1;

        specialinvoke $r2.<kotlin.coroutines.ContinuationKt$Continuation$1: void <init>(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function1)>($r0, $r1);

        $r3 = (kotlin.coroutines.Continuation) $r2;

        return $r3;
    }

    public static final kotlin.coroutines.Continuation createCoroutine(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r3;
        kotlin.coroutines.SafeContinuation $r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "completion");

        $r2 = new kotlin.coroutines.SafeContinuation;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r0, $r1);

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        specialinvoke $r2.<kotlin.coroutines.SafeContinuation: void <init>(kotlin.coroutines.Continuation,java.lang.Object)>($r1, $r3);

        $r1 = (kotlin.coroutines.Continuation) $r2;

        return $r1;
    }

    public static final kotlin.coroutines.Continuation createCoroutine(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r0;
        kotlin.coroutines.SafeContinuation $r3;

        $r0 := @parameter0: kotlin.jvm.functions.Function2;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "completion");

        $r3 = new kotlin.coroutines.SafeContinuation;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r0, $r1, $r2);

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        specialinvoke $r3.<kotlin.coroutines.SafeContinuation: void <init>(kotlin.coroutines.Continuation,java.lang.Object)>($r2, $r1);

        $r2 = (kotlin.coroutines.Continuation) $r3;

        return $r2;
    }

    private static final kotlin.coroutines.CoroutineContext getCoroutineContext()
    {
        kotlin.NotImplementedError $r0;

        $r0 = new kotlin.NotImplementedError;

        specialinvoke $r0.<kotlin.NotImplementedError: void <init>(java.lang.String)>("Implemented as intrinsic");

        throw $r0;
    }

    public static void getCoroutineContext$annotations()
    {
        return;
    }

    private static final void resume(kotlin.coroutines.Continuation, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r0;
        java.lang.Object $r1;
        kotlin.Result$Companion $r2;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        interfaceinvoke $r0.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return;
    }

    private static final void resumeWithException(kotlin.coroutines.Continuation, java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlin.coroutines.Continuation $r0;
        kotlin.Result$Companion $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $r1 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "exception");

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r1);

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r3);

        interfaceinvoke $r0.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r3);

        return;
    }

    public static final void startCoroutine(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.Unit $r3;
        kotlin.Result$Companion $r2;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r4;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "completion");

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r0, $r1);

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r2 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r3);

        interfaceinvoke $r1.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r4);

        return;
    }

    public static final void startCoroutine(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r4;
        kotlin.Result$Companion $r3;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r0;

        $r0 := @parameter0: kotlin.jvm.functions.Function2;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "completion");

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r0, $r1, $r2);

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return;
    }

    private static final java.lang.Object suspendCoroutine(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1, r3;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r4, $r5;
        kotlin.coroutines.SafeContinuation r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        r2 = new kotlin.coroutines.SafeContinuation;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        specialinvoke r2.<kotlin.coroutines.SafeContinuation: void <init>(kotlin.coroutines.Continuation)>(r3);

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        $r4 = virtualinvoke r2.<kotlin.coroutines.SafeContinuation: java.lang.Object getOrThrow()>();

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label1;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label1:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        return $r4;
    }
}
