public final class androidx.core.util.Preconditions extends java.lang.Object
{

    private void <init>()
    {
        androidx.core.util.Preconditions r0;

        r0 := @this: androidx.core.util.Preconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkArgument(boolean)
    {
        java.lang.IllegalArgumentException $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static void checkArgument(boolean, java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.Object;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public static transient void checkArgument(boolean, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Object[];

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }

    public static float checkArgumentFinite(float, java.lang.String)
    {
        float $f0;
        java.lang.StringBuilder $r2;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        $f0 := @parameter0: float;

        $r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);

        if $z0 != 0 goto label1;

        return $f0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be infinite");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be NaN");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static double checkArgumentInRange(double, double, double, java.lang.String)
    {
        java.lang.Object[] $r4;
        java.lang.Double $r2, $r3;
        java.lang.IllegalArgumentException $r5;
        byte $b0;
        java.util.Locale $r1;
        int $i1;
        java.lang.String $r0;
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r0 := @parameter3: java.lang.String;

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 < 0 goto label2;

        $b0 = $d0 cmpl $d2;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return $d0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r0;

        $r4[1] = $r2;

        $r4[2] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%s is out of range of [%f, %f] (too high)", $r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r0;

        $r4[1] = $r2;

        $r4[2] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%s is out of range of [%f, %f] (too low)", $r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;
    }

    public static float checkArgumentInRange(float, float, float, java.lang.String)
    {
        java.lang.Float $r2, $r3;
        java.lang.Object[] $r4;
        java.lang.IllegalArgumentException $r5;
        byte $b0;
        java.util.Locale $r1;
        int $i1;
        float $f0, $f1, $f2;
        java.lang.String $r0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $r0 := @parameter3: java.lang.String;

        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 < 0 goto label2;

        $b0 = $f0 cmpl $f2;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return $f0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r0;

        $r4[1] = $r2;

        $r4[2] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%s is out of range of [%f, %f] (too high)", $r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r0;

        $r4[1] = $r2;

        $r4[2] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%s is out of range of [%f, %f] (too low)", $r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;
    }

    public static int checkArgumentInRange(int, int, int, java.lang.String)
    {
        java.lang.Object[] $r5;
        java.lang.IllegalArgumentException $r1;
        java.lang.Integer $r3, $r4;
        java.util.Locale $r2;
        int $i0, $i1, $i2;
        java.lang.String $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r0 := @parameter3: java.lang.String;

        if $i0 < $i1 goto label2;

        if $i0 > $i2 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r0;

        $r5[1] = $r3;

        $r5[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%d, %d] (too high)", $r5);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r0;

        $r5[1] = $r3;

        $r5[2] = $r4;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%s is out of range of [%d, %d] (too low)", $r5);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static long checkArgumentInRange(long, long, long, java.lang.String)
    {
        java.lang.Object[] $r4;
        long $l0, $l1, $l2;
        java.lang.IllegalArgumentException $r5;
        byte $b3;
        java.lang.Long $r2, $r3;
        java.util.Locale $r1;
        int $i4;
        java.lang.String $r0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $r0 := @parameter3: java.lang.String;

        $b3 = $l0 cmp $l1;

        $i4 = (int) $b3;

        if $i4 < 0 goto label2;

        $b3 = $l0 cmp $l2;

        $i4 = (int) $b3;

        if $i4 > 0 goto label1;

        return $l0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r0;

        $r4[1] = $r2;

        $r4[2] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%s is out of range of [%d, %d] (too high)", $r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = <java.util.Locale: java.util.Locale US>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r0;

        $r4[1] = $r2;

        $r4[2] = $r3;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "%s is out of range of [%d, %d] (too low)", $r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r5;
    }

    public static int checkArgumentNonnegative(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static int checkArgumentNonnegative(int, java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static int checkFlagsArgument(int, int)
    {
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 & $i1;

        if $i2 != $i0 goto label1;

        return $i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested flags 0x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but only 0x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are allowed");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        return r0;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;
    }

    public static java.lang.Object checkNotNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, $r1;
        java.lang.String $r3;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        return r0;

     label1:
        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public static void checkState(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, null);

        return;
    }

    public static void checkState(boolean, java.lang.String)
    {
        java.lang.IllegalStateException $r1;
        java.lang.String $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public static java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence, java.lang.Object)
    {
        java.lang.CharSequence r0;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public static transient java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r2;
        java.lang.CharSequence r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }
}
