class com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder extends com.google.common.math.ToDoubleRounder
{
    static final com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder INSTANCE;

    static void <clinit>()
    {
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder $r0;

        $r0 = new com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        specialinvoke $r0.<com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder: void <init>()>();

        <com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        specialinvoke r0.<com.google.common.math.ToDoubleRounder: void <init>()>();

        return;
    }

    volatile java.lang.Number minus(java.lang.Number, java.lang.Number)
    {
        java.math.BigDecimal $r1, $r4;
        java.lang.Number $r2, $r3;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $r2 := @parameter0: java.lang.Number;

        $r3 := @parameter1: java.lang.Number;

        $r1 = (java.math.BigDecimal) $r2;

        $r4 = (java.math.BigDecimal) $r3;

        $r1 = virtualinvoke r0.<com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder: java.math.BigDecimal minus(java.math.BigDecimal,java.math.BigDecimal)>($r1, $r4);

        return $r1;
    }

    java.math.BigDecimal minus(java.math.BigDecimal, java.math.BigDecimal)
    {
        java.math.BigDecimal $r1, $r2;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $r1 := @parameter0: java.math.BigDecimal;

        $r2 := @parameter1: java.math.BigDecimal;

        $r1 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r2);

        return $r1;
    }

    volatile double roundToDoubleArbitrarily(java.lang.Number)
    {
        java.math.BigDecimal $r2;
        java.lang.Number $r1;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;
        double $d0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $r1 := @parameter0: java.lang.Number;

        $r2 = (java.math.BigDecimal) $r1;

        $d0 = virtualinvoke r0.<com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder: double roundToDoubleArbitrarily(java.math.BigDecimal)>($r2);

        return $d0;
    }

    double roundToDoubleArbitrarily(java.math.BigDecimal)
    {
        java.math.BigDecimal $r1;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;
        double $d0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $r1 := @parameter0: java.math.BigDecimal;

        $d0 = virtualinvoke $r1.<java.math.BigDecimal: double doubleValue()>();

        return $d0;
    }

    volatile int sign(java.lang.Number)
    {
        java.math.BigDecimal $r2;
        int $i0;
        java.lang.Number $r1;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $r1 := @parameter0: java.lang.Number;

        $r2 = (java.math.BigDecimal) $r1;

        $i0 = virtualinvoke r0.<com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder: int sign(java.math.BigDecimal)>($r2);

        return $i0;
    }

    int sign(java.math.BigDecimal)
    {
        int $i0;
        java.math.BigDecimal $r1;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $r1 := @parameter0: java.math.BigDecimal;

        $i0 = virtualinvoke $r1.<java.math.BigDecimal: int signum()>();

        return $i0;
    }

    volatile java.lang.Number toX(double, java.math.RoundingMode)
    {
        java.math.BigDecimal $r2;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;
        java.math.RoundingMode $r1;
        double $d0;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.math.RoundingMode;

        $r2 = virtualinvoke r0.<com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder: java.math.BigDecimal toX(double,java.math.RoundingMode)>($d0, $r1);

        return $r2;
    }

    java.math.BigDecimal toX(double, java.math.RoundingMode)
    {
        java.math.BigDecimal $r2;
        com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder r0;
        double $d0;
        java.math.RoundingMode $r1;

        r0 := @this: com.google.common.math.BigDecimalMath$BigDecimalToDoubleRounder;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.math.RoundingMode;

        $r2 = new java.math.BigDecimal;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(double)>($d0);

        return $r2;
    }
}
