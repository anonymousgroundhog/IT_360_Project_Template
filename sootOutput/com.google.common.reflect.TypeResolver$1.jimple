class com.google.common.reflect.TypeResolver$1 extends com.google.common.reflect.TypeVisitor
{
    final java.util.Map val$mappings;
    final java.lang.reflect.Type val$to;

    void <init>(java.util.Map, java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeResolver$1 r0;
        java.lang.reflect.Type $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.reflect.TypeResolver$1;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.lang.reflect.Type;

        r0.<com.google.common.reflect.TypeResolver$1: java.util.Map val$mappings> = $r1;

        r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to> = $r2;

        specialinvoke r0.<com.google.common.reflect.TypeVisitor: void <init>()>();

        return;
    }

    void visitClass(java.lang.Class)
    {
        java.lang.IllegalArgumentException $r3;
        com.google.common.reflect.TypeResolver$1 r0;
        java.lang.reflect.Type $r2;
        int $i0, $i1;
        java.lang.Class r1;
        java.lang.StringBuilder $r7;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeResolver$1;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        $z0 = $r2 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 25;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No type mapping from ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    void visitGenericArrayType(java.lang.reflect.GenericArrayType)
    {
        java.lang.reflect.GenericArrayType $r1;
        com.google.common.reflect.TypeResolver$1 r0;
        java.lang.reflect.Type $r2, r3;
        java.util.Map $r4;
        boolean z0;

        r0 := @this: com.google.common.reflect.TypeResolver$1;

        $r1 := @parameter0: java.lang.reflect.GenericArrayType;

        r3 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        z0 = r3 instanceof java.lang.reflect.WildcardType;

        if z0 == 0 goto label1;

        return;

     label1:
        r3 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        r3 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type getComponentType(java.lang.reflect.Type)>(r3);

        if r3 == null goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        $r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>(z0, "%s is not an array type.", $r2);

        $r4 = r0.<com.google.common.reflect.TypeResolver$1: java.util.Map val$mappings>;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        staticinvoke <com.google.common.reflect.TypeResolver: void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)>($r4, $r2, r3);

        return;
    }

    void visitParameterizedType(java.lang.reflect.ParameterizedType)
    {
        com.google.common.reflect.TypeResolver$1 r0;
        java.lang.reflect.ParameterizedType $r1, r5;
        java.lang.reflect.Type $r2, $r3;
        java.util.Map r6;
        java.lang.reflect.Type[] $r7, $r8;
        int i0, $i1;
        java.lang.Object $r4;
        boolean z0;

        r0 := @this: com.google.common.reflect.TypeResolver$1;

        $r1 := @parameter0: java.lang.reflect.ParameterizedType;

        $r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        z0 = $r2 instanceof java.lang.reflect.WildcardType;

        if z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        $r4 = staticinvoke <com.google.common.reflect.TypeResolver: java.lang.Object access$100(java.lang.Class,java.lang.Object)>(class "Ljava/lang/reflect/ParameterizedType;", $r2);

        r5 = (java.lang.reflect.ParameterizedType) $r4;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        if $r2 == null goto label2;

        $r2 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        if $r2 == null goto label2;

        r6 = r0.<com.google.common.reflect.TypeResolver$1: java.util.Map val$mappings>;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r3 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        staticinvoke <com.google.common.reflect.TypeResolver: void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)>(r6, $r2, $r3);

     label2:
        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r3 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        $r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>(z0, "Inconsistent raw type: %s vs. %s", $r1, $r2);

        $r7 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r8 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i0 = lengthof $r7;

        $i1 = lengthof $r8;

        if i0 != $i1 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>(z0, "%s not compatible with %s", $r1, r5);

        i0 = 0;

     label5:
        $i1 = lengthof $r7;

        if i0 >= $i1 goto label6;

        r6 = r0.<com.google.common.reflect.TypeResolver$1: java.util.Map val$mappings>;

        $r2 = $r7[i0];

        $r3 = $r8[i0];

        staticinvoke <com.google.common.reflect.TypeResolver: void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)>(r6, $r2, $r3);

        i0 = i0 + 1;

        goto label5;

     label6:
        return;
    }

    void visitTypeVariable(java.lang.reflect.TypeVariable)
    {
        com.google.common.reflect.TypeResolver$1 r0;
        java.lang.reflect.Type $r4;
        java.lang.reflect.TypeVariable r1;
        java.util.Map $r2;
        com.google.common.reflect.TypeResolver$TypeVariableKey $r3;

        r0 := @this: com.google.common.reflect.TypeResolver$1;

        r1 := @parameter0: java.lang.reflect.TypeVariable;

        $r2 = r0.<com.google.common.reflect.TypeResolver$1: java.util.Map val$mappings>;

        $r3 = new com.google.common.reflect.TypeResolver$TypeVariableKey;

        specialinvoke $r3.<com.google.common.reflect.TypeResolver$TypeVariableKey: void <init>(java.lang.reflect.TypeVariable)>(r1);

        $r4 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    void visitWildcardType(java.lang.reflect.WildcardType)
    {
        java.lang.reflect.WildcardType $r1, r3;
        com.google.common.reflect.TypeResolver$1 r0;
        java.lang.reflect.Type r2, $r9;
        java.util.Map $r8;
        java.lang.reflect.Type[] $r4, $r5, $r6, $r7;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.google.common.reflect.TypeResolver$1;

        $r1 := @parameter0: java.lang.reflect.WildcardType;

        r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        z0 = r2 instanceof java.lang.reflect.WildcardType;

        if z0 != 0 goto label1;

        return;

     label1:
        r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        r3 = (java.lang.reflect.WildcardType) r2;

        $r4 = interfaceinvoke $r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r5 = interfaceinvoke r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r6 = interfaceinvoke $r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r7 = interfaceinvoke r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        i0 = lengthof $r4;

        $i1 = lengthof $r5;

        if i0 != $i1 goto label2;

        i0 = lengthof $r6;

        $i1 = lengthof $r7;

        if i0 != $i1 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        r2 = r0.<com.google.common.reflect.TypeResolver$1: java.lang.reflect.Type val$to>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>(z0, "Incompatible type: %s vs. %s", $r1, r2);

        i0 = 0;

     label4:
        $i1 = lengthof $r4;

        if i0 >= $i1 goto label5;

        $r8 = r0.<com.google.common.reflect.TypeResolver$1: java.util.Map val$mappings>;

        r2 = $r4[i0];

        $r9 = $r5[i0];

        staticinvoke <com.google.common.reflect.TypeResolver: void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)>($r8, r2, $r9);

        i0 = i0 + 1;

        goto label4;

     label5:
        i0 = 0;

     label6:
        $i1 = lengthof $r6;

        if i0 >= $i1 goto label7;

        $r8 = r0.<com.google.common.reflect.TypeResolver$1: java.util.Map val$mappings>;

        r2 = $r6[i0];

        $r9 = $r7[i0];

        staticinvoke <com.google.common.reflect.TypeResolver: void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)>($r8, r2, $r9);

        i0 = i0 + 1;

        goto label6;

     label7:
        return;
    }
}
