public final class kotlinx.coroutines.internal.ConcurrentKt extends java.lang.Object
{
    private static final java.lang.reflect.Method REMOVE_FUTURE_ON_CANCEL;

    static void <clinit>()
    {
        java.lang.Throwable r4;
        java.lang.Class[] $r3;
        java.lang.Class $r0, r2;
        java.lang.reflect.Method $r1;

        r2 = class "Ljava/util/concurrent/ScheduledThreadPoolExecutor;";

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r0 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3[0] = $r0;

        $r1 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setRemoveOnCancelPolicy", $r3);

     label2:
        goto label4;

     label3:
        r4 := @caughtexception;

        $r1 = null;

     label4:
        <kotlinx.coroutines.internal.ConcurrentKt: java.lang.reflect.Method REMOVE_FUTURE_ON_CANCEL> = $r1;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void ReentrantLock$annotations()
    {
        return;
    }

    public static final java.util.Set identitySet(int)
    {
        java.util.IdentityHashMap $r1;
        java.util.Map $r2;
        int $i0;
        java.util.Set $r0;

        $i0 := @parameter0: int;

        $r1 = new java.util.IdentityHashMap;

        specialinvoke $r1.<java.util.IdentityHashMap: void <init>(int)>($i0);

        $r2 = (java.util.Map) $r1;

        $r0 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2);

        return $r0;
    }

    public static final boolean removeFutureOnCancel(java.util.concurrent.Executor)
    {
        java.lang.Throwable r5;
        java.lang.Object[] $r2;
        java.util.concurrent.Executor $r0;
        java.lang.Boolean $r3;
        java.util.concurrent.ScheduledThreadPoolExecutor r4;
        java.lang.reflect.Method $r1;
        boolean z0;

        $r0 := @parameter0: java.util.concurrent.Executor;

     label01:
        z0 = $r0 instanceof java.util.concurrent.ScheduledThreadPoolExecutor;

     label02:
        if z0 == 0 goto label05;

     label03:
        r4 = (java.util.concurrent.ScheduledThreadPoolExecutor) $r0;

     label04:
        goto label06;

     label05:
        r4 = null;

     label06:
        if r4 != null goto label07;

        return 0;

     label07:
        $r1 = <kotlinx.coroutines.internal.ConcurrentKt: java.lang.reflect.Method REMOVE_FUTURE_ON_CANCEL>;

     label08:
        if $r1 != null goto label09;

        return 0;

     label09:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r2[0] = $r3;

        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r2);

     label10:
        return 1;

     label11:
        r5 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static final java.lang.Object withLock(java.util.concurrent.locks.ReentrantLock, kotlin.jvm.functions.Function0)
    {
        java.lang.Throwable $r4;
        java.util.concurrent.locks.Lock $r3;
        java.util.concurrent.locks.ReentrantLock $r0;
        java.lang.Object $r2;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: java.util.concurrent.locks.ReentrantLock;

        $r1 := @parameter1: kotlin.jvm.functions.Function0;

        $r3 = (java.util.concurrent.locks.Lock) $r0;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r2;

     label3:
        $r4 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
