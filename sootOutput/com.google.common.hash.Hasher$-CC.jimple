public final class com.google.common.hash.Hasher$-CC extends java.lang.Object
{

    public static volatile com.google.common.hash.PrimitiveSink $default$putBoolean(com.google.common.hash.Hasher, boolean)
    {
        com.google.common.hash.Hasher $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $z0 := @parameter1: boolean;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBoolean(boolean)>($z0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putByte(com.google.common.hash.Hasher, byte)
    {
        com.google.common.hash.Hasher $r0;
        byte $b0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $b0 := @parameter1: byte;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putBytes(com.google.common.hash.Hasher, java.nio.ByteBuffer)
    {
        com.google.common.hash.Hasher $r0;
        java.nio.ByteBuffer $r1;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $r1 := @parameter1: java.nio.ByteBuffer;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r1);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putBytes(com.google.common.hash.Hasher, byte[])
    {
        byte[] $r1;
        com.google.common.hash.Hasher $r0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $r1 := @parameter1: byte[];

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(byte[])>($r1);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putBytes(com.google.common.hash.Hasher, byte[], int, int)
    {
        byte[] $r1;
        int $i0, $i1;
        com.google.common.hash.Hasher $r0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r1, $i0, $i1);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putChar(com.google.common.hash.Hasher, char)
    {
        char $c0;
        com.google.common.hash.Hasher $r0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $c0 := @parameter1: char;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putChar(char)>($c0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putDouble(com.google.common.hash.Hasher, double)
    {
        com.google.common.hash.Hasher $r0;
        double $d0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $d0 := @parameter1: double;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putDouble(double)>($d0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putFloat(com.google.common.hash.Hasher, float)
    {
        float $f0;
        com.google.common.hash.Hasher $r0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $f0 := @parameter1: float;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putFloat(float)>($f0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putInt(com.google.common.hash.Hasher, int)
    {
        int $i0;
        com.google.common.hash.Hasher $r0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $i0 := @parameter1: int;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putInt(int)>($i0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putLong(com.google.common.hash.Hasher, long)
    {
        long $l0;
        com.google.common.hash.Hasher $r0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $l0 := @parameter1: long;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putLong(long)>($l0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putShort(com.google.common.hash.Hasher, short)
    {
        short $s0;
        com.google.common.hash.Hasher $r0;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $s0 := @parameter1: short;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putShort(short)>($s0);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putString(com.google.common.hash.Hasher, java.lang.CharSequence, java.nio.charset.Charset)
    {
        com.google.common.hash.Hasher $r0;
        java.nio.charset.Charset $r1;
        java.lang.CharSequence $r2;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $r2 := @parameter1: java.lang.CharSequence;

        $r1 := @parameter2: java.nio.charset.Charset;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset)>($r2, $r1);

        return $r0;
    }

    public static volatile com.google.common.hash.PrimitiveSink $default$putUnencodedChars(com.google.common.hash.Hasher, java.lang.CharSequence)
    {
        com.google.common.hash.Hasher $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: com.google.common.hash.Hasher;

        $r1 := @parameter1: java.lang.CharSequence;

        $r0 = interfaceinvoke $r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)>($r1);

        return $r0;
    }
}
