public abstract class kotlin.jvm.internal.CallableReference extends java.lang.Object implements kotlin.reflect.KCallable, java.io.Serializable
{
    public static final java.lang.Object NO_RECEIVER;
    private final boolean isTopLevel;
    private final java.lang.String name;
    private final java.lang.Class owner;
    protected final java.lang.Object receiver;
    private transient kotlin.reflect.KCallable reflected;
    private final java.lang.String signature;

    static void <clinit>()
    {
        kotlin.jvm.internal.CallableReference$NoReceiver $r0;

        $r0 = staticinvoke <kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver access$000()>();

        <kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER> = $r0;

        return;
    }

    public void <init>()
    {
        java.lang.Object $r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = <kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER>;

        specialinvoke r0.<kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object)>($r1);

        return;
    }

    protected void <init>(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)>($r1, null, null, null, 0);

        return;
    }

    protected void <init>(java.lang.Object, java.lang.Class, java.lang.String, java.lang.String, boolean)
    {
        kotlin.jvm.internal.CallableReference r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.jvm.internal.CallableReference: java.lang.Object receiver> = $r1;

        r0.<kotlin.jvm.internal.CallableReference: java.lang.Class owner> = $r2;

        r0.<kotlin.jvm.internal.CallableReference: java.lang.String name> = $r3;

        r0.<kotlin.jvm.internal.CallableReference: java.lang.String signature> = $r4;

        r0.<kotlin.jvm.internal.CallableReference: boolean isTopLevel> = $z0;

        return;
    }

    public transient java.lang.Object call(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        kotlin.jvm.internal.CallableReference r0;
        kotlin.reflect.KCallable $r2;
        java.lang.Object $r3;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r3 = interfaceinvoke $r2.<kotlin.reflect.KCallable: java.lang.Object call(java.lang.Object[])>($r1);

        return $r3;
    }

    public java.lang.Object callBy(java.util.Map)
    {
        kotlin.jvm.internal.CallableReference r0;
        java.util.Map $r1;
        kotlin.reflect.KCallable $r2;
        java.lang.Object $r3;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 := @parameter0: java.util.Map;

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r3 = interfaceinvoke $r2.<kotlin.reflect.KCallable: java.lang.Object callBy(java.util.Map)>($r1);

        return $r3;
    }

    public kotlin.reflect.KCallable compute()
    {
        kotlin.reflect.KCallable $r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()>();

        r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected> = $r1;

     label1:
        return $r1;
    }

    protected abstract kotlin.reflect.KCallable computeReflected();

    public java.util.List getAnnotations()
    {
        kotlin.reflect.KCallable $r1;
        java.util.List $r2;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r2 = interfaceinvoke $r1.<kotlin.reflect.KCallable: java.util.List getAnnotations()>();

        return $r2;
    }

    public java.lang.Object getBoundReceiver()
    {
        java.lang.Object r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        r1 = r0.<kotlin.jvm.internal.CallableReference: java.lang.Object receiver>;

        return r1;
    }

    public java.lang.String getName()
    {
        java.lang.String r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        r1 = r0.<kotlin.jvm.internal.CallableReference: java.lang.String name>;

        return r1;
    }

    public kotlin.reflect.KDeclarationContainer getOwner()
    {
        kotlin.reflect.KClass $r3;
        kotlin.jvm.internal.CallableReference r0;
        kotlin.reflect.KDeclarationContainer $r2;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = r0.<kotlin.jvm.internal.CallableReference: java.lang.Class owner>;

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = r0.<kotlin.jvm.internal.CallableReference: boolean isTopLevel>;

        if $z0 == 0 goto label2;

        $r1 = r0.<kotlin.jvm.internal.CallableReference: java.lang.Class owner>;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class)>($r1);

        return $r2;

     label2:
        $r1 = r0.<kotlin.jvm.internal.CallableReference: java.lang.Class owner>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r1);

        return $r3;
    }

    public java.util.List getParameters()
    {
        kotlin.reflect.KCallable $r1;
        java.util.List $r2;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r2 = interfaceinvoke $r1.<kotlin.reflect.KCallable: java.util.List getParameters()>();

        return $r2;
    }

    protected kotlin.reflect.KCallable getReflected()
    {
        kotlin.reflect.KCallable $r2;
        kotlin.jvm.internal.CallableReference r0;
        kotlin.jvm.KotlinReflectionNotSupportedError $r1;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()>();

        if $r2 == r0 goto label1;

        return $r2;

     label1:
        $r1 = new kotlin.jvm.KotlinReflectionNotSupportedError;

        specialinvoke $r1.<kotlin.jvm.KotlinReflectionNotSupportedError: void <init>()>();

        throw $r1;
    }

    public kotlin.reflect.KType getReturnType()
    {
        kotlin.reflect.KType $r2;
        kotlin.reflect.KCallable $r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r2 = interfaceinvoke $r1.<kotlin.reflect.KCallable: kotlin.reflect.KType getReturnType()>();

        return $r2;
    }

    public java.lang.String getSignature()
    {
        java.lang.String r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        r1 = r0.<kotlin.jvm.internal.CallableReference: java.lang.String signature>;

        return r1;
    }

    public java.util.List getTypeParameters()
    {
        kotlin.reflect.KCallable $r1;
        java.util.List $r2;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r2 = interfaceinvoke $r1.<kotlin.reflect.KCallable: java.util.List getTypeParameters()>();

        return $r2;
    }

    public kotlin.reflect.KVisibility getVisibility()
    {
        kotlin.reflect.KVisibility $r2;
        kotlin.reflect.KCallable $r1;
        kotlin.jvm.internal.CallableReference r0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $r2 = interfaceinvoke $r1.<kotlin.reflect.KCallable: kotlin.reflect.KVisibility getVisibility()>();

        return $r2;
    }

    public boolean isAbstract()
    {
        kotlin.reflect.KCallable $r1;
        kotlin.jvm.internal.CallableReference r0;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $z0 = interfaceinvoke $r1.<kotlin.reflect.KCallable: boolean isAbstract()>();

        return $z0;
    }

    public boolean isFinal()
    {
        kotlin.reflect.KCallable $r1;
        kotlin.jvm.internal.CallableReference r0;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $z0 = interfaceinvoke $r1.<kotlin.reflect.KCallable: boolean isFinal()>();

        return $z0;
    }

    public boolean isOpen()
    {
        kotlin.reflect.KCallable $r1;
        kotlin.jvm.internal.CallableReference r0;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $z0 = interfaceinvoke $r1.<kotlin.reflect.KCallable: boolean isOpen()>();

        return $z0;
    }

    public boolean isSuspend()
    {
        kotlin.reflect.KCallable $r1;
        kotlin.jvm.internal.CallableReference r0;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.CallableReference;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()>();

        $z0 = interfaceinvoke $r1.<kotlin.reflect.KCallable: boolean isSuspend()>();

        return $z0;
    }
}
