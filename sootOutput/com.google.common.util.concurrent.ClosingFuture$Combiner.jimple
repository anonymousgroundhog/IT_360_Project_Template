public class com.google.common.util.concurrent.ClosingFuture$Combiner extends java.lang.Object
{
    private static final com.google.common.base.Function INNER_FUTURE;
    private final boolean allMustSucceed;
    private final com.google.common.util.concurrent.ClosingFuture$CloseableList closeables;
    protected final com.google.common.collect.ImmutableList inputs;

    static void <clinit>()
    {
        com.google.common.util.concurrent.ClosingFuture$Combiner$3 $r0;

        $r0 = new com.google.common.util.concurrent.ClosingFuture$Combiner$3;

        specialinvoke $r0.<com.google.common.util.concurrent.ClosingFuture$Combiner$3: void <init>()>();

        <com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.base.Function INNER_FUTURE> = $r0;

        return;
    }

    private void <init>(boolean, java.lang.Iterable)
    {
        java.util.Iterator $r4;
        com.google.common.util.concurrent.ClosingFuture$Combiner r0;
        java.lang.Iterable r1;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r2;
        com.google.common.collect.ImmutableList $r3;
        java.lang.Object $r5;
        com.google.common.util.concurrent.ClosingFuture r6;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Combiner;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>(com.google.common.util.concurrent.ClosingFuture$1)>(null);

        r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables> = $r2;

        r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: boolean allMustSucceed> = $z0;

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>(r1);

        r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.collect.ImmutableList inputs> = $r3;

        $r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.common.util.concurrent.ClosingFuture) $r5;

        $r2 = r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void access$1000(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$CloseableList)>(r6, $r2);

        goto label1;

     label2:
        return;
    }

    void <init>(boolean, java.lang.Iterable, com.google.common.util.concurrent.ClosingFuture$1)
    {
        com.google.common.util.concurrent.ClosingFuture$1 $r2;
        com.google.common.util.concurrent.ClosingFuture$Combiner r0;
        java.lang.Iterable $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Combiner;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture$1;

        specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: void <init>(boolean,java.lang.Iterable)>($z0, $r1);

        return;
    }

    static com.google.common.util.concurrent.ClosingFuture$CloseableList access$1300(com.google.common.util.concurrent.ClosingFuture$Combiner)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList r1;
        com.google.common.util.concurrent.ClosingFuture$Combiner $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$Combiner;

        r1 = $r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        return r1;
    }

    private com.google.common.util.concurrent.Futures$FutureCombiner futureCombiner()
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.Futures$FutureCombiner $r2;
        com.google.common.util.concurrent.ClosingFuture$Combiner r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Combiner;

        $z0 = r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: boolean allMustSucceed>;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.collect.ImmutableList inputFutures()>();

        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.Futures$FutureCombiner whenAllSucceed(java.lang.Iterable)>($r1);

        return $r2;

     label1:
        $r1 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.collect.ImmutableList inputFutures()>();

        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.Futures$FutureCombiner whenAllComplete(java.lang.Iterable)>($r1);

        return $r2;
    }

    private com.google.common.collect.ImmutableList inputFutures()
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.collect.FluentIterable $r3;
        com.google.common.util.concurrent.ClosingFuture$Combiner r0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Combiner;

        $r2 = r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.collect.ImmutableList inputs>;

        $r3 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r2);

        $r1 = <com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.base.Function INNER_FUTURE>;

        $r3 = virtualinvoke $r3.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable transform(com.google.common.base.Function)>($r1);

        $r2 = virtualinvoke $r3.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableList toList()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ClosingFuture call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ClosingFuture$Combiner$1 r3;
        com.google.common.util.concurrent.ListenableFuture $r6;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.Futures$FutureCombiner $r5;
        com.google.common.util.concurrent.ClosingFuture$Combiner r0;
        com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable r1;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r7, $r8;
        com.google.common.util.concurrent.ClosingFuture r4;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Combiner;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        r3 = new com.google.common.util.concurrent.ClosingFuture$Combiner$1;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$Combiner$1: void <init>(com.google.common.util.concurrent.ClosingFuture$Combiner,com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable)>(r0, r1);

        r4 = new com.google.common.util.concurrent.ClosingFuture;

        $r5 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.util.concurrent.Futures$FutureCombiner futureCombiner()>();

        $r6 = virtualinvoke $r5.<com.google.common.util.concurrent.Futures$FutureCombiner: com.google.common.util.concurrent.ListenableFuture call(java.util.concurrent.Callable,java.util.concurrent.Executor)>(r3, $r2);

        specialinvoke r4.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.ClosingFuture$1)>($r6, null);

        $r7 = staticinvoke <com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList access$200(com.google.common.util.concurrent.ClosingFuture)>(r4);

        $r8 = r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r7.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>($r8, $r2);

        return r4;
    }

    public com.google.common.util.concurrent.ClosingFuture callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture $r6;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ClosingFuture$Combiner$2 r3;
        com.google.common.util.concurrent.Futures$FutureCombiner $r5;
        com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable r1;
        com.google.common.util.concurrent.ClosingFuture$Combiner r0;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r7, $r8;
        com.google.common.util.concurrent.ClosingFuture r4;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Combiner;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        r3 = new com.google.common.util.concurrent.ClosingFuture$Combiner$2;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$Combiner$2: void <init>(com.google.common.util.concurrent.ClosingFuture$Combiner,com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable)>(r0, r1);

        r4 = new com.google.common.util.concurrent.ClosingFuture;

        $r5 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.util.concurrent.Futures$FutureCombiner futureCombiner()>();

        $r6 = virtualinvoke $r5.<com.google.common.util.concurrent.Futures$FutureCombiner: com.google.common.util.concurrent.ListenableFuture callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)>(r3, $r2);

        specialinvoke r4.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.ClosingFuture$1)>($r6, null);

        $r7 = staticinvoke <com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList access$200(com.google.common.util.concurrent.ClosingFuture)>(r4);

        $r8 = r0.<com.google.common.util.concurrent.ClosingFuture$Combiner: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r7.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>($r8, $r2);

        return r4;
    }
}
