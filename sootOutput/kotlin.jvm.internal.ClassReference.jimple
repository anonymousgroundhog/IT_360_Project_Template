public final class kotlin.jvm.internal.ClassReference extends java.lang.Object implements kotlin.reflect.KClass, kotlin.jvm.internal.ClassBasedDeclarationContainer
{
    public static final kotlin.jvm.internal.ClassReference$Companion Companion;
    private static final java.util.Map FUNCTION_CLASSES;
    private static final java.util.HashMap classFqNames;
    private static final java.util.HashMap primitiveFqNames;
    private static final java.util.HashMap primitiveWrapperFqNames;
    private static final java.util.Map simpleNames;
    private final java.lang.Class jClass;

    static void <clinit>()
    {
        kotlin.Pair $r10;
        java.util.HashMap $r12, $r13;
        java.lang.Integer $r9;
        java.lang.Iterable $r3;
        java.util.ArrayList $r4;
        java.util.LinkedHashMap r21;
        java.util.Map $r11, r22;
        int $i0, i1;
        java.lang.String r14, $r16;
        java.lang.Number $r20;
        boolean $z0;
        java.util.Map$Entry $r19;
        java.util.Iterator $r6;
        java.util.Collection r5;
        java.lang.Class[] $r1;
        java.util.Set $r18;
        kotlin.jvm.internal.ClassReference$Companion $r0;
        java.util.List $r2;
        java.lang.Object $r7, $r17;
        java.lang.Class r8;
        java.lang.StringBuilder $r15;

        $r0 = new kotlin.jvm.internal.ClassReference$Companion;

        specialinvoke $r0.<kotlin.jvm.internal.ClassReference$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.jvm.internal.ClassReference: kotlin.jvm.internal.ClassReference$Companion Companion> = $r0;

        $r1 = newarray (java.lang.Class)[23];

        $r1[0] = class "Lkotlin/jvm/functions/Function0;";

        $r1[1] = class "Lkotlin/jvm/functions/Function1;";

        $r1[2] = class "Lkotlin/jvm/functions/Function2;";

        $r1[3] = class "Lkotlin/jvm/functions/Function3;";

        $r1[4] = class "Lkotlin/jvm/functions/Function4;";

        $r1[5] = class "Lkotlin/jvm/functions/Function5;";

        $r1[6] = class "Lkotlin/jvm/functions/Function6;";

        $r1[7] = class "Lkotlin/jvm/functions/Function7;";

        $r1[8] = class "Lkotlin/jvm/functions/Function8;";

        $r1[9] = class "Lkotlin/jvm/functions/Function9;";

        $r1[10] = class "Lkotlin/jvm/functions/Function10;";

        $r1[11] = class "Lkotlin/jvm/functions/Function11;";

        $r1[12] = class "Lkotlin/jvm/functions/Function12;";

        $r1[13] = class "Lkotlin/jvm/functions/Function13;";

        $r1[14] = class "Lkotlin/jvm/functions/Function14;";

        $r1[15] = class "Lkotlin/jvm/functions/Function15;";

        $r1[16] = class "Lkotlin/jvm/functions/Function16;";

        $r1[17] = class "Lkotlin/jvm/functions/Function17;";

        $r1[18] = class "Lkotlin/jvm/functions/Function18;";

        $r1[19] = class "Lkotlin/jvm/functions/Function19;";

        $r1[20] = class "Lkotlin/jvm/functions/Function20;";

        $r1[21] = class "Lkotlin/jvm/functions/Function21;";

        $r1[22] = class "Lkotlin/jvm/functions/Function22;";

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r1);

        $r3 = (java.lang.Iterable) $r2;

        $r4 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r5 = (java.util.Collection) $r4;

        $i0 = 0;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        i1 = $i0 + 1;

        if $i0 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        r8 = (java.lang.Class) $r7;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r8, $r9);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        $i0 = i1;

        goto label1;

     label3:
        $r2 = (java.util.List) r5;

        $r3 = (java.lang.Iterable) $r2;

        $r11 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>($r3);

        <kotlin.jvm.internal.ClassReference: java.util.Map FUNCTION_CLASSES> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "kotlin.Boolean");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "kotlin.Char");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "kotlin.Byte");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "kotlin.Short");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "kotlin.Int");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "kotlin.Float");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "kotlin.Long");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "kotlin.Double");

        <kotlin.jvm.internal.ClassReference: java.util.HashMap primitiveFqNames> = $r12;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Boolean", "kotlin.Boolean");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Character", "kotlin.Char");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Byte", "kotlin.Byte");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Short", "kotlin.Short");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Integer", "kotlin.Int");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Float", "kotlin.Float");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Long", "kotlin.Long");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Double", "kotlin.Double");

        <kotlin.jvm.internal.ClassReference: java.util.HashMap primitiveWrapperFqNames> = $r12;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Object", "kotlin.Any");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.String", "kotlin.String");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.CharSequence", "kotlin.CharSequence");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Throwable", "kotlin.Throwable");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Cloneable", "kotlin.Cloneable");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Number", "kotlin.Number");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Comparable", "kotlin.Comparable");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Enum", "kotlin.Enum");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.annotation.Annotation", "kotlin.Annotation");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Iterable", "kotlin.collections.Iterable");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Iterator", "kotlin.collections.Iterator");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Collection", "kotlin.collections.Collection");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.List", "kotlin.collections.List");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Set", "kotlin.collections.Set");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.ListIterator", "kotlin.collections.ListIterator");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Map", "kotlin.collections.Map");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Map$Entry", "kotlin.collections.Map.Entry");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("kotlin.jvm.internal.StringCompanionObject", "kotlin.String.Companion");

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("kotlin.jvm.internal.EnumCompanionObject", "kotlin.Enum.Companion");

        $r13 = <kotlin.jvm.internal.ClassReference: java.util.HashMap primitiveFqNames>;

        $r11 = (java.util.Map) $r13;

        virtualinvoke $r12.<java.util.HashMap: void putAll(java.util.Map)>($r11);

        $r13 = <kotlin.jvm.internal.ClassReference: java.util.HashMap primitiveWrapperFqNames>;

        $r11 = (java.util.Map) $r13;

        virtualinvoke $r12.<java.util.HashMap: void putAll(java.util.Map)>($r11);

        $r13 = <kotlin.jvm.internal.ClassReference: java.util.HashMap primitiveFqNames>;

        r5 = virtualinvoke $r13.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "primitiveFqNames.values");

        $r3 = (java.lang.Iterable) r5;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.Map) $r12;

        r14 = (java.lang.String) $r7;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kotlin.jvm.internal.");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r14, "kotlinName");

        $r16 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>(r14, 46, null, 2, null);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CompanionObject");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Companion");

        r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r16, r14);

        $r7 = virtualinvoke $r10.<kotlin.Pair: java.lang.Object getFirst()>();

        $r17 = virtualinvoke $r10.<kotlin.Pair: java.lang.Object getSecond()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r17);

        goto label4;

     label5:
        $r11 = (java.util.Map) $r12;

        $r11 = <kotlin.jvm.internal.ClassReference: java.util.Map FUNCTION_CLASSES>;

        $r18 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.Class) $r7;

        $r7 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (java.lang.Number) $r7;

        $i0 = virtualinvoke $r20.<java.lang.Number: int intValue()>();

        r14 = virtualinvoke r8.<java.lang.Class: java.lang.String getName()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kotlin.Function");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r16);

        goto label6;

     label7:
        <kotlin.jvm.internal.ClassReference: java.util.HashMap classFqNames> = $r12;

        $r12 = <kotlin.jvm.internal.ClassReference: java.util.HashMap classFqNames>;

        $r11 = (java.util.Map) $r12;

        r21 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke $r11.<java.util.Map: int size()>();

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        specialinvoke r21.<java.util.LinkedHashMap: void <init>(int)>($i0);

        r22 = (java.util.Map) r21;

        $r18 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>();

        $r3 = (java.lang.Iterable) $r18;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r17 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r17;

        $r7 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.util.Map$Entry) $r17;

        $r17 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = (java.lang.String) $r17;

        r14 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>(r14, 46, null, 2, null);

        interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r14);

        goto label8;

     label9:
        <kotlin.jvm.internal.ClassReference: java.util.Map simpleNames> = r22;

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "jClass");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.jvm.internal.ClassReference: java.lang.Class jClass> = $r1;

        return;
    }

    public static final java.util.HashMap access$getClassFqNames$cp()
    {
        java.util.HashMap r0;

        r0 = <kotlin.jvm.internal.ClassReference: java.util.HashMap classFqNames>;

        return r0;
    }

    public static final java.util.Map access$getFUNCTION_CLASSES$cp()
    {
        java.util.Map r0;

        r0 = <kotlin.jvm.internal.ClassReference: java.util.Map FUNCTION_CLASSES>;

        return r0;
    }

    public static final java.util.Map access$getSimpleNames$cp()
    {
        java.util.Map r0;

        r0 = <kotlin.jvm.internal.ClassReference: java.util.Map simpleNames>;

        return r0;
    }

    private final java.lang.Void error()
    {
        kotlin.jvm.internal.ClassReference r0;
        kotlin.jvm.KotlinReflectionNotSupportedError $r1;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 = new kotlin.jvm.KotlinReflectionNotSupportedError;

        specialinvoke $r1.<kotlin.jvm.KotlinReflectionNotSupportedError: void <init>()>();

        throw $r1;
    }

    public static void getSealedSubclasses$annotations()
    {
        return;
    }

    public static void getSupertypes$annotations()
    {
        return;
    }

    public static void getTypeParameters$annotations()
    {
        return;
    }

    public static void getVisibility$annotations()
    {
        return;
    }

    public static void isAbstract$annotations()
    {
        return;
    }

    public static void isCompanion$annotations()
    {
        return;
    }

    public static void isData$annotations()
    {
        return;
    }

    public static void isFinal$annotations()
    {
        return;
    }

    public static void isFun$annotations()
    {
        return;
    }

    public static void isInner$annotations()
    {
        return;
    }

    public static void isOpen$annotations()
    {
        return;
    }

    public static void isSealed$annotations()
    {
        return;
    }

    public static void isValue$annotations()
    {
        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.reflect.KClass $r2;
        java.lang.Object $r1;
        java.lang.Class $r3, $r4;
        kotlin.jvm.internal.ClassReference r0;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.ClassReference;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.reflect.KClass) r0;

        $r3 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>($r2);

        $r2 = (kotlin.reflect.KClass) $r1;

        $r4 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>($r2);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.List getAnnotations()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.util.Collection getConstructors()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.lang.Class getJClass()
    {
        java.lang.Class r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        r1 = r0.<kotlin.jvm.internal.ClassReference: java.lang.Class jClass>;

        return r1;
    }

    public java.util.Collection getMembers()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.util.Collection getNestedClasses()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.lang.Object getObjectInstance()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getQualifiedName()
    {
        java.lang.Class $r2;
        kotlin.jvm.internal.ClassReference r0;
        kotlin.jvm.internal.ClassReference$Companion $r1;
        java.lang.String $r3;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 = <kotlin.jvm.internal.ClassReference: kotlin.jvm.internal.ClassReference$Companion Companion>;

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Class getJClass()>();

        $r3 = virtualinvoke $r1.<kotlin.jvm.internal.ClassReference$Companion: java.lang.String getClassQualifiedName(java.lang.Class)>($r2);

        return $r3;
    }

    public java.util.List getSealedSubclasses()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getSimpleName()
    {
        java.lang.Class $r2;
        kotlin.jvm.internal.ClassReference r0;
        kotlin.jvm.internal.ClassReference$Companion $r1;
        java.lang.String $r3;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 = <kotlin.jvm.internal.ClassReference: kotlin.jvm.internal.ClassReference$Companion Companion>;

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Class getJClass()>();

        $r3 = virtualinvoke $r1.<kotlin.jvm.internal.ClassReference$Companion: java.lang.String getClassSimpleName(java.lang.Class)>($r2);

        return $r3;
    }

    public java.util.List getSupertypes()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.util.List getTypeParameters()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public kotlin.reflect.KVisibility getVisibility()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public int hashCode()
    {
        kotlin.reflect.KClass $r1;
        int $i0;
        java.lang.Class $r2;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 = (kotlin.reflect.KClass) r0;

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.Class: int hashCode()>();

        return $i0;
    }

    public boolean isAbstract()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isCompanion()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isData()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isFinal()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isFun()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isInner()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isInstance(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Class $r3;
        kotlin.jvm.internal.ClassReference r0;
        kotlin.jvm.internal.ClassReference$Companion $r2;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <kotlin.jvm.internal.ClassReference: kotlin.jvm.internal.ClassReference$Companion Companion>;

        $r3 = virtualinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Class getJClass()>();

        $z0 = virtualinvoke $r2.<kotlin.jvm.internal.ClassReference$Companion: boolean isInstance(java.lang.Object,java.lang.Class)>($r1, $r3);

        return $z0;
    }

    public boolean isOpen()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isSealed()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public boolean isValue()
    {
        kotlin.KotlinNothingValueException $r1;
        kotlin.jvm.internal.ClassReference r0;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Void error()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        kotlin.jvm.internal.ClassReference r0;
        java.lang.String $r3;

        r0 := @this: kotlin.jvm.internal.ClassReference;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.ClassReference: java.lang.Class getJClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Kotlin reflection is not available)");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
