class kotlin.io.path.PathsKt__PathUtilsKt extends kotlin.io.path.PathsKt__PathRecursiveFunctionsKt
{

    public void <init>()
    {
        kotlin.io.path.PathsKt__PathUtilsKt r0;

        r0 := @this: kotlin.io.path.PathsKt__PathUtilsKt;

        specialinvoke r0.<kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: void <init>()>();

        return;
    }

    private static final java.nio.file.Path Path(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String $r0;
        java.nio.file.Path $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "path");

        $r2 = newarray (java.lang.String)[0];

        $r1 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r0, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "get(path)");

        return $r1;
    }

    private static final transient java.nio.file.Path Path(java.lang.String, java.lang.String[])
    {
        java.lang.Object[] $r2;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r0;
        java.nio.file.Path $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "base");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "subpaths");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.lang.String[]) $r2;

        $r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "get(base, *subpaths)");

        return $r3;
    }

    private static final java.nio.file.Path absolute(java.nio.file.Path)
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "toAbsolutePath()");

        return $r0;
    }

    private static final java.lang.String absolutePathString(java.nio.file.Path)
    {
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    private static final java.nio.file.Path copyTo(java.nio.file.Path, java.nio.file.Path, boolean) throws java.io.IOException
    {
        java.nio.file.CopyOption[] $r2;
        java.lang.Object[] $r4;
        int $i0;
        java.nio.file.Path $r0, $r1;
        boolean $z0;
        java.nio.file.StandardCopyOption $r3;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        if $z0 == 0 goto label1;

        $r2 = newarray (java.nio.file.CopyOption)[1];

        $r3 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;

        $r2[0] = $r3;

        goto label2;

     label1:
        $r2 = newarray (java.nio.file.CopyOption)[0];

     label2:
        $i0 = lengthof $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.CopyOption[]) $r4;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copy(this, target, *options)");

        return $r0;
    }

    private static final transient java.nio.file.Path copyTo(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
    {
        java.nio.file.CopyOption[] $r2;
        java.lang.Object[] $r3;
        int $i0;
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.CopyOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.CopyOption[]) $r3;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copy(this, target, *options)");

        return $r0;
    }

    static java.nio.file.Path copyTo$default(java.nio.file.Path, java.nio.file.Path, boolean, int, java.lang.Object) throws java.io.IOException
    {
        java.nio.file.CopyOption[] $r3;
        java.lang.Object[] $r5;
        java.nio.file.StandardCopyOption $r4;
        int i0;
        java.lang.Object $r2;
        java.nio.file.Path $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        i0 = i0 & 2;

        if i0 == 0 goto label1;

        $z0 = 0;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        if $z0 == 0 goto label2;

        $r3 = newarray (java.nio.file.CopyOption)[1];

        $r4 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;

        $r3[0] = $r4;

        goto label3;

     label2:
        $r3 = newarray (java.nio.file.CopyOption)[0];

     label3:
        i0 = lengthof $r3;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, i0);

        $r3 = (java.nio.file.CopyOption[]) $r5;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r0, $r1, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "copy(this, target, *options)");

        return $r0;
    }

    private static final transient java.nio.file.Path createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.attribute.FileAttribute[] $r1;
        int $i0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attributes");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.attribute.FileAttribute[]) $r2;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createDirectories(this, *attributes)");

        return $r0;
    }

    private static final transient java.nio.file.Path createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.attribute.FileAttribute[] $r1;
        int $i0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attributes");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.attribute.FileAttribute[]) $r2;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createDirectory(this, *attributes)");

        return $r0;
    }

    private static final transient java.nio.file.Path createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.attribute.FileAttribute[] $r1;
        int $i0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attributes");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.attribute.FileAttribute[]) $r2;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createFile(this, *attributes)");

        return $r0;
    }

    private static final java.nio.file.Path createLinkPointingTo(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createLink(java.nio.file.Path,java.nio.file.Path)>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createLink(this, target)");

        return $r0;
    }

    private static final transient java.nio.file.Path createSymbolicLinkPointingTo(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r3;
        java.nio.file.attribute.FileAttribute[] $r2;
        int $i0;
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "attributes");

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.attribute.FileAttribute[]) $r3;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createSymbolicLink(this, target, *attributes)");

        return $r0;
    }

    private static final transient java.nio.file.Path createTempDirectory(java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.attribute.FileAttribute[] $r1;
        int $i0;
        java.lang.String $r0;
        java.nio.file.Path $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attributes");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.attribute.FileAttribute[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "createTempDirectory(prefix, *attributes)");

        return $r3;
    }

    public static final transient java.nio.file.Path createTempDirectory(java.nio.file.Path, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r3;
        java.nio.file.attribute.FileAttribute[] $r2;
        int $i0;
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "attributes");

        if $r0 == null goto label1;

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.attribute.FileAttribute[]) $r3;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createTempDirectory(dire\u2026ory, prefix, *attributes)");

        return $r0;

     label1:
        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.attribute.FileAttribute[]) $r3;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createTempDirectory(prefix, *attributes)");

        return $r0;
    }

    static java.nio.file.Path createTempDirectory$default(java.lang.String, java.nio.file.attribute.FileAttribute[], int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r3;
        java.nio.file.attribute.FileAttribute[] $r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.nio.file.Path $r4;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.nio.file.attribute.FileAttribute[];

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = null;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "attributes");

        $i0 = lengthof $r0;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i0);

        $r0 = (java.nio.file.attribute.FileAttribute[]) $r3;

        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>($r1, $r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "createTempDirectory(prefix, *attributes)");

        return $r4;
    }

    public static java.nio.file.Path createTempDirectory$default(java.nio.file.Path, java.lang.String, java.nio.file.attribute.FileAttribute[], int, java.lang.Object) throws java.io.IOException
    {
        java.nio.file.attribute.FileAttribute[] $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.nio.file.Path $r2;

        $r2 := @parameter0: java.nio.file.Path;

        $r3 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.nio.file.attribute.FileAttribute[];

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = null;

     label1:
        $r2 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r2, $r3, $r0);

        return $r2;
    }

    private static final transient java.nio.file.Path createTempFile(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r3;
        java.nio.file.attribute.FileAttribute[] $r2;
        int $i0;
        java.lang.String $r0, $r1;
        java.nio.file.Path $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "attributes");

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.attribute.FileAttribute[]) $r3;

        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "createTempFile(prefix, suffix, *attributes)");

        return $r4;
    }

    public static final transient java.nio.file.Path createTempFile(java.nio.file.Path, java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
    {
        java.lang.Object[] $r4;
        java.nio.file.attribute.FileAttribute[] $r3;
        int $i0;
        java.lang.String $r1, $r2;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.nio.file.attribute.FileAttribute[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "attributes");

        if $r0 == null goto label1;

        $i0 = lengthof $r3;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r3 = (java.nio.file.attribute.FileAttribute[]) $r4;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r0, $r1, $r2, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createTempFile(directory\u2026fix, suffix, *attributes)");

        return $r0;

     label1:
        $i0 = lengthof $r3;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r3 = (java.nio.file.attribute.FileAttribute[]) $r4;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r1, $r2, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createTempFile(prefix, suffix, *attributes)");

        return $r0;
    }

    static java.nio.file.Path createTempFile$default(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[], int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r4;
        java.nio.file.attribute.FileAttribute[] $r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r1, $r2;
        java.nio.file.Path $r5;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.nio.file.attribute.FileAttribute[];

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r1 = null;

     label1:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        $r2 = null;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "attributes");

        $i0 = lengthof $r0;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i0);

        $r0 = (java.nio.file.attribute.FileAttribute[]) $r4;

        $r5 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r1, $r2, $r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "createTempFile(prefix, suffix, *attributes)");

        return $r5;
    }

    public static java.nio.file.Path createTempFile$default(java.nio.file.Path, java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[], int, java.lang.Object) throws java.io.IOException
    {
        java.nio.file.attribute.FileAttribute[] $r0;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r2, $r3;
        java.nio.file.Path $r1;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r0 := @parameter3: java.nio.file.attribute.FileAttribute[];

        $i0 := @parameter4: int;

        $r4 := @parameter5: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r2 = null;

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $r3 = null;

     label2:
        $r1 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])>($r1, $r2, $r3, $r0);

        return $r1;
    }

    private static final void deleteExisting(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>($r0);

        return;
    }

    private static final boolean deleteIfExists(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>($r0);

        return $z0;
    }

    private static final java.nio.file.Path div(java.nio.file.Path, java.lang.String)
    {
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this.resolve(other)");

        return $r0;
    }

    private static final java.nio.file.Path div(java.nio.file.Path, java.nio.file.Path)
    {
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this.resolve(other)");

        return $r0;
    }

    private static final transient boolean exists(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        return $z0;
    }

    public static final java.lang.Void fileAttributeViewNotAvailable(java.nio.file.Path, java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Class $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "path");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attributeViewClass");

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The desired attribute view type ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not available for the file ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    private static final transient java.nio.file.attribute.FileAttributeView fileAttributesView(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        java.nio.file.attribute.FileAttributeView $r3;
        int $i0;
        kotlin.KotlinNothingValueException $r4;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(4, "V");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>($r0, class "Ljava/nio/file/attribute/FileAttributeView;", $r1);

        if $r3 == null goto label1;

        return $r3;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(4, "V");

        staticinvoke <kotlin.io.path.PathsKt: java.lang.Void fileAttributeViewNotAvailable(java.nio.file.Path,java.lang.Class)>($r0, class "Ljava/nio/file/attribute/FileAttributeView;");

        $r4 = new kotlin.KotlinNothingValueException;

        specialinvoke $r4.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r4;
    }

    private static final transient java.nio.file.attribute.FileAttributeView fileAttributesViewOrNull(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        java.nio.file.attribute.FileAttributeView $r3;
        int $i0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(4, "V");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>($r0, class "Ljava/nio/file/attribute/FileAttributeView;", $r1);

        return $r3;
    }

    private static final long fileSize(java.nio.file.Path) throws java.io.IOException
    {
        long $l0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $l0 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>($r0);

        return $l0;
    }

    private static final java.nio.file.FileStore fileStore(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path $r0;
        java.nio.file.FileStore $r1;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <java.nio.file.Files: java.nio.file.FileStore getFileStore(java.nio.file.Path)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "getFileStore(this)");

        return $r1;
    }

    public static final java.nio.file.FileVisitor fileVisitor(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.nio.file.FileVisitor $r1;
        kotlin.io.path.FileVisitorBuilderImpl $r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r2 = new kotlin.io.path.FileVisitorBuilderImpl;

        specialinvoke $r2.<kotlin.io.path.FileVisitorBuilderImpl: void <init>()>();

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r2.<kotlin.io.path.FileVisitorBuilderImpl: java.nio.file.FileVisitor build()>();

        return $r1;
    }

    private static final void forEachDirectoryEntry(java.nio.file.Path, java.lang.String, kotlin.jvm.functions.Function1) throws java.io.IOException
    {
        java.lang.Throwable r9, $r10;
        java.util.Iterator $r6;
        kotlin.jvm.functions.Function1 r2;
        java.lang.Iterable $r5;
        java.nio.file.DirectoryStream $r3;
        kotlin.Unit r8;
        java.io.Closeable $r4;
        java.lang.Object $r7;
        java.lang.String r1;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "glob");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "action");

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.lang.String)>($r0, r1);

        $r4 = (java.io.Closeable) $r3;

     label01:
        $r3 = (java.nio.file.DirectoryStream) $r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "it");

        $r5 = (java.lang.Iterable) $r3;

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label06;

     label04:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

     label05:
        goto label02;

     label06:
        r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return;

     label08:
        r9 := @caughtexception;

     label09:
        throw r9;

     label10:
        $r10 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, r9);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r10;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    static void forEachDirectoryEntry$default(java.nio.file.Path, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Throwable r9, $r10;
        java.util.Iterator $r7;
        kotlin.jvm.functions.Function1 r1;
        java.lang.Iterable $r6;
        java.nio.file.DirectoryStream $r4;
        kotlin.Unit r8;
        java.io.Closeable $r5;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r2;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label01;

        r2 = "*";

     label01:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "glob");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "action");

        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.lang.String)>($r0, r2);

        $r5 = (java.io.Closeable) $r4;

     label02:
        $r4 = (java.nio.file.DirectoryStream) $r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "it");

        $r6 = (java.lang.Iterable) $r4;

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label04:
        if $z0 == 0 goto label07;

     label05:
        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

     label06:
        goto label03;

     label07:
        r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return;

     label09:
        r9 := @caughtexception;

     label10:
        throw r9;

     label11:
        $r10 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, r9);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r10;

        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    private static final transient java.lang.Object getAttribute(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r3;
        java.nio.file.LinkOption[] $r2;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attribute");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.LinkOption[]) $r3;

        $r4 = staticinvoke <java.nio.file.Files: java.lang.Object getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>($r0, $r1, $r2);

        return $r4;
    }

    public static final java.lang.String getExtension(java.nio.file.Path)
    {
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        if $r0 == null goto label2;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        if $r1 == null goto label2;

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)>($r1, 46, "");

        if $r1 != null goto label1;

        return "";

     label1:
        return $r1;

     label2:
        return "";
    }

    public static void getExtension$annotations(java.nio.file.Path)
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        return;
    }

    private static final java.lang.String getInvariantSeparatorsPath(java.nio.file.Path)
    {
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.io.path.PathsKt: java.lang.String getInvariantSeparatorsPathString(java.nio.file.Path)>($r0);

        return $r1;
    }

    public static void getInvariantSeparatorsPath$annotations(java.nio.file.Path)
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        return;
    }

    public static final java.lang.String getInvariantSeparatorsPathString(java.nio.file.Path)
    {
        java.lang.String $r2, $r3;
        java.nio.file.FileSystem $r1;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();

        $r2 = virtualinvoke $r1.<java.nio.file.FileSystem: java.lang.String getSeparator()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "/");

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "separator");

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r3, $r2, "/", 0, 4, null);

        return $r2;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static void getInvariantSeparatorsPathString$annotations(java.nio.file.Path)
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        return;
    }

    private static final transient java.nio.file.attribute.FileTime getLastModifiedTime(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.nio.file.attribute.FileTime $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileTime getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "getLastModifiedTime(this, *options)");

        return $r3;
    }

    public static final java.lang.String getName(java.nio.file.Path)
    {
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        if $r1 != null goto label3;

        return "";

     label3:
        return $r1;
    }

    public static void getName$annotations(java.nio.file.Path)
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        return;
    }

    public static final java.lang.String getNameWithoutExtension(java.nio.file.Path)
    {
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        if $r1 == null goto label1;

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringBeforeLast$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r1, ".", null, 2, null);

        if $r1 != null goto label2;

     label1:
        return "";

     label2:
        return $r1;
    }

    public static void getNameWithoutExtension$annotations(java.nio.file.Path)
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        return;
    }

    private static final transient java.nio.file.attribute.UserPrincipal getOwner(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.nio.file.attribute.UserPrincipal $r3;
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.UserPrincipal getOwner(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        return $r3;
    }

    private static final java.lang.String getPathString(java.nio.file.Path)
    {
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static void getPathString$annotations(java.nio.file.Path)
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        return;
    }

    private static final transient java.util.Set getPosixFilePermissions(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.util.Set $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.util.Set getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "getPosixFilePermissions(this, *options)");

        return $r3;
    }

    private static final transient boolean isDirectory(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        return $z0;
    }

    private static final boolean isExecutable(java.nio.file.Path)
    {
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <java.nio.file.Files: boolean isExecutable(java.nio.file.Path)>($r0);

        return $z0;
    }

    private static final boolean isHidden(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <java.nio.file.Files: boolean isHidden(java.nio.file.Path)>($r0);

        return $z0;
    }

    private static final boolean isReadable(java.nio.file.Path)
    {
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <java.nio.file.Files: boolean isReadable(java.nio.file.Path)>($r0);

        return $z0;
    }

    private static final transient boolean isRegularFile(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $z0 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        return $z0;
    }

    private static final boolean isSameFileAs(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $z0 = staticinvoke <java.nio.file.Files: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>($r0, $r1);

        return $z0;
    }

    private static final boolean isSymbolicLink(java.nio.file.Path)
    {
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <java.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)>($r0);

        return $z0;
    }

    private static final boolean isWritable(java.nio.file.Path)
    {
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <java.nio.file.Files: boolean isWritable(java.nio.file.Path)>($r0);

        return $z0;
    }

    public static final java.util.List listDirectoryEntries(java.nio.file.Path, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable r6, $r7;
        java.lang.Iterable $r4;
        java.nio.file.DirectoryStream $r2;
        java.util.List $r5;
        java.io.Closeable $r3;
        java.lang.String r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "glob");

        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.lang.String)>($r0, r1);

        $r3 = (java.io.Closeable) $r2;

     label1:
        $r2 = (java.nio.file.DirectoryStream) $r3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "it");

        $r4 = (java.lang.Iterable) $r2;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toList(java.lang.Iterable)>($r4);

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r3, null);

        return $r5;

     label3:
        r6 := @caughtexception;

     label4:
        throw r6;

     label5:
        $r7 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r3, r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static java.util.List listDirectoryEntries$default(java.nio.file.Path, java.lang.String, int, java.lang.Object) throws java.io.IOException
    {
        java.util.List $r1;
        int $i0;
        java.lang.Object $r0;
        java.lang.String $r3;
        java.nio.file.Path $r2;

        $r2 := @parameter0: java.nio.file.Path;

        $r3 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = "*";

     label1:
        $r1 = staticinvoke <kotlin.io.path.PathsKt: java.util.List listDirectoryEntries(java.nio.file.Path,java.lang.String)>($r2, $r3);

        return $r1;
    }

    private static final java.nio.file.Path moveTo(java.nio.file.Path, java.nio.file.Path, boolean) throws java.io.IOException
    {
        java.nio.file.CopyOption[] $r2;
        java.lang.Object[] $r4;
        int $i0;
        java.nio.file.Path $r0, $r1;
        boolean $z0;
        java.nio.file.StandardCopyOption $r3;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        if $z0 == 0 goto label1;

        $r2 = newarray (java.nio.file.CopyOption)[1];

        $r3 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;

        $r2[0] = $r3;

        goto label2;

     label1:
        $r2 = newarray (java.nio.file.CopyOption)[0];

     label2:
        $i0 = lengthof $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.CopyOption[]) $r4;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "move(this, target, *options)");

        return $r0;
    }

    private static final transient java.nio.file.Path moveTo(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
    {
        java.nio.file.CopyOption[] $r2;
        java.lang.Object[] $r3;
        int $i0;
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.CopyOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.CopyOption[]) $r3;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "move(this, target, *options)");

        return $r0;
    }

    static java.nio.file.Path moveTo$default(java.nio.file.Path, java.nio.file.Path, boolean, int, java.lang.Object) throws java.io.IOException
    {
        java.nio.file.CopyOption[] $r3;
        java.lang.Object[] $r5;
        java.nio.file.StandardCopyOption $r4;
        int i0;
        java.lang.Object $r2;
        java.nio.file.Path $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        i0 = i0 & 2;

        if i0 == 0 goto label1;

        $z0 = 0;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        if $z0 == 0 goto label2;

        $r3 = newarray (java.nio.file.CopyOption)[1];

        $r4 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;

        $r3[0] = $r4;

        goto label3;

     label2:
        $r3 = newarray (java.nio.file.CopyOption)[0];

     label3:
        i0 = lengthof $r3;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, i0);

        $r3 = (java.nio.file.CopyOption[]) $r5;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r0, $r1, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "move(this, target, *options)");

        return $r0;
    }

    private static final transient boolean notExists(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $z0 = staticinvoke <java.nio.file.Files: boolean notExists(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        return $z0;
    }

    private static final transient java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.nio.file.attribute.BasicFileAttributes $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(4, "A");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>($r0, class "Ljava/nio/file/attribute/BasicFileAttributes;", $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "readAttributes(this, A::class.java, *options)");

        return $r3;
    }

    private static final transient java.util.Map readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r3;
        java.nio.file.LinkOption[] $r2;
        java.util.Map $r4;
        int $i0;
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attributes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.LinkOption[]) $r3;

        $r4 = staticinvoke <java.nio.file.Files: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "readAttributes(this, attributes, *options)");

        return $r4;
    }

    private static final java.nio.file.Path readSymbolicLink(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "readSymbolicLink(this)");

        return $r0;
    }

    public static final java.nio.file.Path relativeTo(java.nio.file.Path, java.nio.file.Path)
    {
        java.lang.Throwable $r8;
        kotlin.io.path.PathRelativizer r3;
        java.lang.IllegalArgumentException $r2, r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.nio.file.Path $r0, $r1, $r4;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        r3 = <kotlin.io.path.PathRelativizer: kotlin.io.path.PathRelativizer INSTANCE>;

     label1:
        $r4 = virtualinvoke r3.<kotlin.io.path.PathRelativizer: java.nio.file.Path tryRelativeTo(java.nio.file.Path,java.nio.file.Path)>($r0, $r1);

     label2:
        return $r4;

     label3:
        r5 := @caughtexception;

        $r2 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r5.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nthis path: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nbase path: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = (java.lang.Throwable) r5;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r8);

        throw $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static final java.nio.file.Path relativeToOrNull(java.nio.file.Path, java.nio.file.Path)
    {
        kotlin.io.path.PathRelativizer r2;
        java.lang.IllegalArgumentException r3;
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        r2 = <kotlin.io.path.PathRelativizer: kotlin.io.path.PathRelativizer INSTANCE>;

     label1:
        $r0 = virtualinvoke r2.<kotlin.io.path.PathRelativizer: java.nio.file.Path tryRelativeTo(java.nio.file.Path,java.nio.file.Path)>($r0, $r1);

     label2:
        return $r0;

     label3:
        r3 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static final java.nio.file.Path relativeToOrSelf(java.nio.file.Path, java.nio.file.Path)
    {
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        $r1 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path relativeToOrNull(java.nio.file.Path,java.nio.file.Path)>($r0, $r1);

        if $r1 != null goto label1;

        return $r0;

     label1:
        return $r1;
    }

    private static final transient java.nio.file.Path setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r4;
        java.nio.file.LinkOption[] $r3;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.nio.file.LinkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "attribute");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "options");

        $i0 = lengthof $r3;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r3 = (java.nio.file.LinkOption[]) $r4;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>($r0, $r1, $r2, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "setAttribute(this, attribute, value, *options)");

        return $r0;
    }

    private static final java.nio.file.Path setLastModifiedTime(java.nio.file.Path, java.nio.file.attribute.FileTime) throws java.io.IOException
    {
        java.nio.file.attribute.FileTime $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.attribute.FileTime;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "value");

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "setLastModifiedTime(this, value)");

        return $r0;
    }

    private static final java.nio.file.Path setOwner(java.nio.file.Path, java.nio.file.attribute.UserPrincipal) throws java.io.IOException
    {
        java.nio.file.attribute.UserPrincipal $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.attribute.UserPrincipal;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "value");

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "setOwner(this, value)");

        return $r0;
    }

    private static final java.nio.file.Path setPosixFilePermissions(java.nio.file.Path, java.util.Set) throws java.io.IOException
    {
        java.util.Set $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "value");

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "setPosixFilePermissions(this, value)");

        return $r0;
    }

    private static final java.nio.file.Path toPath(java.net.URI)
    {
        java.net.URI $r0;
        java.nio.file.Path $r1;

        $r0 := @parameter0: java.net.URI;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "get(this)");

        return $r1;
    }

    private static final java.lang.Object useDirectoryEntries(java.nio.file.Path, java.lang.String, kotlin.jvm.functions.Function1) throws java.io.IOException
    {
        java.lang.Throwable r8, $r9;
        kotlin.sequences.Sequence $r6;
        kotlin.jvm.functions.Function1 r2;
        java.lang.Iterable $r5;
        java.nio.file.DirectoryStream $r3;
        java.io.Closeable $r4;
        java.lang.Object $r7;
        java.lang.String r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "glob");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.lang.String)>($r0, r1);

        $r4 = (java.io.Closeable) $r3;

     label1:
        $r3 = (java.nio.file.DirectoryStream) $r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "it");

        $r5 = (java.lang.Iterable) $r3;

        $r6 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r5);

        $r7 = interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r7;

     label3:
        r8 := @caughtexception;

     label4:
        throw r8;

     label5:
        $r9 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, r8);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    static java.lang.Object useDirectoryEntries$default(java.nio.file.Path, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Throwable r8, $r9;
        kotlin.sequences.Sequence $r7;
        kotlin.jvm.functions.Function1 r1;
        java.lang.Iterable $r6;
        java.nio.file.DirectoryStream $r4;
        java.io.Closeable $r5;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r2;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        r2 = "*";

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "glob");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.lang.String)>($r0, r2);

        $r5 = (java.io.Closeable) $r4;

     label2:
        $r4 = (java.nio.file.DirectoryStream) $r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "it");

        $r6 = (java.lang.Iterable) $r4;

        $r7 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r6);

        $r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label4:
        r8 := @caughtexception;

     label5:
        throw r8;

     label6:
        $r9 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, r8);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public static final void visitFileTree(java.nio.file.Path, int, boolean, kotlin.jvm.functions.Function1)
    {
        java.nio.file.FileVisitor $r2;
        int $i0;
        kotlin.jvm.functions.Function1 $r1;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "builderAction");

        $r2 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.FileVisitor fileVisitor(kotlin.jvm.functions.Function1)>($r1);

        staticinvoke <kotlin.io.path.PathsKt: void visitFileTree(java.nio.file.Path,java.nio.file.FileVisitor,int,boolean)>($r0, $r2, $i0, $z0);

        return;
    }

    public static final void visitFileTree(java.nio.file.Path, java.nio.file.FileVisitor, int, boolean)
    {
        java.nio.file.FileVisitor $r1;
        java.nio.file.FileVisitOption r2;
        int $i0;
        java.util.Set $r3;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.FileVisitor;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "visitor");

        if $z0 == 0 goto label1;

        r2 = <java.nio.file.FileVisitOption: java.nio.file.FileVisitOption FOLLOW_LINKS>;

        $r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

     label2:
        staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>($r0, $r3, $i0, $r1);

        return;
    }

    public static void visitFileTree$default(java.nio.file.Path, int, boolean, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        int $i0, $i1, $i2;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 := @parameter3: kotlin.jvm.functions.Function1;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $i0 = 2147483647;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        staticinvoke <kotlin.io.path.PathsKt: void visitFileTree(java.nio.file.Path,int,boolean,kotlin.jvm.functions.Function1)>($r0, $i0, $z0, $r1);

        return;
    }

    public static void visitFileTree$default(java.nio.file.Path, java.nio.file.FileVisitor, int, boolean, int, java.lang.Object)
    {
        java.nio.file.FileVisitor $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.FileVisitor;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = 2147483647;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        staticinvoke <kotlin.io.path.PathsKt: void visitFileTree(java.nio.file.Path,java.nio.file.FileVisitor,int,boolean)>($r0, $r1, $i0, $z0);

        return;
    }

    public static final transient kotlin.sequences.Sequence walk(java.nio.file.Path, kotlin.io.path.PathWalkOption[])
    {
        kotlin.io.path.PathWalkOption[] $r1;
        kotlin.io.path.PathTreeWalk $r2;
        kotlin.sequences.Sequence $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: kotlin.io.path.PathWalkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $r2 = new kotlin.io.path.PathTreeWalk;

        specialinvoke $r2.<kotlin.io.path.PathTreeWalk: void <init>(java.nio.file.Path,kotlin.io.path.PathWalkOption[])>($r0, $r1);

        $r3 = (kotlin.sequences.Sequence) $r2;

        return $r3;
    }
}
