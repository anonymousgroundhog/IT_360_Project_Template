public final class kotlinx.coroutines.flow.internal.FlowCoroutineKt extends java.lang.Object
{

    public static final java.lang.Object flowScope(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.internal.FlowCoroutine r2;
        kotlinx.coroutines.internal.ScopeCoroutine $r4;
        java.lang.Object $r5, $r6;
        kotlin.jvm.functions.Function2 $r0;
        kotlin.coroutines.CoroutineContext $r3;

        $r0 := @parameter0: kotlin.jvm.functions.Function2;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        r2 = new kotlinx.coroutines.flow.internal.FlowCoroutine;

        $r3 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke r2.<kotlinx.coroutines.flow.internal.FlowCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>($r3, $r1);

        $r4 = (kotlinx.coroutines.internal.ScopeCoroutine) r2;

        $r5 = staticinvoke <kotlinx.coroutines.intrinsics.UndispatchedKt: java.lang.Object startUndispatchedOrReturn(kotlinx.coroutines.internal.ScopeCoroutine,java.lang.Object,kotlin.jvm.functions.Function2)>($r4, r2, $r0);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label1;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label1:
        return $r5;
    }

    public static final kotlinx.coroutines.flow.Flow scopedFlow(kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1 $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function3;

        $r1 = new kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1: void <init>(kotlin.jvm.functions.Function3)>($r0);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }
}
