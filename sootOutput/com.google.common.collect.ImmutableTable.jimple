public abstract class com.google.common.collect.ImmutableTable extends com.google.common.collect.AbstractTable implements java.io.Serializable
{

    void <init>()
    {
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        specialinvoke r0.<com.google.common.collect.AbstractTable: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableTable$Builder builder()
    {
        com.google.common.collect.ImmutableTable$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableTable$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableTable$Builder: void <init>()>();

        return $r0;
    }

    static com.google.common.collect.Table$Cell cellOf(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.Table$Cell $r3;
        java.lang.Object r0, r1, r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r0 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "rowKey");

        r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "columnKey");

        r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "value");

        $r3 = staticinvoke <com.google.common.collect.Tables: com.google.common.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return $r3;
    }

    public static com.google.common.collect.ImmutableTable copyOf(com.google.common.collect.Table)
    {
        com.google.common.collect.ImmutableTable r1;
        java.util.Set $r2;
        com.google.common.collect.Table r0;
        boolean z0;

        r0 := @parameter0: com.google.common.collect.Table;

        z0 = r0 instanceof com.google.common.collect.ImmutableTable;

        if z0 == 0 goto label1;

        r1 = (com.google.common.collect.ImmutableTable) r0;

        return r1;

     label1:
        $r2 = interfaceinvoke r0.<com.google.common.collect.Table: java.util.Set cellSet()>();

        r1 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable)>($r2);

        return r1;
    }

    static com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableTable$Builder $r1;
        java.util.Iterator $r2;
        com.google.common.collect.ImmutableTable $r5;
        com.google.common.collect.Table$Cell r4;
        java.lang.Object $r3;
        java.lang.Iterable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable$Builder builder()>();

        $r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.collect.Table$Cell) $r3;

        virtualinvoke $r1.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder put(com.google.common.collect.Table$Cell)>(r4);

        goto label1;

     label2:
        $r5 = virtualinvoke $r1.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable build()>();

        return $r5;
    }

    public static com.google.common.collect.ImmutableTable of()
    {
        com.google.common.collect.ImmutableTable r0;

        r0 = <com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableTable EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableTable of(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, r2;
        com.google.common.collect.SingletonImmutableTable $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = new com.google.common.collect.SingletonImmutableTable;

        specialinvoke $r3.<com.google.common.collect.SingletonImmutableTable: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return $r3;
    }

    final com.google.common.collect.UnmodifiableIterator cellIterator()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    volatile java.util.Iterator cellIterator()
    {
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.UnmodifiableIterator cellIterator()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSet cellSet()
    {
        java.util.Set $r1;
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet()>();

        $r2 = (com.google.common.collect.ImmutableSet) $r1;

        return $r2;
    }

    public volatile java.util.Set cellSet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        return $r1;
    }

    public final void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public com.google.common.collect.ImmutableMap column(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r2, $r3;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "columnKey");

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        $r2 = (com.google.common.collect.ImmutableMap) r1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        r1 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (com.google.common.collect.ImmutableMap) r1;

        return $r2;
    }

    public volatile java.util.Map column(java.lang.Object)
    {
        java.lang.Object $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap column(java.lang.Object)>($r2);

        return $r1;
    }

    public com.google.common.collect.ImmutableSet columnKeySet()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public volatile java.util.Set columnKeySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet columnKeySet()>();

        return $r1;
    }

    public abstract com.google.common.collect.ImmutableMap columnMap();

    public volatile java.util.Map columnMap()
    {
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        return $r1;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean containsColumn(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean containsColumn(java.lang.Object)>($r1);

        return $z0;
    }

    public volatile boolean containsRow(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean containsRow(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.ImmutableTable r0;
        com.google.common.collect.ImmutableCollection $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableCollection values()>();

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    abstract com.google.common.collect.ImmutableSet createCellSet();

    volatile java.util.Set createCellSet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet createCellSet()>();

        return $r1;
    }

    abstract com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm();

    abstract com.google.common.collect.ImmutableCollection createValues();

    volatile java.util.Collection createValues()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableCollection createValues()>();

        return $r1;
    }

    public volatile boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public volatile java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $r2;
    }

    public volatile int hashCode()
    {
        int $i0;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $i0 = specialinvoke r0.<com.google.common.collect.AbstractTable: int hashCode()>();

        return $i0;
    }

    public volatile boolean isEmpty()
    {
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean isEmpty()>();

        return $z0;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r4;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object r1, r2, r3;

        r0 := @this: com.google.common.collect.ImmutableTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public final void putAll(com.google.common.collect.Table)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.Table r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        r1 := @parameter0: com.google.common.collect.Table;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public com.google.common.collect.ImmutableMap row(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r2, $r3;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rowKey");

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        $r2 = (com.google.common.collect.ImmutableMap) r1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        r1 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (com.google.common.collect.ImmutableMap) r1;

        return $r2;
    }

    public volatile java.util.Map row(java.lang.Object)
    {
        java.lang.Object $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap row(java.lang.Object)>($r2);

        return $r1;
    }

    public com.google.common.collect.ImmutableSet rowKeySet()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public volatile java.util.Set rowKeySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet rowKeySet()>();

        return $r1;
    }

    public abstract com.google.common.collect.ImmutableMap rowMap();

    public volatile java.util.Map rowMap()
    {
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        return $r1;
    }

    public volatile java.lang.String toString()
    {
        java.lang.String $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.lang.String toString()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableCollection values()
    {
        com.google.common.collect.ImmutableCollection $r2;
        com.google.common.collect.ImmutableTable r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Collection values()>();

        $r2 = (com.google.common.collect.ImmutableCollection) $r1;

        return $r2;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    final java.util.Iterator valuesIterator()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    final java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableTable r0;
        com.google.common.collect.ImmutableTable$SerializedForm $r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm()>();

        return $r1;
    }
}
