final class kotlin.io.path.ExceptionsCollector extends java.lang.Object
{
    private final java.util.List collectedExceptions;
    private final int limit;
    private java.nio.file.Path path;
    private int totalExceptions;

    public void <init>()
    {
        kotlin.io.path.ExceptionsCollector r0;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        specialinvoke r0.<kotlin.io.path.ExceptionsCollector: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        return;
    }

    public void <init>(int)
    {
        java.util.List $r2;
        int $i0;
        kotlin.io.path.ExceptionsCollector r0;
        java.util.ArrayList $r1;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.io.path.ExceptionsCollector: int limit> = $i0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = (java.util.List) $r1;

        r0.<kotlin.io.path.ExceptionsCollector: java.util.List collectedExceptions> = $r2;

        return;
    }

    public void <init>(int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        int $i0, $i1;
        kotlin.io.path.ExceptionsCollector r0;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = 64;

     label1:
        specialinvoke r0.<kotlin.io.path.ExceptionsCollector: void <init>(int)>($i0);

        return;
    }

    public final void collect(java.lang.Exception)
    {
        java.lang.Throwable $r6;
        java.nio.file.FileSystemException r4;
        kotlin.io.path.ExceptionsCollector r0;
        java.lang.Exception $r1;
        java.util.List r2;
        int i0, $i1;
        java.lang.String $r5;
        java.nio.file.Path r3;
        boolean z0;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        $r1 := @parameter0: java.lang.Exception;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "exception");

        i0 = r0.<kotlin.io.path.ExceptionsCollector: int totalExceptions>;

        z0 = 1;

        i0 = i0 + 1;

        r0.<kotlin.io.path.ExceptionsCollector: int totalExceptions> = i0;

        r2 = r0.<kotlin.io.path.ExceptionsCollector: java.util.List collectedExceptions>;

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = r0.<kotlin.io.path.ExceptionsCollector: int limit>;

        if i0 >= $i1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label4;

        r3 = r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path>;

        if r3 == null goto label3;

        r4 = new java.nio.file.FileSystemException;

        r3 = r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke r4.<java.nio.file.FileSystemException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r1;

        $r6 = virtualinvoke r4.<java.nio.file.FileSystemException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type java.nio.file.FileSystemException");

        r4 = (java.nio.file.FileSystemException) $r6;

        $r1 = (java.lang.Exception) r4;

        goto label3;

     label3:
        r2 = r0.<kotlin.io.path.ExceptionsCollector: java.util.List collectedExceptions>;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label4:
        return;
    }

    public final void enterEntry(java.nio.file.Path)
    {
        kotlin.io.path.ExceptionsCollector r0;
        java.nio.file.Path $r1, $r2;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        $r1 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "name");

        $r2 = r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path>;

        if $r2 == null goto label1;

        $r1 = interfaceinvoke $r2.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>($r1);

        goto label2;

     label1:
        $r1 = null;

     label2:
        r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path> = $r1;

        return;
    }

    public final void exitEntry(java.nio.file.Path)
    {
        kotlin.io.path.ExceptionsCollector r0;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r4;
        java.nio.file.Path $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        $r1 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "name");

        $r2 = r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path>;

        $r3 = null;

        if $r2 == null goto label1;

        $r2 = interfaceinvoke $r2.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label4;

        $r1 = r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path>;

        if $r1 == null goto label3;

        $r3 = interfaceinvoke $r1.<java.nio.file.Path: java.nio.file.Path getParent()>();

     label3:
        r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path> = $r3;

        return;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = "Failed requirement.";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public final java.util.List getCollectedExceptions()
    {
        kotlin.io.path.ExceptionsCollector r0;
        java.util.List r1;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        r1 = r0.<kotlin.io.path.ExceptionsCollector: java.util.List collectedExceptions>;

        return r1;
    }

    public final java.nio.file.Path getPath()
    {
        kotlin.io.path.ExceptionsCollector r0;
        java.nio.file.Path r1;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        r1 = r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path>;

        return r1;
    }

    public final int getTotalExceptions()
    {
        int i0;
        kotlin.io.path.ExceptionsCollector r0;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        i0 = r0.<kotlin.io.path.ExceptionsCollector: int totalExceptions>;

        return i0;
    }

    public final void setPath(java.nio.file.Path)
    {
        kotlin.io.path.ExceptionsCollector r0;
        java.nio.file.Path $r1;

        r0 := @this: kotlin.io.path.ExceptionsCollector;

        $r1 := @parameter0: java.nio.file.Path;

        r0.<kotlin.io.path.ExceptionsCollector: java.nio.file.Path path> = $r1;

        return;
    }
}
