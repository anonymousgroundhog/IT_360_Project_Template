public abstract class kotlin.collections.AbstractIterator extends java.lang.Object implements java.util.Iterator, kotlin.jvm.internal.markers.KMappedMarker
{
    private java.lang.Object nextValue;
    private kotlin.collections.State state;

    public void <init>()
    {
        kotlin.collections.State $r1;
        kotlin.collections.AbstractIterator r0;

        r0 := @this: kotlin.collections.AbstractIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <kotlin.collections.State: kotlin.collections.State NotReady>;

        r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state> = $r1;

        return;
    }

    private final boolean tryToComputeNext()
    {
        kotlin.collections.State $r1, $r2;
        kotlin.collections.AbstractIterator r0;

        r0 := @this: kotlin.collections.AbstractIterator;

        $r1 = <kotlin.collections.State: kotlin.collections.State Failed>;

        r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state> = $r1;

        virtualinvoke r0.<kotlin.collections.AbstractIterator: void computeNext()>();

        $r2 = r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state>;

        $r1 = <kotlin.collections.State: kotlin.collections.State Ready>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected abstract void computeNext();

    protected final void done()
    {
        kotlin.collections.State $r1;
        kotlin.collections.AbstractIterator r0;

        r0 := @this: kotlin.collections.AbstractIterator;

        $r1 = <kotlin.collections.State: kotlin.collections.State Done>;

        r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state> = $r1;

        return;
    }

    public boolean hasNext()
    {
        kotlin.collections.State $r1, $r2;
        java.lang.IllegalArgumentException $r4;
        int[] $r3;
        int $i0;
        java.lang.String $r5;
        kotlin.collections.AbstractIterator r0;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractIterator;

        $r1 = r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state>;

        $r2 = <kotlin.collections.State: kotlin.collections.State Failed>;

        if $r1 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label6;

        $r1 = r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state>;

        $r3 = <kotlin.collections.AbstractIterator$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r1.<kotlin.collections.State: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            default: goto label3;
        };

     label3:
        $z0 = specialinvoke r0.<kotlin.collections.AbstractIterator: boolean tryToComputeNext()>();

        return $z0;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = "Failed requirement.";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public java.lang.Object next()
    {
        kotlin.collections.State $r1;
        java.lang.Object r3;
        java.util.NoSuchElementException $r2;
        kotlin.collections.AbstractIterator r0;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractIterator;

        $z0 = virtualinvoke r0.<kotlin.collections.AbstractIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = <kotlin.collections.State: kotlin.collections.State NotReady>;

        r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state> = $r1;

        r3 = r0.<kotlin.collections.AbstractIterator: java.lang.Object nextValue>;

        return r3;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.collections.AbstractIterator r0;

        r0 := @this: kotlin.collections.AbstractIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    protected final void setNext(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.collections.State $r2;
        kotlin.collections.AbstractIterator r0;

        r0 := @this: kotlin.collections.AbstractIterator;

        $r1 := @parameter0: java.lang.Object;

        r0.<kotlin.collections.AbstractIterator: java.lang.Object nextValue> = $r1;

        $r2 = <kotlin.collections.State: kotlin.collections.State Ready>;

        r0.<kotlin.collections.AbstractIterator: kotlin.collections.State state> = $r2;

        return;
    }
}
