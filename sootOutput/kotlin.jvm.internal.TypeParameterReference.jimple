public final class kotlin.jvm.internal.TypeParameterReference extends java.lang.Object implements kotlin.reflect.KTypeParameter
{
    public static final kotlin.jvm.internal.TypeParameterReference$Companion Companion;
    private volatile java.util.List bounds;
    private final java.lang.Object container;
    private final boolean isReified;
    private final java.lang.String name;
    private final kotlin.reflect.KVariance variance;

    static void <clinit>()
    {
        kotlin.jvm.internal.TypeParameterReference$Companion $r0;

        $r0 = new kotlin.jvm.internal.TypeParameterReference$Companion;

        specialinvoke $r0.<kotlin.jvm.internal.TypeParameterReference$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.jvm.internal.TypeParameterReference: kotlin.jvm.internal.TypeParameterReference$Companion Companion> = $r0;

        return;
    }

    public void <init>(java.lang.Object, java.lang.String, kotlin.reflect.KVariance, boolean)
    {
        kotlin.reflect.KVariance $r3;
        kotlin.jvm.internal.TypeParameterReference r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: kotlin.reflect.KVariance;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "variance");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.Object container> = $r1;

        r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.String name> = $r2;

        r0.<kotlin.jvm.internal.TypeParameterReference: kotlin.reflect.KVariance variance> = $r3;

        r0.<kotlin.jvm.internal.TypeParameterReference: boolean isReified> = $z0;

        return;
    }

    public static void getUpperBounds$annotations()
    {
        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.jvm.internal.TypeParameterReference r0, $r3;
        java.lang.Object $r1, $r2, $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.jvm.internal.TypeParameterReference;

        if $z0 == 0 goto label1;

        $r2 = r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.Object container>;

        $r3 = (kotlin.jvm.internal.TypeParameterReference) $r1;

        $r4 = $r3.<kotlin.jvm.internal.TypeParameterReference: java.lang.Object container>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.String getName()>();

        r0 = (kotlin.jvm.internal.TypeParameterReference) $r1;

        $r6 = virtualinvoke r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String getName()
    {
        kotlin.jvm.internal.TypeParameterReference r0;
        java.lang.String r1;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        r1 = r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.String name>;

        return r1;
    }

    public java.util.List getUpperBounds()
    {
        kotlin.jvm.internal.TypeParameterReference r0;
        kotlin.reflect.KType $r2;
        java.util.List $r1;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        $r1 = r0.<kotlin.jvm.internal.TypeParameterReference: java.util.List bounds>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KType nullableTypeOf(java.lang.Class)>(class "Ljava/lang/Object;");

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        r0.<kotlin.jvm.internal.TypeParameterReference: java.util.List bounds> = $r1;

     label1:
        return $r1;
    }

    public kotlin.reflect.KVariance getVariance()
    {
        kotlin.jvm.internal.TypeParameterReference r0;
        kotlin.reflect.KVariance r1;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        r1 = r0.<kotlin.jvm.internal.TypeParameterReference: kotlin.reflect.KVariance variance>;

        return r1;
    }

    public int hashCode()
    {
        kotlin.jvm.internal.TypeParameterReference r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        $r1 = r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.Object container>;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        $i0 = $i0 * 31;

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.TypeParameterReference: java.lang.String getName()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isReified()
    {
        kotlin.jvm.internal.TypeParameterReference r0;
        boolean z0;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        z0 = r0.<kotlin.jvm.internal.TypeParameterReference: boolean isReified>;

        return z0;
    }

    public final void setUpperBounds(java.util.List)
    {
        java.lang.IllegalStateException $r3;
        java.util.List $r1, $r2;
        kotlin.jvm.internal.TypeParameterReference r0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        $r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "upperBounds");

        $r2 = r0.<kotlin.jvm.internal.TypeParameterReference: java.util.List bounds>;

        if $r2 != null goto label1;

        r0.<kotlin.jvm.internal.TypeParameterReference: java.util.List bounds> = $r1;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upper bounds of type parameter \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' have already been initialized.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public java.lang.String toString()
    {
        kotlin.jvm.internal.TypeParameterReference$Companion $r2;
        kotlin.reflect.KTypeParameter $r3;
        kotlin.jvm.internal.TypeParameterReference r0;
        java.lang.String $r1;

        r0 := @this: kotlin.jvm.internal.TypeParameterReference;

        $r2 = <kotlin.jvm.internal.TypeParameterReference: kotlin.jvm.internal.TypeParameterReference$Companion Companion>;

        $r3 = (kotlin.reflect.KTypeParameter) r0;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.TypeParameterReference$Companion: java.lang.String toString(kotlin.reflect.KTypeParameter)>($r3);

        return $r1;
    }
}
