public class androidx.room.util.CopyLock extends java.lang.Object
{
    private static final java.util.Map sThreadLocks;
    private final java.io.File mCopyLockFile;
    private final boolean mFileLevelLock;
    private java.nio.channels.FileChannel mLockChannel;
    private final java.util.concurrent.locks.Lock mThreadLock;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <androidx.room.util.CopyLock: java.util.Map sThreadLocks> = $r0;

        return;
    }

    public void <init>(java.lang.String, java.io.File, boolean)
    {
        java.util.concurrent.locks.Lock $r5;
        java.lang.StringBuilder $r4;
        androidx.room.util.CopyLock r0;
        java.lang.String $r1;
        java.io.File $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.room.util.CopyLock;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lck");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r1);

        r0.<androidx.room.util.CopyLock: java.io.File mCopyLockFile> = $r3;

        $r2 = r0.<androidx.room.util.CopyLock: java.io.File mCopyLockFile>;

        $r1 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = staticinvoke <androidx.room.util.CopyLock: java.util.concurrent.locks.Lock getThreadLock(java.lang.String)>($r1);

        r0.<androidx.room.util.CopyLock: java.util.concurrent.locks.Lock mThreadLock> = $r5;

        r0.<androidx.room.util.CopyLock: boolean mFileLevelLock> = $z0;

        return;
    }

    private static java.util.concurrent.locks.Lock getThreadLock(java.lang.String)
    {
        java.lang.Throwable r6;
        java.util.concurrent.locks.Lock r4;
        java.util.concurrent.locks.ReentrantLock $r5;
        java.util.Map $r1, r3;
        java.lang.Object $r2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = <androidx.room.util.CopyLock: java.util.Map sThreadLocks>;

        entermonitor $r1;

     label1:
        r3 = <androidx.room.util.CopyLock: java.util.Map sThreadLocks>;

        $r2 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r4 = (java.util.concurrent.locks.Lock) $r2;

        if r4 != null goto label2;

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r4 = $r5;

        r3 = <androidx.room.util.CopyLock: java.util.Map sThreadLocks>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r5);

     label2:
        exitmonitor $r1;

     label3:
        return r4;

     label4:
        r6 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void lock()
    {
        java.lang.IllegalStateException $r6;
        java.io.FileOutputStream r3;
        java.io.IOException r5;
        java.io.File $r4;
        java.util.concurrent.locks.Lock r2;
        androidx.room.util.CopyLock r0;
        java.nio.channels.FileChannel $r1;
        boolean z0;

        r0 := @this: androidx.room.util.CopyLock;

        r2 = r0.<androidx.room.util.CopyLock: java.util.concurrent.locks.Lock mThreadLock>;

        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();

        z0 = r0.<androidx.room.util.CopyLock: boolean mFileLevelLock>;

        if z0 == 0 goto label6;

        r3 = new java.io.FileOutputStream;

        $r4 = r0.<androidx.room.util.CopyLock: java.io.File mCopyLockFile>;

     label1:
        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        $r1 = virtualinvoke r3.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

     label2:
        r0.<androidx.room.util.CopyLock: java.nio.channels.FileChannel mLockChannel> = $r1;

        $r1 = r0.<androidx.room.util.CopyLock: java.nio.channels.FileChannel mLockChannel>;

     label3:
        virtualinvoke $r1.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>();

     label4:
        return;

     label5:
        r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to grab copy lock.", r5);

        throw $r6;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public void unlock()
    {
        java.util.concurrent.locks.Lock $r3;
        java.io.IOException $r2;
        androidx.room.util.CopyLock r0;
        java.nio.channels.FileChannel $r1;

        r0 := @this: androidx.room.util.CopyLock;

        $r1 = r0.<androidx.room.util.CopyLock: java.nio.channels.FileChannel mLockChannel>;

        if $r1 == null goto label4;

        $r1 = r0.<androidx.room.util.CopyLock: java.nio.channels.FileChannel mLockChannel>;

     label1:
        virtualinvoke $r1.<java.nio.channels.FileChannel: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        $r3 = r0.<androidx.room.util.CopyLock: java.util.concurrent.locks.Lock mThreadLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
