public final class com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering extends com.google.common.util.concurrent.CycleDetectingLockFactory
{
    private final java.util.Map lockGraphNodes;

    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, java.util.Map)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$Policy $r1;
        java.util.Map r2;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory$Policy;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$1)>($r1, null);

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering: java.util.Map lockGraphNodes> = r2;

        return;
    }

    public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering r0;
        java.lang.Enum r1;
        java.util.concurrent.locks.ReentrantLock $r2;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering;

        r1 := @parameter0: java.lang.Enum;

        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering: java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum,boolean)>(r1, 0);

        return $r2;
    }

    public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum, boolean)
    {
        java.util.concurrent.locks.ReentrantLock $r4;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock $r5;
        com.google.common.util.concurrent.CycleDetectingLockFactory$Policies $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r8;
        com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering r0;
        java.lang.Enum r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$Policy $r2;
        java.util.Map $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering;

        r1 := @parameter0: java.lang.Enum;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering: com.google.common.util.concurrent.CycleDetectingLockFactory$Policy policy>;

        $r3 = <com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies DISABLED>;

        if $r2 != $r3 goto label1;

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>($z0);

        return $r4;

     label1:
        $r5 = new com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $r6 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering: java.util.Map lockGraphNodes>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) $r7;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r8 = (com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) $r7;

        specialinvoke $r5.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,com.google.common.util.concurrent.CycleDetectingLockFactory$1)>(r0, $r8, $z0, null);

        return $r5;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering r0;
        java.lang.Enum r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering;

        r1 := @parameter0: java.lang.Enum;

        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering: java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum,boolean)>(r1, 0);

        return $r2;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum, boolean)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock $r5;
        com.google.common.util.concurrent.CycleDetectingLockFactory$Policies $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r8;
        com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering r0;
        java.lang.Enum r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$Policy $r2;
        java.util.Map $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering;

        r1 := @parameter0: java.lang.Enum;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering: com.google.common.util.concurrent.CycleDetectingLockFactory$Policy policy>;

        $r3 = <com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies DISABLED>;

        if $r2 != $r3 goto label1;

        $r4 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>($z0);

        return $r4;

     label1:
        $r5 = new com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        $r6 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering: java.util.Map lockGraphNodes>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) $r7;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r8 = (com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) $r7;

        specialinvoke $r5.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,com.google.common.util.concurrent.CycleDetectingLockFactory$1)>(r0, $r8, $z0, null);

        return $r5;
    }
}
