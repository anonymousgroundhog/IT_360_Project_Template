public final class kotlinx.coroutines.scheduling.WorkQueueKt extends java.lang.Object
{
    public static final int BUFFER_CAPACITY;
    public static final int BUFFER_CAPACITY_BASE;
    public static final int MASK;
    public static final long NOTHING_TO_STEAL;
    public static final int STEAL_ANY;
    public static final int STEAL_BLOCKING_ONLY;
    public static final int STEAL_CPU_ONLY;
    public static final long TASK_STOLEN;

    public static final int getMaskForStealingMode(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.Task $r0;
        int $i0;
        kotlinx.coroutines.scheduling.TaskContext $r1;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r1 = $r0.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r1.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 2;
    }

    public static void <clinit>()
    {
        <kotlinx.coroutines.scheduling.WorkQueueKt: long TASK_STOLEN> = -1L;

        <kotlinx.coroutines.scheduling.WorkQueueKt: int STEAL_CPU_ONLY> = 2;

        <kotlinx.coroutines.scheduling.WorkQueueKt: int STEAL_BLOCKING_ONLY> = 1;

        <kotlinx.coroutines.scheduling.WorkQueueKt: int STEAL_ANY> = 3;

        <kotlinx.coroutines.scheduling.WorkQueueKt: long NOTHING_TO_STEAL> = -2L;

        <kotlinx.coroutines.scheduling.WorkQueueKt: int MASK> = 127;

        <kotlinx.coroutines.scheduling.WorkQueueKt: int BUFFER_CAPACITY_BASE> = 7;

        <kotlinx.coroutines.scheduling.WorkQueueKt: int BUFFER_CAPACITY> = 128;

        return;
    }
}
