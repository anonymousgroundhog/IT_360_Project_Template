public final class com.google.common.math.StatsAccumulator extends java.lang.Object
{
    private long count;
    private double max;
    private double mean;
    private double min;
    private double sumOfSquaresOfDeltas;

    public void <init>()
    {
        com.google.common.math.StatsAccumulator r0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.math.StatsAccumulator: long count> = 0L;

        r0.<com.google.common.math.StatsAccumulator: double mean> = 0.0;

        r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas> = 0.0;

        r0.<com.google.common.math.StatsAccumulator: double min> = #NaN;

        r0.<com.google.common.math.StatsAccumulator: double max> = #NaN;

        return;
    }

    static double calculateNewMeanNonFinite(double, double)
    {
        byte $b0;
        double $d0, $d1;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label1;

        return $d1;

     label1:
        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        if $z0 != 0 goto label3;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        return $d0;

     label2:
        return #NaN;

     label3:
        return $d0;
    }

    private void merge(long, double, double, double, double)
    {
        long $l0, l2;
        com.google.common.math.StatsAccumulator r0;
        byte $b1;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, $d7;
        boolean $z0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $l0 := @parameter0: long;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        l2 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b1 = l2 cmp 0L;

        if $b1 != 0 goto label1;

        r0.<com.google.common.math.StatsAccumulator: long count> = $l0;

        r0.<com.google.common.math.StatsAccumulator: double mean> = $d0;

        r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas> = $d1;

        r0.<com.google.common.math.StatsAccumulator: double min> = $d2;

        r0.<com.google.common.math.StatsAccumulator: double max> = $d3;

        return;

     label1:
        l2 = r0.<com.google.common.math.StatsAccumulator: long count>;

        l2 = l2 + $l0;

        r0.<com.google.common.math.StatsAccumulator: long count> = l2;

        d4 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d4);

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label2;

        d4 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        d4 = $d0 - d4;

        $d5 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $d6 = (double) $l0;

        $d6 = $d6 * d4;

        l2 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $d7 = (double) l2;

        $d6 = $d6 / $d7;

        $d5 = $d5 + $d6;

        r0.<com.google.common.math.StatsAccumulator: double mean> = $d5;

        $d5 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        $d6 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $d0 = $d0 - $d6;

        $d0 = $d0 * d4;

        d4 = (double) $l0;

        $d0 = $d0 * d4;

        $d0 = $d0 + $d1;

        $d0 = $d5 + $d0;

        r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas> = $d0;

        goto label3;

     label2:
        $d1 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $d0 = staticinvoke <com.google.common.math.StatsAccumulator: double calculateNewMeanNonFinite(double,double)>($d1, $d0);

        r0.<com.google.common.math.StatsAccumulator: double mean> = $d0;

        r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas> = #NaN;

     label3:
        $d0 = r0.<com.google.common.math.StatsAccumulator: double min>;

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d2);

        r0.<com.google.common.math.StatsAccumulator: double min> = $d0;

        $d0 = r0.<com.google.common.math.StatsAccumulator: double max>;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d3);

        r0.<com.google.common.math.StatsAccumulator: double max> = $d0;

        return;
    }

    public void add(double)
    {
        long l1;
        com.google.common.math.StatsAccumulator r0;
        byte $b0;
        double $d0, d1, $d2, $d3;
        boolean $z0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $d0 := @parameter0: double;

        l1 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b0 = l1 cmp 0L;

        if $b0 != 0 goto label1;

        r0.<com.google.common.math.StatsAccumulator: long count> = 1L;

        r0.<com.google.common.math.StatsAccumulator: double mean> = $d0;

        r0.<com.google.common.math.StatsAccumulator: double min> = $d0;

        r0.<com.google.common.math.StatsAccumulator: double max> = $d0;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 != 0 goto label4;

        r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas> = #NaN;

        return;

     label1:
        l1 = r0.<com.google.common.math.StatsAccumulator: long count>;

        l1 = l1 + 1L;

        r0.<com.google.common.math.StatsAccumulator: long count> = l1;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label2;

        d1 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d1);

        if $z0 == 0 goto label2;

        d1 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        d1 = $d0 - d1;

        $d2 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        l1 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $d3 = (double) l1;

        $d3 = d1 / $d3;

        $d2 = $d2 + $d3;

        r0.<com.google.common.math.StatsAccumulator: double mean> = $d2;

        $d2 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        $d3 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $d3 = $d0 - $d3;

        d1 = $d3 * d1;

        d1 = $d2 + d1;

        r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas> = d1;

        goto label3;

     label2:
        d1 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        d1 = staticinvoke <com.google.common.math.StatsAccumulator: double calculateNewMeanNonFinite(double,double)>(d1, $d0);

        r0.<com.google.common.math.StatsAccumulator: double mean> = d1;

        r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas> = #NaN;

     label3:
        d1 = r0.<com.google.common.math.StatsAccumulator: double min>;

        d1 = staticinvoke <java.lang.Math: double min(double,double)>(d1, $d0);

        r0.<com.google.common.math.StatsAccumulator: double min> = d1;

        d1 = r0.<com.google.common.math.StatsAccumulator: double max>;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        r0.<com.google.common.math.StatsAccumulator: double max> = $d0;

     label4:
        return;
    }

    public void addAll(com.google.common.math.Stats)
    {
        long $l1;
        com.google.common.math.StatsAccumulator r0;
        byte $b0;
        com.google.common.math.Stats $r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $r1 := @parameter0: com.google.common.math.Stats;

        $l1 = virtualinvoke $r1.<com.google.common.math.Stats: long count()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label1;

        return;

     label1:
        $l1 = virtualinvoke $r1.<com.google.common.math.Stats: long count()>();

        $d0 = virtualinvoke $r1.<com.google.common.math.Stats: double mean()>();

        $d1 = virtualinvoke $r1.<com.google.common.math.Stats: double sumOfSquaresOfDeltas()>();

        $d2 = virtualinvoke $r1.<com.google.common.math.Stats: double min()>();

        $d3 = virtualinvoke $r1.<com.google.common.math.Stats: double max()>();

        specialinvoke r0.<com.google.common.math.StatsAccumulator: void merge(long,double,double,double,double)>($l1, $d0, $d1, $d2, $d3);

        return;
    }

    public void addAll(com.google.common.math.StatsAccumulator)
    {
        long $l1;
        com.google.common.math.StatsAccumulator r0, $r1;
        byte $b0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $r1 := @parameter0: com.google.common.math.StatsAccumulator;

        $l1 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: long count()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label1;

        return;

     label1:
        $l1 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: long count()>();

        $d0 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double mean()>();

        $d1 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas()>();

        $d2 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double min()>();

        $d3 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double max()>();

        specialinvoke r0.<com.google.common.math.StatsAccumulator: void merge(long,double,double,double,double)>($l1, $d0, $d1, $d2, $d3);

        return;
    }

    public void addAll(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Number r4;
        com.google.common.math.StatsAccumulator r0;
        java.lang.Iterable r1;
        boolean $z0;
        double $d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        virtualinvoke r0.<com.google.common.math.StatsAccumulator: void add(double)>($d0);

        goto label1;

     label2:
        return;
    }

    public void addAll(java.util.Iterator)
    {
        java.util.Iterator r1;
        java.lang.Object $r2;
        java.lang.Number $r3;
        com.google.common.math.StatsAccumulator r0;
        boolean $z0;
        double $d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        r1 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        virtualinvoke r0.<com.google.common.math.StatsAccumulator: void add(double)>($d0);

        goto label1;

     label2:
        return;
    }

    public transient void addAll(double[])
    {
        double[] $r1;
        int $i0, $i1;
        com.google.common.math.StatsAccumulator r0;
        double d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $r1 := @parameter0: double[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        d0 = $r1[$i1];

        virtualinvoke r0.<com.google.common.math.StatsAccumulator: void add(double)>(d0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void addAll(int[])
    {
        int[] $r1;
        int $i0, i1, $i2;
        com.google.common.math.StatsAccumulator r0;
        double $d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        i1 = $r1[$i2];

        $d0 = (double) i1;

        virtualinvoke r0.<com.google.common.math.StatsAccumulator: void add(double)>($d0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void addAll(long[])
    {
        long[] $r1;
        int $i0, $i2;
        long l1;
        com.google.common.math.StatsAccumulator r0;
        double $d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $r1 := @parameter0: long[];

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        l1 = $r1[$i2];

        $d0 = (double) l1;

        virtualinvoke r0.<com.google.common.math.StatsAccumulator: void add(double)>($d0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public long count()
    {
        long l0;
        com.google.common.math.StatsAccumulator r0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        return l0;
    }

    public double max()
    {
        byte $b0;
        long $l1;
        com.google.common.math.StatsAccumulator r0;
        boolean $z0;
        double d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $l1 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        d0 = r0.<com.google.common.math.StatsAccumulator: double max>;

        return d0;
    }

    public double mean()
    {
        byte $b0;
        long $l1;
        com.google.common.math.StatsAccumulator r0;
        boolean $z0;
        double d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $l1 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        d0 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        return d0;
    }

    public double min()
    {
        byte $b0;
        long $l1;
        com.google.common.math.StatsAccumulator r0;
        boolean $z0;
        double d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $l1 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        d0 = r0.<com.google.common.math.StatsAccumulator: double min>;

        return d0;
    }

    public final double populationStandardDeviation()
    {
        com.google.common.math.StatsAccumulator r0;
        double $d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $d0 = virtualinvoke r0.<com.google.common.math.StatsAccumulator: double populationVariance()>();

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d0;
    }

    public final double populationVariance()
    {
        byte $b1;
        long $l0;
        com.google.common.math.StatsAccumulator r0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $d0 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label3;

        return #NaN;

     label3:
        $l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label4;

        return 0.0;

     label4:
        $d0 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        $d0 = staticinvoke <com.google.common.math.DoubleUtils: double ensureNonNegative(double)>($d0);

        $l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        return $d0;
    }

    public final double sampleStandardDeviation()
    {
        com.google.common.math.StatsAccumulator r0;
        double $d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $d0 = virtualinvoke r0.<com.google.common.math.StatsAccumulator: double sampleVariance()>();

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d0;
    }

    public final double sampleVariance()
    {
        byte $b1;
        int $i2;
        long $l0;
        com.google.common.math.StatsAccumulator r0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $b1 = $l0 cmp 1L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $d0 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label3;

        return #NaN;

     label3:
        $d0 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        $d0 = staticinvoke <com.google.common.math.DoubleUtils: double ensureNonNegative(double)>($d0);

        $l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $l0 = $l0 - 1L;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        return $d0;
    }

    public com.google.common.math.Stats snapshot()
    {
        com.google.common.math.Stats $r1;
        long $l0;
        com.google.common.math.StatsAccumulator r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $r1 = new com.google.common.math.Stats;

        $l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $d0 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $d1 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        $d2 = r0.<com.google.common.math.StatsAccumulator: double min>;

        $d3 = r0.<com.google.common.math.StatsAccumulator: double max>;

        specialinvoke $r1.<com.google.common.math.Stats: void <init>(long,double,double,double,double)>($l0, $d0, $d1, $d2, $d3);

        return $r1;
    }

    public final double sum()
    {
        long $l0;
        com.google.common.math.StatsAccumulator r0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.StatsAccumulator;

        $d0 = r0.<com.google.common.math.StatsAccumulator: double mean>;

        $l0 = r0.<com.google.common.math.StatsAccumulator: long count>;

        $d1 = (double) $l0;

        $d0 = $d0 * $d1;

        return $d0;
    }

    double sumOfSquaresOfDeltas()
    {
        com.google.common.math.StatsAccumulator r0;
        double d0;

        r0 := @this: com.google.common.math.StatsAccumulator;

        d0 = r0.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas>;

        return d0;
    }
}
