final class kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1 extends kotlin.jvm.internal.Lambda implements kotlin.jvm.functions.Function2
{
    final boolean $isNewCoroutine;
    final kotlin.jvm.internal.Ref$ObjectRef $leftoverContext;

    void <init>(kotlin.jvm.internal.Ref$ObjectRef, boolean)
    {
        kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1 r0;
        kotlin.jvm.internal.Ref$ObjectRef $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        $z0 := @parameter1: boolean;

        r0.<kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1: kotlin.jvm.internal.Ref$ObjectRef $leftoverContext> = $r1;

        r0.<kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1: boolean $isNewCoroutine> = $z0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1 r0;
        kotlin.coroutines.CoroutineContext$Element $r4;
        java.lang.Object $r1, $r2;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.coroutines.CoroutineContext) $r1;

        $r4 = (kotlin.coroutines.CoroutineContext$Element) $r2;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1: kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>($r3, $r4);

        return $r3;
    }

    public final kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element)
    {
        kotlin.coroutines.CoroutineContext$Element $r2, $r7;
        kotlinx.coroutines.CopyableThreadContextElement $r8;
        kotlin.coroutines.CoroutineContext $r1, r3;
        kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1 r0;
        kotlin.coroutines.CoroutineContext$Key $r6;
        java.lang.Object r5;
        boolean z0;
        kotlin.jvm.internal.Ref$ObjectRef r4, $r9;

        r0 := @this: kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext$Element;

        z0 = $r2 instanceof kotlinx.coroutines.CopyableThreadContextElement;

        if z0 != 0 goto label1;

        r3 = (kotlin.coroutines.CoroutineContext) $r2;

        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>(r3);

        return $r1;

     label1:
        r4 = r0.<kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1: kotlin.jvm.internal.Ref$ObjectRef $leftoverContext>;

        r5 = r4.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        r3 = (kotlin.coroutines.CoroutineContext) r5;

        $r6 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $r7 = interfaceinvoke r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r6);

        if $r7 != null goto label4;

        z0 = r0.<kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1: boolean $isNewCoroutine>;

        if z0 == 0 goto label2;

        $r8 = (kotlinx.coroutines.CopyableThreadContextElement) $r2;

        $r8 = interfaceinvoke $r8.<kotlinx.coroutines.CopyableThreadContextElement: kotlinx.coroutines.CopyableThreadContextElement copyForChild()>();

        goto label3;

     label2:
        $r8 = (kotlinx.coroutines.CopyableThreadContextElement) $r2;

     label3:
        r3 = (kotlin.coroutines.CoroutineContext) $r8;

        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>(r3);

        return $r1;

     label4:
        r4 = r0.<kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1: kotlin.jvm.internal.Ref$ObjectRef $leftoverContext>;

        $r9 = r0.<kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1: kotlin.jvm.internal.Ref$ObjectRef $leftoverContext>;

        r5 = $r9.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        r3 = (kotlin.coroutines.CoroutineContext) r5;

        $r6 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        r3 = interfaceinvoke r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>($r6);

        r4.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = r3;

        $r8 = (kotlinx.coroutines.CopyableThreadContextElement) $r2;

        r3 = interfaceinvoke $r8.<kotlinx.coroutines.CopyableThreadContextElement: kotlin.coroutines.CoroutineContext mergeForChild(kotlin.coroutines.CoroutineContext$Element)>($r7);

        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>(r3);

        return $r1;
    }
}
