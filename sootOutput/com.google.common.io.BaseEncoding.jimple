public abstract class com.google.common.io.BaseEncoding extends java.lang.Object
{
    private static final com.google.common.io.BaseEncoding BASE16;
    private static final com.google.common.io.BaseEncoding BASE32;
    private static final com.google.common.io.BaseEncoding BASE32_HEX;
    private static final com.google.common.io.BaseEncoding BASE64;
    private static final com.google.common.io.BaseEncoding BASE64_URL;

    static void <clinit>()
    {
        com.google.common.io.BaseEncoding$Base64Encoding $r1;
        com.google.common.io.BaseEncoding$Base16Encoding $r3;
        java.lang.Character $r0;
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r2;

        $r1 = new com.google.common.io.BaseEncoding$Base64Encoding;

        $r0 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(61);

        specialinvoke $r1.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base64()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64> = $r1;

        $r1 = new com.google.common.io.BaseEncoding$Base64Encoding;

        specialinvoke $r1.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base64Url()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64_URL> = $r1;

        $r2 = new com.google.common.io.BaseEncoding$StandardBaseEncoding;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base32()", "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32> = $r2;

        $r2 = new com.google.common.io.BaseEncoding$StandardBaseEncoding;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base32Hex()", "0123456789ABCDEFGHIJKLMNOPQRSTUV", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32_HEX> = $r2;

        $r3 = new com.google.common.io.BaseEncoding$Base16Encoding;

        specialinvoke $r3.<com.google.common.io.BaseEncoding$Base16Encoding: void <init>(java.lang.String,java.lang.String)>("base16()", "0123456789ABCDEF");

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE16> = $r3;

        return;
    }

    void <init>()
    {
        com.google.common.io.BaseEncoding r0;

        r0 := @this: com.google.common.io.BaseEncoding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.io.BaseEncoding base16()
    {
        com.google.common.io.BaseEncoding r0;

        r0 = <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE16>;

        return r0;
    }

    public static com.google.common.io.BaseEncoding base32()
    {
        com.google.common.io.BaseEncoding r0;

        r0 = <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32>;

        return r0;
    }

    public static com.google.common.io.BaseEncoding base32Hex()
    {
        com.google.common.io.BaseEncoding r0;

        r0 = <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32_HEX>;

        return r0;
    }

    public static com.google.common.io.BaseEncoding base64()
    {
        com.google.common.io.BaseEncoding r0;

        r0 = <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64>;

        return r0;
    }

    public static com.google.common.io.BaseEncoding base64Url()
    {
        com.google.common.io.BaseEncoding r0;

        r0 = <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64_URL>;

        return r0;
    }

    private static byte[] extract(byte[], int)
    {
        byte[] $r0, r1;
        int $i0, i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        i1 = lengthof $r0;

        if $i0 != i1 goto label1;

        return $r0;

     label1:
        r1 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r1, 0, $i0);

        return r1;
    }

    static java.io.Reader ignoringReader(java.io.Reader, java.lang.String)
    {
        java.io.Reader $r0;
        java.lang.String $r1;
        com.google.common.io.BaseEncoding$3 $r2;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.io.BaseEncoding$3;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$3: void <init>(java.io.Reader,java.lang.String)>($r0, $r1);

        return $r2;
    }

    static java.lang.Appendable separatingAppendable(java.lang.Appendable, java.lang.String, int)
    {
        java.lang.Appendable $r0;
        com.google.common.io.BaseEncoding$4 $r2;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Appendable;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r2 = new com.google.common.io.BaseEncoding$4;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$4: void <init>(int,java.lang.Appendable,java.lang.String)>($i0, $r0, $r1);

        return $r2;
    }

    static java.io.Writer separatingWriter(java.io.Writer, java.lang.String, int)
    {
        com.google.common.io.BaseEncoding$5 $r2;
        java.lang.Appendable $r3;
        java.io.Writer $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.Writer;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 = staticinvoke <com.google.common.io.BaseEncoding: java.lang.Appendable separatingAppendable(java.lang.Appendable,java.lang.String,int)>($r0, $r1, $i0);

        $r2 = new com.google.common.io.BaseEncoding$5;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$5: void <init>(java.lang.Appendable,java.io.Writer)>($r3, $r0);

        return $r2;
    }

    public abstract boolean canDecode(java.lang.CharSequence);

    public final byte[] decode(java.lang.CharSequence)
    {
        byte[] $r3;
        java.lang.CharSequence $r1;
        com.google.common.io.BaseEncoding r0;
        com.google.common.io.BaseEncoding$DecodingException r4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: java.lang.CharSequence;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.io.BaseEncoding: byte[] decodeChecked(java.lang.CharSequence)>($r1);

     label2:
        return $r3;

     label3:
        r4 := @caughtexception;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r4);

        throw $r2;

        catch com.google.common.io.BaseEncoding$DecodingException from label1 to label2 with label3;
    }

    final byte[] decodeChecked(java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException
    {
        byte[] r2;
        java.lang.CharSequence $r1;
        com.google.common.io.BaseEncoding r0;
        int $i0;

        r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<com.google.common.io.BaseEncoding: java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)>($r1);

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = virtualinvoke r0.<com.google.common.io.BaseEncoding: int maxDecodedSize(int)>($i0);

        r2 = newarray (byte)[$i0];

        $i0 = virtualinvoke r0.<com.google.common.io.BaseEncoding: int decodeTo(byte[],java.lang.CharSequence)>(r2, $r1);

        r2 = staticinvoke <com.google.common.io.BaseEncoding: byte[] extract(byte[],int)>(r2, $i0);

        return r2;
    }

    abstract int decodeTo(byte[], java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException;

    public final com.google.common.io.ByteSource decodingSource(com.google.common.io.CharSource)
    {
        com.google.common.io.BaseEncoding$2 $r2;
        com.google.common.io.CharSource $r1;
        com.google.common.io.BaseEncoding r0;

        r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: com.google.common.io.CharSource;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.io.BaseEncoding$2;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$2: void <init>(com.google.common.io.BaseEncoding,com.google.common.io.CharSource)>(r0, $r1);

        return $r2;
    }

    public abstract java.io.InputStream decodingStream(java.io.Reader);

    public java.lang.String encode(byte[])
    {
        byte[] $r1;
        com.google.common.io.BaseEncoding r0;
        int $i0;
        java.lang.String $r2;

        r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $r2 = virtualinvoke r0.<com.google.common.io.BaseEncoding: java.lang.String encode(byte[],int,int)>($r1, 0, $i0);

        return $r2;
    }

    public final java.lang.String encode(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.io.BaseEncoding r0;
        java.io.IOException r5;
        java.lang.AssertionError $r2;
        int $i0, $i1, i2, i3;
        java.lang.StringBuilder r3;
        java.lang.String $r4;

        r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i0 + $i1;

        i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, i2, i3);

        r3 = new java.lang.StringBuilder;

        i2 = virtualinvoke r0.<com.google.common.io.BaseEncoding: int maxEncodedSize(int)>($i1);

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>(i2);

     label1:
        virtualinvoke r0.<com.google.common.io.BaseEncoding: void encodeTo(java.lang.Appendable,byte[],int,int)>(r3, $r1, $i0, $i1);

     label2:
        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label3:
        r5 := @caughtexception;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>(r5);

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    abstract void encodeTo(java.lang.Appendable, byte[], int, int) throws java.io.IOException;

    public final com.google.common.io.ByteSink encodingSink(com.google.common.io.CharSink)
    {
        com.google.common.io.BaseEncoding$1 $r2;
        com.google.common.io.BaseEncoding r0;
        com.google.common.io.CharSink $r1;

        r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: com.google.common.io.CharSink;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.io.BaseEncoding$1;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$1: void <init>(com.google.common.io.BaseEncoding,com.google.common.io.CharSink)>(r0, $r1);

        return $r2;
    }

    public abstract java.io.OutputStream encodingStream(java.io.Writer);

    public abstract com.google.common.io.BaseEncoding lowerCase();

    abstract int maxDecodedSize(int);

    abstract int maxEncodedSize(int);

    public abstract com.google.common.io.BaseEncoding omitPadding();

    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)
    {
        java.lang.Object $r2;
        java.lang.CharSequence $r1;
        com.google.common.io.BaseEncoding r0;

        r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.lang.CharSequence) $r2;

        return $r1;
    }

    public abstract com.google.common.io.BaseEncoding upperCase();

    public abstract com.google.common.io.BaseEncoding withPadChar(char);

    public abstract com.google.common.io.BaseEncoding withSeparator(java.lang.String, int);
}
