public final class com.google.common.util.concurrent.ClosingFuture$Peeker extends java.lang.Object
{
    private volatile boolean beingCalled;
    private final com.google.common.collect.ImmutableList futures;

    private void <init>(com.google.common.collect.ImmutableList)
    {
        com.google.common.util.concurrent.ClosingFuture$Peeker r0;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableList r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Peeker;

        r1 := @parameter0: com.google.common.collect.ImmutableList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (com.google.common.collect.ImmutableList) $r2;

        r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: com.google.common.collect.ImmutableList futures> = r1;

        return;
    }

    void <init>(com.google.common.collect.ImmutableList, com.google.common.util.concurrent.ClosingFuture$1)
    {
        com.google.common.util.concurrent.ClosingFuture$Peeker r0;
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.ClosingFuture$1 $r2;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Peeker;

        $r1 := @parameter0: com.google.common.collect.ImmutableList;

        $r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$1;

        specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: void <init>(com.google.common.collect.ImmutableList)>($r1);

        return;
    }

    static java.lang.Object access$1500(com.google.common.util.concurrent.ClosingFuture$Peeker, com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable, com.google.common.util.concurrent.ClosingFuture$CloseableList) throws java.lang.Exception
    {
        com.google.common.util.concurrent.ClosingFuture$Peeker $r0;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r2;
        java.lang.Object $r3;
        com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$Peeker;

        $r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable;

        $r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        $r3 = specialinvoke $r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: java.lang.Object call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)>($r1, $r2);

        return $r3;
    }

    static com.google.common.util.concurrent.FluentFuture access$1700(com.google.common.util.concurrent.ClosingFuture$Peeker, com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable, com.google.common.util.concurrent.ClosingFuture$CloseableList) throws java.lang.Exception
    {
        com.google.common.util.concurrent.ClosingFuture$Peeker $r0;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r2;
        com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable $r1;
        com.google.common.util.concurrent.FluentFuture $r3;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$Peeker;

        $r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable;

        $r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        $r3 = specialinvoke $r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: com.google.common.util.concurrent.FluentFuture callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)>($r1, $r2);

        return $r3;
    }

    private java.lang.Object call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable, com.google.common.util.concurrent.ClosingFuture$CloseableList) throws java.lang.Exception
    {
        java.lang.Throwable $r7;
        com.google.common.util.concurrent.ClosingFuture$DeferredCloser $r4;
        java.util.concurrent.Executor $r6;
        com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable r1;
        com.google.common.util.concurrent.ClosingFuture$Peeker r0;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r2, r3;
        java.lang.Object $r5;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Peeker;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable;

        $r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: boolean beingCalled> = 1;

        r3 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>(com.google.common.util.concurrent.ClosingFuture$1)>(null);

     label1:
        $r4 = staticinvoke <com.google.common.util.concurrent.ClosingFuture$CloseableList: com.google.common.util.concurrent.ClosingFuture$DeferredCloser access$300(com.google.common.util.concurrent.ClosingFuture$CloseableList)>(r3);

        $r5 = interfaceinvoke r1.<com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable: java.lang.Object call(com.google.common.util.concurrent.ClosingFuture$DeferredCloser,com.google.common.util.concurrent.ClosingFuture$Peeker)>($r4, r0);

     label2:
        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r6);

        r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: boolean beingCalled> = 0;

        return $r5;

     label3:
        $r7 := @caughtexception;

        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r6);

        r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: boolean beingCalled> = 0;

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private com.google.common.util.concurrent.FluentFuture callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable, com.google.common.util.concurrent.ClosingFuture$CloseableList) throws java.lang.Exception
    {
        java.lang.Throwable r8;
        com.google.common.util.concurrent.ClosingFuture$DeferredCloser $r4;
        java.util.concurrent.Executor $r7;
        com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable r1;
        com.google.common.util.concurrent.ClosingFuture$Peeker r0;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r2, r3;
        com.google.common.util.concurrent.ClosingFuture $r5;
        com.google.common.util.concurrent.FluentFuture $r6;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Peeker;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable;

        $r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: boolean beingCalled> = 1;

        r3 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>(com.google.common.util.concurrent.ClosingFuture$1)>(null);

     label1:
        $r4 = staticinvoke <com.google.common.util.concurrent.ClosingFuture$CloseableList: com.google.common.util.concurrent.ClosingFuture$DeferredCloser access$300(com.google.common.util.concurrent.ClosingFuture$CloseableList)>(r3);

        $r5 = interfaceinvoke r1.<com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable: com.google.common.util.concurrent.ClosingFuture call(com.google.common.util.concurrent.ClosingFuture$DeferredCloser,com.google.common.util.concurrent.ClosingFuture$Peeker)>($r4, r0);

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void access$1000(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$CloseableList)>($r5, $r2);

        $r6 = staticinvoke <com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture access$000(com.google.common.util.concurrent.ClosingFuture)>($r5);

     label2:
        $r7 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r7);

        r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: boolean beingCalled> = 0;

        return $r6;

     label3:
        r8 := @caughtexception;

        $r7 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r7);

        r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: boolean beingCalled> = 0;

        throw r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.lang.Object getDone(com.google.common.util.concurrent.ClosingFuture) throws java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.ClosingFuture$Peeker r0;
        com.google.common.collect.ImmutableList $r2;
        java.lang.Object $r4;
        com.google.common.util.concurrent.ClosingFuture r1;
        boolean $z0;
        com.google.common.util.concurrent.FluentFuture $r3;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$Peeker;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        $z0 = r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: boolean beingCalled>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $r2 = r0.<com.google.common.util.concurrent.ClosingFuture$Peeker: com.google.common.collect.ImmutableList futures>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableList: boolean contains(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = staticinvoke <com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture access$000(com.google.common.util.concurrent.ClosingFuture)>(r1);

        $r4 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>($r3);

        return $r4;
    }
}
