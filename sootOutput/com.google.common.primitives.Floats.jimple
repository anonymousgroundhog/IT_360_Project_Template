public final class com.google.common.primitives.Floats extends com.google.common.primitives.FloatsMethodsForWeb
{
    public static final int BYTES;

    private void <init>()
    {
        com.google.common.primitives.Floats r0;

        r0 := @this: com.google.common.primitives.Floats;

        specialinvoke r0.<com.google.common.primitives.FloatsMethodsForWeb: void <init>()>();

        return;
    }

    static int access$000(float[], float, int, int)
    {
        int $i0, $i1;
        float $f0;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Floats: int indexOf(float[],float,int,int)>($r0, $f0, $i0, $i1);

        return $i0;
    }

    static int access$100(float[], float, int, int)
    {
        int $i0, $i1;
        float $f0;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Floats: int lastIndexOf(float[],float,int,int)>($r0, $f0, $i0, $i1);

        return $i0;
    }

    public static transient java.util.List asList(float[])
    {
        java.util.List $r1;
        int $i0;
        float[] $r0;
        com.google.common.primitives.Floats$FloatArrayAsList $r2;

        $r0 := @parameter0: float[];

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;

     label1:
        $r2 = new com.google.common.primitives.Floats$FloatArrayAsList;

        specialinvoke $r2.<com.google.common.primitives.Floats$FloatArrayAsList: void <init>(float[])>($r0);

        return $r2;
    }

    public static int compare(float, float)
    {
        int $i0;
        float $f0, $f1;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, $f1);

        return $i0;
    }

    public static transient float[] concat(float[][])
    {
        float[][] $r0;
        int i0, i1, i2, $i3;
        float[] r1, r2;

        $r0 := @parameter0: float[][];

        i0 = 0;

        i1 = lengthof $r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r1 = $r0[i2];

        $i3 = lengthof r1;

        i0 = i0 + $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        r2 = newarray (float)[i0];

        i0 = 0;

        i1 = lengthof $r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        r1 = $r0[i2];

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, i0, $i3);

        $i3 = lengthof r1;

        i0 = i0 + $i3;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r2;
    }

    public static float constrainToRange(float, float, float)
    {
        java.lang.Float $r0, $r1;
        java.lang.Object[] $r2;
        java.lang.IllegalArgumentException $r4;
        byte $b0;
        int $i1;
        float $f0, $f1, $f2;
        java.lang.String $r3;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $b0 = $f1 cmpg $f2;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f2);

        return $f0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r0 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = $r0;

        $r2[1] = $r1;

        $r3 = staticinvoke <com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])>("min (%s) must be less than or equal to max (%s)", $r2);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static boolean contains(float[], float)
    {
        byte $b0;
        int $i1, $i2;
        float $f0, f1;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i1 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        f1 = $r0[$i2];

        $b0 = f1 cmpl $f0;

        if $b0 != 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static float[] ensureCapacity(float[], int, int)
    {
        int $i0, $i1, $i2;
        float[] $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = 1;

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "Invalid minLength: %s", $i0);

        if $i1 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Invalid padding: %s", $i1);

        $i2 = lengthof $r0;

        if $i2 >= $i0 goto label5;

        $i0 = $i0 + $i1;

        $r0 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>($r0, $i0);

     label5:
        return $r0;
    }

    public static int hashCode(float)
    {
        int $i0;
        float $f0;
        java.lang.Float $r0;

        $f0 := @parameter0: float;

        $r0 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $i0 = virtualinvoke $r0.<java.lang.Float: int hashCode()>();

        return $i0;
    }

    public static int indexOf(float[], float)
    {
        int $i0;
        float $f0;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Floats: int indexOf(float[],float,int,int)>($r0, $f0, 0, $i0);

        return $i0;
    }

    private static int indexOf(float[], float, int, int)
    {
        byte $b2;
        int $i0, $i1;
        float $f0, $f1;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

     label1:
        if $i0 >= $i1 goto label3;

        $f1 = $r0[$i0];

        $b2 = $f1 cmpl $f0;

        if $b2 != 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int indexOf(float[], float[])
    {
        float[] $r0, $r1;
        byte $b3;
        int i0, i1, $i2;
        float $f0, $f1;

        $r0 := @parameter0: float[];

        $r1 := @parameter1: float[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "target");

        i0 = lengthof $r1;

        if i0 != 0 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        i1 = lengthof $r0;

        $i2 = lengthof $r1;

        i1 = i1 - $i2;

        i1 = i1 + 1;

        if i0 >= i1 goto label6;

        i1 = 0;

     label3:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label5;

        $i2 = i0 + i1;

        $f1 = $r0[$i2];

        $f0 = $r1[i1];

        $b3 = $f1 cmpl $f0;

        if $b3 == 0 goto label4;

        i0 = i0 + 1;

        goto label2;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return i0;

     label6:
        return -1;
    }

    public static boolean isFinite(float)
    {
        int $i1;
        float $f0;
        byte $b0;

        $f0 := @parameter0: float;

        $b0 = #-InfinityF cmpg $f0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $b0 = $f0 cmpg #InfinityF;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static transient java.lang.String join(java.lang.String, float[])
    {
        int i0, $i1;
        float $f0;
        float[] $r1;
        java.lang.StringBuilder r2, $r3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: float[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        i0 = lengthof $r1;

        if i0 != 0 goto label1;

        return "";

     label1:
        r2 = new java.lang.StringBuilder;

        i0 = lengthof $r1;

        i0 = i0 * 12;

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>(i0);

        $f0 = $r1[0];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        i0 = 1;

     label2:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $f0 = $r1[i0];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r0 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static int lastIndexOf(float[], float)
    {
        int $i0;
        float $f0;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Floats: int lastIndexOf(float[],float,int,int)>($r0, $f0, 0, $i0);

        return $i0;
    }

    private static int lastIndexOf(float[], float, int, int)
    {
        byte $b2;
        int $i0, $i1;
        float $f0, $f1;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i1 = $i1 + -1;

     label1:
        if $i1 < $i0 goto label3;

        $f1 = $r0[$i1];

        $b2 = $f1 cmpl $f0;

        if $b2 != 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + -1;

        goto label1;

     label3:
        return -1;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Floats$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.Floats$LexicographicalComparator: com.google.common.primitives.Floats$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static transient float max(float[])
    {
        int i0, $i1;
        float $f0, $f1;
        float[] $r0;
        boolean z0;

        $r0 := @parameter0: float[];

        i0 = lengthof $r0;

        if i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        $f0 = $r0[0];

        i0 = 1;

     label3:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label4;

        $f1 = $r0[i0];

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        i0 = i0 + 1;

        goto label3;

     label4:
        return $f0;
    }

    public static transient float min(float[])
    {
        int i0, $i1;
        float $f0, $f1;
        float[] $r0;
        boolean z0;

        $r0 := @parameter0: float[];

        i0 = lengthof $r0;

        if i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        $f0 = $r0[0];

        i0 = 1;

     label3:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label4;

        $f1 = $r0[i0];

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        i0 = i0 + 1;

        goto label3;

     label4:
        return $f0;
    }

    public static void reverse(float[])
    {
        int $i0;
        float[] $r0;

        $r0 := @parameter0: float[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Floats: void reverse(float[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void reverse(float[], int, int)
    {
        int $i0, $i1, i2;
        float f0, $f1;
        float[] $r0;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, i2);

        $i1 = $i1 + -1;

     label1:
        if $i0 >= $i1 goto label2;

        f0 = $r0[$i0];

        $f1 = $r0[$i1];

        $r0[$i0] = $f1;

        $r0[$i1] = f0;

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return;
    }

    public static void sortDescending(float[])
    {
        int $i0;
        float[] $r0;

        $r0 := @parameter0: float[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Floats: void sortDescending(float[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sortDescending(float[], int, int)
    {
        int $i0, $i1, $i2;
        float[] $r0;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        staticinvoke <java.util.Arrays: void sort(float[],int,int)>($r0, $i0, $i1);

        staticinvoke <com.google.common.primitives.Floats: void reverse(float[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static com.google.common.base.Converter stringConverter()
    {
        com.google.common.primitives.Floats$FloatConverter r0;

        r0 = <com.google.common.primitives.Floats$FloatConverter: com.google.common.primitives.Floats$FloatConverter INSTANCE>;

        return r0;
    }

    public static float[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection r0;
        float[] r1;
        int i0, i1;
        float $f0;
        java.lang.Object $r4;
        java.lang.Number $r5;
        boolean z0;
        com.google.common.primitives.Floats$FloatArrayAsList r2;

        r0 := @parameter0: java.util.Collection;

        z0 = r0 instanceof com.google.common.primitives.Floats$FloatArrayAsList;

        if z0 == 0 goto label1;

        r2 = (com.google.common.primitives.Floats$FloatArrayAsList) r0;

        r1 = virtualinvoke r2.<com.google.common.primitives.Floats$FloatArrayAsList: float[] toFloatArray()>();

        return r1;

     label1:
        $r3 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof $r3;

        r1 = newarray (float)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = $r3[i1];

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = (java.lang.Number) $r4;

        $f0 = virtualinvoke $r5.<java.lang.Number: float floatValue()>();

        r1[i1] = $f0;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static java.lang.Float tryParse(java.lang.String)
    {
        java.lang.Float $r3;
        java.util.regex.Matcher $r2;
        float $f0;
        java.lang.NumberFormatException $r4;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = <com.google.common.primitives.Doubles: java.util.regex.Pattern FLOATING_POINT_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label4;

     label1:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r0);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        return null;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.Floats: int BYTES> = 4;

        return;
    }
}
