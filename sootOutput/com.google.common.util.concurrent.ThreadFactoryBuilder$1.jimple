class com.google.common.util.concurrent.ThreadFactoryBuilder$1 extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    final java.util.concurrent.ThreadFactory val$backingThreadFactory;
    final java.util.concurrent.atomic.AtomicLong val$count;
    final java.lang.Boolean val$daemon;
    final java.lang.String val$nameFormat;
    final java.lang.Integer val$priority;
    final java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler;

    void <init>(java.util.concurrent.ThreadFactory, java.lang.String, java.util.concurrent.atomic.AtomicLong, java.lang.Boolean, java.lang.Integer, java.lang.Thread$UncaughtExceptionHandler)
    {
        java.util.concurrent.atomic.AtomicLong $r3;
        com.google.common.util.concurrent.ThreadFactoryBuilder$1 r0;
        java.lang.Thread$UncaughtExceptionHandler $r6;
        java.lang.Boolean $r4;
        java.lang.String $r2;
        java.util.concurrent.ThreadFactory $r1;
        java.lang.Integer $r5;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder$1;

        $r1 := @parameter0: java.util.concurrent.ThreadFactory;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.concurrent.atomic.AtomicLong;

        $r4 := @parameter3: java.lang.Boolean;

        $r5 := @parameter4: java.lang.Integer;

        $r6 := @parameter5: java.lang.Thread$UncaughtExceptionHandler;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.ThreadFactory val$backingThreadFactory> = $r1;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.String val$nameFormat> = $r2;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.atomic.AtomicLong val$count> = $r3;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Boolean val$daemon> = $r4;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Integer val$priority> = $r5;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler> = $r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.Object[] $r8;
        long $l0;
        java.lang.Runnable $r1;
        java.lang.Integer $r10;
        java.util.concurrent.atomic.AtomicLong $r5;
        com.google.common.util.concurrent.ThreadFactoryBuilder$1 r0;
        java.lang.Thread$UncaughtExceptionHandler $r11;
        java.lang.Long $r7;
        java.lang.Thread $r3;
        int $i1;
        java.lang.Boolean $r9;
        java.lang.Object $r6;
        java.lang.String $r4;
        java.util.concurrent.ThreadFactory r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder$1;

        $r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.ThreadFactory val$backingThreadFactory>;

        $r3 = interfaceinvoke r2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r1);

        $r4 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.String val$nameFormat>;

        if $r4 == null goto label1;

        $r4 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.String val$nameFormat>;

        $r5 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.atomic.AtomicLong val$count>;

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r5 = (java.util.concurrent.atomic.AtomicLong) $r6;

        $l0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r7;

        $r4 = staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String access$000(java.lang.String,java.lang.Object[])>($r4, $r8);

        virtualinvoke $r3.<java.lang.Thread: void setName(java.lang.String)>($r4);

     label1:
        $r9 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Boolean val$daemon>;

        if $r9 == null goto label2;

        $r9 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Boolean val$daemon>;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r3.<java.lang.Thread: void setDaemon(boolean)>($z0);

     label2:
        $r10 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Integer val$priority>;

        if $r10 == null goto label3;

        $r10 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Integer val$priority>;

        $i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        virtualinvoke $r3.<java.lang.Thread: void setPriority(int)>($i1);

     label3:
        $r11 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler>;

        if $r11 == null goto label4;

        $r11 = r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler>;

        virtualinvoke $r3.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r11);

     label4:
        return $r3;
    }
}
