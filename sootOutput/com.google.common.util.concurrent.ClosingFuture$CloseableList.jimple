final class com.google.common.util.concurrent.ClosingFuture$CloseableList extends java.util.IdentityHashMap implements java.io.Closeable
{
    private volatile boolean closed;
    private final com.google.common.util.concurrent.ClosingFuture$DeferredCloser closer;
    private volatile java.util.concurrent.CountDownLatch whenClosed;

    private void <init>()
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList r0;
        com.google.common.util.concurrent.ClosingFuture$DeferredCloser $r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke r0.<java.util.IdentityHashMap: void <init>()>();

        $r1 = new com.google.common.util.concurrent.ClosingFuture$DeferredCloser;

        specialinvoke $r1.<com.google.common.util.concurrent.ClosingFuture$DeferredCloser: void <init>(com.google.common.util.concurrent.ClosingFuture$CloseableList)>(r0);

        r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: com.google.common.util.concurrent.ClosingFuture$DeferredCloser closer> = $r1;

        return;
    }

    void <init>(com.google.common.util.concurrent.ClosingFuture$1)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList r0;
        com.google.common.util.concurrent.ClosingFuture$1 $r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        $r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$1;

        specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>()>();

        return;
    }

    static com.google.common.util.concurrent.ClosingFuture$DeferredCloser access$300(com.google.common.util.concurrent.ClosingFuture$CloseableList)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r0;
        com.google.common.util.concurrent.ClosingFuture$DeferredCloser r1;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        r1 = $r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: com.google.common.util.concurrent.ClosingFuture$DeferredCloser closer>;

        return r1;
    }

    void add(java.io.Closeable, java.util.concurrent.Executor)
    {
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.ClosingFuture$CloseableList r0;
        java.util.concurrent.Executor $r2;
        java.io.Closeable $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        $r1 := @parameter0: java.io.Closeable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        if $r1 != null goto label1;

        return;

     label1:
        entermonitor r0;

     label2:
        $z0 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: boolean closed>;

        if $z0 != 0 goto label4;

        virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        exitmonitor r0;

     label3:
        return;

     label4:
        exitmonitor r0;

     label5:
        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void access$3300(java.io.Closeable,java.util.concurrent.Executor)>($r1, $r2);

        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    com.google.common.util.concurrent.FluentFuture applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Throwable r8;
        com.google.common.util.concurrent.ClosingFuture$DeferredCloser r4;
        java.util.concurrent.Executor $r7;
        com.google.common.util.concurrent.ClosingFuture$CloseableList r0, r3;
        com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction r1;
        java.lang.Object r2;
        com.google.common.util.concurrent.ClosingFuture $r5;
        com.google.common.util.concurrent.FluentFuture $r6;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction;

        r2 := @parameter1: java.lang.Object;

        r3 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>()>();

     label1:
        r4 = r3.<com.google.common.util.concurrent.ClosingFuture$CloseableList: com.google.common.util.concurrent.ClosingFuture$DeferredCloser closer>;

        $r5 = interfaceinvoke r1.<com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction: com.google.common.util.concurrent.ClosingFuture apply(com.google.common.util.concurrent.ClosingFuture$DeferredCloser,java.lang.Object)>(r4, r2);

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void access$1000(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$CloseableList)>($r5, r3);

        $r6 = staticinvoke <com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture access$000(com.google.common.util.concurrent.ClosingFuture)>($r5);

     label2:
        $r7 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r7);

        return $r6;

     label3:
        r8 := @caughtexception;

        $r7 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r7);

        throw r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    com.google.common.util.concurrent.ListenableFuture applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Throwable $r7;
        com.google.common.util.concurrent.ClosingFuture$DeferredCloser $r4;
        com.google.common.util.concurrent.ListenableFuture $r5;
        java.util.concurrent.Executor $r6;
        com.google.common.util.concurrent.ClosingFuture$CloseableList r0, r3;
        java.lang.Object r2;
        com.google.common.util.concurrent.ClosingFuture$ClosingFunction r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$ClosingFunction;

        r2 := @parameter1: java.lang.Object;

        r3 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>()>();

     label1:
        $r4 = r3.<com.google.common.util.concurrent.ClosingFuture$CloseableList: com.google.common.util.concurrent.ClosingFuture$DeferredCloser closer>;

        r2 = interfaceinvoke r1.<com.google.common.util.concurrent.ClosingFuture$ClosingFunction: java.lang.Object apply(com.google.common.util.concurrent.ClosingFuture$DeferredCloser,java.lang.Object)>($r4, r2);

        $r5 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(r2);

     label2:
        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r6);

        return $r5;

     label3:
        $r7 := @caughtexception;

        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>(r3, $r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void close()
    {
        java.lang.Throwable $r8;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.concurrent.Executor $r6;
        java.util.Set $r1;
        com.google.common.util.concurrent.ClosingFuture$CloseableList r0;
        java.util.concurrent.CountDownLatch $r7;
        java.io.Closeable $r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        $z0 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: boolean closed>;

        if $z0 == 0 goto label01;

        return;

     label01:
        entermonitor r0;

     label02:
        $z0 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: boolean closed>;

        if $z0 == 0 goto label04;

        exitmonitor r0;

     label03:
        return;

     label04:
        r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: boolean closed> = 1;

        exitmonitor r0;

     label05:
        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.io.Closeable) $r3;

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.util.concurrent.Executor) $r3;

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void access$3300(java.io.Closeable,java.util.concurrent.Executor)>($r5, $r6);

        goto label06;

     label07:
        virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void clear()>();

        $r7 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: java.util.concurrent.CountDownLatch whenClosed>;

        if $r7 == null goto label11;

        $r7 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: java.util.concurrent.CountDownLatch whenClosed>;

        virtualinvoke $r7.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r8;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    java.util.concurrent.CountDownLatch whenClosedCountDown()
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.ClosingFuture$CloseableList r0;
        java.util.concurrent.CountDownLatch $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        $z0 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: boolean closed>;

        $z1 = 0;

        if $z0 == 0 goto label1;

        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(0);

        return $r1;

     label1:
        entermonitor r0;

     label2:
        $z0 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: boolean closed>;

        if $z0 == 0 goto label4;

        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(0);

        exitmonitor r0;

     label3:
        return $r1;

     label4:
        $r1 = r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: java.util.concurrent.CountDownLatch whenClosed>;

        if $r1 != null goto label5;

        $z1 = 1;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.google.common.util.concurrent.ClosingFuture$CloseableList: java.util.concurrent.CountDownLatch whenClosed> = $r1;

        exitmonitor r0;

     label6:
        return $r1;

     label7:
        $r2 := @caughtexception;

        exitmonitor r0;

     label8:
        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }
}
