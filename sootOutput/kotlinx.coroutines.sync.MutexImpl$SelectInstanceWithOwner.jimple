final class kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner extends java.lang.Object implements kotlinx.coroutines.selects.SelectInstanceInternal
{
    public final java.lang.Object owner;
    public final kotlinx.coroutines.selects.SelectInstanceInternal select;
    final kotlinx.coroutines.sync.MutexImpl this$0;

    public void <init>(kotlinx.coroutines.sync.MutexImpl, kotlinx.coroutines.selects.SelectInstanceInternal, java.lang.Object)
    {
        kotlinx.coroutines.selects.SelectInstanceInternal $r2;
        kotlinx.coroutines.sync.MutexImpl $r1;
        java.lang.Object $r3;
        kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r2 := @parameter1: kotlinx.coroutines.selects.SelectInstanceInternal;

        $r3 := @parameter2: java.lang.Object;

        r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.sync.MutexImpl this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.selects.SelectInstanceInternal select> = $r2;

        r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: java.lang.Object owner> = $r3;

        return;
    }

    public void disposeOnCompletion(kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.selects.SelectInstanceInternal $r2;
        kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.DisposableHandle;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.selects.SelectInstanceInternal select>;

        interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstanceInternal: void disposeOnCompletion(kotlinx.coroutines.DisposableHandle)>($r1);

        return;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.selects.SelectInstanceInternal $r2;
        kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.selects.SelectInstanceInternal select>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstanceInternal: kotlin.coroutines.CoroutineContext getContext()>();

        return $r1;
    }

    public void invokeOnCancellation(kotlinx.coroutines.internal.Segment, int)
    {
        kotlinx.coroutines.selects.SelectInstanceInternal $r2;
        int $i0;
        kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner r0;
        kotlinx.coroutines.internal.Segment $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.internal.Segment;

        $i0 := @parameter1: int;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.selects.SelectInstanceInternal select>;

        interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstanceInternal: void invokeOnCancellation(kotlinx.coroutines.internal.Segment,int)>($r1, $i0);

        return;
    }

    public void selectInRegistrationPhase(java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        java.lang.AssertionError $r6;
        kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner r0;
        kotlinx.coroutines.selects.SelectInstanceInternal $r7;
        java.lang.Object $r1, $r4;
        kotlinx.coroutines.sync.MutexImpl $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r4 != $r5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $r4 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: java.lang.Object owner>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r7 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.selects.SelectInstanceInternal select>;

        interfaceinvoke $r7.<kotlinx.coroutines.selects.SelectInstanceInternal: void selectInRegistrationPhase(java.lang.Object)>($r1);

        return;
    }

    public boolean trySelect(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        java.lang.AssertionError $r7;
        kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner r0;
        kotlinx.coroutines.selects.SelectInstanceInternal $r8;
        java.lang.Object $r1, $r2, $r5;
        kotlinx.coroutines.sync.MutexImpl $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r5 != $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        $r8 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.selects.SelectInstanceInternal select>;

        $z0 = interfaceinvoke $r8.<kotlinx.coroutines.selects.SelectInstanceInternal: boolean trySelect(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        if $z0 == 0 goto label5;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: java.lang.Object owner>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>($r3, $r1);

     label5:
        return $z0;
    }
}
