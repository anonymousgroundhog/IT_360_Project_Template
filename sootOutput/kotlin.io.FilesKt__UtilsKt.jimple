class kotlin.io.FilesKt__UtilsKt extends kotlin.io.FilesKt__FileTreeWalkKt
{

    public void <init>()
    {
        kotlin.io.FilesKt__UtilsKt r0;

        r0 := @this: kotlin.io.FilesKt__UtilsKt;

        specialinvoke r0.<kotlin.io.FilesKt__FileTreeWalkKt: void <init>()>();

        return;
    }

    public static final boolean copyRecursively(java.io.File, java.io.File, boolean, kotlin.jvm.functions.Function2)
    {
        kotlin.io.FileAlreadyExistsException $r13;
        kotlin.io.NoSuchFileException r3;
        long $l0, $l1;
        kotlin.io.FilesKt__UtilsKt$copyRecursively$2 r7;
        byte $b2;
        java.lang.String $r11;
        boolean $z0, $z1;
        kotlin.io.FileTreeWalk $r6;
        java.util.Iterator $r9;
        java.io.IOException r14;
        kotlin.jvm.functions.Function2 $r2, r8;
        kotlin.io.OnErrorAction r5;
        java.io.File $r0, $r1, r10, r12;
        java.lang.Object $r4;
        kotlin.io.TerminateException r15;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "onError");

        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label02;

        r3 = new kotlin.io.NoSuchFileException;

        specialinvoke r3.<kotlin.io.NoSuchFileException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, null, "The source file doesn\'t exist.", 2, null);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r0, r3);

        r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

        if $r4 == r5 goto label01;

        return 1;

     label01:
        return 0;

     label02:
        $r6 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FileTreeWalk walkTopDown(java.io.File)>($r0);

     label03:
        r7 = new kotlin.io.FilesKt__UtilsKt$copyRecursively$2;

     label04:
        specialinvoke r7.<kotlin.io.FilesKt__UtilsKt$copyRecursively$2: void <init>(kotlin.jvm.functions.Function2)>($r2);

     label05:
        r8 = (kotlin.jvm.functions.Function2) r7;

     label06:
        $r6 = virtualinvoke $r6.<kotlin.io.FileTreeWalk: kotlin.io.FileTreeWalk onFail(kotlin.jvm.functions.Function2)>(r8);

        $r9 = virtualinvoke $r6.<kotlin.io.FileTreeWalk: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label08:
        if $z1 == 0 goto label43;

     label09:
        $r4 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

     label10:
        r10 = (java.io.File) $r4;

     label11:
        $z1 = virtualinvoke r10.<java.io.File: boolean exists()>();

     label12:
        if $z1 != 0 goto label15;

        r3 = new kotlin.io.NoSuchFileException;

     label13:
        specialinvoke r3.<kotlin.io.NoSuchFileException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r10, null, "The source file doesn\'t exist.", 2, null);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r10, r3);

     label14:
        r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

        if $r4 != r5 goto label07;

        return 0;

     label15:
        $r11 = staticinvoke <kotlin.io.FilesKt: java.lang.String toRelativeString(java.io.File,java.io.File)>(r10, $r0);

     label16:
        r12 = new java.io.File;

     label17:
        specialinvoke r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r11);

        $z1 = virtualinvoke r12.<java.io.File: boolean exists()>();

     label18:
        if $z1 == 0 goto label35;

     label19:
        $z1 = virtualinvoke r10.<java.io.File: boolean isDirectory()>();

     label20:
        if $z1 == 0 goto label23;

     label21:
        $z1 = virtualinvoke r12.<java.io.File: boolean isDirectory()>();

     label22:
        if $z1 != 0 goto label35;

     label23:
        if $z0 != 0 goto label24;

        $z1 = 1;

        goto label32;

     label24:
        $z1 = virtualinvoke r12.<java.io.File: boolean isDirectory()>();

     label25:
        if $z1 == 0 goto label29;

     label26:
        $z1 = staticinvoke <kotlin.io.FilesKt: boolean deleteRecursively(java.io.File)>(r12);

     label27:
        if $z1 != 0 goto label28;

        $z1 = 1;

        goto label32;

     label28:
        $z1 = 0;

        goto label32;

     label29:
        $z1 = virtualinvoke r12.<java.io.File: boolean delete()>();

     label30:
        if $z1 != 0 goto label31;

        $z1 = 1;

        goto label32;

     label31:
        $z1 = 0;

     label32:
        if $z1 == 0 goto label35;

        $r13 = new kotlin.io.FileAlreadyExistsException;

     label33:
        specialinvoke $r13.<kotlin.io.FileAlreadyExistsException: void <init>(java.io.File,java.io.File,java.lang.String)>(r10, r12, "The destination file already exists.");

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r12, $r13);

     label34:
        r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

        if $r4 != r5 goto label07;

        return 0;

     label35:
        $z1 = virtualinvoke r10.<java.io.File: boolean isDirectory()>();

     label36:
        if $z1 == 0 goto label39;

     label37:
        virtualinvoke r12.<java.io.File: boolean mkdirs()>();

     label38:
        goto label07;

     label39:
        r12 = staticinvoke <kotlin.io.FilesKt: java.io.File copyTo$default(java.io.File,java.io.File,boolean,int,int,java.lang.Object)>(r10, r12, $z0, 0, 4, null);

        $l0 = virtualinvoke r12.<java.io.File: long length()>();

        $l1 = virtualinvoke r10.<java.io.File: long length()>();

     label40:
        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label07;

        r14 = new java.io.IOException;

     label41:
        specialinvoke r14.<java.io.IOException: void <init>(java.lang.String)>("Source file wasn\'t copied completely, length of destination file differs.");

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r10, r14);

     label42:
        r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

        if $r4 != r5 goto label07;

        return 0;

     label43:
        return 1;

     label44:
        r15 := @caughtexception;

        return 0;

        catch kotlin.io.TerminateException from label02 to label03 with label44;
        catch kotlin.io.TerminateException from label04 to label05 with label44;
        catch kotlin.io.TerminateException from label06 to label08 with label44;
        catch kotlin.io.TerminateException from label09 to label10 with label44;
        catch kotlin.io.TerminateException from label11 to label12 with label44;
        catch kotlin.io.TerminateException from label13 to label14 with label44;
        catch kotlin.io.TerminateException from label15 to label16 with label44;
        catch kotlin.io.TerminateException from label17 to label18 with label44;
        catch kotlin.io.TerminateException from label19 to label20 with label44;
        catch kotlin.io.TerminateException from label21 to label22 with label44;
        catch kotlin.io.TerminateException from label24 to label25 with label44;
        catch kotlin.io.TerminateException from label26 to label27 with label44;
        catch kotlin.io.TerminateException from label29 to label30 with label44;
        catch kotlin.io.TerminateException from label33 to label34 with label44;
        catch kotlin.io.TerminateException from label35 to label36 with label44;
        catch kotlin.io.TerminateException from label37 to label38 with label44;
        catch kotlin.io.TerminateException from label39 to label40 with label44;
        catch kotlin.io.TerminateException from label41 to label42 with label44;
    }

    public static boolean copyRecursively$default(java.io.File, java.io.File, boolean, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        kotlin.jvm.functions.Function2 $r2;
        java.io.File $r0, $r1;
        kotlin.io.FilesKt__UtilsKt$copyRecursively$1 $r4;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: kotlin.jvm.functions.Function2;

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 0;

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $r4 = <kotlin.io.FilesKt__UtilsKt$copyRecursively$1: kotlin.io.FilesKt__UtilsKt$copyRecursively$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function2) $r4;

     label2:
        $z0 = staticinvoke <kotlin.io.FilesKt: boolean copyRecursively(java.io.File,java.io.File,boolean,kotlin.jvm.functions.Function2)>($r1, $r0, $z0, $r2);

        return $z0;
    }

    public static final java.io.File copyTo(java.io.File, java.io.File, boolean, int)
    {
        java.lang.Throwable r11, $r12, r13, $r14;
        kotlin.io.FileAlreadyExistsException $r2;
        kotlin.io.NoSuchFileException $r15;
        int i0;
        boolean z0, $z1;
        java.io.OutputStream $r10;
        kotlin.io.FileSystemException $r3;
        java.io.FileOutputStream $r7;
        java.io.FileInputStream $r5;
        java.io.File $r0, r1, $r4;
        java.io.Closeable $r6, $r8;
        java.io.InputStream $r9;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label18;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label03;

        if z0 == 0 goto label02;

        z0 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if z0 == 0 goto label01;

        goto label03;

     label01:
        $r2 = new kotlin.io.FileAlreadyExistsException;

        specialinvoke $r2.<kotlin.io.FileAlreadyExistsException: void <init>(java.io.File,java.io.File,java.lang.String)>($r0, r1, "Tried to overwrite the destination, but failed to delete it.");

        throw $r2;

     label02:
        $r2 = new kotlin.io.FileAlreadyExistsException;

        specialinvoke $r2.<kotlin.io.FileAlreadyExistsException: void <init>(java.io.File,java.io.File,java.lang.String)>($r0, r1, "The destination file already exists.");

        throw $r2;

     label03:
        z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if z0 == 0 goto label05;

        z0 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if z0 == 0 goto label04;

        return r1;

     label04:
        $r3 = new kotlin.io.FileSystemException;

        specialinvoke $r3.<kotlin.io.FileSystemException: void <init>(java.io.File,java.io.File,java.lang.String)>($r0, r1, "Failed to create target directory.");

        throw $r3;

     label05:
        $r4 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        if $r4 == null goto label06;

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

     label06:
        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r6 = (java.io.Closeable) $r5;

     label07:
        $r5 = (java.io.FileInputStream) $r6;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        $r8 = (java.io.Closeable) $r7;

     label08:
        $r7 = (java.io.FileOutputStream) $r8;

        $r9 = (java.io.InputStream) $r5;

        $r10 = (java.io.OutputStream) $r7;

        staticinvoke <kotlin.io.ByteStreamsKt: long copyTo(java.io.InputStream,java.io.OutputStream,int)>($r9, $r10, i0);

     label09:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r8, null);

     label10:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, null);

        return r1;

     label11:
        r11 := @caughtexception;

     label12:
        throw r11;

     label13:
        $r12 := @caughtexception;

     label14:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r8, r11);

        throw $r12;

     label15:
        r13 := @caughtexception;

     label16:
        throw r13;

     label17:
        $r14 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, r13);

        throw $r14;

     label18:
        $r15 = new kotlin.io.NoSuchFileException;

        specialinvoke $r15.<kotlin.io.NoSuchFileException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, null, "The source file doesn\'t exist.", 2, null);

        throw $r15;

        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

    public static java.io.File copyTo$default(java.io.File, java.io.File, boolean, int, int, java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.io.File $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        $r1 = staticinvoke <kotlin.io.FilesKt: java.io.File copyTo(java.io.File,java.io.File,boolean,int)>($r1, $r0, $z0, $i0);

        return $r1;
    }

    public static final java.io.File createTempDir(java.lang.String, java.lang.String, java.io.File)
    {
        java.io.IOException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r0, $r1;
        java.io.File $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "prefix");

        $r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r0, $r1, $r2);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "dir");

        return $r2;

     label1:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create temporary directory ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r0);

        throw $r3;
    }

    public static java.io.File createTempDir$default(java.lang.String, java.lang.String, java.io.File, int, java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r1, $r2;
        java.io.File $r0;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.io.File;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r1 = "tmp";

     label1:
        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        $r2 = null;

     label2:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label3;

        $r0 = null;

     label3:
        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File createTempDir(java.lang.String,java.lang.String,java.io.File)>($r1, $r2, $r0);

        return $r0;
    }

    public static final java.io.File createTempFile(java.lang.String, java.lang.String, java.io.File)
    {
        java.lang.String $r0, $r1;
        java.io.File $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "prefix");

        $r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r0, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "createTempFile(prefix, suffix, directory)");

        return $r2;
    }

    public static java.io.File createTempFile$default(java.lang.String, java.lang.String, java.io.File, int, java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r1, $r2;
        java.io.File $r0;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.io.File;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r1 = "tmp";

     label1:
        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        $r2 = null;

     label2:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label3;

        $r0 = null;

     label3:
        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r1, $r2, $r0);

        return $r0;
    }

    public static final boolean deleteRecursively(java.io.File)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r2;
        java.lang.Object $r4;
        java.io.File $r0;
        boolean z0, $z1;
        kotlin.io.FileTreeWalk $r1;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FileTreeWalk walkBottomUp(java.io.File)>($r0);

        $r2 = (kotlin.sequences.Sequence) $r1;

        z0 = 1;

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.io.File) $r4;

        $z1 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label2;

        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

     label2:
        if z0 == 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        goto label1;

     label5:
        return z0;
    }

    public static final boolean endsWith(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.util.List $r4, $r5;
        int $i0, $i1;
        kotlin.io.FilePathComponents $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $r3 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $z0 = virtualinvoke $r3.<kotlin.io.FilePathComponents: boolean isRooted()>();

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $z0;

     label1:
        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $i1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        $i0 = $i0 - $i1;

        if $i0 >= 0 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $i1 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $r4 = interfaceinvoke $r4.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public static final boolean endsWith(java.io.File, java.lang.String)
    {
        java.lang.String $r1;
        java.io.File $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $z0 = staticinvoke <kotlin.io.FilesKt: boolean endsWith(java.io.File,java.io.File)>($r0, $r2);

        return $z0;
    }

    public static final java.lang.String getExtension(java.io.File)
    {
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "name");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)>($r1, 46, "");

        return $r1;
    }

    public static final java.lang.String getInvariantSeparatorsPath(java.io.File)
    {
        int $i1;
        char $c0;
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $c0 = <java.io.File: char separatorChar>;

        $i1 = (int) $c0;

        if $i1 == 47 goto label1;

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "path");

        $c0 = <java.io.File: char separatorChar>;

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r1, $c0, 47, 0, 4, null);

        return $r1;

     label1:
        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "path");

        return $r1;
    }

    public static final java.lang.String getNameWithoutExtension(java.io.File)
    {
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "name");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringBeforeLast$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r1, ".", null, 2, null);

        return $r1;
    }

    public static final java.io.File normalize(java.io.File)
    {
        java.util.List $r2;
        java.lang.CharSequence $r5;
        java.lang.String $r4;
        java.io.File $r0;
        kotlin.io.FilePathComponents $r1;
        java.lang.Iterable $r3;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $r0 = virtualinvoke $r1.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r2 = virtualinvoke $r1.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r2 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.util.List normalize$FilesKt__UtilsKt(java.util.List)>($r2);

        $r3 = (java.lang.Iterable) $r2;

        $r4 = <java.io.File: java.lang.String separator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "separator");

        $r5 = (java.lang.CharSequence) $r4;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r3, $r5, null, null, 0, null, null, 62, null);

        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r0, $r4);

        return $r0;
    }

    private static final java.util.List normalize$FilesKt__UtilsKt(java.util.List)
    {
        java.util.Iterator $r2;
        java.io.File r4, $r6;
        java.util.ArrayList $r7;
        java.util.List $r0, r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r5;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r7 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        r1 = (java.util.List) $r7;

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.io.File) $r3;

        $r5 = virtualinvoke r4.<java.io.File: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, ".");

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, "..");

        if $z0 == 0 goto label3;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>(r1);

        $r6 = (java.io.File) $r3;

        $r5 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, "..");

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>($i0);

        goto label1;

     label2:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label1;

     label3:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label1;

     label4:
        return r1;
    }

    private static final kotlin.io.FilePathComponents normalize$FilesKt__UtilsKt(kotlin.io.FilePathComponents)
    {
        java.util.List $r3;
        kotlin.io.FilePathComponents $r0, $r1;
        java.io.File $r2;

        $r0 := @parameter0: kotlin.io.FilePathComponents;

        $r1 = new kotlin.io.FilePathComponents;

        $r2 = virtualinvoke $r0.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r3 = virtualinvoke $r0.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r3 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.util.List normalize$FilesKt__UtilsKt(java.util.List)>($r3);

        specialinvoke $r1.<kotlin.io.FilePathComponents: void <init>(java.io.File,java.util.List)>($r2, $r3);

        return $r1;
    }

    public static final java.io.File relativeTo(java.io.File, java.io.File)
    {
        java.lang.String $r2;
        java.io.File $r0, $r1, $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        $r3 = new java.io.File;

        $r2 = staticinvoke <kotlin.io.FilesKt: java.lang.String toRelativeString(java.io.File,java.io.File)>($r0, $r1);

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r3;
    }

    public static final java.io.File relativeToOrNull(java.io.File, java.io.File)
    {
        java.lang.String $r2;
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        $r2 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File,java.io.File)>($r0, $r1);

        if $r2 == null goto label1;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r0;

     label1:
        return null;
    }

    public static final java.io.File relativeToOrSelf(java.io.File, java.io.File)
    {
        java.lang.String $r2;
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        $r2 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File,java.io.File)>($r0, $r1);

        if $r2 == null goto label1;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

     label1:
        return $r0;
    }

    public static final java.io.File resolve(java.io.File, java.io.File)
    {
        java.lang.CharSequence $r3;
        char $c1;
        java.io.File $r0, $r1;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "relative");

        $z0 = staticinvoke <kotlin.io.FilesKt: boolean isRooted(java.io.File)>($r1);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this.toString()");

        $r3 = (java.lang.CharSequence) $r2;

        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label5;

        $r3 = (java.lang.CharSequence) $r2;

        $c1 = <java.io.File: char separatorChar>;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r3, $c1, 0, 2, null);

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r0 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $c1 = <java.io.File: char separatorChar>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r0;

     label5:
        $r0 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static final java.io.File resolve(java.io.File, java.lang.String)
    {
        java.lang.String $r1;
        java.io.File $r0, $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "relative");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.io.File)>($r0, $r2);

        return $r0;
    }

    public static final java.io.File resolveSibling(java.io.File, java.io.File)
    {
        int $i0;
        java.io.File $r0, $r1, $r3;
        kotlin.io.FilePathComponents $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "relative");

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        if $i0 != 0 goto label1;

        $r3 = new java.io.File;

        $r0 = $r3;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("..");

        goto label2;

     label1:
        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $i0 = $i0 + -1;

        $r0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File subPath(int,int)>(0, $i0);

     label2:
        $r3 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.io.File)>($r3, $r0);

        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.io.File)>($r0, $r1);

        return $r0;
    }

    public static final java.io.File resolveSibling(java.io.File, java.lang.String)
    {
        java.lang.String $r1;
        java.io.File $r0, $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "relative");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File resolveSibling(java.io.File,java.io.File)>($r0, $r2);

        return $r0;
    }

    public static final boolean startsWith(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.util.List $r4, $r5;
        int $i0, $i1;
        kotlin.io.FilePathComponents $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $r3 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $r0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $i1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        if $i0 >= $i1 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $i0 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        $r4 = interfaceinvoke $r4.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        $r5 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public static final boolean startsWith(java.io.File, java.lang.String)
    {
        java.lang.String $r1;
        java.io.File $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $z0 = staticinvoke <kotlin.io.FilesKt: boolean startsWith(java.io.File,java.io.File)>($r0, $r2);

        return $z0;
    }

    public static final java.lang.String toRelativeString(java.io.File, java.io.File)
    {
        java.lang.StringBuilder $r4;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        $r2 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File,java.io.File)>($r0, $r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this and base files have different roots: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    private static final java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File, java.io.File)
    {
        java.lang.Iterable $r8;
        int $i0, $i1, i2, $i3, i4;
        java.lang.String $r7;
        boolean $z0;
        java.lang.CharSequence $r10;
        java.lang.Appendable r9;
        char c5;
        java.io.File $r0, $r1;
        java.util.List $r4;
        java.lang.Object $r5, $r6;
        java.lang.StringBuilder $r11;
        kotlin.io.FilePathComponents $r2, $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $r2 = staticinvoke <kotlin.io.FilesKt__UtilsKt: kotlin.io.FilePathComponents normalize$FilesKt__UtilsKt(kotlin.io.FilePathComponents)>($r2);

        $r3 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $r3 = staticinvoke <kotlin.io.FilesKt__UtilsKt: kotlin.io.FilePathComponents normalize$FilesKt__UtilsKt(kotlin.io.FilePathComponents)>($r3);

        $r0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        $i1 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        i2 = 0;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

     label2:
        if i2 >= $i3 goto label3;

        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label3;

        i2 = i2 + 1;

        goto label2;

     label3:
        $i3 = i2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        i4 = $i0 + -1;

        if i2 > i4 goto label7;

     label4:
        $r4 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        $r0 = (java.io.File) $r5;

        $r7 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, "..");

        if $z0 == 0 goto label5;

        return null;

     label5:
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        if i4 == $i3 goto label6;

        c5 = <java.io.File: char separatorChar>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

     label6:
        if i4 == $i3 goto label7;

        i4 = i4 + -1;

        goto label4;

     label7:
        if $i3 >= $i1 goto label9;

        if $i3 >= $i0 goto label8;

        c5 = <java.io.File: char separatorChar>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

     label8:
        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r8 = (java.lang.Iterable) $r4;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List drop(java.lang.Iterable,int)>($r8, $i3);

        $r8 = (java.lang.Iterable) $r4;

        r9 = (java.lang.Appendable) $r11;

        $r7 = <java.io.File: java.lang.String separator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "separator");

        $r10 = (java.lang.CharSequence) $r7;

        staticinvoke <kotlin.collections.CollectionsKt: java.lang.Appendable joinTo$default(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r8, r9, $r10, null, null, 0, null, null, 124, null);

     label9:
        $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
