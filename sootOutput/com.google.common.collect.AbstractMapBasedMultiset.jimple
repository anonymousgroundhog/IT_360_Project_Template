abstract class com.google.common.collect.AbstractMapBasedMultiset extends com.google.common.collect.AbstractMultiset implements java.io.Serializable
{
    private static final long serialVersionUID;
    transient com.google.common.collect.ObjectCountHashMap backingMap;
    transient long size;

    void <init>(int)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0;
        com.google.common.collect.ObjectCountHashMap $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.AbstractMultiset: void <init>()>();

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap newBackingMap(int)>($i0);

        r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap> = $r1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.google.common.collect.ObjectCountHashMap $r2;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        java.io.ObjectInputStream $r1;
        int $i0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = staticinvoke <com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)>($r1);

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap newBackingMap(int)>(3);

        r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap> = $r2;

        staticinvoke <com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int)>(r0, $r1, $i0);

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        java.io.ObjectOutputStream $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        staticinvoke <com.google.common.collect.Serialization: void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream)>(r0, $r1);

        return;
    }

    public final int add(java.lang.Object, int)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        long $l1, l4;
        byte $b2;
        com.google.common.collect.ObjectCountHashMap r2;
        int $i0, $i3, $i5, $i6;
        java.lang.Object r1;
        boolean $z0, z1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>(r1);

        return $i0;

     label1:
        $z0 = 1;

        if $i0 <= 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>(z1, "occurrences cannot be negative: %s", $i0);

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i3 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int indexOf(java.lang.Object)>(r1);

        if $i3 != -1 goto label4;

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int put(java.lang.Object,int)>(r1, $i0);

        l4 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $l1 = (long) $i0;

        $l1 = l4 + $l1;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l1;

        return 0;

     label4:
        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i5 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int getValue(int)>($i3);

        $l1 = (long) $i5;

        l4 = (long) $i0;

        $l1 = $l1 + l4;

        $b2 = $l1 cmp 2147483647L;

        $i6 = (int) $b2;

        if $i6 > 0 goto label5;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "too many occurrences: %s", $l1);

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i6 = (int) $l1;

        virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: void setValue(int,int)>($i3, $i6);

        $l1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        l4 = (long) $i0;

        $l1 = $l1 + l4;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l1;

        return $i5;
    }

    void addTo(com.google.common.collect.Multiset)
    {
        com.google.common.collect.ObjectCountHashMap r2;
        com.google.common.collect.Multiset r1;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0, $i1;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int firstIndex()>();

     label1:
        if $i0 < 0 goto label2;

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $r3 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: java.lang.Object getKey(int)>($i0);

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i1 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int getValue(int)>($i0);

        interfaceinvoke r1.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r3, $i1);

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int nextIndex(int)>($i0);

        goto label1;

     label2:
        return;
    }

    public final void clear()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        com.google.common.collect.ObjectCountHashMap $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        virtualinvoke $r1.<com.google.common.collect.ObjectCountHashMap: void clear()>();

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = 0L;

        return;
    }

    public final int count(java.lang.Object)
    {
        com.google.common.collect.ObjectCountHashMap $r2;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = virtualinvoke $r2.<com.google.common.collect.ObjectCountHashMap: int get(java.lang.Object)>($r1);

        return $i0;
    }

    final int distinctElements()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0;
        com.google.common.collect.ObjectCountHashMap $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.ObjectCountHashMap: int size()>();

        return $i0;
    }

    final java.util.Iterator elementIterator()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        com.google.common.collect.AbstractMapBasedMultiset$1 $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = new com.google.common.collect.AbstractMapBasedMultiset$1;

        specialinvoke $r1.<com.google.common.collect.AbstractMapBasedMultiset$1: void <init>(com.google.common.collect.AbstractMapBasedMultiset)>(r0);

        return $r1;
    }

    final java.util.Iterator entryIterator()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        com.google.common.collect.AbstractMapBasedMultiset$2 $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = new com.google.common.collect.AbstractMapBasedMultiset$2;

        specialinvoke $r1.<com.google.common.collect.AbstractMapBasedMultiset$2: void <init>(com.google.common.collect.AbstractMapBasedMultiset)>(r0);

        return $r1;
    }

    public final java.util.Iterator iterator()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = staticinvoke <com.google.common.collect.Multisets: java.util.Iterator iteratorImpl(com.google.common.collect.Multiset)>(r0);

        return $r1;
    }

    abstract com.google.common.collect.ObjectCountHashMap newBackingMap(int);

    public final int remove(java.lang.Object, int)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        long $l1, $l5;
        com.google.common.collect.ObjectCountHashMap r2;
        int $i0, $i2, $i3, i4;
        java.lang.Object $r1;
        boolean z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>($r1);

        return $i0;

     label1:
        if $i0 <= 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>(z0, "occurrences cannot be negative: %s", $i0);

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i2 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int indexOf(java.lang.Object)>($r1);

        if $i2 != -1 goto label4;

        return 0;

     label4:
        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i3 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int getValue(int)>($i2);

        if $i3 <= $i0 goto label5;

        i4 = $i0;

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = $i3 - $i0;

        virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: void setValue(int,int)>($i2, $i0);

        goto label6;

     label5:
        i4 = $i3;

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int removeEntry(int)>($i2);

     label6:
        $l5 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $l1 = (long) i4;

        $l1 = $l5 - $l1;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l1;

        return $i3;
    }

    public final int setCount(java.lang.Object, int)
    {
        com.google.common.collect.ObjectCountHashMap r2;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0, $i1;
        java.lang.Object r1;
        long $l2, $l3;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "count");

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $i1 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int put(java.lang.Object,int)>(r1, $i0);

     label2:
        $l2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $i0 = $i0 - $i1;

        $l3 = (long) $i0;

        $l2 = $l2 + $l3;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l2;

        return $i1;
    }

    public final boolean setCount(java.lang.Object, int, int)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        long $l3, $l4;
        com.google.common.collect.ObjectCountHashMap r2;
        int $i0, $i1, $i2, $i5;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "oldCount");

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i1, "newCount");

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i2 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int indexOf(java.lang.Object)>(r1);

        if $i2 != -1 goto label2;

        if $i0 == 0 goto label1;

        return 0;

     label1:
        if $i1 <= 0 goto label5;

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int put(java.lang.Object,int)>(r1, $i1);

        $l3 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $l4 = (long) $i1;

        $l3 = $l3 + $l4;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l3;

        return 1;

     label2:
        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i5 = virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int getValue(int)>($i2);

        if $i5 == $i0 goto label3;

        return 0;

     label3:
        if $i1 != 0 goto label4;

        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: int removeEntry(int)>($i2);

        $l3 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $l4 = (long) $i0;

        $l3 = $l3 - $l4;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l3;

        return 1;

     label4:
        r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        virtualinvoke r2.<com.google.common.collect.ObjectCountHashMap: void setValue(int,int)>($i2, $i1);

        $l3 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $i0 = $i1 - $i0;

        $l4 = (long) $i0;

        $l3 = $l3 + $l4;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l3;

     label5:
        return 1;
    }

    public final int size()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0;
        long $l1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $l1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l1);

        return $i0;
    }
}
