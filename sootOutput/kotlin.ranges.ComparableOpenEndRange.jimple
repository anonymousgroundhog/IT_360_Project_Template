class kotlin.ranges.ComparableOpenEndRange extends java.lang.Object implements kotlin.ranges.OpenEndRange
{
    private final java.lang.Comparable endExclusive;
    private final java.lang.Comparable start;

    public void <init>(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r1, $r2;
        kotlin.ranges.ComparableOpenEndRange r0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "start");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "endExclusive");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable start> = $r1;

        r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable endExclusive> = $r2;

        return;
    }

    public boolean contains(java.lang.Comparable)
    {
        java.lang.Comparable $r1;
        kotlin.ranges.ComparableOpenEndRange r0;
        boolean $z0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        $r1 := @parameter0: java.lang.Comparable;

        $z0 = staticinvoke <kotlin.ranges.OpenEndRange$DefaultImpls: boolean contains(kotlin.ranges.OpenEndRange,java.lang.Comparable)>(r0, $r1);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Comparable $r3, $r4;
        kotlin.ranges.ComparableOpenEndRange r0, $r2;
        boolean $z0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.ComparableOpenEndRange;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.ComparableOpenEndRange) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.ComparableOpenEndRange: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getStart()>();

        $r2 = (kotlin.ranges.ComparableOpenEndRange) $r1;

        $r4 = virtualinvoke $r2.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getStart()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getEndExclusive()>();

        r0 = (kotlin.ranges.ComparableOpenEndRange) $r1;

        $r4 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getEndExclusive()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public java.lang.Comparable getEndExclusive()
    {
        java.lang.Comparable r1;
        kotlin.ranges.ComparableOpenEndRange r0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        r1 = r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable endExclusive>;

        return r1;
    }

    public java.lang.Comparable getStart()
    {
        java.lang.Comparable r1;
        kotlin.ranges.ComparableOpenEndRange r0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        r1 = r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable start>;

        return r1;
    }

    public int hashCode()
    {
        int $i0, $i1;
        java.lang.Comparable $r1;
        kotlin.ranges.ComparableOpenEndRange r0;
        boolean $z0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        $z0 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $r1 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getStart()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 * 31;

        $r1 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getEndExclusive()>();

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.ranges.ComparableOpenEndRange r0;
        boolean $z0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        $z0 = staticinvoke <kotlin.ranges.OpenEndRange$DefaultImpls: boolean isEmpty(kotlin.ranges.OpenEndRange)>(r0);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.Comparable $r2;
        java.lang.String $r3;
        kotlin.ranges.ComparableOpenEndRange r0;

        r0 := @this: kotlin.ranges.ComparableOpenEndRange;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getStart()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..<");

        $r2 = virtualinvoke r0.<kotlin.ranges.ComparableOpenEndRange: java.lang.Comparable getEndExclusive()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
