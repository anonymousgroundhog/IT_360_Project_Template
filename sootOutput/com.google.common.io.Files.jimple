public final class com.google.common.io.Files extends java.lang.Object
{
    private static final com.google.common.graph.SuccessorsFunction FILE_TREE;
    private static final int TEMP_DIR_ATTEMPTS;

    static void <clinit>()
    {
        com.google.common.io.Files$2 $r0;

        <com.google.common.io.Files: int TEMP_DIR_ATTEMPTS> = 10000;

        $r0 = new com.google.common.io.Files$2;

        specialinvoke $r0.<com.google.common.io.Files$2: void <init>()>();

        <com.google.common.io.Files: com.google.common.graph.SuccessorsFunction FILE_TREE> = $r0;

        return;
    }

    private void <init>()
    {
        com.google.common.io.Files r0;

        r0 := @this: com.google.common.io.Files;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.CharSequence $r0;
        java.nio.charset.Charset $r2;
        com.google.common.io.FileWriteMode[] $r5;
        com.google.common.io.FileWriteMode $r3;
        com.google.common.io.CharSink $r4;
        java.io.File $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.nio.charset.Charset;

        $r5 = newarray (com.google.common.io.FileWriteMode)[1];

        $r3 = <com.google.common.io.FileWriteMode: com.google.common.io.FileWriteMode APPEND>;

        $r5[0] = $r3;

        $r4 = staticinvoke <com.google.common.io.Files: com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,com.google.common.io.FileWriteMode[])>($r1, $r2, $r5);

        virtualinvoke $r4.<com.google.common.io.CharSink: void write(java.lang.CharSequence)>($r0);

        return;
    }

    public static transient com.google.common.io.ByteSink asByteSink(java.io.File, com.google.common.io.FileWriteMode[])
    {
        com.google.common.io.FileWriteMode[] $r1;
        java.io.File $r0;
        com.google.common.io.Files$FileByteSink $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: com.google.common.io.FileWriteMode[];

        $r2 = new com.google.common.io.Files$FileByteSink;

        specialinvoke $r2.<com.google.common.io.Files$FileByteSink: void <init>(java.io.File,com.google.common.io.FileWriteMode[],com.google.common.io.Files$1)>($r0, $r1, null);

        return $r2;
    }

    public static com.google.common.io.ByteSource asByteSource(java.io.File)
    {
        com.google.common.io.Files$FileByteSource $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 = new com.google.common.io.Files$FileByteSource;

        specialinvoke $r1.<com.google.common.io.Files$FileByteSource: void <init>(java.io.File,com.google.common.io.Files$1)>($r0, null);

        return $r1;
    }

    public static transient com.google.common.io.CharSink asCharSink(java.io.File, java.nio.charset.Charset, com.google.common.io.FileWriteMode[])
    {
        com.google.common.io.ByteSink $r3;
        java.nio.charset.Charset $r1;
        com.google.common.io.FileWriteMode[] $r2;
        com.google.common.io.CharSink $r4;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: com.google.common.io.FileWriteMode[];

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSink asByteSink(java.io.File,com.google.common.io.FileWriteMode[])>($r0, $r2);

        $r4 = virtualinvoke $r3.<com.google.common.io.ByteSink: com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)>($r1);

        return $r4;
    }

    public static com.google.common.io.CharSource asCharSource(java.io.File, java.nio.charset.Charset)
    {
        java.nio.charset.Charset $r1;
        com.google.common.io.CharSource $r3;
        com.google.common.io.ByteSource $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r0);

        $r3 = virtualinvoke $r2.<com.google.common.io.ByteSource: com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)>($r1);

        return $r3;
    }

    public static void copy(java.io.File, java.io.File) throws java.io.IOException
    {
        com.google.common.io.ByteSink $r4;
        com.google.common.io.FileWriteMode[] $r3;
        com.google.common.io.ByteSource $r2;
        java.io.File $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean equals(java.lang.Object)>($r1);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Source %s and destination %s must be different", $r0, $r1);

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r0);

        $r3 = newarray (com.google.common.io.FileWriteMode)[0];

        $r4 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSink asByteSink(java.io.File,com.google.common.io.FileWriteMode[])>($r1, $r3);

        virtualinvoke $r2.<com.google.common.io.ByteSource: long copyTo(com.google.common.io.ByteSink)>($r4);

        return;
    }

    public static void copy(java.io.File, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        com.google.common.io.ByteSource $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r0);

        virtualinvoke $r2.<com.google.common.io.ByteSource: long copyTo(java.io.OutputStream)>($r1);

        return;
    }

    public static void copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable) throws java.io.IOException
    {
        java.nio.charset.Charset $r1;
        java.lang.Appendable $r2;
        com.google.common.io.CharSource $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.lang.Appendable;

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>($r0, $r1);

        virtualinvoke $r3.<com.google.common.io.CharSource: long copyTo(java.lang.Appendable)>($r2);

        return;
    }

    public static void createParentDirs(java.io.File) throws java.io.IOException
    {
        java.io.IOException $r3;
        java.io.File $r0, $r2;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r2 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        if $r2 != null goto label1;

        return;

     label1:
        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r3 = new java.io.IOException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 39;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create parent directories of ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public static java.io.File createTempDir()
    {
        java.lang.IllegalStateException r5;
        long $l0;
        java.io.File r0, r3;
        int i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 = new java.io.File;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke r0.<java.io.File: void <init>(java.lang.String)>($r2);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(21);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = 0;

     label1:
        if i1 >= 10000 goto label3;

        r3 = new java.io.File;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = $i2 + 11;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r4);

        $z0 = virtualinvoke r3.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r5 = new java.lang.IllegalStateException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        i1 = i1 + 66;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        i1 = i1 + $i2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create directory within 10000 attempts (tried ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 to ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(9999);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw r5;
    }

    public static boolean equal(java.io.File, java.io.File) throws java.io.IOException
    {
        long $l0, $l1;
        java.io.File $r0, $r1;
        byte $b2;
        com.google.common.io.ByteSource $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        if $r0 == $r1 goto label3;

        $z0 = virtualinvoke $r0.<java.io.File: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label2;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

        return 0;

     label2:
        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r0);

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r1);

        $z0 = virtualinvoke $r2.<com.google.common.io.ByteSource: boolean contentEquals(com.google.common.io.ByteSource)>($r3);

        return $z0;

     label3:
        return 1;
    }

    public static com.google.common.graph.Traverser fileTraverser()
    {
        com.google.common.graph.SuccessorsFunction $r1;
        com.google.common.graph.Traverser $r0;

        $r1 = <com.google.common.io.Files: com.google.common.graph.SuccessorsFunction FILE_TREE>;

        $r0 = staticinvoke <com.google.common.graph.Traverser: com.google.common.graph.Traverser forTree(com.google.common.graph.SuccessorsFunction)>($r1);

        return $r0;
    }

    public static java.lang.String getFileExtension(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        java.io.File $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 != -1 goto label1;

        return "";

     label1:
        $i0 = $i0 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r0;
    }

    public static java.lang.String getNameWithoutExtension(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        java.io.File $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 != -1 goto label1;

        return $r0;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;
    }

    public static com.google.common.hash.HashCode hash(java.io.File, com.google.common.hash.HashFunction) throws java.io.IOException
    {
        com.google.common.hash.HashCode $r3;
        com.google.common.hash.HashFunction $r1;
        com.google.common.io.ByteSource $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: com.google.common.hash.HashFunction;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r0);

        $r3 = virtualinvoke $r2.<com.google.common.io.ByteSource: com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction)>($r1);

        return $r3;
    }

    public static com.google.common.base.Predicate isDirectory()
    {
        com.google.common.io.Files$FilePredicate r0;

        r0 = <com.google.common.io.Files$FilePredicate: com.google.common.io.Files$FilePredicate IS_DIRECTORY>;

        return r0;
    }

    public static com.google.common.base.Predicate isFile()
    {
        com.google.common.io.Files$FilePredicate r0;

        r0 = <com.google.common.io.Files$FilePredicate: com.google.common.io.Files$FilePredicate IS_FILE>;

        return r0;
    }

    public static java.nio.MappedByteBuffer map(java.io.File) throws java.io.IOException
    {
        java.nio.channels.FileChannel$MapMode $r2;
        java.io.File $r0;
        java.nio.MappedByteBuffer $r1;

        $r0 := @parameter0: java.io.File;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r1 = staticinvoke <com.google.common.io.Files: java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode)>($r0, $r2);

        return $r1;
    }

    public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode) throws java.io.IOException
    {
        java.nio.channels.FileChannel$MapMode $r1;
        java.io.File $r0;
        java.nio.MappedByteBuffer $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.channels.FileChannel$MapMode;

        $r2 = staticinvoke <com.google.common.io.Files: java.nio.MappedByteBuffer mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)>($r0, $r1, -1L);

        return $r2;
    }

    public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.IOException
    {
        byte $b1;
        int $i2;
        long $l0;
        java.nio.channels.FileChannel$MapMode $r1;
        java.io.File $r0;
        java.nio.MappedByteBuffer $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.channels.FileChannel$MapMode;

        $l0 := @parameter2: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "size (%s) may not be negative", $l0);

        $r2 = staticinvoke <com.google.common.io.Files: java.nio.MappedByteBuffer mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)>($r0, $r1, $l0);

        return $r2;
    }

    private static java.nio.MappedByteBuffer mapInternal(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.IOException
    {
        java.lang.Throwable r9, r11;
        java.io.RandomAccessFile r3;
        long l0;
        java.lang.RuntimeException $r10;
        java.nio.channels.FileChannel$MapMode r1, $r4;
        java.io.File r0;
        byte $b1;
        com.google.common.io.Closer $r2;
        java.io.Closeable $r6;
        java.lang.String $r5;
        java.nio.channels.FileChannel $r7;
        java.nio.MappedByteBuffer $r8;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.channels.FileChannel$MapMode;

        l0 := @parameter2: long;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label01:
        r3 = new java.io.RandomAccessFile;

        $r4 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

     label02:
        if r1 != $r4 goto label03;

        $r5 = "r";

        goto label04;

     label03:
        $r5 = "rw";

     label04:
        specialinvoke r3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, $r5);

        $r6 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>(r3);

        r3 = (java.io.RandomAccessFile) $r6;

        $r7 = virtualinvoke r3.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        $r6 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r7);

        $r7 = (java.nio.channels.FileChannel) $r6;

     label05:
        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label08;

     label06:
        l0 = virtualinvoke $r7.<java.nio.channels.FileChannel: long size()>();

     label07:
        goto label08;

     label08:
        $r8 = virtualinvoke $r7.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>(r1, 0L, l0);

     label09:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        return $r8;

     label10:
        r9 := @caughtexception;

     label11:
        $r10 = virtualinvoke $r2.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>(r9);

        throw $r10;

     label12:
        r11 := @caughtexception;

        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        throw r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public static void move(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.IOException $r2;
        java.io.File $r0, $r1;
        int $i0;
        java.lang.StringBuilder $r5;
        java.lang.String $r3, $r4;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean equals(java.lang.Object)>($r1);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Source %s and destination %s must be different", $r0, $r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label2;

        staticinvoke <com.google.common.io.Files: void copy(java.io.File,java.io.File)>($r0, $r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 17;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r2 = new java.io.IOException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 17;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        return;
    }

    public static java.io.BufferedReader newReader(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException
    {
        java.nio.charset.Charset $r1;
        java.io.BufferedReader $r2;
        java.io.FileInputStream $r4;
        java.io.InputStreamReader $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r4, $r1);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        return $r2;
    }

    public static java.io.BufferedWriter newWriter(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException
    {
        java.nio.charset.Charset $r1;
        java.io.BufferedWriter $r2;
        java.io.OutputStreamWriter $r3;
        java.io.FileOutputStream $r4;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new java.io.BufferedWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r1);

        specialinvoke $r2.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3);

        return $r2;
    }

    public static java.lang.Object readBytes(java.io.File, com.google.common.io.ByteProcessor) throws java.io.IOException
    {
        com.google.common.io.ByteProcessor r1;
        java.lang.Object $r3;
        com.google.common.io.ByteSource $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: com.google.common.io.ByteProcessor;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r0);

        $r3 = virtualinvoke $r2.<com.google.common.io.ByteSource: java.lang.Object read(com.google.common.io.ByteProcessor)>(r1);

        return $r3;
    }

    public static java.lang.String readFirstLine(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.charset.Charset $r1;
        com.google.common.io.CharSource $r2;
        java.lang.String $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>($r0, $r1);

        $r3 = virtualinvoke $r2.<com.google.common.io.CharSource: java.lang.String readFirstLine()>();

        return $r3;
    }

    public static java.lang.Object readLines(java.io.File, java.nio.charset.Charset, com.google.common.io.LineProcessor) throws java.io.IOException
    {
        com.google.common.io.LineProcessor r2;
        java.nio.charset.Charset $r1;
        java.lang.Object $r4;
        com.google.common.io.CharSource $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: com.google.common.io.LineProcessor;

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>($r0, $r1);

        $r4 = virtualinvoke $r3.<com.google.common.io.CharSource: java.lang.Object readLines(com.google.common.io.LineProcessor)>(r2);

        return $r4;
    }

    public static java.util.List readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.util.List $r5;
        java.nio.charset.Charset $r1;
        java.lang.Object $r4;
        com.google.common.io.Files$1 $r2;
        com.google.common.io.CharSource $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>($r0, $r1);

        $r2 = new com.google.common.io.Files$1;

        specialinvoke $r2.<com.google.common.io.Files$1: void <init>()>();

        $r4 = virtualinvoke $r3.<com.google.common.io.CharSource: java.lang.Object readLines(com.google.common.io.LineProcessor)>($r2);

        $r5 = (java.util.List) $r4;

        return $r5;
    }

    public static java.lang.String simplifyPath(java.lang.String)
    {
        java.util.Iterator $r3;
        char $c2;
        java.lang.Iterable $r2;
        java.util.ArrayList $r8;
        byte $b1;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r0, r5, $r7;
        com.google.common.base.Splitter $r1;
        boolean $z0;
        com.google.common.base.Joiner $r6;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return ".";

     label01:
        $r1 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(47);

        $r1 = virtualinvoke $r1.<com.google.common.base.Splitter: com.google.common.base.Splitter omitEmptyStrings()>();

        $r2 = virtualinvoke $r1.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r0);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        $b1 = 0;

        if $z0 == 0 goto label12;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $i0 = virtualinvoke r5.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 46: goto label05;
            case 1472: goto label04;
            default: goto label03;
        };

     label03:
        goto label06;

     label04:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("..");

        if $z0 == 0 goto label03;

        $b1 = 1;

        goto label07;

     label05:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z0 == 0 goto label03;

        goto label07;

     label06:
        $b1 = -1;

     label07:
        lookupswitch($b1)
        {
            case 0: goto label11;
            case 1: goto label09;
            default: goto label08;
        };

     label08:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label02;

     label09:
        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 <= 0 goto label10;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i0 = $i0 - 1;

        $r4 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i0);

        r5 = (java.lang.String) $r4;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("..");

        if $z0 != 0 goto label10;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i0 = $i0 - 1;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>($i0);

        goto label02;

     label10:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>("..");

        goto label02;

     label11:
        goto label02;

     label12:
        $r6 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(47);

        $r7 = virtualinvoke $r6.<com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>($r8);

        r5 = $r7;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i0 = (int) $c2;

        if $i0 != 47 goto label15;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        r5 = "/";

        if $i0 == 0 goto label13;

        $r0 = virtualinvoke r5.<java.lang.String: java.lang.String concat(java.lang.String)>($r0);

        goto label14;

     label13:
        r5 = new java.lang.String;

        $r0 = r5;

        specialinvoke r5.<java.lang.String: void <init>(java.lang.String)>("/");

     label14:
        r5 = $r0;

     label15:
        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/../");

        if $z0 == 0 goto label16;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(3);

        goto label15;

     label16:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("/..");

        if $z0 == 0 goto label17;

        return "/";

     label17:
        $r0 = "";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label18;

        return ".";

     label18:
        return r5;
    }

    public static byte[] toByteArray(java.io.File) throws java.io.IOException
    {
        byte[] $r2;
        com.google.common.io.ByteSource $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSource asByteSource(java.io.File)>($r0);

        $r2 = virtualinvoke $r1.<com.google.common.io.ByteSource: byte[] read()>();

        return $r2;
    }

    public static java.lang.String toString(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.charset.Charset $r1;
        com.google.common.io.CharSource $r2;
        java.lang.String $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>($r0, $r1);

        $r3 = virtualinvoke $r2.<com.google.common.io.CharSource: java.lang.String read()>();

        return $r3;
    }

    public static void touch(java.io.File) throws java.io.IOException
    {
        long $l0;
        java.io.IOException $r2;
        java.io.File $r0;
        int $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r4;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = virtualinvoke $r0.<java.io.File: boolean createNewFile()>();

        if $z0 != 0 goto label2;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = virtualinvoke $r0.<java.io.File: boolean setLastModified(long)>($l0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.io.IOException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = $i1 + 38;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update modification time of ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        return;
    }

    public static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.CharSequence $r0;
        java.nio.charset.Charset $r2;
        com.google.common.io.FileWriteMode[] $r4;
        com.google.common.io.CharSink $r3;
        java.io.File $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.nio.charset.Charset;

        $r4 = newarray (com.google.common.io.FileWriteMode)[0];

        $r3 = staticinvoke <com.google.common.io.Files: com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,com.google.common.io.FileWriteMode[])>($r1, $r2, $r4);

        virtualinvoke $r3.<com.google.common.io.CharSink: void write(java.lang.CharSequence)>($r0);

        return;
    }

    public static void write(byte[], java.io.File) throws java.io.IOException
    {
        com.google.common.io.ByteSink $r2;
        byte[] $r0;
        com.google.common.io.FileWriteMode[] $r3;
        java.io.File $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.File;

        $r3 = newarray (com.google.common.io.FileWriteMode)[0];

        $r2 = staticinvoke <com.google.common.io.Files: com.google.common.io.ByteSink asByteSink(java.io.File,com.google.common.io.FileWriteMode[])>($r1, $r3);

        virtualinvoke $r2.<com.google.common.io.ByteSink: void write(byte[])>($r0);

        return;
    }
}
