final class kotlin.text.MatcherMatchResult extends java.lang.Object implements kotlin.text.MatchResult
{
    private java.util.List groupValues_;
    private final kotlin.text.MatchGroupCollection groups;
    private final java.lang.CharSequence input;
    private final java.util.regex.Matcher matcher;

    public void <init>(java.util.regex.Matcher, java.lang.CharSequence)
    {
        kotlin.text.MatchGroupCollection $r4;
        java.util.regex.Matcher $r1;
        java.lang.CharSequence $r2;
        kotlin.text.MatcherMatchResult$groups$1 $r3;
        kotlin.text.MatcherMatchResult r0;

        r0 := @this: kotlin.text.MatcherMatchResult;

        $r1 := @parameter0: java.util.regex.Matcher;

        $r2 := @parameter1: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "matcher");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "input");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.text.MatcherMatchResult: java.util.regex.Matcher matcher> = $r1;

        r0.<kotlin.text.MatcherMatchResult: java.lang.CharSequence input> = $r2;

        $r3 = new kotlin.text.MatcherMatchResult$groups$1;

        specialinvoke $r3.<kotlin.text.MatcherMatchResult$groups$1: void <init>(kotlin.text.MatcherMatchResult)>(r0);

        $r4 = (kotlin.text.MatchGroupCollection) $r3;

        r0.<kotlin.text.MatcherMatchResult: kotlin.text.MatchGroupCollection groups> = $r4;

        return;
    }

    public static final java.util.regex.MatchResult access$getMatchResult(kotlin.text.MatcherMatchResult)
    {
        java.util.regex.MatchResult $r1;
        kotlin.text.MatcherMatchResult $r0;

        $r0 := @parameter0: kotlin.text.MatcherMatchResult;

        $r1 = specialinvoke $r0.<kotlin.text.MatcherMatchResult: java.util.regex.MatchResult getMatchResult()>();

        return $r1;
    }

    private final java.util.regex.MatchResult getMatchResult()
    {
        java.util.regex.MatchResult $r2;
        kotlin.text.MatcherMatchResult r0;
        java.util.regex.Matcher $r1;

        r0 := @this: kotlin.text.MatcherMatchResult;

        $r1 = r0.<kotlin.text.MatcherMatchResult: java.util.regex.Matcher matcher>;

        $r2 = (java.util.regex.MatchResult) $r1;

        return $r2;
    }

    public kotlin.text.MatchResult$Destructured getDestructured()
    {
        kotlin.text.MatcherMatchResult r0;
        kotlin.text.MatchResult$Destructured $r1;

        r0 := @this: kotlin.text.MatcherMatchResult;

        $r1 = staticinvoke <kotlin.text.MatchResult$DefaultImpls: kotlin.text.MatchResult$Destructured getDestructured(kotlin.text.MatchResult)>(r0);

        return $r1;
    }

    public java.util.List getGroupValues()
    {
        kotlin.text.MatcherMatchResult r0;
        java.util.List $r1;
        kotlin.text.MatcherMatchResult$groupValues$1 $r2;

        r0 := @this: kotlin.text.MatcherMatchResult;

        $r1 = r0.<kotlin.text.MatcherMatchResult: java.util.List groupValues_>;

        if $r1 != null goto label1;

        $r2 = new kotlin.text.MatcherMatchResult$groupValues$1;

        specialinvoke $r2.<kotlin.text.MatcherMatchResult$groupValues$1: void <init>(kotlin.text.MatcherMatchResult)>(r0);

        $r1 = (java.util.List) $r2;

        r0.<kotlin.text.MatcherMatchResult: java.util.List groupValues_> = $r1;

     label1:
        $r1 = r0.<kotlin.text.MatcherMatchResult: java.util.List groupValues_>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public kotlin.text.MatchGroupCollection getGroups()
    {
        kotlin.text.MatchGroupCollection r1;
        kotlin.text.MatcherMatchResult r0;

        r0 := @this: kotlin.text.MatcherMatchResult;

        r1 = r0.<kotlin.text.MatcherMatchResult: kotlin.text.MatchGroupCollection groups>;

        return r1;
    }

    public kotlin.ranges.IntRange getRange()
    {
        java.util.regex.MatchResult $r1;
        kotlin.text.MatcherMatchResult r0;
        kotlin.ranges.IntRange $r2;

        r0 := @this: kotlin.text.MatcherMatchResult;

        $r1 = specialinvoke r0.<kotlin.text.MatcherMatchResult: java.util.regex.MatchResult getMatchResult()>();

        $r2 = staticinvoke <kotlin.text.RegexKt: kotlin.ranges.IntRange access$range(java.util.regex.MatchResult)>($r1);

        return $r2;
    }

    public java.lang.String getValue()
    {
        java.util.regex.MatchResult $r1;
        kotlin.text.MatcherMatchResult r0;
        java.lang.String $r2;

        r0 := @this: kotlin.text.MatcherMatchResult;

        $r1 = specialinvoke r0.<kotlin.text.MatcherMatchResult: java.util.regex.MatchResult getMatchResult()>();

        $r2 = interfaceinvoke $r1.<java.util.regex.MatchResult: java.lang.String group()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "matchResult.group()");

        return $r2;
    }

    public kotlin.text.MatchResult next()
    {
        java.lang.CharSequence $r2;
        java.util.regex.MatchResult $r1;
        kotlin.text.MatcherMatchResult r0;
        java.util.regex.Matcher $r3;
        kotlin.text.MatchResult $r5;
        int $i0, $i1, $i2;
        java.util.regex.Pattern $r4;
        boolean $z0;

        r0 := @this: kotlin.text.MatcherMatchResult;

        $r1 = specialinvoke r0.<kotlin.text.MatcherMatchResult: java.util.regex.MatchResult getMatchResult()>();

        $i0 = interfaceinvoke $r1.<java.util.regex.MatchResult: int end()>();

        $r1 = specialinvoke r0.<kotlin.text.MatcherMatchResult: java.util.regex.MatchResult getMatchResult()>();

        $i1 = interfaceinvoke $r1.<java.util.regex.MatchResult: int end()>();

        $r1 = specialinvoke r0.<kotlin.text.MatcherMatchResult: java.util.regex.MatchResult getMatchResult()>();

        $i2 = interfaceinvoke $r1.<java.util.regex.MatchResult: int start()>();

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = $i0 + $z0;

        $r2 = r0.<kotlin.text.MatcherMatchResult: java.lang.CharSequence input>;

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i0 > $i1 goto label3;

        $r3 = r0.<kotlin.text.MatcherMatchResult: java.util.regex.Matcher matcher>;

        $r4 = virtualinvoke $r3.<java.util.regex.Matcher: java.util.regex.Pattern pattern()>();

        $r2 = r0.<kotlin.text.MatcherMatchResult: java.lang.CharSequence input>;

        $r3 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "matcher.pattern().matcher(input)");

        $r2 = r0.<kotlin.text.MatcherMatchResult: java.lang.CharSequence input>;

        $r5 = staticinvoke <kotlin.text.RegexKt: kotlin.text.MatchResult access$findNext(java.util.regex.Matcher,int,java.lang.CharSequence)>($r3, $i0, $r2);

        return $r5;

     label3:
        return null;
    }
}
