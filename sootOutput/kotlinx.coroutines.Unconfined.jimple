public final class kotlinx.coroutines.Unconfined extends kotlinx.coroutines.CoroutineDispatcher
{
    public static final kotlinx.coroutines.Unconfined INSTANCE;

    static void <clinit>()
    {
        kotlinx.coroutines.Unconfined $r0;

        $r0 = new kotlinx.coroutines.Unconfined;

        specialinvoke $r0.<kotlinx.coroutines.Unconfined: void <init>()>();

        <kotlinx.coroutines.Unconfined: kotlinx.coroutines.Unconfined INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.Unconfined r0;

        r0 := @this: kotlinx.coroutines.Unconfined;

        specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: void <init>()>();

        return;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        java.lang.UnsupportedOperationException $r7;
        kotlinx.coroutines.Unconfined r0;
        kotlin.coroutines.CoroutineContext$Element $r3;
        kotlinx.coroutines.YieldContext$Key r4;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;
        kotlinx.coroutines.YieldContext r6;
        kotlin.coroutines.CoroutineContext$Key r5;

        r0 := @this: kotlinx.coroutines.Unconfined;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        r4 = <kotlinx.coroutines.YieldContext: kotlinx.coroutines.YieldContext$Key Key>;

        r5 = (kotlin.coroutines.CoroutineContext$Key) r4;

        $r3 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r5);

        r6 = (kotlinx.coroutines.YieldContext) $r3;

        if r6 == null goto label1;

        r6.<kotlinx.coroutines.YieldContext: boolean dispatcherWasUnconfined> = 1;

        return;

     label1:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls.");

        throw $r7;
    }

    public boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.Unconfined r0;

        r0 := @this: kotlinx.coroutines.Unconfined;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        return 0;
    }

    public kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)
    {
        int $i0;
        java.lang.UnsupportedOperationException $r1;
        kotlinx.coroutines.Unconfined r0;

        r0 := @this: kotlinx.coroutines.Unconfined;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("limitedParallelism is not supported for Dispatchers.Unconfined");

        throw $r1;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.Unconfined r0;

        r0 := @this: kotlinx.coroutines.Unconfined;

        return "Dispatchers.Unconfined";
    }
}
