public final enum class org.checkerframework.framework.qual.LiteralKind extends java.lang.Enum
{
    private static final org.checkerframework.framework.qual.LiteralKind[] $VALUES;
    public static final enum org.checkerframework.framework.qual.LiteralKind ALL;
    public static final enum org.checkerframework.framework.qual.LiteralKind BOOLEAN;
    public static final enum org.checkerframework.framework.qual.LiteralKind CHAR;
    public static final enum org.checkerframework.framework.qual.LiteralKind DOUBLE;
    public static final enum org.checkerframework.framework.qual.LiteralKind FLOAT;
    public static final enum org.checkerframework.framework.qual.LiteralKind INT;
    public static final enum org.checkerframework.framework.qual.LiteralKind LONG;
    public static final enum org.checkerframework.framework.qual.LiteralKind NULL;
    public static final enum org.checkerframework.framework.qual.LiteralKind PRIMITIVE;
    public static final enum org.checkerframework.framework.qual.LiteralKind STRING;

    static void <clinit>()
    {
        org.checkerframework.framework.qual.LiteralKind $r0;
        org.checkerframework.framework.qual.LiteralKind[] $r1;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("NULL", 0);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind NULL> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("INT", 1);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind INT> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("LONG", 2);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind LONG> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("FLOAT", 3);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind FLOAT> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("DOUBLE", 4);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind DOUBLE> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("BOOLEAN", 5);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind BOOLEAN> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("CHAR", 6);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind CHAR> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("STRING", 7);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind STRING> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("ALL", 8);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind ALL> = $r0;

        $r0 = new org.checkerframework.framework.qual.LiteralKind;

        specialinvoke $r0.<org.checkerframework.framework.qual.LiteralKind: void <init>(java.lang.String,int)>("PRIMITIVE", 9);

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind PRIMITIVE> = $r0;

        $r1 = newarray (org.checkerframework.framework.qual.LiteralKind)[10];

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind NULL>;

        $r1[0] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind INT>;

        $r1[1] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind LONG>;

        $r1[2] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind FLOAT>;

        $r1[3] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind DOUBLE>;

        $r1[4] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind BOOLEAN>;

        $r1[5] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind CHAR>;

        $r1[6] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind STRING>;

        $r1[7] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind ALL>;

        $r1[8] = $r0;

        $r0 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind PRIMITIVE>;

        $r1[9] = $r0;

        <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind[] $VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int $i0;
        org.checkerframework.framework.qual.LiteralKind r0;
        java.lang.String $r1;

        r0 := @this: org.checkerframework.framework.qual.LiteralKind;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static java.util.List allLiteralKinds()
    {
        org.checkerframework.framework.qual.LiteralKind $r3;
        java.util.List $r2;
        org.checkerframework.framework.qual.LiteralKind[] $r1;
        java.util.ArrayList r0;

        r0 = new java.util.ArrayList;

        $r1 = staticinvoke <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind[] values()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind ALL>;

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>($r3);

        $r3 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind PRIMITIVE>;

        interfaceinvoke r0.<java.util.List: boolean remove(java.lang.Object)>($r3);

        return r0;
    }

    public static java.util.List primitiveLiteralKinds()
    {
        org.checkerframework.framework.qual.LiteralKind $r2;
        java.util.List $r0;
        org.checkerframework.framework.qual.LiteralKind[] $r1;

        $r1 = newarray (org.checkerframework.framework.qual.LiteralKind)[6];

        $r2 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind INT>;

        $r1[0] = $r2;

        $r2 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind LONG>;

        $r1[1] = $r2;

        $r2 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind FLOAT>;

        $r1[2] = $r2;

        $r2 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind DOUBLE>;

        $r1[3] = $r2;

        $r2 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind BOOLEAN>;

        $r1[4] = $r2;

        $r2 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind CHAR>;

        $r1[5] = $r2;

        $r0 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r0;
    }

    public static org.checkerframework.framework.qual.LiteralKind valueOf(java.lang.String)
    {
        org.checkerframework.framework.qual.LiteralKind $r2;
        java.lang.String $r0;
        java.lang.Enum $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/checkerframework/framework/qual/LiteralKind;", $r0);

        $r2 = (org.checkerframework.framework.qual.LiteralKind) $r1;

        return $r2;
    }

    public static org.checkerframework.framework.qual.LiteralKind[] values()
    {
        java.lang.Object $r0;
        org.checkerframework.framework.qual.LiteralKind[] $r1;

        $r1 = <org.checkerframework.framework.qual.LiteralKind: org.checkerframework.framework.qual.LiteralKind[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.checkerframework.framework.qual.LiteralKind[]) $r0;

        return $r1;
    }
}
