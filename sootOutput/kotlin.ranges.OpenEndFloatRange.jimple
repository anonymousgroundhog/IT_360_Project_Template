final class kotlin.ranges.OpenEndFloatRange extends java.lang.Object implements kotlin.ranges.OpenEndRange
{
    private final float _endExclusive;
    private final float _start;

    public void <init>(float, float)
    {
        kotlin.ranges.OpenEndFloatRange r0;
        float $f0, $f1;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.ranges.OpenEndFloatRange: float _start> = $f0;

        r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive> = $f1;

        return;
    }

    private final boolean lessThanOrEquals(float, float)
    {
        byte $b0;
        kotlin.ranges.OpenEndFloatRange r0;
        int $i1;
        float $f0, $f1;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean contains(float)
    {
        byte $b0;
        kotlin.ranges.OpenEndFloatRange r0;
        int $i1;
        float $f0, $f1;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $f0 := @parameter0: float;

        $f1 = r0.<kotlin.ranges.OpenEndFloatRange: float _start>;

        $b0 = $f0 cmpl $f1;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        $f1 = r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive>;

        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean contains(java.lang.Comparable)
    {
        kotlin.ranges.OpenEndFloatRange r0;
        float $f0;
        java.lang.Comparable $r1;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Number) $r1;

        $f0 = virtualinvoke $r2.<java.lang.Number: float floatValue()>();

        $z0 = virtualinvoke r0.<kotlin.ranges.OpenEndFloatRange: boolean contains(float)>($f0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b0;
        kotlin.ranges.OpenEndFloatRange r0, $r2;
        float $f0, $f1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.OpenEndFloatRange;

        if $z0 == 0 goto label7;

        $z0 = virtualinvoke r0.<kotlin.ranges.OpenEndFloatRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.OpenEndFloatRange) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.OpenEndFloatRange: boolean isEmpty()>();

        if $z0 != 0 goto label6;

     label1:
        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _start>;

        $r2 = (kotlin.ranges.OpenEndFloatRange) $r1;

        $f1 = $r2.<kotlin.ranges.OpenEndFloatRange: float _start>;

        $b0 = $f0 cmpg $f1;

        if $b0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label7;

        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive>;

        r0 = (kotlin.ranges.OpenEndFloatRange) $r1;

        $f1 = r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive>;

        $b0 = $f0 cmpg $f1;

        if $b0 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label7;

     label6:
        return 1;

     label7:
        return 0;
    }

    public volatile java.lang.Comparable getEndExclusive()
    {
        kotlin.ranges.OpenEndFloatRange r0;
        java.lang.Float $r1;
        java.lang.Comparable $r2;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.OpenEndFloatRange: java.lang.Float getEndExclusive()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Float getEndExclusive()
    {
        kotlin.ranges.OpenEndFloatRange r0;
        java.lang.Float $r1;
        float $f0;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive>;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public volatile java.lang.Comparable getStart()
    {
        kotlin.ranges.OpenEndFloatRange r0;
        java.lang.Float $r1;
        java.lang.Comparable $r2;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.OpenEndFloatRange: java.lang.Float getStart()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Float getStart()
    {
        kotlin.ranges.OpenEndFloatRange r0;
        java.lang.Float $r1;
        float $f0;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _start>;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public int hashCode()
    {
        kotlin.ranges.OpenEndFloatRange r0;
        int $i0, $i1;
        float $f0;
        boolean $z0;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $z0 = virtualinvoke r0.<kotlin.ranges.OpenEndFloatRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _start>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i0 = $i0 * 31;

        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive>;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isEmpty()
    {
        byte $b0;
        kotlin.ranges.OpenEndFloatRange r0;
        int $i1;
        float $f0, $f1;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $f1 = r0.<kotlin.ranges.OpenEndFloatRange: float _start>;

        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive>;

        $b0 = $f1 cmpg $f0;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        kotlin.ranges.OpenEndFloatRange r0;
        float $f0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: kotlin.ranges.OpenEndFloatRange;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _start>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..<");

        $f0 = r0.<kotlin.ranges.OpenEndFloatRange: float _endExclusive>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
