final class com.google.common.graph.DirectedMultiNetworkConnections extends com.google.common.graph.AbstractDirectedNetworkConnections
{
    private transient java.lang.ref.Reference predecessorsReference;
    private transient java.lang.ref.Reference successorsReference;

    private void <init>(java.util.Map, java.util.Map, int)
    {
        java.util.Map r1, r2;
        int $i0;
        com.google.common.graph.DirectedMultiNetworkConnections r0;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        $i0 := @parameter2: int;

        specialinvoke r0.<com.google.common.graph.AbstractDirectedNetworkConnections: void <init>(java.util.Map,java.util.Map,int)>(r1, r2, $i0);

        return;
    }

    static com.google.common.collect.Multiset access$000(com.google.common.graph.DirectedMultiNetworkConnections)
    {
        com.google.common.graph.DirectedMultiNetworkConnections $r0;
        com.google.common.collect.Multiset $r1;

        $r0 := @parameter0: com.google.common.graph.DirectedMultiNetworkConnections;

        $r1 = specialinvoke $r0.<com.google.common.graph.DirectedMultiNetworkConnections: com.google.common.collect.Multiset successorsMultiset()>();

        return $r1;
    }

    private static java.lang.Object getReference(java.lang.ref.Reference)
    {
        java.lang.ref.Reference r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.ref.Reference;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.ref.Reference: java.lang.Object get()>();

        return $r1;
    }

    static com.google.common.graph.DirectedMultiNetworkConnections of()
    {
        com.google.common.graph.DirectedMultiNetworkConnections $r0;
        java.util.HashMap $r1, $r2;

        $r0 = new com.google.common.graph.DirectedMultiNetworkConnections;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(2, 1.0F);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int,float)>(2, 1.0F);

        specialinvoke $r0.<com.google.common.graph.DirectedMultiNetworkConnections: void <init>(java.util.Map,java.util.Map,int)>($r1, $r2, 0);

        return $r0;
    }

    static com.google.common.graph.DirectedMultiNetworkConnections ofImmutable(java.util.Map, java.util.Map, int)
    {
        com.google.common.collect.ImmutableMap $r3, $r4;
        java.util.Map r0, r1;
        int $i0;
        com.google.common.graph.DirectedMultiNetworkConnections $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        $i0 := @parameter2: int;

        $r2 = new com.google.common.graph.DirectedMultiNetworkConnections;

        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r0);

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r1);

        specialinvoke $r2.<com.google.common.graph.DirectedMultiNetworkConnections: void <init>(java.util.Map,java.util.Map,int)>($r3, $r4, $i0);

        return $r2;
    }

    private com.google.common.collect.Multiset predecessorsMultiset()
    {
        com.google.common.collect.Multiset r3;
        java.util.Collection $r5;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        java.lang.ref.Reference r1;
        com.google.common.collect.HashMultiset $r6;
        java.util.Map $r4;
        java.lang.Object $r2;
        java.lang.ref.SoftReference $r7;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference predecessorsReference>;

        $r2 = staticinvoke <com.google.common.graph.DirectedMultiNetworkConnections: java.lang.Object getReference(java.lang.ref.Reference)>(r1);

        r3 = (com.google.common.collect.Multiset) $r2;

        if r3 != null goto label1;

        $r4 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.util.Map inEdgeMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = staticinvoke <com.google.common.collect.HashMultiset: com.google.common.collect.HashMultiset create(java.lang.Iterable)>($r5);

        $r7 = new java.lang.ref.SoftReference;

        specialinvoke $r7.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r6);

        r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference predecessorsReference> = $r7;

        return $r6;

     label1:
        return r3;
    }

    private com.google.common.collect.Multiset successorsMultiset()
    {
        com.google.common.collect.Multiset r3;
        java.util.Collection $r5;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        java.lang.ref.Reference r1;
        com.google.common.collect.HashMultiset $r6;
        java.util.Map $r4;
        java.lang.Object $r2;
        java.lang.ref.SoftReference $r7;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference successorsReference>;

        $r2 = staticinvoke <com.google.common.graph.DirectedMultiNetworkConnections: java.lang.Object getReference(java.lang.ref.Reference)>(r1);

        r3 = (com.google.common.collect.Multiset) $r2;

        if r3 != null goto label1;

        $r4 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.util.Map outEdgeMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = staticinvoke <com.google.common.collect.HashMultiset: com.google.common.collect.HashMultiset create(java.lang.Iterable)>($r5);

        $r7 = new java.lang.ref.SoftReference;

        specialinvoke $r7.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r6);

        r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference successorsReference> = $r7;

        return $r6;

     label1:
        return r3;
    }

    public void addInEdge(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.ref.Reference r3;
        com.google.common.collect.Multiset r4;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<com.google.common.graph.AbstractDirectedNetworkConnections: void addInEdge(java.lang.Object,java.lang.Object,boolean)>(r1, r2, $z0);

        r3 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference predecessorsReference>;

        r1 = staticinvoke <com.google.common.graph.DirectedMultiNetworkConnections: java.lang.Object getReference(java.lang.ref.Reference)>(r3);

        r4 = (com.google.common.collect.Multiset) r1;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<com.google.common.collect.Multiset: boolean add(java.lang.Object)>(r2);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

     label1:
        return;
    }

    public void addOutEdge(java.lang.Object, java.lang.Object)
    {
        java.lang.ref.Reference r3;
        com.google.common.collect.Multiset r4;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.google.common.graph.AbstractDirectedNetworkConnections: void addOutEdge(java.lang.Object,java.lang.Object)>(r1, r2);

        r3 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference successorsReference>;

        r1 = staticinvoke <com.google.common.graph.DirectedMultiNetworkConnections: java.lang.Object getReference(java.lang.ref.Reference)>(r3);

        r4 = (com.google.common.collect.Multiset) r1;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<com.google.common.collect.Multiset: boolean add(java.lang.Object)>(r2);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

     label1:
        return;
    }

    public java.util.Set edgesConnecting(java.lang.Object)
    {
        java.util.Map $r3;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        java.lang.Object r1;
        com.google.common.graph.DirectedMultiNetworkConnections$1 $r2;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        $r2 = new com.google.common.graph.DirectedMultiNetworkConnections$1;

        $r3 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.util.Map outEdgeMap>;

        specialinvoke $r2.<com.google.common.graph.DirectedMultiNetworkConnections$1: void <init>(com.google.common.graph.DirectedMultiNetworkConnections,java.util.Map,java.lang.Object,java.lang.Object)>(r0, $r3, r1, r1);

        return $r2;
    }

    public java.util.Set predecessors()
    {
        java.util.Set $r2;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        com.google.common.collect.Multiset $r1;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        $r1 = specialinvoke r0.<com.google.common.graph.DirectedMultiNetworkConnections: com.google.common.collect.Multiset predecessorsMultiset()>();

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r2;
    }

    public java.lang.Object removeInEdge(java.lang.Object, boolean)
    {
        java.lang.ref.Reference r2;
        com.google.common.collect.Multiset r4;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.lang.Object removeInEdge(java.lang.Object,boolean)>(r1, $z0);

        r2 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference predecessorsReference>;

        $r3 = staticinvoke <com.google.common.graph.DirectedMultiNetworkConnections: java.lang.Object getReference(java.lang.ref.Reference)>(r2);

        r4 = (com.google.common.collect.Multiset) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<com.google.common.collect.Multiset: boolean remove(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

     label1:
        return r1;
    }

    public java.lang.Object removeOutEdge(java.lang.Object)
    {
        java.lang.ref.Reference r2;
        com.google.common.collect.Multiset r4;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        r1 := @parameter0: java.lang.Object;

        r1 = specialinvoke r0.<com.google.common.graph.AbstractDirectedNetworkConnections: java.lang.Object removeOutEdge(java.lang.Object)>(r1);

        r2 = r0.<com.google.common.graph.DirectedMultiNetworkConnections: java.lang.ref.Reference successorsReference>;

        $r3 = staticinvoke <com.google.common.graph.DirectedMultiNetworkConnections: java.lang.Object getReference(java.lang.ref.Reference)>(r2);

        r4 = (com.google.common.collect.Multiset) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<com.google.common.collect.Multiset: boolean remove(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

     label1:
        return r1;
    }

    public java.util.Set successors()
    {
        java.util.Set $r2;
        com.google.common.graph.DirectedMultiNetworkConnections r0;
        com.google.common.collect.Multiset $r1;

        r0 := @this: com.google.common.graph.DirectedMultiNetworkConnections;

        $r1 = specialinvoke r0.<com.google.common.graph.DirectedMultiNetworkConnections: com.google.common.collect.Multiset successorsMultiset()>();

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r2;
    }
}
