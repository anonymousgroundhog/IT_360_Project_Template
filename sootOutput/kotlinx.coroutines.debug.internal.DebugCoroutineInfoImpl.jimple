public final class kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl extends java.lang.Object
{
    private final java.lang.ref.WeakReference _context;
    private volatile java.lang.ref.WeakReference _lastObservedFrame;
    private volatile java.lang.String _state;
    private final kotlinx.coroutines.debug.internal.StackTraceFrame creationStackBottom;
    public volatile java.lang.Thread lastObservedThread;
    public final long sequenceNumber;
    private int unmatchedResume;

    public void <init>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.debug.internal.StackTraceFrame, long)
    {
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        kotlinx.coroutines.debug.internal.StackTraceFrame $r2;
        long $l0;
        java.lang.ref.WeakReference $r3;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlinx.coroutines.debug.internal.StackTraceFrame;

        $l0 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlinx.coroutines.debug.internal.StackTraceFrame creationStackBottom> = $r2;

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: long sequenceNumber> = $l0;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r1);

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.ref.WeakReference _context> = $r3;

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String _state> = "CREATED";

        return;
    }

    public static final java.lang.Object access$yieldFrames(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl, kotlin.sequences.SequenceScope, kotlin.coroutines.jvm.internal.CoroutineStackFrame, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r3;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl $r0;
        java.lang.Object $r4;
        kotlin.sequences.SequenceScope $r1;

        $r0 := @parameter0: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r1 := @parameter1: kotlin.sequences.SequenceScope;

        $r2 := @parameter2: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $r4 = specialinvoke $r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.Object yieldFrames(kotlin.sequences.SequenceScope,kotlin.coroutines.jvm.internal.CoroutineStackFrame,kotlin.coroutines.Continuation)>($r1, $r2, $r3);

        return $r4;
    }

    private final java.util.List creationStackTrace()
    {
        java.util.List $r2;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 $r3;
        kotlin.sequences.Sequence $r5;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        kotlinx.coroutines.debug.internal.StackTraceFrame r1;
        kotlin.jvm.functions.Function2 $r4;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        r1 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlinx.coroutines.debug.internal.StackTraceFrame creationStackBottom>;

        if r1 != null goto label1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r2;

     label1:
        $r3 = new kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1;

        specialinvoke $r3.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: void <init>(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl,kotlinx.coroutines.debug.internal.StackTraceFrame,kotlin.coroutines.Continuation)>(r0, r1, null);

        $r4 = (kotlin.jvm.functions.Function2) $r3;

        $r5 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r4);

        $r2 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r5);

        return $r2;
    }

    private final java.lang.Object yieldFrames(kotlin.sequences.SequenceScope, kotlin.coroutines.jvm.internal.CoroutineStackFrame, kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException $r8;
        kotlin.coroutines.Continuation $r3;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame r2;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1 $r4, $r5;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        kotlin.Unit r11;
        int $i0;
        java.lang.Object $r6, $r7, r9;
        java.lang.StackTraceElement $r10;
        kotlin.sequences.SequenceScope $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r1 := @parameter0: kotlin.sequences.SequenceScope;

        r2 := @parameter1: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = $r3 instanceof kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1) $r3;

        $i0 = $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: int label>;

        $i0 = $i0 - -2147483648;

        $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: int label> = $i0;

        goto label2;

     label1:
        $r4 = new kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1;

        specialinvoke $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: void <init>(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl,kotlin.coroutines.Continuation)>(r0, $r3);

     label2:
        $r5 = $r4;

        $r6 = $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: java.lang.Object result>;

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label4;
            default: goto label3;
        };

     label3:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r8;

     label4:
        r9 = $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: java.lang.Object L$2>;

        r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) r9;

        r9 = $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: java.lang.Object L$1>;

        $r1 = (kotlin.sequences.SequenceScope) r9;

        r9 = $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) r9;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

        goto label8;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

     label6:
        if r2 != null goto label7;

        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;

     label7:
        $r10 = interfaceinvoke r2.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: java.lang.StackTraceElement getStackTraceElement()>();

        if $r10 == null goto label8;

        $r5.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: java.lang.Object L$0> = r0;

        $r5.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: java.lang.Object L$1> = $r1;

        $r5.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: java.lang.Object L$2> = r2;

        $r5.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$yieldFrames$1: int label> = 1;

        $r6 = virtualinvoke $r1.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r10, $r5);

        if $r6 != $r7 goto label8;

        return $r7;

     label8:
        r2 = interfaceinvoke r2.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        if r2 == null goto label9;

        goto label6;

     label9:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;
    }

    public final kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        java.lang.Object $r1;
        java.lang.ref.WeakReference $r2;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r2 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.ref.WeakReference _context>;

        $r1 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r3 = (kotlin.coroutines.CoroutineContext) $r1;

        return $r3;
    }

    public final kotlinx.coroutines.debug.internal.StackTraceFrame getCreationStackBottom()
    {
        kotlinx.coroutines.debug.internal.StackTraceFrame r1;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        r1 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlinx.coroutines.debug.internal.StackTraceFrame creationStackBottom>;

        return r1;
    }

    public final java.util.List getCreationStackTrace()
    {
        java.util.List $r1;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r1 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.util.List creationStackTrace()>();

        return $r1;
    }

    public final kotlin.coroutines.jvm.internal.CoroutineStackFrame getLastObservedFrame$kotlinx_coroutines_core()
    {
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r3;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        java.lang.Object $r1;
        java.lang.ref.WeakReference $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r2 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.ref.WeakReference _lastObservedFrame>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r3 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r3;

     label1:
        return null;
    }

    public final java.lang.String getState()
    {
        java.lang.String r1;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        r1 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String _state>;

        return r1;
    }

    public final java.util.List lastObservedStackTrace()
    {
        java.util.List $r4;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2, r3;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        java.lang.StackTraceElement $r5;
        java.util.ArrayList r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getLastObservedFrame$kotlinx_coroutines_core()>();

        r3 = $r2;

        if $r2 != null goto label1;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r4;

     label1:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label2:
        if r3 == null goto label4;

        $r5 = interfaceinvoke r3.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: java.lang.StackTraceElement getStackTraceElement()>();

        if $r5 == null goto label3;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label3:
        r3 = interfaceinvoke r3.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        goto label2;

     label4:
        $r4 = (java.util.List) r1;

        return $r4;
    }

    public final void setLastObservedFrame$kotlinx_coroutines_core(kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r1;
        java.lang.ref.WeakReference $r2;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $r1 == null goto label1;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.ref.WeakReference _lastObservedFrame> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DebugCoroutineInfo(state=");

        $r2 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String getState()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",context=");

        $r3 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public final void updateState$kotlinx_coroutines_core(java.lang.String, kotlin.coroutines.Continuation, boolean)
    {
        java.lang.Throwable $r6;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r4;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r0;
        java.lang.Thread $r5;
        int $i0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 := @parameter2: boolean;

        entermonitor r0;

     label01:
        $r3 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String _state>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, "RUNNING");

        if $z1 == 0 goto label02;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "RUNNING");

        if $z1 == 0 goto label02;

        if $z0 == 0 goto label02;

        $i0 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: int unmatchedResume>;

        $i0 = $i0 + 1;

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: int unmatchedResume> = $i0;

        goto label04;

     label02:
        $i0 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: int unmatchedResume>;

        if $i0 <= 0 goto label04;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "SUSPENDED");

        if $z0 == 0 goto label04;

        $i0 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: int unmatchedResume>;

        $i0 = $i0 + -1;

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: int unmatchedResume> = $i0;

     label03:
        exitmonitor r0;

        return;

     label04:
        $r3 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String _state>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z0 == 0 goto label06;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "SUSPENDED");

        if $z0 == 0 goto label06;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getLastObservedFrame$kotlinx_coroutines_core()>();

     label05:
        if $r4 == null goto label06;

        exitmonitor r0;

        return;

     label06:
        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String _state> = $r2;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        $r5 = null;

        if $z0 == 0 goto label07;

        $r4 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        goto label08;

     label07:
        $r4 = null;

     label08:
        virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: void setLastObservedFrame$kotlinx_coroutines_core(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r4);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "RUNNING");

        if $z0 == 0 goto label09;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        goto label09;

     label09:
        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.Thread lastObservedThread> = $r5;

     label10:
        exitmonitor r0;

        return;

     label11:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label10 with label11;
    }
}
