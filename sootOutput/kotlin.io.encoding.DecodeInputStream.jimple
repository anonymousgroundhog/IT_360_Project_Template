final class kotlin.io.encoding.DecodeInputStream extends java.io.InputStream
{
    private final kotlin.io.encoding.Base64 base64;
    private final byte[] byteBuffer;
    private int byteBufferEndIndex;
    private int byteBufferStartIndex;
    private final java.io.InputStream input;
    private boolean isClosed;
    private boolean isEOF;
    private final byte[] singleByteBuffer;
    private final byte[] symbolBuffer;

    public void <init>(java.io.InputStream, kotlin.io.encoding.Base64)
    {
        byte[] $r3;
        kotlin.io.encoding.Base64 $r2;
        kotlin.io.encoding.DecodeInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: kotlin.io.encoding.Base64;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "base64");

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<kotlin.io.encoding.DecodeInputStream: java.io.InputStream input> = $r1;

        r0.<kotlin.io.encoding.DecodeInputStream: kotlin.io.encoding.Base64 base64> = $r2;

        $r3 = newarray (byte)[1];

        r0.<kotlin.io.encoding.DecodeInputStream: byte[] singleByteBuffer> = $r3;

        $r3 = newarray (byte)[1024];

        r0.<kotlin.io.encoding.DecodeInputStream: byte[] symbolBuffer> = $r3;

        $r3 = newarray (byte)[1024];

        r0.<kotlin.io.encoding.DecodeInputStream: byte[] byteBuffer> = $r3;

        return;
    }

    private final void copyByteBufferInto(byte[], int, int)
    {
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        kotlin.io.encoding.DecodeInputStream r0;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] byteBuffer>;

        $i2 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i3 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i3 = $i3 + $i1;

        staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r2, $r1, $i0, $i2, $i3);

        $i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i0 = $i0 + $i1;

        r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex> = $i0;

        specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: void resetByteBufferIfEmpty()>();

        return;
    }

    private final int decodeSymbolBufferInto(byte[], int, int, int)
    {
        byte[] $r1, $r2, $r3;
        kotlin.io.encoding.Base64 $r4;
        int $i0, $i1, $i2, $i3, i4;
        kotlin.io.encoding.DecodeInputStream r0;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        i4 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        $r4 = r0.<kotlin.io.encoding.DecodeInputStream: kotlin.io.encoding.Base64 base64>;

        $r2 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] symbolBuffer>;

        $r3 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] byteBuffer>;

        $i3 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        $i2 = virtualinvoke $r4.<kotlin.io.encoding.Base64: int decodeIntoByteArray(byte[],byte[],int,int,int)>($r2, $r3, $i3, 0, $i2);

        $i2 = i4 + $i2;

        r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex> = $i2;

        $i2 = specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: int getByteBufferLength()>();

        $i1 = $i1 - $i0;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: void copyByteBufferInto(byte[],int,int)>($r1, $i0, $i1);

        specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: void shiftByteBufferToStartIfNeeded()>();

        return $i1;
    }

    private final int getByteBufferLength()
    {
        int $i0, $i1;
        kotlin.io.encoding.DecodeInputStream r0;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $i1 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        $i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    private final int handlePaddingSymbol(int)
    {
        byte[] r1;
        byte $b2;
        int $i0, $i1, $i3;
        kotlin.io.encoding.DecodeInputStream r0;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $i0 := @parameter0: int;

        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] symbolBuffer>;

        r1[$i0] = 61;

        $i1 = $i0 & 3;

        if $i1 != 2 goto label2;

        $i3 = specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: int readNextSymbol()>();

        if $i3 < 0 goto label1;

        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] symbolBuffer>;

        $i1 = $i0 + 1;

        $b2 = (byte) $i3;

        r1[$i1] = $b2;

     label1:
        $i0 = $i0 + 2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        return $i0;
    }

    private final int readNextSymbol()
    {
        kotlin.io.encoding.Base64 r1;
        int $i0;
        kotlin.io.encoding.DecodeInputStream r0;
        boolean $z0;
        java.io.InputStream r2;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        r1 = r0.<kotlin.io.encoding.DecodeInputStream: kotlin.io.encoding.Base64 base64>;

        $z0 = virtualinvoke r1.<kotlin.io.encoding.Base64: boolean isMimeScheme$kotlin_stdlib()>();

        if $z0 != 0 goto label1;

        r2 = r0.<kotlin.io.encoding.DecodeInputStream: java.io.InputStream input>;

        $i0 = virtualinvoke r2.<java.io.InputStream: int read()>();

        return $i0;

     label1:
        r2 = r0.<kotlin.io.encoding.DecodeInputStream: java.io.InputStream input>;

        $i0 = virtualinvoke r2.<java.io.InputStream: int read()>();

        if $i0 == -1 goto label2;

        $z0 = staticinvoke <kotlin.io.encoding.Base64Kt: boolean isInMimeAlphabet(int)>($i0);

        if $z0 == 0 goto label1;

     label2:
        return $i0;
    }

    private final void resetByteBufferIfEmpty()
    {
        int $i0, $i1;
        kotlin.io.encoding.DecodeInputStream r0;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $i1 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        if $i1 != $i0 goto label1;

        r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex> = 0;

        r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex> = 0;

     label1:
        return;
    }

    private final void shiftByteBufferToStartIfNeeded()
    {
        byte[] r1, $r2;
        int $i0, $i1;
        kotlin.io.encoding.DecodeInputStream r0;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] byteBuffer>;

        $i0 = lengthof r1;

        $i1 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        $i0 = $i0 - $i1;

        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] symbolBuffer>;

        $i1 = lengthof r1;

        $i1 = $i1 / 4;

        $i1 = $i1 * 3;

        if $i1 <= $i0 goto label1;

        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] byteBuffer>;

        $r2 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] byteBuffer>;

        $i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i1 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>(r1, $r2, 0, $i0, $i1);

        $i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        $i1 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i0 = $i0 - $i1;

        r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex> = $i0;

        r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex> = 0;

     label1:
        return;
    }

    public void close()
    {
        kotlin.io.encoding.DecodeInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $z0 = r0.<kotlin.io.encoding.DecodeInputStream: boolean isClosed>;

        if $z0 != 0 goto label1;

        r0.<kotlin.io.encoding.DecodeInputStream: boolean isClosed> = 1;

        $r1 = r0.<kotlin.io.encoding.DecodeInputStream: java.io.InputStream input>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label1:
        return;
    }

    public int read()
    {
        byte[] r1;
        java.lang.IllegalStateException $r3;
        short s3;
        byte b2;
        int i0, $i1;
        java.lang.String $r2;
        kotlin.io.encoding.DecodeInputStream r0;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        $i1 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferEndIndex>;

        if i0 >= $i1 goto label1;

        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] byteBuffer>;

        i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        b2 = r1[i0];

        s3 = (short) b2;

        s3 = s3 & 255;

        i0 = r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex>;

        i0 = i0 + 1;

        r0.<kotlin.io.encoding.DecodeInputStream: int byteBufferStartIndex> = i0;

        specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: void resetByteBufferIfEmpty()>();

        i0 = (int) s3;

        return i0;

     label1:
        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] singleByteBuffer>;

        i0 = virtualinvoke r0.<kotlin.io.encoding.DecodeInputStream: int read(byte[],int,int)>(r1, 0, 1);

        lookupswitch(i0)
        {
            case -1: goto label4;
            case 0: goto label2;
            case 1: goto label3;
            default: goto label2;
        };

     label2:
        $r3 = new java.lang.IllegalStateException;

        $r2 = "Unreachable";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label3:
        r1 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] singleByteBuffer>;

        b2 = r1[0];

        s3 = (short) b2;

        s3 = s3 & 255;

        i0 = (int) s3;

        return i0;

     label4:
        return -1;
    }

    public int read(byte[], int, int)
    {
        byte[] $r1, $r2;
        java.lang.IllegalStateException $r5;
        java.lang.IndexOutOfBoundsException $r8;
        byte $b2;
        int $i0, $i1, $i3, $i4, i5, i6, $i7;
        java.lang.String $r3;
        kotlin.io.encoding.DecodeInputStream r0;
        boolean $z0;
        java.io.IOException $r6;
        java.lang.StringBuilder $r4, $r7;

        r0 := @this: kotlin.io.encoding.DecodeInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        if $i0 < 0 goto label17;

        if $i1 < 0 goto label17;

        $i3 = $i0 + $i1;

        $i4 = lengthof $r1;

        if $i3 > $i4 goto label17;

        $z0 = r0.<kotlin.io.encoding.DecodeInputStream: boolean isClosed>;

        if $z0 != 0 goto label16;

        $z0 = r0.<kotlin.io.encoding.DecodeInputStream: boolean isEOF>;

        if $z0 == 0 goto label01;

        return -1;

     label01:
        if $i1 != 0 goto label02;

        return 0;

     label02:
        $i3 = specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: int getByteBufferLength()>();

        if $i3 < $i1 goto label03;

        specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: void copyByteBufferInto(byte[],int,int)>($r1, $i0, $i1);

        return $i1;

     label03:
        $i3 = specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: int getByteBufferLength()>();

        $i3 = $i1 - $i3;

        $i3 = $i3 + 3;

        $i3 = $i3 - 1;

        $i3 = $i3 / 3;

        $i3 = $i3 * 4;

        $i4 = $i0;

     label04:
        $z0 = r0.<kotlin.io.encoding.DecodeInputStream: boolean isEOF>;

        if $z0 != 0 goto label14;

        if $i3 <= 0 goto label14;

        i5 = 0;

        $r2 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] symbolBuffer>;

        i6 = lengthof $r2;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i6, $i3);

     label05:
        $z0 = r0.<kotlin.io.encoding.DecodeInputStream: boolean isEOF>;

        if $z0 != 0 goto label09;

        if i5 >= i6 goto label09;

        $i7 = specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: int readNextSymbol()>();

        lookupswitch($i7)
        {
            case -1: goto label08;
            case 61: goto label07;
            default: goto label06;
        };

     label06:
        $r2 = r0.<kotlin.io.encoding.DecodeInputStream: byte[] symbolBuffer>;

        $b2 = (byte) $i7;

        $r2[i5] = $b2;

        i5 = i5 + 1;

        goto label05;

     label07:
        i5 = specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: int handlePaddingSymbol(int)>(i5);

        r0.<kotlin.io.encoding.DecodeInputStream: boolean isEOF> = 1;

        goto label05;

     label08:
        r0.<kotlin.io.encoding.DecodeInputStream: boolean isEOF> = 1;

        goto label05;

     label09:
        $z0 = r0.<kotlin.io.encoding.DecodeInputStream: boolean isEOF>;

        if $z0 != 0 goto label11;

        if i5 != i6 goto label10;

        goto label11;

     label10:
        $z0 = 0;

        goto label12;

     label11:
        $z0 = 1;

     label12:
        if $z0 == 0 goto label13;

        $i3 = $i3 - i5;

        i6 = $i1 + $i0;

        i5 = specialinvoke r0.<kotlin.io.encoding.DecodeInputStream: int decodeSymbolBufferInto(byte[],int,int,int)>($r1, $i4, i6, i5);

        $i4 = $i4 + i5;

        goto label04;

     label13:
        $r5 = new java.lang.IllegalStateException;

        $r3 = "Check failed.";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r5;

     label14:
        if $i4 != $i0 goto label15;

        $z0 = r0.<kotlin.io.encoding.DecodeInputStream: boolean isEOF>;

        if $z0 == 0 goto label15;

        return -1;

     label15:
        $i0 = $i4 - $i0;

        return $i0;

     label16:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("The input stream is closed.");

        throw $r6;

     label17:
        $r8 = new java.lang.IndexOutOfBoundsException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", buffer size: ");

        $i0 = lengthof $r1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r8;
    }
}
