class androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager extends java.lang.Object implements android.view.ViewTreeObserver$OnGlobalLayoutListener, android.view.View$OnAttachStateChangeListener
{
    private final java.util.WeakHashMap mPanesToVisible;

    void <init>()
    {
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;
        java.util.WeakHashMap $r1;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: java.util.WeakHashMap mPanesToVisible> = $r1;

        return;
    }

    private void checkPaneVisibility(android.view.View, boolean)
    {
        byte b1;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;
        int $i0;
        android.view.View $r1;
        java.lang.Boolean $r3;
        java.util.WeakHashMap $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $r1 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke $r1.<android.view.View: boolean isShown()>();

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke $r1.<android.view.View: int getWindowVisibility()>();

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z0 == $z1 goto label5;

        if $z1 == 0 goto label3;

        b1 = 16;

        goto label4;

     label3:
        b1 = 32;

     label4:
        staticinvoke <androidx.core.view.ViewCompat: void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int)>($r1, b1);

        $r2 = r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: java.util.WeakHashMap mPanesToVisible>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label5:
        return;
    }

    private void registerForLayoutCallback(android.view.View)
    {
        android.view.View $r1;
        android.view.ViewTreeObserver $r2;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        virtualinvoke $r2.<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>(r0);

        return;
    }

    private void unregisterForLayoutCallback(android.view.View)
    {
        android.view.View $r1;
        android.view.ViewTreeObserver $r2;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        staticinvoke <androidx.core.view.ViewCompat$Api16Impl: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver,android.view.ViewTreeObserver$OnGlobalLayoutListener)>($r2, r0);

        return;
    }

    void addAccessibilityPane(android.view.View)
    {
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;
        int $i0;
        android.view.View $r1;
        java.lang.Boolean $r3;
        java.util.WeakHashMap $r2;
        boolean $z0;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $r1 := @parameter0: android.view.View;

        $r2 = r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: java.util.WeakHashMap mPanesToVisible>;

        $z0 = virtualinvoke $r1.<android.view.View: boolean isShown()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r1.<android.view.View: int getWindowVisibility()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        virtualinvoke $r1.<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>(r0);

        $z0 = staticinvoke <androidx.core.view.ViewCompat$Api19Impl: boolean isAttachedToWindow(android.view.View)>($r1);

        if $z0 == 0 goto label3;

        specialinvoke r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void registerForLayoutCallback(android.view.View)>($r1);

     label3:
        return;
    }

    public void onGlobalLayout()
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;
        int $i0;
        android.view.View $r6;
        java.lang.Boolean $r7;
        java.lang.Object $r4;
        java.util.WeakHashMap $r1;
        boolean $z0;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 28 goto label2;

        $r1 = r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: java.util.WeakHashMap mPanesToVisible>;

        $r2 = virtualinvoke $r1.<java.util.WeakHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (android.view.View) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void checkPaneVisibility(android.view.View,boolean)>($r6, $z0);

        goto label1;

     label2:
        return;
    }

    public void onViewAttachedToWindow(android.view.View)
    {
        android.view.View $r1;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $r1 := @parameter0: android.view.View;

        specialinvoke r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void registerForLayoutCallback(android.view.View)>($r1);

        return;
    }

    public void onViewDetachedFromWindow(android.view.View)
    {
        android.view.View $r1;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $r1 := @parameter0: android.view.View;

        return;
    }

    void removeAccessibilityPane(android.view.View)
    {
        android.view.View $r1;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager r0;
        java.util.WeakHashMap $r2;

        r0 := @this: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        $r1 := @parameter0: android.view.View;

        $r2 = r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: java.util.WeakHashMap mPanesToVisible>;

        virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        virtualinvoke $r1.<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>(r0);

        specialinvoke r0.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void unregisterForLayoutCallback(android.view.View)>($r1);

        return;
    }
}
