public final class kotlinx.coroutines.internal.ConcurrentLinkedListKt extends java.lang.Object
{
    private static final kotlinx.coroutines.internal.Symbol CLOSED;
    private static final int POINTERS_SHIFT;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        <kotlinx.coroutines.internal.ConcurrentLinkedListKt: int POINTERS_SHIFT> = 16;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("CLOSED");

        <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol CLOSED> = $r0;

        return;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getCLOSED$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol CLOSED>;

        return r0;
    }

    private static final boolean addConditionally$atomicfu(java.lang.Object, java.util.concurrent.atomic.AtomicIntegerFieldUpdater, int, kotlin.jvm.functions.Function1)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Integer $r3;
        int $i0, $i1, $i2;
        java.lang.Boolean $r5;
        java.lang.Object $r0, $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.jvm.functions.Function1;

     label1:
        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>($r0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = $i1 + $i0;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>($r0, $i1, $i2);

        if $z0 == 0 goto label1;

        return 1;
    }

    private static final boolean addConditionally$atomicfu$array(java.lang.Object, java.util.concurrent.atomic.AtomicIntegerArray, int, int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Integer $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Boolean $r4;
        java.lang.Object $r0;
        java.util.concurrent.atomic.AtomicIntegerArray $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.concurrent.atomic.AtomicIntegerArray;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: kotlin.jvm.functions.Function1;

     label1:
        $i2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerArray: int get(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r0 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Boolean) $r0;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i3 = $i2 + $i1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerArray: boolean compareAndSet(int,int,int)>($i0, $i2, $i3);

        if $z0 == 0 goto label1;

        return 1;
    }

    public static final kotlinx.coroutines.internal.ConcurrentLinkedListNode close(kotlinx.coroutines.internal.ConcurrentLinkedListNode)
    {
        kotlinx.coroutines.internal.Symbol $r2;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r0, $r3;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>($r0);

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r1 != $r2 goto label2;

        return $r0;

     label2:
        $r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r1;

        if $r3 != null goto label3;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean markAsClosed()>();

        if $z0 == 0 goto label1;

        return $r0;

     label3:
        $r0 = $r3;

        goto label1;
    }

    public static final java.lang.Object findSegmentAndMoveForward$atomicfu(java.lang.Object, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, long, kotlinx.coroutines.internal.Segment, kotlin.jvm.functions.Function2)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        long $l0, $l1, $l3;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.internal.Segment $r2, $r5, r7;
        byte $b2;
        int $i4;
        java.lang.Object $r0, $r4, $r6;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $l0 := @parameter2: long;

        $r2 := @parameter3: kotlinx.coroutines.internal.Segment;

        $r3 := @parameter4: kotlin.jvm.functions.Function2;

     label1:
        $r4 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment,long,kotlin.jvm.functions.Function2)>($r2, $l0, $r3);

        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r4);

        if $z0 != 0 goto label9;

        $r5 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r4);

     label2:
        $r6 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r7 = (kotlinx.coroutines.internal.Segment) $r6;

        $l1 = r7.<kotlinx.coroutines.internal.Segment: long id>;

        $l3 = $r5.<kotlinx.coroutines.internal.Segment: long id>;

        $z0 = 1;

        $b2 = $l1 cmp $l3;

        $i4 = (int) $b2;

        if $i4 < 0 goto label3;

        goto label5;

     label3:
        $z1 = virtualinvoke $r5.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z1 != 0 goto label4;

        $z0 = 0;

        goto label5;

     label4:
        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r0, r7, $r5);

        if $z1 == 0 goto label7;

        $z1 = virtualinvoke r7.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z1 == 0 goto label5;

        virtualinvoke r7.<kotlinx.coroutines.internal.Segment: void remove()>();

     label5:
        if $z0 == 0 goto label6;

        return $r4;

     label6:
        goto label1;

     label7:
        $z0 = virtualinvoke $r5.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label8;

        virtualinvoke $r5.<kotlinx.coroutines.internal.Segment: void remove()>();

     label8:
        goto label2;

     label9:
        return $r4;
    }

    public static final java.lang.Object findSegmentAndMoveForward$atomicfu$array(java.lang.Object, java.util.concurrent.atomic.AtomicReferenceArray, int, long, kotlinx.coroutines.internal.Segment, kotlin.jvm.functions.Function2)
    {
        long $l1, $l3, $l4;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.internal.Segment $r2, $r4, r6;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        byte $b2;
        int $i0, $i5;
        java.lang.Object $r0, $r5;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 := @parameter2: int;

        $l1 := @parameter3: long;

        $r2 := @parameter4: kotlinx.coroutines.internal.Segment;

        $r3 := @parameter5: kotlin.jvm.functions.Function2;

     label1:
        $r0 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment,long,kotlin.jvm.functions.Function2)>($r2, $l1, $r3);

        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r0);

        if $z0 != 0 goto label8;

        $r4 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r0);

     label2:
        $r5 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        r6 = (kotlinx.coroutines.internal.Segment) $r5;

        $l3 = r6.<kotlinx.coroutines.internal.Segment: long id>;

        $l4 = $r4.<kotlinx.coroutines.internal.Segment: long id>;

        $z0 = 1;

        $b2 = $l3 cmp $l4;

        $i5 = (int) $b2;

        if $i5 < 0 goto label3;

        goto label5;

     label3:
        $z1 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z1 != 0 goto label4;

        $z0 = 0;

        goto label5;

     label4:
        $z1 = staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r1, $i0, r6, $r4);

        if $z1 == 0 goto label6;

        $z1 = virtualinvoke r6.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z1 == 0 goto label5;

        virtualinvoke r6.<kotlinx.coroutines.internal.Segment: void remove()>();

     label5:
        if $z0 == 0 goto label1;

        return $r0;

     label6:
        $z0 = virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label7;

        virtualinvoke $r4.<kotlinx.coroutines.internal.Segment: void remove()>();

     label7:
        goto label2;

     label8:
        return $r0;
    }

    public static final java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment, long, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r3;
        long $l0, l1;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.internal.Segment $r0, r5;
        byte b2;
        java.lang.Long $r6;
        int $i3;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.internal.Segment;

        $l0 := @parameter1: long;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

     label1:
        l1 = $r0.<kotlinx.coroutines.internal.Segment: long id>;

        b2 = l1 cmp $l0;

        $i3 = (int) b2;

        if $i3 < 0 goto label3;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.internal.Segment: boolean isRemoved()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        return $r2;

     label3:
        r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r0;

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>(r3);

        $r4 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r2 != $r4 goto label4;

        $r4 = <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol CLOSED>;

        $r2 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        return $r2;

     label4:
        r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r2;

        r5 = (kotlinx.coroutines.internal.Segment) r3;

        if r5 == null goto label5;

        $r0 = r5;

        goto label1;

     label5:
        l1 = $r0.<kotlinx.coroutines.internal.Segment: long id>;

        l1 = l1 + 1L;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r0);

        r5 = (kotlinx.coroutines.internal.Segment) $r2;

        r3 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) r5;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.internal.Segment: boolean trySetNext(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>(r3);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.internal.Segment: boolean isRemoved()>();

        if $z0 == 0 goto label6;

        virtualinvoke $r0.<kotlinx.coroutines.internal.Segment: void remove()>();

     label6:
        $r0 = r5;

        goto label1;
    }

    private static final void loop$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2, $r3;

        $r0 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: java.lang.Object;

     label1:
        $r3 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r2);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        goto label1;
    }

    private static final void loop$atomicfu$array(java.util.concurrent.atomic.AtomicReferenceArray, int, kotlin.jvm.functions.Function1)
    {
        int $i0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReferenceArray $r0;

        $r0 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

     label1:
        $r2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        goto label1;
    }

    public static final boolean moveForward$atomicfu(java.lang.Object, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlinx.coroutines.internal.Segment)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        long $l0, $l2;
        kotlinx.coroutines.internal.Segment $r2, r4;
        byte $b1;
        int $i3;
        java.lang.Object $r0, $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter2: kotlinx.coroutines.internal.Segment;

     label1:
        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r4 = (kotlinx.coroutines.internal.Segment) $r3;

        $l2 = r4.<kotlinx.coroutines.internal.Segment: long id>;

        $l0 = $r2.<kotlinx.coroutines.internal.Segment: long id>;

        $b1 = $l2 cmp $l0;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        return 1;

     label2:
        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r0, r4, $r2);

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r4.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label6;

        virtualinvoke r4.<kotlinx.coroutines.internal.Segment: void remove()>();

        return 1;

     label4:
        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r2.<kotlinx.coroutines.internal.Segment: void remove()>();

     label5:
        goto label1;

     label6:
        return 1;
    }

    public static final boolean moveForward$atomicfu$array(java.lang.Object, java.util.concurrent.atomic.AtomicReferenceArray, int, kotlinx.coroutines.internal.Segment)
    {
        long $l1, $l3;
        kotlinx.coroutines.internal.Segment $r2, r3;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        byte $b2;
        int $i0, $i4;
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlinx.coroutines.internal.Segment;

     label1:
        $r0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        r3 = (kotlinx.coroutines.internal.Segment) $r0;

        $l3 = r3.<kotlinx.coroutines.internal.Segment: long id>;

        $l1 = $r2.<kotlinx.coroutines.internal.Segment: long id>;

        $b2 = $l3 cmp $l1;

        $i4 = (int) $b2;

        if $i4 < 0 goto label2;

        return 1;

     label2:
        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $z0 = staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r1, $i0, r3, $r2);

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r3.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label6;

        virtualinvoke r3.<kotlinx.coroutines.internal.Segment: void remove()>();

        return 1;

     label4:
        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r2.<kotlinx.coroutines.internal.Segment: void remove()>();

     label5:
        goto label1;

     label6:
        return 1;
    }
}
