public final class kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 extends java.lang.ClassValue
{

    void <init>()
    {
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 r0;

        r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1;

        specialinvoke r0.<java.lang.ClassValue: void <init>()>();

        return;
    }

    public volatile java.lang.Object computeValue(java.lang.Class)
    {
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 r0;
        java.lang.Class $r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.ClassValueCtorCache$cache$1: kotlin.jvm.functions.Function1 computeValue(java.lang.Class)>($r1);

        return $r2;
    }

    protected kotlin.jvm.functions.Function1 computeValue(java.lang.Class)
    {
        kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 r0;
        java.lang.Class $r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: kotlinx.coroutines.internal.ClassValueCtorCache$cache$1;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type java.lang.Class<out kotlin.Throwable>");

        $r2 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlin.jvm.functions.Function1 access$createConstructor(java.lang.Class)>($r1);

        return $r2;
    }
}
