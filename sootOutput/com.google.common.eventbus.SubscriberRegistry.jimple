final class com.google.common.eventbus.SubscriberRegistry extends java.lang.Object
{
    private static final com.google.common.cache.LoadingCache flattenHierarchyCache;
    private static final com.google.common.cache.LoadingCache subscriberMethodsCache;
    private final com.google.common.eventbus.EventBus bus;
    private final java.util.concurrent.ConcurrentMap subscribers;

    static void <clinit>()
    {
        com.google.common.cache.LoadingCache $r2;
        com.google.common.eventbus.SubscriberRegistry$2 $r3;
        com.google.common.cache.CacheBuilder $r0;
        com.google.common.eventbus.SubscriberRegistry$1 $r1;

        $r0 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>();

        $r0 = virtualinvoke $r0.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder weakKeys()>();

        $r1 = new com.google.common.eventbus.SubscriberRegistry$1;

        specialinvoke $r1.<com.google.common.eventbus.SubscriberRegistry$1: void <init>()>();

        $r2 = virtualinvoke $r0.<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>($r1);

        <com.google.common.eventbus.SubscriberRegistry: com.google.common.cache.LoadingCache subscriberMethodsCache> = $r2;

        $r0 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>();

        $r0 = virtualinvoke $r0.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder weakKeys()>();

        $r3 = new com.google.common.eventbus.SubscriberRegistry$2;

        specialinvoke $r3.<com.google.common.eventbus.SubscriberRegistry$2: void <init>()>();

        $r2 = virtualinvoke $r0.<com.google.common.cache.CacheBuilder: com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader)>($r3);

        <com.google.common.eventbus.SubscriberRegistry: com.google.common.cache.LoadingCache flattenHierarchyCache> = $r2;

        return;
    }

    void <init>(com.google.common.eventbus.EventBus)
    {
        com.google.common.eventbus.EventBus $r1;
        java.lang.Object $r3;
        com.google.common.eventbus.SubscriberRegistry r0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.eventbus.SubscriberRegistry;

        $r1 := @parameter0: com.google.common.eventbus.EventBus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>();

        r0.<com.google.common.eventbus.SubscriberRegistry: java.util.concurrent.ConcurrentMap subscribers> = $r2;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (com.google.common.eventbus.EventBus) $r3;

        r0.<com.google.common.eventbus.SubscriberRegistry: com.google.common.eventbus.EventBus bus> = $r1;

        return;
    }

    static com.google.common.collect.ImmutableList access$000(java.lang.Class)
    {
        java.lang.Class $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.common.eventbus.SubscriberRegistry: com.google.common.collect.ImmutableList getAnnotatedMethodsNotCached(java.lang.Class)>($r0);

        return $r1;
    }

    private com.google.common.collect.Multimap findAllSubscribers(java.lang.Object)
    {
        java.lang.Class[] $r8;
        com.google.common.eventbus.Subscriber $r10;
        com.google.common.eventbus.EventBus $r9;
        com.google.common.collect.HashMultimap $r2;
        com.google.common.collect.ImmutableList $r4;
        java.lang.Object $r1, $r6;
        java.lang.Class $r3;
        com.google.common.eventbus.SubscriberRegistry r0;
        com.google.common.collect.UnmodifiableIterator $r5;
        java.lang.reflect.Method r7;
        boolean $z0;

        r0 := @this: com.google.common.eventbus.SubscriberRegistry;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <com.google.common.collect.HashMultimap: com.google.common.collect.HashMultimap create()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <com.google.common.eventbus.SubscriberRegistry: com.google.common.collect.ImmutableList getAnnotatedMethods(java.lang.Class)>($r3);

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.reflect.Method) $r6;

        $r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = $r8[0];

        $r9 = r0.<com.google.common.eventbus.SubscriberRegistry: com.google.common.eventbus.EventBus bus>;

        $r10 = staticinvoke <com.google.common.eventbus.Subscriber: com.google.common.eventbus.Subscriber create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)>($r9, $r1, r7);

        interfaceinvoke $r2.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r3, $r10);

        goto label1;

     label2:
        return $r2;
    }

    static com.google.common.collect.ImmutableSet flattenHierarchy(java.lang.Class)
    {
        java.lang.Throwable $r5;
        com.google.common.cache.LoadingCache r1;
        com.google.common.collect.ImmutableSet r3;
        com.google.common.util.concurrent.UncheckedExecutionException r4;
        java.lang.Class r0;
        java.lang.Object $r2;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: java.lang.Class;

        r1 = <com.google.common.eventbus.SubscriberRegistry: com.google.common.cache.LoadingCache flattenHierarchyCache>;

     label1:
        $r2 = interfaceinvoke r1.<com.google.common.cache.LoadingCache: java.lang.Object getUnchecked(java.lang.Object)>(r0);

     label2:
        r3 = (com.google.common.collect.ImmutableSet) $r2;

        return r3;

     label3:
        r4 := @caughtexception;

        $r5 = virtualinvoke r4.<com.google.common.util.concurrent.UncheckedExecutionException: java.lang.Throwable getCause()>();

        $r6 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>($r5);

        throw $r6;

        catch com.google.common.util.concurrent.UncheckedExecutionException from label1 to label2 with label3;
    }

    private static com.google.common.collect.ImmutableList getAnnotatedMethods(java.lang.Class)
    {
        java.lang.Throwable $r5;
        com.google.common.cache.LoadingCache r1;
        com.google.common.collect.ImmutableList r3;
        com.google.common.util.concurrent.UncheckedExecutionException r4;
        java.lang.Class r0;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        r1 = <com.google.common.eventbus.SubscriberRegistry: com.google.common.cache.LoadingCache subscriberMethodsCache>;

     label1:
        $r2 = interfaceinvoke r1.<com.google.common.cache.LoadingCache: java.lang.Object getUnchecked(java.lang.Object)>(r0);

     label2:
        r3 = (com.google.common.collect.ImmutableList) $r2;

        return r3;

     label3:
        r4 := @caughtexception;

        $r5 = virtualinvoke r4.<com.google.common.util.concurrent.UncheckedExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>($r5);

        throw r4;

        catch com.google.common.util.concurrent.UncheckedExecutionException from label1 to label2 with label3;
    }

    private static com.google.common.collect.ImmutableList getAnnotatedMethodsNotCached(java.lang.Class)
    {
        java.util.HashMap $r5;
        com.google.common.reflect.TypeToken $r2;
        java.lang.reflect.Method[] $r8;
        com.google.common.collect.ImmutableList $r14;
        com.google.common.eventbus.SubscriberRegistry$MethodIdentifier r12;
        int $i0, $i1, i2;
        java.lang.String $r10, $r11;
        java.lang.reflect.Method r1;
        com.google.common.reflect.TypeToken$TypeSet $r3;
        boolean $z0;
        java.util.Iterator $r6;
        java.util.Collection $r13;
        java.util.Set $r4;
        java.lang.Class[] $r9;
        java.lang.Class r0;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(r0);

        $r3 = virtualinvoke $r2.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$TypeSet getTypes()>();

        $r4 = virtualinvoke $r3.<com.google.common.reflect.TypeToken$TypeSet: java.util.Set rawTypes()>();

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r0 = (java.lang.Class) $r7;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r8;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label1;

        r1 = $r8[$i1];

        $z0 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/google/common/eventbus/Subscribe;");

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke r1.<java.lang.reflect.Method: boolean isSynthetic()>();

        if $z0 != 0 goto label5;

        $r9 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i2 = lengthof $r9;

        if i2 != 1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        i2 = lengthof $r9;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,int)>($z0, "Method %s has @Subscribe annotation but has %s parameters. Subscriber methods must have exactly 1 parameter.", r1, i2);

        r0 = $r9[0];

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        $z0 = $z0 ^ 1;

        r0 = $r9[0];

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r0 = $r9[0];

        r0 = staticinvoke <com.google.common.primitives.Primitives: java.lang.Class wrap(java.lang.Class)>(r0);

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>($z0, "@Subscribe method %s\'s parameter is %s. Subscriber methods cannot accept primitives. Consider changing the parameter to %s.", r1, $r10, $r11);

        r12 = new com.google.common.eventbus.SubscriberRegistry$MethodIdentifier;

        specialinvoke r12.<com.google.common.eventbus.SubscriberRegistry$MethodIdentifier: void <init>(java.lang.reflect.Method)>(r1);

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r12);

        if $z0 != 0 goto label5;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r1);

     label5:
        $i1 = $i1 + 1;

        goto label2;

     label6:
        $r13 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r14 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r13);

        return $r14;
    }

    java.util.Iterator getSubscribers(java.lang.Object)
    {
        com.google.common.collect.ImmutableSet $r3;
        java.util.Iterator $r8;
        java.util.concurrent.CopyOnWriteArraySet r7;
        java.util.ArrayList $r4;
        java.util.concurrent.ConcurrentMap r6;
        int $i0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        com.google.common.eventbus.SubscriberRegistry r0;
        com.google.common.collect.UnmodifiableIterator $r5;
        boolean $z0;

        r0 := @this: com.google.common.eventbus.SubscriberRegistry;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <com.google.common.eventbus.SubscriberRegistry: com.google.common.collect.ImmutableSet flattenHierarchy(java.lang.Class)>($r2);

        $i0 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: int size()>();

        $r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

        $r5 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Class) $r1;

        r6 = r0.<com.google.common.eventbus.SubscriberRegistry: java.util.concurrent.ConcurrentMap subscribers>;

        $r1 = interfaceinvoke r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        r7 = (java.util.concurrent.CopyOnWriteArraySet) $r1;

        if r7 == null goto label1;

        $r8 = virtualinvoke r7.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r8 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r8);

        return $r8;
    }

    java.util.Set getSubscribersForTesting(java.lang.Class)
    {
        java.util.AbstractCollection $r4;
        com.google.common.collect.ImmutableSet $r5;
        java.util.Set $r6;
        java.lang.Class r1;
        java.lang.Object $r3;
        com.google.common.eventbus.SubscriberRegistry r0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.eventbus.SubscriberRegistry;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.google.common.eventbus.SubscriberRegistry: java.util.concurrent.ConcurrentMap subscribers>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.AbstractCollection) $r3;

        $r5 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        $r3 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = (java.util.Set) $r3;

        return $r6;
    }

    void register(java.lang.Object)
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r6;
        java.util.Collection r9;
        java.util.Set $r5;
        java.util.concurrent.CopyOnWriteArraySet r2, $r11;
        com.google.common.collect.Multimap $r3;
        java.util.concurrent.ConcurrentMap r10;
        java.util.Map $r4;
        java.lang.Object $r1;
        java.lang.Class r8;
        com.google.common.eventbus.SubscriberRegistry r0;
        boolean $z0;

        r0 := @this: com.google.common.eventbus.SubscriberRegistry;

        $r1 := @parameter0: java.lang.Object;

        $r3 = specialinvoke r0.<com.google.common.eventbus.SubscriberRegistry: com.google.common.collect.Multimap findAllSubscribers(java.lang.Object)>($r1);

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r1;

        $r1 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.Class) $r1;

        $r1 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.util.Collection) $r1;

        r10 = r0.<com.google.common.eventbus.SubscriberRegistry: java.util.concurrent.ConcurrentMap subscribers>;

        $r1 = interfaceinvoke r10.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r8);

        r2 = (java.util.concurrent.CopyOnWriteArraySet) $r1;

        if r2 != null goto label2;

        r2 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke r2.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r10 = r0.<com.google.common.eventbus.SubscriberRegistry: java.util.concurrent.ConcurrentMap subscribers>;

        $r1 = interfaceinvoke r10.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r8, r2);

        $r11 = (java.util.concurrent.CopyOnWriteArraySet) $r1;

        $r1 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r11, r2);

        r2 = (java.util.concurrent.CopyOnWriteArraySet) $r1;

     label2:
        virtualinvoke r2.<java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)>(r9);

        goto label1;

     label3:
        return;
    }

    void unregister(java.lang.Object)
    {
        com.google.common.collect.Multimap $r3;
        java.util.concurrent.ConcurrentMap r11;
        java.util.Map $r4;
        int $i0;
        com.google.common.eventbus.SubscriberRegistry r0;
        java.lang.String $r14, $r15;
        boolean $z0;
        java.util.Map$Entry r8;
        java.util.Iterator $r6;
        java.util.Collection r10;
        java.util.Set $r5;
        java.util.concurrent.CopyOnWriteArraySet r12;
        java.lang.IllegalArgumentException $r13;
        java.lang.Object $r1, $r7;
        java.lang.StringBuilder $r2;
        java.lang.Class r9;

        r0 := @this: com.google.common.eventbus.SubscriberRegistry;

        $r1 := @parameter0: java.lang.Object;

        $r3 = specialinvoke r0.<com.google.common.eventbus.SubscriberRegistry: com.google.common.collect.Multimap findAllSubscribers(java.lang.Object)>($r1);

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.Class) $r7;

        $r7 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r10 = (java.util.Collection) $r7;

        r11 = r0.<com.google.common.eventbus.SubscriberRegistry: java.util.concurrent.ConcurrentMap subscribers>;

        $r7 = interfaceinvoke r11.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r9);

        r12 = (java.util.concurrent.CopyOnWriteArraySet) $r7;

        if r12 == null goto label2;

        $z0 = virtualinvoke r12.<java.util.concurrent.CopyOnWriteArraySet: boolean removeAll(java.util.Collection)>(r10);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        $i0 = virtualinvoke $r15.<java.lang.String: int length()>();

        $i0 = $i0 + 65;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing event subscriber for an annotated method. Is ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" registered?");

        $r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label3:
        return;
    }
}
