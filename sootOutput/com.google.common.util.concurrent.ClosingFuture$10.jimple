class com.google.common.util.concurrent.ClosingFuture$10 extends java.lang.Object implements java.lang.Runnable
{
    final com.google.common.util.concurrent.ClosingFuture this$0;
    final com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer val$consumer;

    void <init>(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer)
    {
        com.google.common.util.concurrent.ClosingFuture$10 r0;
        com.google.common.util.concurrent.ClosingFuture $r1;
        com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer $r2;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$10;

        $r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        $r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer;

        r0.<com.google.common.util.concurrent.ClosingFuture$10: com.google.common.util.concurrent.ClosingFuture this$0> = $r1;

        r0.<com.google.common.util.concurrent.ClosingFuture$10: com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer val$consumer> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        com.google.common.util.concurrent.ClosingFuture$10 r0;
        com.google.common.util.concurrent.ClosingFuture $r2;
        com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer $r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture$10;

        $r1 = r0.<com.google.common.util.concurrent.ClosingFuture$10: com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer val$consumer>;

        $r2 = r0.<com.google.common.util.concurrent.ClosingFuture$10: com.google.common.util.concurrent.ClosingFuture this$0>;

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void access$1200(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)>($r1, $r2);

        return;
    }
}
