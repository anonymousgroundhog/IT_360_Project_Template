public final class kotlin.sequences.FilteringSequence extends java.lang.Object implements kotlin.sequences.Sequence
{
    private final kotlin.jvm.functions.Function1 predicate;
    private final boolean sendWhen;
    private final kotlin.sequences.Sequence sequence;

    public void <init>(kotlin.sequences.Sequence, boolean, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.Sequence $r1;
        kotlin.sequences.FilteringSequence r0;
        kotlin.jvm.functions.Function1 $r2;
        boolean $z0;

        r0 := @this: kotlin.sequences.FilteringSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.sequences.FilteringSequence: kotlin.sequences.Sequence sequence> = $r1;

        r0.<kotlin.sequences.FilteringSequence: boolean sendWhen> = $z0;

        r0.<kotlin.sequences.FilteringSequence: kotlin.jvm.functions.Function1 predicate> = $r2;

        return;
    }

    public void <init>(kotlin.sequences.Sequence, boolean, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.DefaultConstructorMarker $r3;
        kotlin.sequences.Sequence $r1;
        kotlin.sequences.FilteringSequence r0;
        int $i0;
        kotlin.jvm.functions.Function1 $r2;
        boolean $z0;

        r0 := @this: kotlin.sequences.FilteringSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r3 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $z0 = 1;

     label1:
        specialinvoke r0.<kotlin.sequences.FilteringSequence: void <init>(kotlin.sequences.Sequence,boolean,kotlin.jvm.functions.Function1)>($r1, $z0, $r2);

        return;
    }

    public static final kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.FilteringSequence)
    {
        kotlin.jvm.functions.Function1 r1;
        kotlin.sequences.FilteringSequence $r0;

        $r0 := @parameter0: kotlin.sequences.FilteringSequence;

        r1 = $r0.<kotlin.sequences.FilteringSequence: kotlin.jvm.functions.Function1 predicate>;

        return r1;
    }

    public static final boolean access$getSendWhen$p(kotlin.sequences.FilteringSequence)
    {
        kotlin.sequences.FilteringSequence $r0;
        boolean z0;

        $r0 := @parameter0: kotlin.sequences.FilteringSequence;

        z0 = $r0.<kotlin.sequences.FilteringSequence: boolean sendWhen>;

        return z0;
    }

    public static final kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FilteringSequence)
    {
        kotlin.sequences.Sequence r1;
        kotlin.sequences.FilteringSequence $r0;

        $r0 := @parameter0: kotlin.sequences.FilteringSequence;

        r1 = $r0.<kotlin.sequences.FilteringSequence: kotlin.sequences.Sequence sequence>;

        return r1;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r2;
        kotlin.sequences.FilteringSequence$iterator$1 $r1;
        kotlin.sequences.FilteringSequence r0;

        r0 := @this: kotlin.sequences.FilteringSequence;

        $r1 = new kotlin.sequences.FilteringSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.FilteringSequence$iterator$1: void <init>(kotlin.sequences.FilteringSequence)>(r0);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }
}
