public final enum class org.checkerframework.checker.formatter.qual.ConversionCategory extends java.lang.Enum
{
    private static final org.checkerframework.checker.formatter.qual.ConversionCategory[] $VALUES;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory CHAR;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory INT;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory NULL;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory TIME;
    public static final enum org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED;
    public final java.lang.String chars;
    public final java.lang.Class[] types;

    static void <clinit>()
    {
        java.lang.Class[] $r1;
        org.checkerframework.checker.formatter.qual.ConversionCategory $r0;
        org.checkerframework.checker.formatter.qual.ConversionCategory[] $r2;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("GENERAL", 0, "bBhHsS", null);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = newarray (java.lang.Class)[4];

        $r1[0] = class "Ljava/lang/Character;";

        $r1[1] = class "Ljava/lang/Byte;";

        $r1[2] = class "Ljava/lang/Short;";

        $r1[3] = class "Ljava/lang/Integer;";

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("CHAR", 1, "cC", $r1);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = newarray (java.lang.Class)[5];

        $r1[0] = class "Ljava/lang/Byte;";

        $r1[1] = class "Ljava/lang/Short;";

        $r1[2] = class "Ljava/lang/Integer;";

        $r1[3] = class "Ljava/lang/Long;";

        $r1[4] = class "Ljava/math/BigInteger;";

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("INT", 2, "doxX", $r1);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = newarray (java.lang.Class)[3];

        $r1[0] = class "Ljava/lang/Float;";

        $r1[1] = class "Ljava/lang/Double;";

        $r1[2] = class "Ljava/math/BigDecimal;";

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("FLOAT", 3, "eEfgGaA", $r1);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = newarray (java.lang.Class)[3];

        $r1[0] = class "Ljava/lang/Long;";

        $r1[1] = class "Ljava/util/Calendar;";

        $r1[2] = class "Ljava/util/Date;";

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("TIME", 4, "tT", $r1);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory TIME> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = newarray (java.lang.Class)[3];

        $r1[0] = class "Ljava/lang/Byte;";

        $r1[1] = class "Ljava/lang/Short;";

        $r1[2] = class "Ljava/lang/Integer;";

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("CHAR_AND_INT", 5, null, $r1);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Long;";

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("INT_AND_TIME", 6, null, $r1);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = newarray (java.lang.Class)[0];

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("NULL", 7, null, $r1);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory NULL> = $r0;

        $r0 = new org.checkerframework.checker.formatter.qual.ConversionCategory;

        specialinvoke $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: void <init>(java.lang.String,int,java.lang.String,java.lang.Class[])>("UNUSED", 8, null, null);

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED> = $r0;

        $r2 = newarray (org.checkerframework.checker.formatter.qual.ConversionCategory)[9];

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        $r2[0] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR>;

        $r2[1] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT>;

        $r2[2] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT>;

        $r2[3] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory TIME>;

        $r2[4] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT>;

        $r2[5] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME>;

        $r2[6] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory NULL>;

        $r2[7] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED>;

        $r2[8] = $r0;

        <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory[] $VALUES> = $r2;

        return;
    }

    private transient void <init>(java.lang.String, int, java.lang.String, java.lang.Class[])
    {
        java.lang.Object[] $r6;
        java.lang.Class[] r2;
        java.util.ArrayList r5;
        org.checkerframework.checker.formatter.qual.ConversionCategory r0;
        int $i0, $i1;
        java.lang.Class r3;
        java.lang.String $r1, r4;

        r0 := @this: org.checkerframework.checker.formatter.qual.ConversionCategory;

        r4 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Class[];

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r4, $i0);

        r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.String chars> = $r1;

        if r2 != null goto label1;

        r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types> = r2;

        return;

     label1:
        r5 = new java.util.ArrayList;

        $i0 = lengthof r2;

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = lengthof r2;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        r3 = r2[$i1];

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        r3 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class unwrapPrimitive(java.lang.Class)>(r3);

        if r3 == null goto label3;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        r2 = newarray (java.lang.Class)[$i0];

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        r2 = (java.lang.Class[]) $r6;

        r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types> = r2;

        return;
    }

    private static java.util.Set arrayToSet(java.lang.Object[])
    {
        java.util.HashSet $r1;
        java.util.List $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = new java.util.HashSet;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public static org.checkerframework.checker.formatter.qual.ConversionCategory fromConversionChar(char)
    {
        org.checkerframework.checker.formatter.qual.ConversionCategory[] $r0;
        char $c0;
        java.lang.IllegalArgumentException $r4;
        org.checkerframework.checker.formatter.qual.ConversionCategory r1;
        int $i1;
        java.lang.StringBuilder $r5;
        java.lang.String $r2, $r3;
        boolean $z0;

        $c0 := @parameter0: char;

        $r0 = newarray (org.checkerframework.checker.formatter.qual.ConversionCategory)[5];

        r1 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        $i1 = 0;

        $r0[0] = r1;

        r1 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR>;

        $r0[1] = r1;

        r1 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT>;

        $r0[2] = r1;

        r1 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT>;

        $r0[3] = r1;

        r1 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory TIME>;

        $r0[4] = r1;

     label1:
        if $i1 >= 5 goto label3;

        r1 = $r0[$i1];

        $r2 = r1.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.String chars>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>($r3);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad conversion character ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;
    }

    public static org.checkerframework.checker.formatter.qual.ConversionCategory intersect(org.checkerframework.checker.formatter.qual.ConversionCategory, org.checkerframework.checker.formatter.qual.ConversionCategory)
    {
        org.checkerframework.checker.formatter.qual.ConversionCategory[] $r2;
        java.lang.Class[] r4;
        java.util.Set $r5, $r6;
        java.lang.RuntimeException $r7;
        org.checkerframework.checker.formatter.qual.ConversionCategory $r0, $r1, r3;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 := @parameter1: org.checkerframework.checker.formatter.qual.ConversionCategory;

        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED>;

        if $r0 != r3 goto label1;

        return $r1;

     label1:
        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED>;

        if $r1 != r3 goto label2;

        return $r0;

     label2:
        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        if $r0 != r3 goto label3;

        return $r1;

     label3:
        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        if $r1 != r3 goto label4;

        return $r0;

     label4:
        r4 = $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        $r5 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        r4 = $r1.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        $r6 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        interfaceinvoke $r5.<java.util.Set: boolean retainAll(java.util.Collection)>($r6);

        $r2 = newarray (org.checkerframework.checker.formatter.qual.ConversionCategory)[7];

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR>;

        $i0 = 0;

        $r2[0] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT>;

        $r2[1] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT>;

        $r2[2] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory TIME>;

        $r2[3] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT>;

        $r2[4] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME>;

        $r2[5] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory NULL>;

        $r2[6] = $r0;

     label5:
        if $i0 >= 7 goto label7;

        $r0 = $r2[$i0];

        r4 = $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        $r6 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label6;

        return $r0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>()>();

        throw $r7;
    }

    public static boolean isSubsetOf(org.checkerframework.checker.formatter.qual.ConversionCategory, org.checkerframework.checker.formatter.qual.ConversionCategory)
    {
        org.checkerframework.checker.formatter.qual.ConversionCategory $r0, $r1;

        $r0 := @parameter0: org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 := @parameter1: org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory intersect(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory)>($r0, $r1);

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static org.checkerframework.checker.formatter.qual.ConversionCategory union(org.checkerframework.checker.formatter.qual.ConversionCategory, org.checkerframework.checker.formatter.qual.ConversionCategory)
    {
        org.checkerframework.checker.formatter.qual.ConversionCategory[] $r2;
        java.lang.Class[] r4;
        java.util.Set $r5, $r6;
        org.checkerframework.checker.formatter.qual.ConversionCategory $r0, $r1, r3;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: org.checkerframework.checker.formatter.qual.ConversionCategory;

        $r1 := @parameter1: org.checkerframework.checker.formatter.qual.ConversionCategory;

        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED>;

        if $r0 == r3 goto label10;

        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED>;

        if $r1 != r3 goto label01;

        goto label10;

     label01:
        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        if $r0 == r3 goto label09;

        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        if $r1 != r3 goto label02;

        goto label09;

     label02:
        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT>;

        if $r0 != r3 goto label03;

        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME>;

        if $r1 == r3 goto label04;

     label03:
        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME>;

        if $r0 != r3 goto label05;

        r3 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT>;

        if $r1 != r3 goto label05;

     label04:
        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT>;

        return $r0;

     label05:
        r4 = $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        $r5 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        r4 = $r1.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        $r6 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r2 = newarray (org.checkerframework.checker.formatter.qual.ConversionCategory)[7];

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory NULL>;

        $i0 = 0;

        $r2[0] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT>;

        $r2[1] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME>;

        $r2[2] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory CHAR>;

        $r2[3] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory INT>;

        $r2[4] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT>;

        $r2[5] = $r0;

        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory TIME>;

        $r2[6] = $r0;

     label06:
        if $i0 >= 7 goto label08;

        $r0 = $r2[$i0];

        r4 = $r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        $r6 = staticinvoke <org.checkerframework.checker.formatter.qual.ConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label07;

        return $r0;

     label07:
        $i0 = $i0 + 1;

        goto label06;

     label08:
        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        return $r0;

     label09:
        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL>;

        return $r0;

     label10:
        $r0 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED>;

        return $r0;
    }

    private static java.lang.Class unwrapPrimitive(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljava/lang/Byte;" goto label1;

        r0 = <java.lang.Byte: java.lang.Class TYPE>;

        return r0;

     label1:
        if r0 != class "Ljava/lang/Character;" goto label2;

        r0 = <java.lang.Character: java.lang.Class TYPE>;

        return r0;

     label2:
        if r0 != class "Ljava/lang/Short;" goto label3;

        r0 = <java.lang.Short: java.lang.Class TYPE>;

        return r0;

     label3:
        if r0 != class "Ljava/lang/Integer;" goto label4;

        r0 = <java.lang.Integer: java.lang.Class TYPE>;

        return r0;

     label4:
        if r0 != class "Ljava/lang/Long;" goto label5;

        r0 = <java.lang.Long: java.lang.Class TYPE>;

        return r0;

     label5:
        if r0 != class "Ljava/lang/Float;" goto label6;

        r0 = <java.lang.Float: java.lang.Class TYPE>;

        return r0;

     label6:
        if r0 != class "Ljava/lang/Double;" goto label7;

        r0 = <java.lang.Double: java.lang.Class TYPE>;

        return r0;

     label7:
        if r0 != class "Ljava/lang/Boolean;" goto label8;

        r0 = <java.lang.Boolean: java.lang.Class TYPE>;

        return r0;

     label8:
        return null;
    }

    public static org.checkerframework.checker.formatter.qual.ConversionCategory valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        org.checkerframework.checker.formatter.qual.ConversionCategory $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/checkerframework/checker/formatter/qual/ConversionCategory;", $r0);

        $r2 = (org.checkerframework.checker.formatter.qual.ConversionCategory) $r1;

        return $r2;
    }

    public static org.checkerframework.checker.formatter.qual.ConversionCategory[] values()
    {
        java.lang.Object $r0;
        org.checkerframework.checker.formatter.qual.ConversionCategory[] $r1;

        $r1 = <org.checkerframework.checker.formatter.qual.ConversionCategory: org.checkerframework.checker.formatter.qual.ConversionCategory[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.checkerframework.checker.formatter.qual.ConversionCategory[]) $r0;

        return $r1;
    }

    public boolean isAssignableFrom(java.lang.Class)
    {
        org.checkerframework.checker.formatter.qual.ConversionCategory r0;
        int $i0, $i1;
        java.lang.Class[] $r3;
        java.lang.Class r1, r2;
        boolean $z0;

        r0 := @this: org.checkerframework.checker.formatter.qual.ConversionCategory;

        r1 := @parameter0: java.lang.Class;

        $r3 = r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        if $r3 != null goto label1;

        return 1;

     label1:
        r2 = <java.lang.Void: java.lang.Class TYPE>;

        if r1 != r2 goto label2;

        return 1;

     label2:
        $r3 = r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        $i0 = lengthof $r3;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        r2 = $r3[$i1];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.Class[] r4;
        org.checkerframework.checker.formatter.qual.ConversionCategory r0;
        java.util.StringJoiner r5;
        int i0, $i1;
        java.lang.StringBuilder r1;
        java.lang.Class r2;
        java.lang.String $r3;

        r0 := @this: org.checkerframework.checker.formatter.qual.ConversionCategory;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.String name()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" conversion category");

        r4 = r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        if r4 == null goto label4;

        r4 = r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        i0 = lengthof r4;

        if i0 != 0 goto label1;

        goto label4;

     label1:
        r5 = new java.util.StringJoiner;

        specialinvoke r5.<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "(one of: ", ")");

        r4 = r0.<org.checkerframework.checker.formatter.qual.ConversionCategory: java.lang.Class[] types>;

        i0 = lengthof r4;

        $i1 = 0;

     label2:
        if $i1 >= i0 goto label3;

        r2 = r4[$i1];

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r3);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
