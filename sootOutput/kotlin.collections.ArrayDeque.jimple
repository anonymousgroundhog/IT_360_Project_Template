public final class kotlin.collections.ArrayDeque extends kotlin.collections.AbstractMutableList
{
    public static final kotlin.collections.ArrayDeque$Companion Companion;
    private static final int defaultMinCapacity;
    private static final java.lang.Object[] emptyElementData;
    private static final int maxArraySize;
    private java.lang.Object[] elementData;
    private int head;
    private int size;

    static void <clinit>()
    {
        java.lang.Object[] $r1;
        kotlin.collections.ArrayDeque$Companion $r0;

        <kotlin.collections.ArrayDeque: int maxArraySize> = 2147483639;

        <kotlin.collections.ArrayDeque: int defaultMinCapacity> = 10;

        $r0 = new kotlin.collections.ArrayDeque$Companion;

        specialinvoke $r0.<kotlin.collections.ArrayDeque$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.collections.ArrayDeque: kotlin.collections.ArrayDeque$Companion Companion> = $r0;

        $r1 = newarray (java.lang.Object)[0];

        <kotlin.collections.ArrayDeque: java.lang.Object[] emptyElementData> = $r1;

        return;
    }

    public void <init>()
    {
        java.lang.Object[] $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        specialinvoke r0.<kotlin.collections.AbstractMutableList: void <init>()>();

        $r1 = <kotlin.collections.ArrayDeque: java.lang.Object[] emptyElementData>;

        r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData> = $r1;

        return;
    }

    public void <init>(int)
    {
        java.lang.Object[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        specialinvoke r0.<kotlin.collections.AbstractMutableList: void <init>()>();

        if $i0 != 0 goto label1;

        $r1 = <kotlin.collections.ArrayDeque: java.lang.Object[] emptyElementData>;

        goto label2;

     label1:
        if $i0 <= 0 goto label3;

        $r1 = newarray (java.lang.Object)[$i0];

     label2:
        r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData> = $r1;

        return;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Capacity: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    public void <init>(java.util.Collection)
    {
        java.lang.Object[] $r2;
        java.util.Collection $r1;
        int $i0;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        specialinvoke r0.<kotlin.collections.AbstractMutableList: void <init>()>();

        $z0 = 0;

        $r2 = newarray (java.lang.Object)[0];

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData> = $r2;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = lengthof $r2;

        r0.<kotlin.collections.ArrayDeque: int size> = $i0;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $r2 = <kotlin.collections.ArrayDeque: java.lang.Object[] emptyElementData>;

        r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData> = $r2;

     label2:
        return;
    }

    private final void copyCollectionElements(int, java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Iterator $r2;
        java.util.Collection $r1;
        kotlin.collections.ArrayDeque r0;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r3;

     label1:
        if $i0 >= $i1 goto label2;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

     label3:
        if $i0 >= $i1 goto label4;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i0 = $i0 + $i1;

        r0.<kotlin.collections.ArrayDeque: int size> = $i0;

        return;
    }

    private final void copyElements(int)
    {
        java.lang.Object[] r1, $r2, $r3;
        int $i0, $i1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        r1 = newarray (java.lang.Object)[$i0];

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r3;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r2, r1, 0, $i0, $i1);

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = lengthof $r3;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = $i0 - $i1;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r2, r1, $i0, 0, $i1);

        r0.<kotlin.collections.ArrayDeque: int head> = 0;

        r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData> = r1;

        return;
    }

    private final int decremented(int)
    {
        int $i0;
        java.lang.Object[] $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r1);

        return $i0;

     label1:
        $i0 = $i0 + -1;

        return $i0;
    }

    private final void ensureCapacity(int)
    {
        java.lang.IllegalStateException r4;
        java.lang.Object[] r1, $r2;
        kotlin.collections.ArrayDeque$Companion r3;
        int $i0, i1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label3;

        r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        i1 = lengthof r1;

        if $i0 > i1 goto label1;

        return;

     label1:
        r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r2 = <kotlin.collections.ArrayDeque: java.lang.Object[] emptyElementData>;

        if r1 != $r2 goto label2;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 10);

        r1 = newarray (java.lang.Object)[$i0];

        r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData> = r1;

        return;

     label2:
        r3 = <kotlin.collections.ArrayDeque: kotlin.collections.ArrayDeque$Companion Companion>;

        r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        i1 = lengthof r1;

        $i0 = virtualinvoke r3.<kotlin.collections.ArrayDeque$Companion: int newCapacity$kotlin_stdlib(int,int)>(i1, $i0);

        specialinvoke r0.<kotlin.collections.ArrayDeque: void copyElements(int)>($i0);

        return;

     label3:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Deque is too big.");

        throw r4;
    }

    private final boolean filterInPlace(kotlin.jvm.functions.Function1)
    {
        java.lang.Object[] r2;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.collections.ArrayDeque r0;
        int i0, i1, $i2, i3, i4;
        java.lang.Boolean r5;
        java.lang.Object r3, $r4;
        boolean $z0, $z1;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label17;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        i1 = lengthof r2;

        if i1 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        return 0;

     label03:
        i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i2 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i1 = i1 + $i2;

        i1 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i1);

        $i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        $z0 = 0;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        if i0 >= i1 goto label08;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

     label04:
        if i0 >= i1 goto label07;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i0];

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label05;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i2] = r3;

        $i2 = $i2 + 1;

        goto label06;

     label05:
        $z0 = 1;

     label06:
        i0 = i0 + 1;

        goto label04;

     label07:
        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>(r2, null, $i2, i1);

        goto label16;

     label08:
        i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        i4 = lengthof r2;

     label09:
        if i3 >= i4 goto label12;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i3];

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[i3] = null;

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label10;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i2] = r3;

        $i2 = $i2 + 1;

        goto label11;

     label10:
        $z0 = 1;

     label11:
        i3 = i3 + 1;

        goto label09;

     label12:
        $i2 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i2);

        i0 = 0;

     label13:
        if i0 >= i1 goto label16;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i0];

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[i0] = null;

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label14;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i2] = r3;

        $i2 = specialinvoke r0.<kotlin.collections.ArrayDeque: int incremented(int)>($i2);

        goto label15;

     label14:
        $z0 = 1;

     label15:
        i0 = i0 + 1;

        goto label13;

     label16:
        if $z0 == 0 goto label18;

        i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        i1 = $i2 - i1;

        i1 = specialinvoke r0.<kotlin.collections.ArrayDeque: int negativeMod(int)>(i1);

        r0.<kotlin.collections.ArrayDeque: int size> = i1;

        return $z0;

     label17:
        return 0;

     label18:
        return $z0;
    }

    private final int incremented(int)
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r1);

        if $i0 != $i1 goto label1;

        return 0;

     label1:
        $i0 = $i0 + 1;

        return $i0;
    }

    private final java.lang.Object internalGet(int)
    {
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r2 = $r1[$i0];

        return $r2;
    }

    private final int internalIndex(int)
    {
        int $i0, $i1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = $i1 + $i0;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        return $i0;
    }

    private final int negativeMod(int)
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r1;

        $i0 = $i1 + $i0;

     label1:
        return $i0;
    }

    private final int positiveMod(int)
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label1;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r1;

        $i0 = $i0 - $i1;

     label1:
        return $i0;
    }

    public void add(int, java.lang.Object)
    {
        java.lang.Object[] $r3, $r4, $r6;
        kotlin.collections.AbstractList$Companion r2;
        kotlin.collections.ArrayDeque r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1, $r5;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        virtualinvoke r2.<kotlin.collections.AbstractList$Companion: void checkPositionIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        if $i0 != $i1 goto label1;

        virtualinvoke r0.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>($r1);

        return;

     label1:
        if $i0 != 0 goto label2;

        virtualinvoke r0.<kotlin.collections.ArrayDeque: void addFirst(java.lang.Object)>($r1);

        return;

     label2:
        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i1 = $i1 + 1;

        specialinvoke r0.<kotlin.collections.ArrayDeque: void ensureCapacity(int)>($i1);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = $i1 + $i0;

        $i1 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i1);

        $i2 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i2 = $i2 + 1;

        $i2 = $i2 >> 1;

        if $i0 >= $i2 goto label5;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int decremented(int)>($i1);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = specialinvoke r0.<kotlin.collections.ArrayDeque: int decremented(int)>($i1);

        $i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i0 < $i2 goto label3;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r5 = $r4[$i2];

        $r3[$i1] = $r5;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i3 = $i3 + 1;

        $i4 = $i0 + 1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r4, $i2, $i3, $i4);

        goto label4;

     label3:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i2 = $i2 - 1;

        $i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r6 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = lengthof $r6;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r4, $i2, $i3, $i4);

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r4;

        $i2 = $i2 - 1;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = $r4[0];

        $r3[$i2] = $r5;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = $i0 + 1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r4, 0, 1, $i2);

     label4:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3[$i0] = $r1;

        r0.<kotlin.collections.ArrayDeque: int head> = $i1;

        goto label8;

     label5:
        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i2 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + $i2;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        if $i1 >= $i0 goto label6;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = $i1 + 1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r4, $i2, $i1, $i0);

        goto label7;

     label6:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r4, 1, 0, $i0);

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r6 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = lengthof $r6;

        $i0 = $i0 - 1;

        $r5 = $r4[$i0];

        $r3[0] = $r5;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = $i1 + 1;

        $r6 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r6;

        $i2 = $i2 - 1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r4, $i0, $i1, $i2);

     label7:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3[$i1] = $r1;

     label8:
        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + 1;

        r0.<kotlin.collections.ArrayDeque: int size> = $i0;

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>($r1);

        return 1;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.lang.Object[] $r3, r4, $r5;
        kotlin.collections.AbstractList$Companion r2;
        java.util.Collection $r1;
        kotlin.collections.ArrayDeque r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        virtualinvoke r2.<kotlin.collections.AbstractList$Companion: void checkPositionIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        if $i0 != $i1 goto label02;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean addAll(java.util.Collection)>($r1);

        return $z0;

     label02:
        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i2 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i1 = $i1 + $i2;

        specialinvoke r0.<kotlin.collections.ArrayDeque: void ensureCapacity(int)>($i1);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i2 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i1 = $i1 + $i2;

        $i3 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i1);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = $i1 + $i0;

        $i1 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i1);

        $i2 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i4 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i4 = $i4 + 1;

        $i4 = $i4 >> 1;

        if $i0 >= $i4 goto label08;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = $i0 - $i2;

        $i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 < $i3 goto label05;

        if $i0 < 0 goto label03;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i3, $i1);

        goto label07;

     label03:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r3;

        $i0 = $i0 + $i3;

        $i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i4 = $i1 - $i3;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r3;

        $i3 = $i3 - $i0;

        if $i3 < $i4 goto label04;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i3, $i1);

        goto label07;

     label04:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i5 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i5 = $i5 + $i3;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i4, $i5);

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i3 = $i4 + $i3;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, 0, $i3, $i1);

        goto label07;

     label05:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = lengthof $r5;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i3, $i4);

        if $i2 < $i1 goto label06;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r5;

        $i3 = $i3 - $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i3, 0, $i1);

        goto label07;

     label06:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r5;

        $i3 = $i3 - $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i3, 0, $i2);

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, 0, $i2, $i1);

     label07:
        r0.<kotlin.collections.ArrayDeque: int head> = $i0;

        $i0 = $i1 - $i2;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int negativeMod(int)>($i0);

        specialinvoke r0.<kotlin.collections.ArrayDeque: void copyCollectionElements(int,java.util.Collection)>($i0, $r1);

        return 1;

     label08:
        $i0 = $i1 + $i2;

        if $i1 >= $i3 goto label11;

        $i4 = $i3 + $i2;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i5 = lengthof $r3;

        if $i4 > $i5 goto label09;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i1, $i3);

        goto label13;

     label09:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = lengthof $r3;

        if $i0 < $i4 goto label10;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r5;

        $i0 = $i0 - $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i1, $i3);

        goto label13;

     label10:
        $i2 = $i3 + $i2;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = lengthof $r3;

        $i2 = $i2 - $i4;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = $i3 - $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, 0, $i4, $i3);

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = $i3 - $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i1, $i2);

        goto label13;

     label11:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i2, 0, $i3);

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r3;

        if $i0 < $i3 goto label12;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r5;

        $i0 = $i0 - $i2;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r5;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i1, $i2);

        goto label13;

     label12:
        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r5;

        $i3 = $i3 - $i2;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i4 = lengthof $r5;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, 0, $i3, $i4);

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r5;

        $i2 = $i3 - $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, r4, $i0, $i1, $i2);

     label13:
        specialinvoke r0.<kotlin.collections.ArrayDeque: void copyCollectionElements(int,java.util.Collection)>($i1, $r1);

        return 1;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection $r1;
        int $i0, $i1;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i0 = $i0 + $i1;

        specialinvoke r0.<kotlin.collections.ArrayDeque: void ensureCapacity(int)>($i0);

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + $i1;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        specialinvoke r0.<kotlin.collections.ArrayDeque: void copyCollectionElements(int,java.util.Collection)>($i0, $r1);

        return 1;
    }

    public final void addFirst(java.lang.Object)
    {
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + 1;

        specialinvoke r0.<kotlin.collections.ArrayDeque: void ensureCapacity(int)>($i0);

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int decremented(int)>($i0);

        r0.<kotlin.collections.ArrayDeque: int head> = $i0;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r2[$i0] = $r1;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + 1;

        r0.<kotlin.collections.ArrayDeque: int size> = $i0;

        return;
    }

    public final void addLast(java.lang.Object)
    {
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + 1;

        specialinvoke r0.<kotlin.collections.ArrayDeque: void ensureCapacity(int)>($i0);

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + $i1;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        $r2[$i0] = $r1;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + 1;

        r0.<kotlin.collections.ArrayDeque: int size> = $i0;

        return;
    }

    public void clear()
    {
        java.lang.Object[] $r1, $r3;
        java.util.Collection $r2;
        kotlin.collections.ArrayDeque r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 >= i0 goto label1;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, null, $i1, i0);

        goto label2;

     label1:
        $r2 = (java.util.Collection) r0;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label2;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r3 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r3;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, null, $i1, $i2);

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, null, 0, i0);

     label2:
        r0.<kotlin.collections.ArrayDeque: int head> = 0;

        r0.<kotlin.collections.ArrayDeque: int size> = 0;

        return;
    }

    public boolean contains(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int indexOf(java.lang.Object)>($r1);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.lang.Object first()
    {
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r2 = $r1[$i0];

        return $r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("ArrayDeque is empty.");

        throw $r3;
    }

    public final java.lang.Object firstOrNull()
    {
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public java.lang.Object get(int)
    {
        java.lang.Object[] $r2;
        kotlin.collections.AbstractList$Companion $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = $i1 + $i0;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        $r3 = $r2[$i0];

        return $r3;
    }

    public int getSize()
    {
        int i0;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        i0 = r0.<kotlin.collections.ArrayDeque: int size>;

        return i0;
    }

    public int indexOf(java.lang.Object)
    {
        java.lang.Object[] $r2;
        kotlin.collections.ArrayDeque r0;
        int i0, $i1, $i2;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 >= i0 goto label3;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

     label1:
        if $i1 >= i0 goto label9;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = $r2[$i1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label2;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = $i1 - i0;

        return i0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 < i0 goto label9;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r2;

     label4:
        if $i1 >= $i2 goto label6;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = $r2[$i1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label5;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = $i1 - i0;

        return i0;

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        $i1 = 0;

     label7:
        if $i1 >= i0 goto label9;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = $r2[$i1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label8;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        i0 = lengthof $r2;

        i0 = i0 + $i1;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = i0 - $i1;

        return i0;

     label8:
        $i1 = $i1 + 1;

        goto label7;

     label9:
        return -1;
    }

    public final void internalStructure$kotlin_stdlib(kotlin.jvm.functions.Function2)
    {
        java.lang.Object[] $r2;
        int i0, $i1;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Integer $r3;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "structure");

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 >= i0 goto label1;

        goto label2;

     label1:
        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r2;

        i0 = i0 - $i1;

        goto label3;

     label2:
        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

     label3:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object[] toArray()>();

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r2);

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.lang.Object last()
    {
        java.lang.Object[] $r1;
        kotlin.collections.ArrayDeque r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r2 = (java.util.List) r0;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r2);

        $i0 = $i0 + $i1;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        $r3 = $r1[$i0];

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>("ArrayDeque is empty.");

        throw $r4;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.lang.Object[] $r2;
        kotlin.collections.ArrayDeque r0;
        int i0, $i1, $i2;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 >= i0 goto label3;

        i0 = i0 + -1;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 > i0 goto label9;

     label1:
        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = $r2[i0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label2;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = i0 - $i1;

        return i0;

     label2:
        if i0 == $i1 goto label9;

        i0 = i0 + -1;

        goto label1;

     label3:
        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 <= i0 goto label9;

        i0 = i0 + -1;

     label4:
        if -1 >= i0 goto label6;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = $r2[i0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label5;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r2;

        i0 = $i1 + i0;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = i0 - $i1;

        return i0;

     label5:
        i0 = i0 + -1;

        goto label4;

     label6:
        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r2);

        i0 = $i2;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 > $i2 goto label9;

     label7:
        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = $r2[i0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label8;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = i0 - $i1;

        return i0;

     label8:
        if i0 == $i1 goto label9;

        i0 = i0 + -1;

        goto label7;

     label9:
        return -1;
    }

    public final java.lang.Object lastOrNull()
    {
        java.util.List $r2;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r2 = (java.util.List) r0;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r2);

        $i0 = $i0 + $i1;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        $r3 = $r1[$i0];

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int indexOf(java.lang.Object)>($r1);

        if $i0 != -1 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object remove(int)>($i0);

        return 1;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.Object[] r2;
        java.util.Collection $r1;
        kotlin.collections.ArrayDeque r0;
        int i0, $i1, i2, $i3;
        java.lang.Object r3;
        boolean $z0, $z1;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label19;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        i0 = lengthof r2;

        if i0 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label19;

     label03:
        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $z0 = 0;

        i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        if i2 >= i0 goto label08;

        i2 = r0.<kotlin.collections.ArrayDeque: int head>;

     label04:
        if i2 >= i0 goto label07;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i2];

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        $z1 = $z1 ^ 1;

        if $z1 == 0 goto label05;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i1] = r3;

        $i1 = $i1 + 1;

        goto label06;

     label05:
        $z0 = 1;

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>(r2, null, $i1, i0);

        i0 = $i1;

        goto label17;

     label08:
        i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof r2;

     label09:
        if i2 >= $i3 goto label12;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i2];

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[i2] = null;

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        $z1 = $z1 ^ 1;

        if $z1 == 0 goto label10;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i1] = r3;

        $i1 = $i1 + 1;

        goto label11;

     label10:
        $z0 = 1;

     label11:
        i2 = i2 + 1;

        goto label09;

     label12:
        i2 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i1);

        $i1 = 0;

     label13:
        if $i1 >= i0 goto label16;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[$i1];

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i1] = null;

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        $z1 = $z1 ^ 1;

        if $z1 == 0 goto label14;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[i2] = r3;

        i2 = specialinvoke r0.<kotlin.collections.ArrayDeque: int incremented(int)>(i2);

        goto label15;

     label14:
        $z0 = 1;

     label15:
        $i1 = $i1 + 1;

        goto label13;

     label16:
        i0 = i2;

     label17:
        if $z0 == 0 goto label18;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = i0 - $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int negativeMod(int)>(i0);

        r0.<kotlin.collections.ArrayDeque: int size> = i0;

     label18:
        return $z0;

     label19:
        return 0;
    }

    public java.lang.Object removeAt(int)
    {
        java.lang.Object[] r4, $r5, $r6;
        kotlin.collections.AbstractList$Companion r1;
        kotlin.collections.ArrayDeque r0;
        java.util.List r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r7;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        virtualinvoke r1.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i0, $i1);

        r2 = (java.util.List) r0;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>(r2);

        if $i0 != $i1 goto label1;

        $r3 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object removeLast()>();

        return $r3;

     label1:
        if $i0 != 0 goto label2;

        $r3 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object removeFirst()>();

        return $r3;

     label2:
        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = $i1 + $i0;

        $i1 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i1);

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r3 = r4[$i1];

        $i2 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i2 = $i2 >> 1;

        if $i0 >= $i2 goto label5;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 < $i0 goto label3;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = $i0 + 1;

        $i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, $r5, $i0, $i2, $i1);

        goto label4;

     label3:
        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, $r5, 1, 0, $i1);

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r6 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = lengthof $r6;

        $i0 = $i0 - 1;

        $r7 = $r5[$i0];

        r4[0] = $r7;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = $i0 + 1;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r6 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r6;

        $i2 = $i2 - 1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, $r5, $i0, $i1, $i2);

     label4:
        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        r4[$i0] = null;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int incremented(int)>($i0);

        r0.<kotlin.collections.ArrayDeque: int head> = $i0;

        goto label8;

     label5:
        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        r2 = (java.util.List) r0;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>(r2);

        $i0 = $i0 + $i2;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        if $i1 > $i0 goto label6;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = $i1 + 1;

        $i3 = $i0 + 1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, $r5, $i1, $i2, $i3);

        goto label7;

     label6:
        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = $i1 + 1;

        $r6 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof $r6;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, $r5, $i1, $i2, $i3);

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r5;

        $i1 = $i1 - 1;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r7 = $r5[0];

        r4[$i1] = $r7;

        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r5 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = $i0 + 1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r4, $r5, 0, 1, $i1);

     label7:
        r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4[$i0] = null;

     label8:
        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 - 1;

        r0.<kotlin.collections.ArrayDeque: int size> = $i0;

        return $r3;
    }

    public final java.lang.Object removeFirst()
    {
        java.lang.Object[] r1;
        int $i0;
        java.lang.Object r2;
        java.util.NoSuchElementException $r3;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        r2 = r1[$i0];

        r1 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        r1[$i0] = null;

        $i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int incremented(int)>($i0);

        r0.<kotlin.collections.ArrayDeque: int head> = $i0;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $i0 = $i0 + -1;

        r0.<kotlin.collections.ArrayDeque: int size> = $i0;

        return r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("ArrayDeque is empty.");

        throw $r3;
    }

    public final java.lang.Object removeFirstOrNull()
    {
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object removeFirst()>();

        return $r1;
    }

    public final java.lang.Object removeLast()
    {
        java.lang.Object[] r2;
        kotlin.collections.ArrayDeque r0;
        java.util.List r1;
        int i0, $i1;
        java.lang.Object r3;
        java.util.NoSuchElementException $r4;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        r1 = (java.util.List) r0;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>(r1);

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i0];

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[i0] = null;

        i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + -1;

        r0.<kotlin.collections.ArrayDeque: int size> = i0;

        return r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>("ArrayDeque is empty.");

        throw $r4;
    }

    public final java.lang.Object removeLastOrNull()
    {
        java.lang.Object $r1;
        kotlin.collections.ArrayDeque r0;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object removeLast()>();

        return $r1;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.Object[] r2;
        java.util.Collection $r1;
        kotlin.collections.ArrayDeque r0;
        int i0, $i1, i2, $i3;
        java.lang.Object r3;
        boolean $z0, $z1;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label19;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        i0 = lengthof r2;

        if i0 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label19;

     label03:
        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $z0 = 0;

        i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        if i2 >= i0 goto label08;

        i2 = r0.<kotlin.collections.ArrayDeque: int head>;

     label04:
        if i2 >= i0 goto label07;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i2];

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label05;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i1] = r3;

        $i1 = $i1 + 1;

        goto label06;

     label05:
        $z0 = 1;

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>(r2, null, $i1, i0);

        i0 = $i1;

        goto label17;

     label08:
        i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i3 = lengthof r2;

     label09:
        if i2 >= $i3 goto label12;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[i2];

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[i2] = null;

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label10;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i1] = r3;

        $i1 = $i1 + 1;

        goto label11;

     label10:
        $z0 = 1;

     label11:
        i2 = i2 + 1;

        goto label09;

     label12:
        i2 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i1);

        $i1 = 0;

     label13:
        if $i1 >= i0 goto label16;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r3 = r2[$i1];

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[$i1] = null;

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label14;

        r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r2[i2] = r3;

        i2 = specialinvoke r0.<kotlin.collections.ArrayDeque: int incremented(int)>(i2);

        goto label15;

     label14:
        $z0 = 1;

     label15:
        $i1 = $i1 + 1;

        goto label13;

     label16:
        i0 = i2;

     label17:
        if $z0 == 0 goto label18;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        i0 = i0 - $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int negativeMod(int)>(i0);

        r0.<kotlin.collections.ArrayDeque: int size> = i0;

     label18:
        return $z0;

     label19:
        return 0;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.lang.Object[] $r2;
        kotlin.collections.AbstractList$Companion r3;
        int $i0, $i1;
        java.lang.Object $r1, r4;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        r3 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        virtualinvoke r3.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i0 = $i1 + $i0;

        $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0);

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        r4 = $r2[$i0];

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r2[$i0] = $r1;

        return r4;
    }

    public final java.lang.Object[] testToArray$kotlin_stdlib()
    {
        java.lang.Object[] $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object[] toArray()>();

        return $r1;
    }

    public final java.lang.Object[] testToArray$kotlin_stdlib(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }

    public java.lang.Object[] toArray()
    {
        int $i0;
        java.lang.Object[] $r1;
        kotlin.collections.ArrayDeque r0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        $r1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] $r1, $r2, $r4;
        java.util.Collection $r3;
        kotlin.collections.ArrayDeque r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: kotlin.collections.ArrayDeque;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        if i0 < $i1 goto label1;

        goto label2;

     label1:
        i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $r1 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] arrayOfNulls(java.lang.Object[],int)>($r1, i0);

     label2:
        i0 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        i0 = i0 + $i1;

        i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>(i0);

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        if $i1 >= i0 goto label3;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>($r2, $r1, 0, $i1, i0, 2, null);

        goto label4;

     label3:
        $r3 = (java.util.Collection) r0;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label4;

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = r0.<kotlin.collections.ArrayDeque: int head>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i2 = lengthof $r4;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r2, $r1, 0, $i1, $i2);

        $r2 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $r4 = r0.<kotlin.collections.ArrayDeque: java.lang.Object[] elementData>;

        $i1 = lengthof $r4;

        $i2 = r0.<kotlin.collections.ArrayDeque: int head>;

        $i1 = $i1 - $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r2, $r1, $i1, 0, i0);

     label4:
        i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        if i0 <= $i1 goto label5;

        i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>();

        $r1[i0] = null;

     label5:
        return $r1;
    }
}
