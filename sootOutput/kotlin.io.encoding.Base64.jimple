public class kotlin.io.encoding.Base64 extends java.lang.Object
{
    public static final kotlin.io.encoding.Base64$Default Default;
    private static final kotlin.io.encoding.Base64 Mime;
    private static final kotlin.io.encoding.Base64 UrlSafe;
    private static final int bitsPerByte;
    private static final int bitsPerSymbol;
    public static final int bytesPerGroup;
    private static final int mimeGroupsPerLine;
    public static final int mimeLineLength;
    private static final byte[] mimeLineSeparatorSymbols;
    public static final byte padSymbol;
    public static final int symbolsPerGroup;
    private final boolean isMimeScheme;
    private final boolean isUrlSafe;

    static void <clinit>()
    {
        kotlin.io.encoding.Base64$Default $r0;
        byte[] $r1;
        kotlin.io.encoding.Base64 $r2;

        <kotlin.io.encoding.Base64: int symbolsPerGroup> = 4;

        <kotlin.io.encoding.Base64: byte padSymbol> = 61;

        <kotlin.io.encoding.Base64: int mimeLineLength> = 76;

        <kotlin.io.encoding.Base64: int mimeGroupsPerLine> = 19;

        <kotlin.io.encoding.Base64: int bytesPerGroup> = 3;

        <kotlin.io.encoding.Base64: int bitsPerSymbol> = 6;

        <kotlin.io.encoding.Base64: int bitsPerByte> = 8;

        $r0 = new kotlin.io.encoding.Base64$Default;

        specialinvoke $r0.<kotlin.io.encoding.Base64$Default: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.io.encoding.Base64: kotlin.io.encoding.Base64$Default Default> = $r0;

        $r1 = newarray (byte)[2];

        $r1[0] = 13;

        $r1[1] = 10;

        <kotlin.io.encoding.Base64: byte[] mimeLineSeparatorSymbols> = $r1;

        $r2 = new kotlin.io.encoding.Base64;

        specialinvoke $r2.<kotlin.io.encoding.Base64: void <init>(boolean,boolean)>(1, 0);

        <kotlin.io.encoding.Base64: kotlin.io.encoding.Base64 UrlSafe> = $r2;

        $r2 = new kotlin.io.encoding.Base64;

        specialinvoke $r2.<kotlin.io.encoding.Base64: void <init>(boolean,boolean)>(0, 1);

        <kotlin.io.encoding.Base64: kotlin.io.encoding.Base64 Mime> = $r2;

        return;
    }

    private void <init>(boolean, boolean)
    {
        kotlin.io.encoding.Base64 r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r0 := @this: kotlin.io.encoding.Base64;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.io.encoding.Base64: boolean isUrlSafe> = $z0;

        r0.<kotlin.io.encoding.Base64: boolean isMimeScheme> = $z1;

        $z0 = r0.<kotlin.io.encoding.Base64: boolean isUrlSafe>;

        if $z0 == 0 goto label2;

        $z0 = r0.<kotlin.io.encoding.Base64: boolean isMimeScheme>;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        if $z0 == 0 goto label4;

        return;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        $r1 = "Failed requirement.";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    public void <init>(boolean, boolean, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        kotlin.io.encoding.Base64 r0;
        boolean $z0, $z1;

        r0 := @this: kotlin.io.encoding.Base64;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.io.encoding.Base64: void <init>(boolean,boolean)>($z0, $z1);

        return;
    }

    public static final kotlin.io.encoding.Base64 access$getMime$cp()
    {
        kotlin.io.encoding.Base64 r0;

        r0 = <kotlin.io.encoding.Base64: kotlin.io.encoding.Base64 Mime>;

        return r0;
    }

    public static final byte[] access$getMimeLineSeparatorSymbols$cp()
    {
        byte[] r0;

        r0 = <kotlin.io.encoding.Base64: byte[] mimeLineSeparatorSymbols>;

        return r0;
    }

    public static final kotlin.io.encoding.Base64 access$getUrlSafe$cp()
    {
        kotlin.io.encoding.Base64 r0;

        r0 = <kotlin.io.encoding.Base64: kotlin.io.encoding.Base64 UrlSafe>;

        return r0;
    }

    private final void checkDestinationBounds(int, int, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        kotlin.io.encoding.Base64 r0;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: kotlin.io.encoding.Base64;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i1 < 0 goto label2;

        if $i1 > $i0 goto label2;

        i3 = $i1 + $i2;

        if i3 < 0 goto label1;

        if i3 > $i0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The destination array does not have enough capacity, destination offset: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", destination size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", capacity needed: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("destination offset: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", destination size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static byte[] decode$default(kotlin.io.encoding.Base64, java.lang.CharSequence, int, int, int, java.lang.Object)
    {
        byte[] $r3;
        java.lang.UnsupportedOperationException $r4;
        java.lang.CharSequence $r1;
        kotlin.io.encoding.Base64 $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlin.io.encoding.Base64;

        $r1 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        if $r2 != null goto label3;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

     label2:
        $r3 = virtualinvoke $r0.<kotlin.io.encoding.Base64: byte[] decode(java.lang.CharSequence,int,int)>($r1, $i0, $i1);

        return $r3;

     label3:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: decode");

        throw $r4;
    }

    public static byte[] decode$default(kotlin.io.encoding.Base64, byte[], int, int, int, java.lang.Object)
    {
        byte[] $r0;
        java.lang.UnsupportedOperationException $r3;
        kotlin.io.encoding.Base64 $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r1 := @parameter0: kotlin.io.encoding.Base64;

        $r0 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        if $r2 != null goto label3;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = lengthof $r0;

     label2:
        $r0 = virtualinvoke $r1.<kotlin.io.encoding.Base64: byte[] decode(byte[],int,int)>($r0, $i0, $i1);

        return $r0;

     label3:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: decode");

        throw $r3;
    }

    private final int decodeImpl(byte[], byte[], int, int, int)
    {
        byte[] $r1, $r2;
        kotlin.io.encoding.Base64 r0;
        short s9;
        byte b8;
        int[] $r3;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i10, i11;
        java.lang.String $r5;
        boolean z0;
        char c12;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder r4, $r6;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        z0 = r0.<kotlin.io.encoding.Base64: boolean isUrlSafe>;

        if z0 == 0 goto label01;

        $r3 = staticinvoke <kotlin.io.encoding.Base64Kt: int[] access$getBase64UrlDecodeMap$p()>();

        goto label02;

     label01:
        $r3 = staticinvoke <kotlin.io.encoding.Base64Kt: int[] access$getBase64DecodeMap$p()>();

     label02:
        i3 = 0;

        i4 = -8;

        i5 = $i1;

        $i1 = $i0;

     label03:
        if i5 >= $i2 goto label09;

        if i4 != -8 goto label05;

        i6 = i5 + 3;

        if i6 >= $i2 goto label05;

        i7 = i5 + 1;

        b8 = $r1[i5];

        s9 = (short) b8;

        s9 = s9 & 255;

        i5 = (int) s9;

        i6 = $r3[i5];

        i5 = i7 + 1;

        b8 = $r1[i7];

        s9 = (short) b8;

        s9 = s9 & 255;

        i7 = (int) s9;

        i7 = $r3[i7];

        i10 = i5 + 1;

        b8 = $r1[i5];

        s9 = (short) b8;

        s9 = s9 & 255;

        i5 = (int) s9;

        i11 = $r3[i5];

        i5 = i10 + 1;

        b8 = $r1[i10];

        s9 = (short) b8;

        s9 = s9 & 255;

        i10 = (int) s9;

        i10 = $r3[i10];

        i6 = i6 << 18;

        i7 = i7 << 12;

        i6 = i6 | i7;

        i7 = i11 << 6;

        i6 = i6 | i7;

        i6 = i6 | i10;

        if i6 < 0 goto label04;

        i7 = $i1 + 1;

        i11 = i6 >> 16;

        b8 = (byte) i11;

        $r2[$i1] = b8;

        $i1 = i7 + 1;

        i11 = i6 >> 8;

        b8 = (byte) i11;

        $r2[i7] = b8;

        b8 = (byte) i6;

        $r2[$i1] = b8;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        i5 = i5 + -4;

     label05:
        b8 = $r1[i5];

        s9 = (short) b8;

        s9 = s9 & 255;

        i6 = (int) s9;

        i6 = $r3[i6];

        if i6 >= 0 goto label08;

        if i6 != -2 goto label06;

        i5 = specialinvoke r0.<kotlin.io.encoding.Base64: int handlePaddingSymbol(byte[],int,int,int)>($r1, i5, $i2, i4);

        goto label09;

     label06:
        z0 = r0.<kotlin.io.encoding.Base64: boolean isMimeScheme>;

        if z0 == 0 goto label07;

        i5 = i5 + 1;

        goto label03;

     label07:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid symbol \'");

        c12 = (char) s9;

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'(");

        $i0 = staticinvoke <kotlin.text.CharsKt: int checkRadix(int)>(8);

        $i1 = (int) s9;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i1, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "toString(this, checkRadix(radix))");

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") at index ");

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label08:
        i5 = i5 + 1;

        i3 = i3 << 6;

        i3 = i3 | i6;

        i4 = i4 + 6;

        if i4 < 0 goto label03;

        i6 = $i1 + 1;

        i7 = i3 >>> i4;

        b8 = (byte) i7;

        $r2[$i1] = b8;

        $i1 = 1 << i4;

        $i1 = $i1 - 1;

        i3 = i3 & $i1;

        i4 = i4 + -8;

        $i1 = i6;

        goto label03;

     label09:
        if i4 == -2 goto label11;

        i4 = specialinvoke r0.<kotlin.io.encoding.Base64: int skipIllegalSymbolsIfMime(byte[],int,int)>($r1, i5, $i2);

        if i4 < $i2 goto label10;

        $i0 = $i1 - $i0;

        return $i0;

     label10:
        b8 = $r1[i4];

        s9 = (short) b8;

        s9 = s9 & 255;

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Symbol \'");

        c12 = (char) s9;

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'(");

        $i0 = staticinvoke <kotlin.text.CharsKt: int checkRadix(int)>(8);

        $i1 = (int) s9;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i1, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "toString(this, checkRadix(radix))");

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") at index ");

        $i0 = i4 + -1;

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is prohibited after the pad character");

        $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label11:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The last unit of input does not have enough bits");

        throw $r7;
    }

    public static int decodeIntoByteArray$default(kotlin.io.encoding.Base64, java.lang.CharSequence, byte[], int, int, int, int, java.lang.Object)
    {
        byte[] $r0;
        java.lang.UnsupportedOperationException $r4;
        java.lang.CharSequence $r2;
        kotlin.io.encoding.Base64 $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r3;

        $r1 := @parameter0: kotlin.io.encoding.Base64;

        $r2 := @parameter1: java.lang.CharSequence;

        $r0 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i3 := @parameter5: int;

        $i1 := @parameter6: int;

        $r3 := @parameter7: java.lang.Object;

        if $r3 != null goto label4;

        $i4 = $i1 & 4;

        if $i4 == 0 goto label1;

        $i2 = 0;

        goto label1;

     label1:
        $i4 = $i1 & 8;

        if $i4 == 0 goto label2;

        $i0 = 0;

        goto label2;

     label2:
        $i1 = $i1 & 16;

        if $i1 == 0 goto label3;

        $i3 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        goto label3;

     label3:
        $i2 = virtualinvoke $r1.<kotlin.io.encoding.Base64: int decodeIntoByteArray(java.lang.CharSequence,byte[],int,int,int)>($r2, $r0, $i2, $i0, $i3);

        return $i2;

     label4:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: decodeIntoByteArray");

        throw $r4;
    }

    public static int decodeIntoByteArray$default(kotlin.io.encoding.Base64, byte[], byte[], int, int, int, int, java.lang.Object)
    {
        byte[] $r0, $r2;
        java.lang.UnsupportedOperationException $r4;
        kotlin.io.encoding.Base64 $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r3;

        $r1 := @parameter0: kotlin.io.encoding.Base64;

        $r2 := @parameter1: byte[];

        $r0 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i3 := @parameter5: int;

        $i1 := @parameter6: int;

        $r3 := @parameter7: java.lang.Object;

        if $r3 != null goto label4;

        $i4 = $i1 & 4;

        if $i4 == 0 goto label1;

        $i2 = 0;

        goto label1;

     label1:
        $i4 = $i1 & 8;

        if $i4 == 0 goto label2;

        $i0 = 0;

        goto label2;

     label2:
        $i1 = $i1 & 16;

        if $i1 == 0 goto label3;

        $i3 = lengthof $r2;

        goto label3;

     label3:
        $i2 = virtualinvoke $r1.<kotlin.io.encoding.Base64: int decodeIntoByteArray(byte[],byte[],int,int,int)>($r2, $r0, $i2, $i0, $i3);

        return $i2;

     label4:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: decodeIntoByteArray");

        throw $r4;
    }

    private final int decodeSize(byte[], int, int)
    {
        byte[] $r1;
        kotlin.io.encoding.Base64 r0;
        long l6, l7;
        short s4;
        byte b3;
        int[] $r2;
        int $i0, $i1, i2, i5;
        java.lang.String $r4;
        boolean z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder r3, $r5;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i1 - $i0;

        if i2 != 0 goto label1;

        return 0;

     label1:
        if i2 == 1 goto label7;

        z0 = r0.<kotlin.io.encoding.Base64: boolean isMimeScheme>;

        if z0 == 0 goto label5;

     label2:
        if $i0 >= $i1 goto label6;

        b3 = $r1[$i0];

        s4 = (short) b3;

        s4 = s4 & 255;

        $r2 = staticinvoke <kotlin.io.encoding.Base64Kt: int[] access$getBase64DecodeMap$p()>();

        i5 = (int) s4;

        i5 = $r2[i5];

        if i5 >= 0 goto label4;

        if i5 != -2 goto label3;

        $i0 = $i1 - $i0;

        i2 = i2 - $i0;

        goto label6;

     label3:
        i2 = i2 + -1;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        $i0 = $i1 + -1;

        b3 = $r1[$i0];

        $i0 = (int) b3;

        if $i0 != 61 goto label6;

        i2 = i2 + -1;

        $i0 = $i1 + -2;

        b3 = $r1[$i0];

        $i0 = (int) b3;

        if $i0 != 61 goto label6;

        i2 = i2 + -1;

     label6:
        l6 = (long) i2;

        l7 = (long) 6;

        l6 = l6 * l7;

        l7 = (long) 8;

        l6 = l6 / l7;

        $i0 = (int) l6;

        return $i0;

     label7:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input should have at list 2 symbols for Base64 decoding, startIndex: ");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", endIndex: ");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    public static java.lang.String encode$default(kotlin.io.encoding.Base64, byte[], int, int, int, java.lang.Object)
    {
        byte[] $r2;
        java.lang.UnsupportedOperationException $r4;
        kotlin.io.encoding.Base64 $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        java.lang.String $r0;

        $r1 := @parameter0: kotlin.io.encoding.Base64;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        if $r3 != null goto label3;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = lengthof $r2;

     label2:
        $r0 = virtualinvoke $r1.<kotlin.io.encoding.Base64: java.lang.String encode(byte[],int,int)>($r2, $i0, $i1);

        return $r0;

     label3:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: encode");

        throw $r4;
    }

    public static int encodeIntoByteArray$default(kotlin.io.encoding.Base64, byte[], byte[], int, int, int, int, java.lang.Object)
    {
        byte[] $r0, $r2;
        java.lang.UnsupportedOperationException $r4;
        kotlin.io.encoding.Base64 $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r3;

        $r1 := @parameter0: kotlin.io.encoding.Base64;

        $r2 := @parameter1: byte[];

        $r0 := @parameter2: byte[];

        $i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i3 := @parameter5: int;

        $i1 := @parameter6: int;

        $r3 := @parameter7: java.lang.Object;

        if $r3 != null goto label4;

        $i4 = $i1 & 4;

        if $i4 == 0 goto label1;

        $i2 = 0;

        goto label1;

     label1:
        $i4 = $i1 & 8;

        if $i4 == 0 goto label2;

        $i0 = 0;

        goto label2;

     label2:
        $i1 = $i1 & 16;

        if $i1 == 0 goto label3;

        $i3 = lengthof $r2;

        goto label3;

     label3:
        $i2 = virtualinvoke $r1.<kotlin.io.encoding.Base64: int encodeIntoByteArray(byte[],byte[],int,int,int)>($r2, $r0, $i2, $i0, $i3);

        return $i2;

     label4:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: encodeIntoByteArray");

        throw $r4;
    }

    private final int encodeSize(int)
    {
        kotlin.io.encoding.Base64 r0;
        int $i0, i1;
        java.lang.IllegalArgumentException $r1;
        boolean z0;

        r0 := @this: kotlin.io.encoding.Base64;

        $i0 := @parameter0: int;

        $i0 = $i0 + 3;

        $i0 = $i0 + -1;

        $i0 = $i0 / 3;

        z0 = r0.<kotlin.io.encoding.Base64: boolean isMimeScheme>;

        if z0 == 0 goto label1;

        i1 = $i0 + -1;

        i1 = i1 / 19;

        goto label2;

     label1:
        i1 = 0;

     label2:
        $i0 = $i0 * 4;

        i1 = i1 * 2;

        $i0 = $i0 + i1;

        if $i0 < 0 goto label3;

        return $i0;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input is too big");

        throw $r1;
    }

    public static java.lang.Appendable encodeToAppendable$default(kotlin.io.encoding.Base64, byte[], java.lang.Appendable, int, int, int, java.lang.Object)
    {
        byte[] $r2;
        java.lang.UnsupportedOperationException $r4;
        java.lang.Appendable $r0;
        kotlin.io.encoding.Base64 $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;

        $r1 := @parameter0: kotlin.io.encoding.Base64;

        $r2 := @parameter1: byte[];

        $r0 := @parameter2: java.lang.Appendable;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        if $r3 != null goto label3;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label2;

        $i1 = lengthof $r2;

     label2:
        $r0 = virtualinvoke $r1.<kotlin.io.encoding.Base64: java.lang.Appendable encodeToAppendable(byte[],java.lang.Appendable,int,int)>($r2, $r0, $i0, $i1);

        return $r0;

     label3:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: encodeToAppendable");

        throw $r4;
    }

    public static byte[] encodeToByteArray$default(kotlin.io.encoding.Base64, byte[], int, int, int, java.lang.Object)
    {
        byte[] $r0;
        java.lang.UnsupportedOperationException $r3;
        kotlin.io.encoding.Base64 $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r1 := @parameter0: kotlin.io.encoding.Base64;

        $r0 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        if $r2 != null goto label3;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = lengthof $r0;

     label2:
        $r0 = virtualinvoke $r1.<kotlin.io.encoding.Base64: byte[] encodeToByteArray(byte[],int,int)>($r0, $i0, $i1);

        return $r0;

     label3:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: encodeToByteArray");

        throw $r3;
    }

    private final int handlePaddingSymbol(byte[], int, int, int)
    {
        byte[] $r1;
        java.lang.IllegalStateException $r4;
        kotlin.io.encoding.Base64 r0;
        java.lang.IllegalArgumentException $r6;
        byte $b3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r3, $r5;
        java.lang.String $r2;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        lookupswitch($i2)
        {
            case -8: goto label6;
            case -7: goto label1;
            case -6: goto label5;
            case -5: goto label1;
            case -4: goto label3;
            case -3: goto label1;
            case -2: goto label2;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.IllegalStateException;

        $r2 = "Unreachable";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r4;

     label2:
        $i0 = $i0 + 1;

        return $i0;

     label3:
        $i0 = $i0 + 1;

        $i0 = specialinvoke r0.<kotlin.io.encoding.Base64: int skipIllegalSymbolsIfMime(byte[],int,int)>($r1, $i0, $i1);

        if $i0 == $i1 goto label4;

        $b3 = $r1[$i0];

        $i1 = (int) $b3;

        if $i1 != 61 goto label4;

        $i0 = $i0 + 1;

        return $i0;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing one pad character at index ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r6;

     label5:
        $i0 = $i0 + 1;

        return $i0;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redundant pad character at index ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r6;
    }

    private final int skipIllegalSymbolsIfMime(byte[], int, int)
    {
        byte[] $r1;
        kotlin.io.encoding.Base64 r0;
        short s3;
        byte b2;
        int[] $r2;
        int $i0, $i1, $i4;
        boolean z0;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        z0 = r0.<kotlin.io.encoding.Base64: boolean isMimeScheme>;

        if z0 != 0 goto label1;

        return $i0;

     label1:
        if $i0 >= $i1 goto label3;

        b2 = $r1[$i0];

        s3 = (short) b2;

        s3 = s3 & 255;

        $r2 = staticinvoke <kotlin.io.encoding.Base64Kt: int[] access$getBase64DecodeMap$p()>();

        $i4 = (int) s3;

        $i4 = $r2[$i4];

        if $i4 == -1 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $i0;
    }

    public final java.lang.String bytesToStringImpl$kotlin_stdlib(byte[])
    {
        byte[] $r1;
        kotlin.io.encoding.Base64 r0;
        char $c1;
        byte b0;
        int $i2, $i3;
        java.lang.StringBuilder r3;
        java.lang.String $r2;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        r3 = new java.lang.StringBuilder;

        $i2 = lengthof $r1;

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $i2 = lengthof $r1;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        b0 = $r1[$i3];

        $c1 = (char) b0;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "stringBuilder.toString()");

        return $r2;
    }

    public final byte[] charsToBytesImpl$kotlin_stdlib(java.lang.CharSequence, int, int)
    {
        byte[] r2;
        java.lang.CharSequence $r1;
        kotlin.io.encoding.Base64 r0;
        char $c3;
        byte $b5;
        int $i0, $i1, $i2, i4;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        virtualinvoke r0.<kotlin.io.encoding.Base64: void checkSourceBounds$kotlin_stdlib(int,int,int)>($i2, $i0, $i1);

        $i2 = $i1 - $i0;

        r2 = newarray (byte)[$i2];

        $i2 = 0;

     label1:
        if $i0 >= $i1 goto label4;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        i4 = (int) $c3;

        if i4 > 255 goto label2;

        $b5 = (byte) $c3;

        r2[$i2] = $b5;

        $i2 = $i2 + 1;

        goto label3;

     label2:
        r2[$i2] = 63;

        $i2 = $i2 + 1;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return r2;
    }

    public final void checkSourceBounds$kotlin_stdlib(int, int, int)
    {
        kotlin.io.encoding.Base64 r0;
        kotlin.collections.AbstractList$Companion $r1;
        int $i0, $i1, $i2;

        r0 := @this: kotlin.io.encoding.Base64;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkBoundsIndexes$kotlin_stdlib(int,int,int)>($i1, $i2, $i0);

        return;
    }

    public final byte[] decode(java.lang.CharSequence, int, int)
    {
        byte[] $r4, $r5;
        java.lang.CharSequence $r1;
        kotlin.io.encoding.Base64 r0;
        java.nio.charset.Charset $r3;
        int $i0, $i1, $i2;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        virtualinvoke r0.<kotlin.io.encoding.Base64: void checkSourceBounds$kotlin_stdlib(int,int,int)>($i2, $i0, $i1);

        $r2 = (java.lang.String) $r1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset ISO_8859_1>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type java.lang.String");

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $r5 = $r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "this as java.lang.String).getBytes(charset)");

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<kotlin.io.encoding.Base64: byte[] charsToBytesImpl$kotlin_stdlib(java.lang.CharSequence,int,int)>($r1, $i0, $i1);

     label2:
        $r4 = staticinvoke <kotlin.io.encoding.Base64: byte[] decode$default(kotlin.io.encoding.Base64,byte[],int,int,int,java.lang.Object)>(r0, $r5, 0, 0, 6, null);

        return $r4;
    }

    public final byte[] decode(byte[], int, int)
    {
        byte[] $r1, r2;
        java.lang.IllegalStateException $r3;
        kotlin.io.encoding.Base64 r0;
        int $i0, $i1, i2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        i2 = lengthof $r1;

        virtualinvoke r0.<kotlin.io.encoding.Base64: void checkSourceBounds$kotlin_stdlib(int,int,int)>(i2, $i0, $i1);

        i2 = specialinvoke r0.<kotlin.io.encoding.Base64: int decodeSize(byte[],int,int)>($r1, $i0, $i1);

        r2 = newarray (byte)[i2];

        $i0 = specialinvoke r0.<kotlin.io.encoding.Base64: int decodeImpl(byte[],byte[],int,int,int)>($r1, r2, 0, $i0, $i1);

        $i1 = lengthof r2;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return r2;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "Check failed.";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public final int decodeIntoByteArray(java.lang.CharSequence, byte[], int, int, int)
    {
        byte[] $r2, $r5, $r6;
        java.lang.CharSequence $r1;
        kotlin.io.encoding.Base64 r0;
        java.nio.charset.Charset $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "destination");

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $i3 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        virtualinvoke r0.<kotlin.io.encoding.Base64: void checkSourceBounds$kotlin_stdlib(int,int,int)>($i3, $i1, $i2);

        $r3 = (java.lang.String) $r1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $r4 = <kotlin.text.Charsets: java.nio.charset.Charset ISO_8859_1>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type java.lang.String");

        $r5 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r6 = $r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "this as java.lang.String).getBytes(charset)");

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<kotlin.io.encoding.Base64: byte[] charsToBytesImpl$kotlin_stdlib(java.lang.CharSequence,int,int)>($r1, $i1, $i2);

     label2:
        $i0 = staticinvoke <kotlin.io.encoding.Base64: int decodeIntoByteArray$default(kotlin.io.encoding.Base64,byte[],byte[],int,int,int,int,java.lang.Object)>(r0, $r6, $r2, $i0, 0, 0, 24, null);

        return $i0;
    }

    public final int decodeIntoByteArray(byte[], byte[], int, int, int)
    {
        byte[] $r1, $r2;
        kotlin.io.encoding.Base64 r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "destination");

        $i3 = lengthof $r1;

        virtualinvoke r0.<kotlin.io.encoding.Base64: void checkSourceBounds$kotlin_stdlib(int,int,int)>($i3, $i1, $i2);

        $i3 = lengthof $r2;

        $i4 = specialinvoke r0.<kotlin.io.encoding.Base64: int decodeSize(byte[],int,int)>($r1, $i1, $i2);

        specialinvoke r0.<kotlin.io.encoding.Base64: void checkDestinationBounds(int,int,int)>($i3, $i0, $i4);

        $i0 = specialinvoke r0.<kotlin.io.encoding.Base64: int decodeImpl(byte[],byte[],int,int,int)>($r1, $r2, $i0, $i1, $i2);

        return $i0;
    }

    public final java.lang.String encode(byte[], int, int)
    {
        byte[] $r1;
        java.nio.charset.Charset $r3;
        kotlin.io.encoding.Base64 r0;
        int $i0, $i1;
        java.lang.String $r2;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $r1 = virtualinvoke r0.<kotlin.io.encoding.Base64: byte[] encodeToByteArrayImpl$kotlin_stdlib(byte[],int,int)>($r1, $i0, $i1);

        $r2 = new java.lang.String;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset ISO_8859_1>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r3);

        return $r2;
    }

    public final int encodeIntoByteArray(byte[], byte[], int, int, int)
    {
        byte[] $r1, $r2;
        kotlin.io.encoding.Base64 r0;
        int $i0, $i1, $i2;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "destination");

        $i0 = virtualinvoke r0.<kotlin.io.encoding.Base64: int encodeIntoByteArrayImpl$kotlin_stdlib(byte[],byte[],int,int,int)>($r1, $r2, $i0, $i1, $i2);

        return $i0;
    }

    public final int encodeIntoByteArrayImpl$kotlin_stdlib(byte[], byte[], int, int, int)
    {
        byte[] $r1, $r2, $r3, r4;
        java.lang.IllegalStateException $r6;
        kotlin.io.encoding.Base64 r0;
        short s9, s11, s12;
        byte b8;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i10, $i13;
        java.lang.String $r5;
        boolean z0;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "destination");

        i3 = lengthof $r1;

        virtualinvoke r0.<kotlin.io.encoding.Base64: void checkSourceBounds$kotlin_stdlib(int,int,int)>(i3, $i1, $i2);

        i3 = lengthof $r2;

        i4 = $i2 - $i1;

        i4 = specialinvoke r0.<kotlin.io.encoding.Base64: int encodeSize(int)>(i4);

        specialinvoke r0.<kotlin.io.encoding.Base64: void checkDestinationBounds(int,int,int)>(i3, $i0, i4);

        z0 = r0.<kotlin.io.encoding.Base64: boolean isUrlSafe>;

        if z0 == 0 goto label01;

        $r3 = staticinvoke <kotlin.io.encoding.Base64Kt: byte[] access$getBase64UrlEncodeMap$p()>();

        goto label02;

     label01:
        $r3 = staticinvoke <kotlin.io.encoding.Base64Kt: byte[] access$getBase64EncodeMap$p()>();

     label02:
        i5 = $i1;

        $i1 = $i0;

        z0 = r0.<kotlin.io.encoding.Base64: boolean isMimeScheme>;

        if z0 == 0 goto label03;

        i3 = 19;

        goto label04;

     label03:
        i3 = 2147483647;

     label04:
        i4 = i5 + 2;

        z0 = 0;

        if i4 >= $i2 goto label07;

        i4 = $i2 - i5;

        i4 = i4 / 3;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i3);

        i6 = 0;

     label05:
        if i6 >= i4 goto label06;

        i7 = i5 + 1;

        b8 = $r1[i5];

        s9 = (short) b8;

        s9 = s9 & 255;

        i10 = i7 + 1;

        b8 = $r1[i7];

        s11 = (short) b8;

        s11 = s11 & 255;

        i5 = i10 + 1;

        b8 = $r1[i10];

        s12 = (short) b8;

        s12 = s12 & 255;

        i7 = (int) s9;

        i7 = i7 << 16;

        i10 = (int) s11;

        i10 = i10 << 8;

        i7 = i7 | i10;

        i10 = (int) s12;

        i7 = i7 | i10;

        i10 = $i1 + 1;

        $i13 = i7 >>> 18;

        b8 = $r3[$i13];

        $r2[$i1] = b8;

        $i1 = i10 + 1;

        $i13 = i7 >>> 12;

        $i13 = $i13 & 63;

        b8 = $r3[$i13];

        $r2[i10] = b8;

        i10 = $i1 + 1;

        $i13 = i7 >>> 6;

        $i13 = $i13 & 63;

        b8 = $r3[$i13];

        $r2[$i1] = b8;

        $i1 = i10 + 1;

        i7 = i7 & 63;

        b8 = $r3[i7];

        $r2[i10] = b8;

        i6 = i6 + 1;

        goto label05;

     label06:
        if i4 != i3 goto label04;

        if i5 == $i2 goto label04;

        i4 = $i1 + 1;

        r4 = <kotlin.io.encoding.Base64: byte[] mimeLineSeparatorSymbols>;

        b8 = r4[0];

        $r2[$i1] = b8;

        $i1 = i4 + 1;

        r4 = <kotlin.io.encoding.Base64: byte[] mimeLineSeparatorSymbols>;

        b8 = r4[1];

        $r2[i4] = b8;

        goto label04;

     label07:
        i3 = $i2 - i5;

        lookupswitch(i3)
        {
            case 1: goto label10;
            case 2: goto label09;
            default: goto label08;
        };

     label08:
        goto label11;

     label09:
        i4 = i5 + 1;

        b8 = $r1[i5];

        s9 = (short) b8;

        s9 = s9 & 255;

        i3 = i4 + 1;

        b8 = $r1[i4];

        s11 = (short) b8;

        s11 = s11 & 255;

        i4 = (int) s9;

        i4 = i4 << 10;

        i6 = (int) s11;

        i6 = i6 << 2;

        i4 = i4 | i6;

        i6 = $i1 + 1;

        i5 = i4 >>> 12;

        b8 = $r3[i5];

        $r2[$i1] = b8;

        $i1 = i6 + 1;

        i5 = i4 >>> 6;

        i5 = i5 & 63;

        b8 = $r3[i5];

        $r2[i6] = b8;

        i6 = $i1 + 1;

        i4 = i4 & 63;

        b8 = $r3[i4];

        $r2[$i1] = b8;

        $i1 = i6 + 1;

        $r2[i6] = 61;

        i5 = i3;

        goto label11;

     label10:
        i3 = i5 + 1;

        b8 = $r1[i5];

        s9 = (short) b8;

        s9 = s9 & 255;

        i4 = (int) s9;

        i6 = i4 << 4;

        i4 = $i1 + 1;

        i5 = i6 >>> 6;

        b8 = $r3[i5];

        $r2[$i1] = b8;

        $i1 = i4 + 1;

        i6 = i6 & 63;

        b8 = $r3[i6];

        $r2[i4] = b8;

        i4 = $i1 + 1;

        $r2[$i1] = 61;

        $i1 = i4 + 1;

        $r2[i4] = 61;

        i5 = i3;

     label11:
        if i5 != $i2 goto label12;

        z0 = 1;

     label12:
        if z0 == 0 goto label13;

        $i0 = $i1 - $i0;

        return $i0;

     label13:
        $r6 = new java.lang.IllegalStateException;

        $r5 = "Check failed.";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r6;
    }

    public final java.lang.Appendable encodeToAppendable(byte[], java.lang.Appendable, int, int)
    {
        byte[] $r1;
        java.lang.CharSequence $r5;
        kotlin.io.encoding.Base64 r0;
        java.lang.Appendable $r2;
        java.nio.charset.Charset $r3;
        int $i0, $i1;
        java.lang.String $r4;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.Appendable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "destination");

        $r1 = virtualinvoke r0.<kotlin.io.encoding.Base64: byte[] encodeToByteArrayImpl$kotlin_stdlib(byte[],int,int)>($r1, $i0, $i1);

        $r4 = new java.lang.String;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset ISO_8859_1>;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r3);

        $r5 = (java.lang.CharSequence) $r4;

        interfaceinvoke $r2.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

        return $r2;
    }

    public final byte[] encodeToByteArray(byte[], int, int)
    {
        byte[] $r1;
        kotlin.io.encoding.Base64 r0;
        int $i0, $i1;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $r1 = virtualinvoke r0.<kotlin.io.encoding.Base64: byte[] encodeToByteArrayImpl$kotlin_stdlib(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }

    public final byte[] encodeToByteArrayImpl$kotlin_stdlib(byte[], int, int)
    {
        byte[] $r1, r2;
        kotlin.io.encoding.Base64 r0;
        int $i0, $i1, $i2;

        r0 := @this: kotlin.io.encoding.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $i2 = lengthof $r1;

        virtualinvoke r0.<kotlin.io.encoding.Base64: void checkSourceBounds$kotlin_stdlib(int,int,int)>($i2, $i0, $i1);

        $i2 = $i1 - $i0;

        $i2 = specialinvoke r0.<kotlin.io.encoding.Base64: int encodeSize(int)>($i2);

        r2 = newarray (byte)[$i2];

        virtualinvoke r0.<kotlin.io.encoding.Base64: int encodeIntoByteArrayImpl$kotlin_stdlib(byte[],byte[],int,int,int)>($r1, r2, 0, $i0, $i1);

        return r2;
    }

    public final boolean isMimeScheme$kotlin_stdlib()
    {
        kotlin.io.encoding.Base64 r0;
        boolean z0;

        r0 := @this: kotlin.io.encoding.Base64;

        z0 = r0.<kotlin.io.encoding.Base64: boolean isMimeScheme>;

        return z0;
    }

    public final boolean isUrlSafe$kotlin_stdlib()
    {
        kotlin.io.encoding.Base64 r0;
        boolean z0;

        r0 := @this: kotlin.io.encoding.Base64;

        z0 = r0.<kotlin.io.encoding.Base64: boolean isUrlSafe>;

        return z0;
    }
}
