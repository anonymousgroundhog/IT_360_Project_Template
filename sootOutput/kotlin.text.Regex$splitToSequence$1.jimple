final class kotlin.text.Regex$splitToSequence$1 extends kotlin.coroutines.jvm.internal.RestrictedSuspendLambda implements kotlin.jvm.functions.Function2
{
    final java.lang.CharSequence $input;
    final int $limit;
    int I$0;
    private java.lang.Object L$0;
    java.lang.Object L$1;
    int label;
    final kotlin.text.Regex this$0;

    void <init>(kotlin.text.Regex, java.lang.CharSequence, int, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r3;
        java.lang.CharSequence $r2;
        kotlin.text.Regex$splitToSequence$1 r0;
        int $i0;
        kotlin.text.Regex $r1;

        r0 := @this: kotlin.text.Regex$splitToSequence$1;

        $r1 := @parameter0: kotlin.text.Regex;

        $r2 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        r0.<kotlin.text.Regex$splitToSequence$1: kotlin.text.Regex this$0> = $r1;

        r0.<kotlin.text.Regex$splitToSequence$1: java.lang.CharSequence $input> = $r2;

        r0.<kotlin.text.Regex$splitToSequence$1: int $limit> = $i0;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.RestrictedSuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        java.lang.CharSequence $r4;
        kotlin.text.Regex$splitToSequence$1 r0, $r5;
        int $i0;
        java.lang.Object $r1;
        kotlin.text.Regex $r3;

        r0 := @this: kotlin.text.Regex$splitToSequence$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = new kotlin.text.Regex$splitToSequence$1;

        $r3 = r0.<kotlin.text.Regex$splitToSequence$1: kotlin.text.Regex this$0>;

        $r4 = r0.<kotlin.text.Regex$splitToSequence$1: java.lang.CharSequence $input>;

        $i0 = r0.<kotlin.text.Regex$splitToSequence$1: int $limit>;

        specialinvoke $r5.<kotlin.text.Regex$splitToSequence$1: void <init>(kotlin.text.Regex,java.lang.CharSequence,int,kotlin.coroutines.Continuation)>($r3, $r4, $i0, $r2);

        $r5.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r5;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r4;
        kotlin.text.Regex$splitToSequence$1 r0;
        java.lang.Object $r1, $r2;
        kotlin.sequences.SequenceScope $r3;

        r0 := @this: kotlin.text.Regex$splitToSequence$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.sequences.SequenceScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlin.text.Regex$splitToSequence$1: java.lang.Object invoke(kotlin.sequences.SequenceScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlin.sequences.SequenceScope, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        kotlin.text.Regex$splitToSequence$1 r0;
        java.lang.Object $r4;
        kotlin.sequences.SequenceScope $r1;

        r0 := @this: kotlin.text.Regex$splitToSequence$1;

        $r1 := @parameter0: kotlin.sequences.SequenceScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlin.text.Regex$splitToSequence$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlin.text.Regex$splitToSequence$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlin.text.Regex$splitToSequence$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        kotlin.coroutines.Continuation $r13;
        kotlin.text.Regex r8;
        java.util.regex.Matcher r6, $r11;
        kotlin.text.Regex$splitToSequence$1 r0, r4;
        int i0, i1, $i2, $i3;
        java.lang.String $r12;
        kotlin.sequences.SequenceScope $r7;
        boolean $z0;
        java.lang.CharSequence $r10, r14;
        kotlin.Unit r15;
        java.lang.Object $r1, $r2, r5;
        java.util.regex.Pattern $r9;

        r0 := @this: kotlin.text.Regex$splitToSequence$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = r0.<kotlin.text.Regex$splitToSequence$1: int label>;

        lookupswitch(i0)
        {
            case 0: goto label05;
            case 1: goto label04;
            case 2: goto label03;
            case 3: goto label02;
            default: goto label01;
        };

     label01:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label10;

     label03:
        r4 = r0;

        i0 = r0.<kotlin.text.Regex$splitToSequence$1: int I$0>;

        r5 = r0.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$1>;

        r6 = (java.util.regex.Matcher) r5;

        r5 = r0.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$0>;

        $r7 = (kotlin.sequences.SequenceScope) r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label08;

     label04:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label12;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r4 = r0;

        $r1 = r0.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$0>;

        $r7 = (kotlin.sequences.SequenceScope) $r1;

        r8 = r0.<kotlin.text.Regex$splitToSequence$1: kotlin.text.Regex this$0>;

        $r9 = staticinvoke <kotlin.text.Regex: java.util.regex.Pattern access$getNativePattern$p(kotlin.text.Regex)>(r8);

        $r10 = r0.<kotlin.text.Regex$splitToSequence$1: java.lang.CharSequence $input>;

        $r11 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r10);

        r6 = $r11;

        i0 = r0.<kotlin.text.Regex$splitToSequence$1: int $limit>;

        if i0 == 1 goto label11;

        $z0 = virtualinvoke $r11.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label06;

        goto label11;

     label06:
        i0 = 0;

        i1 = 0;

     label07:
        $r10 = r4.<kotlin.text.Regex$splitToSequence$1: java.lang.CharSequence $input>;

        $i2 = virtualinvoke r6.<java.util.regex.Matcher: int start()>();

        $r10 = interfaceinvoke $r10.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, $i2);

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r13 = (kotlin.coroutines.Continuation) r4;

        r4.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$0> = $r7;

        r4.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$1> = r6;

        r4.<kotlin.text.Regex$splitToSequence$1: int I$0> = i0;

        r4.<kotlin.text.Regex$splitToSequence$1: int label> = 2;

        $r1 = virtualinvoke $r7.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r12, $r13);

        if $r1 != $r2 goto label08;

        return $r2;

     label08:
        $i2 = virtualinvoke r6.<java.util.regex.Matcher: int end()>();

        i1 = $i2;

        i0 = i0 + 1;

        $i3 = r4.<kotlin.text.Regex$splitToSequence$1: int $limit>;

        $i3 = $i3 - 1;

        if i0 == $i3 goto label09;

        $z0 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label07;

     label09:
        $r10 = r4.<kotlin.text.Regex$splitToSequence$1: java.lang.CharSequence $input>;

        r14 = r4.<kotlin.text.Regex$splitToSequence$1: java.lang.CharSequence $input>;

        i0 = interfaceinvoke r14.<java.lang.CharSequence: int length()>();

        $r10 = interfaceinvoke $r10.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i2, i0);

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r13 = (kotlin.coroutines.Continuation) r4;

        r4.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$0> = null;

        r4.<kotlin.text.Regex$splitToSequence$1: java.lang.Object L$1> = null;

        r4.<kotlin.text.Regex$splitToSequence$1: int label> = 3;

        $r1 = virtualinvoke $r7.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r12, $r13);

        if $r1 != $r2 goto label10;

        return $r2;

     label10:
        r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r15;

     label11:
        $r10 = r0.<kotlin.text.Regex$splitToSequence$1: java.lang.CharSequence $input>;

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r13 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlin.text.Regex$splitToSequence$1: int label> = 1;

        $r1 = virtualinvoke $r7.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r12, $r13);

        if $r1 != $r2 goto label12;

        return $r2;

     label12:
        r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r15;
    }
}
