final class com.google.common.collect.RegularImmutableSortedMultiset extends com.google.common.collect.ImmutableSortedMultiset
{
    static final com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET;
    private static final long[] ZERO_CUMULATIVE_COUNTS;
    private final transient long[] cumulativeCounts;
    final transient com.google.common.collect.RegularImmutableSortedSet elementSet;
    private final transient int length;
    private final transient int offset;

    static void <clinit>()
    {
        long[] $r1;
        com.google.common.collect.Ordering $r0;
        com.google.common.collect.RegularImmutableSortedMultiset $r2;

        $r1 = newarray (long)[1];

        $r1[0] = 0L;

        <com.google.common.collect.RegularImmutableSortedMultiset: long[] ZERO_CUMULATIVE_COUNTS> = $r1;

        $r2 = new com.google.common.collect.RegularImmutableSortedMultiset;

        $r0 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r2.<com.google.common.collect.RegularImmutableSortedMultiset: void <init>(java.util.Comparator)>($r0);

        <com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET> = $r2;

        return;
    }

    void <init>(com.google.common.collect.RegularImmutableSortedSet, long[], int, int)
    {
        long[] $r2;
        int $i0, $i1;
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.RegularImmutableSortedSet r1;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        r1 := @parameter0: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter1: long[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: void <init>()>();

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet> = r1;

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts> = $r2;

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset> = $i0;

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length> = $i1;

        return;
    }

    void <init>(java.util.Comparator)
    {
        long[] $r3;
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        java.util.Comparator r1;
        com.google.common.collect.RegularImmutableSortedSet $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: void <init>()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)>(r1);

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet> = $r2;

        $r3 = <com.google.common.collect.RegularImmutableSortedMultiset: long[] ZERO_CUMULATIVE_COUNTS>;

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts> = $r3;

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset> = 0;

        r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length> = 0;

        return;
    }

    private int getCount(int)
    {
        long[] $r1;
        int $i0, $i1;
        long $l2, $l3;
        com.google.common.collect.RegularImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts>;

        $i1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset>;

        $i1 = $i1 + $i0;

        $i1 = $i1 + 1;

        $l2 = $r1[$i1];

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts>;

        $i1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset>;

        $i0 = $i1 + $i0;

        $l3 = $r1[$i0];

        $l2 = $l2 - $l3;

        $i0 = (int) $l2;

        return $i0;
    }

    public int count(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.RegularImmutableSortedSet r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet>;

        $i0 = virtualinvoke r2.<com.google.common.collect.RegularImmutableSortedSet: int indexOf(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        $i0 = specialinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: int getCount(int)>($i0);

        return $i0;

     label1:
        return 0;
    }

    public volatile com.google.common.collect.ImmutableSet elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.RegularImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedSet elementSet()
    {
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.RegularImmutableSortedSet r1;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        r1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet>;

        return r1;
    }

    public volatile java.util.NavigableSet elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.RegularImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public volatile java.util.Set elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.RegularImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public volatile java.util.SortedSet elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.RegularImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public com.google.common.collect.Multiset$Entry firstEntry()
    {
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.Multiset$Entry $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $z0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.Multiset$Entry getEntry(int)>(0);

        return $r1;
    }

    com.google.common.collect.Multiset$Entry getEntry(int)
    {
        com.google.common.collect.ImmutableList $r2;
        int $i0;
        java.lang.Object $r3;
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.RegularImmutableSortedSet $r1;
        com.google.common.collect.Multiset$Entry $r4;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList asList()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>($i0);

        $i0 = specialinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: int getCount(int)>($i0);

        $r4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>($r3, $i0);

        return $r4;
    }

    com.google.common.collect.ImmutableSortedMultiset getSubMultiset(int, int)
    {
        com.google.common.collect.RegularImmutableSortedMultiset r0, $r1;
        long[] $r2;
        int $i0, $i1, i2;
        java.util.Comparator $r3;
        com.google.common.collect.ImmutableSortedMultiset $r4;
        com.google.common.collect.RegularImmutableSortedSet r5;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length>;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, i2);

        if $i0 != $i1 goto label1;

        $r3 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: java.util.Comparator comparator()>();

        $r4 = staticinvoke <com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator)>($r3);

        return $r4;

     label1:
        if $i0 != 0 goto label2;

        i2 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length>;

        if $i1 != i2 goto label2;

        return r0;

     label2:
        r5 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet>;

        r5 = virtualinvoke r5.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int)>($i0, $i1);

        $r1 = new com.google.common.collect.RegularImmutableSortedMultiset;

        $r2 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts>;

        i2 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset>;

        i2 = i2 + $i0;

        $i0 = $i1 - $i0;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableSortedMultiset: void <init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)>(r5, $r2, i2, $i0);

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.BoundType $r2;
        int $i0;
        java.lang.Object r1, $r4;
        com.google.common.collect.RegularImmutableSortedSet $r3;
        com.google.common.collect.ImmutableSortedMultiset $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.common.collect.BoundType;

        $r3 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet>;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r2 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        if $r4 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = virtualinvoke $r3.<com.google.common.collect.RegularImmutableSortedSet: int headIndex(java.lang.Object,boolean)>(r1, $z0);

        $r5 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset getSubMultiset(int,int)>(0, $i0);

        return $r5;
    }

    public volatile com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.BoundType $r1;
        java.lang.Object $r3;
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.ImmutableSortedMultiset $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        $r2 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r3, $r1);

        return $r2;
    }

    boolean isPartialView()
    {
        long[] $r1;
        int $i0, $i1;
        com.google.common.collect.RegularImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $i0 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset>;

        if $i0 > 0 goto label2;

        $i0 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length>;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts>;

        $i1 = lengthof $r1;

        $i1 = $i1 - 1;

        if $i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }

    public com.google.common.collect.Multiset$Entry lastEntry()
    {
        int $i0;
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.Multiset$Entry $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $z0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length>;

        $i0 = $i0 + -1;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.Multiset$Entry getEntry(int)>($i0);

        return $r1;
    }

    public int size()
    {
        long[] $r1;
        int $i0, i1;
        long l2, $l3;
        com.google.common.collect.RegularImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts>;

        i1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset>;

        $i0 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length>;

        $i0 = i1 + $i0;

        l2 = $r1[$i0];

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: long[] cumulativeCounts>;

        $i0 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int offset>;

        $l3 = $r1[$i0];

        l2 = l2 - $l3;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>(l2);

        return $i0;
    }

    public com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.BoundType $r2;
        int $i0, $i1;
        java.lang.Object r1, $r4;
        com.google.common.collect.RegularImmutableSortedSet $r3;
        com.google.common.collect.ImmutableSortedMultiset $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.common.collect.BoundType;

        $r3 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.RegularImmutableSortedSet elementSet>;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r2 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        if $r4 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = virtualinvoke $r3.<com.google.common.collect.RegularImmutableSortedSet: int tailIndex(java.lang.Object,boolean)>(r1, $z0);

        $i1 = r0.<com.google.common.collect.RegularImmutableSortedMultiset: int length>;

        $r5 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset getSubMultiset(int,int)>($i0, $i1);

        return $r5;
    }

    public volatile com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.BoundType $r1;
        java.lang.Object $r3;
        com.google.common.collect.RegularImmutableSortedMultiset r0;
        com.google.common.collect.ImmutableSortedMultiset $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedMultiset;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        $r2 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r3, $r1);

        return $r2;
    }
}
