final class kotlinx.coroutines.JobKt__JobKt extends java.lang.Object
{

    public static final kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.JobImpl $r1;
        kotlinx.coroutines.CompletableJob $r2;
        kotlinx.coroutines.Job $r0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 = new kotlinx.coroutines.JobImpl;

        specialinvoke $r1.<kotlinx.coroutines.JobImpl: void <init>(kotlinx.coroutines.Job)>($r0);

        $r2 = (kotlinx.coroutines.CompletableJob) $r1;

        return $r2;
    }

    public static final kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.CompletableJob $r1;
        kotlinx.coroutines.Job $r0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)>($r0);

        $r0 = (kotlinx.coroutines.Job) $r1;

        return $r0;
    }

    public static kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job, int, java.lang.Object)
    {
        kotlinx.coroutines.Job $r2;
        int $i0;
        kotlinx.coroutines.CompletableJob $r1;
        java.lang.Object $r0;

        $r2 := @parameter0: kotlinx.coroutines.Job;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)>($r2);

        return $r1;
    }

    public static kotlinx.coroutines.Job Job$default(kotlinx.coroutines.Job, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;
        kotlinx.coroutines.Job $r1;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = null;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.Job Job(kotlinx.coroutines.Job)>($r1);

        return $r1;
    }

    public static final void cancel(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlinx.coroutines.JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>($r0, null);

        return;
    }

    public static final void cancel(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.Job$Key $r3;
        java.util.concurrent.CancellationException $r1;
        kotlinx.coroutines.Job $r5;
        kotlin.coroutines.CoroutineContext$Element $r2;
        kotlin.coroutines.CoroutineContext$Key $r4;
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        $r3 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r4 = (kotlin.coroutines.CoroutineContext$Key) $r3;

        $r2 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r4);

        $r5 = (kotlinx.coroutines.Job) $r2;

        if $r5 == null goto label1;

        interfaceinvoke $r5.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>($r1);

     label1:
        return;
    }

    public static final void cancel(kotlinx.coroutines.Job, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.util.concurrent.CancellationException $r3;
        kotlinx.coroutines.Job $r0;
        java.lang.String $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        $r3 = staticinvoke <kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)>($r1, $r2);

        interfaceinvoke $r0.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>($r3);

        return;
    }

    public static final boolean cancel(kotlin.coroutines.CoroutineContext, java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.Job$Key r2;
        kotlinx.coroutines.Job $r6;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlinx.coroutines.JobSupport r5;
        kotlin.coroutines.CoroutineContext $r0;
        kotlin.coroutines.CoroutineContext$Key r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Throwable;

        r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        r3 = (kotlin.coroutines.CoroutineContext$Key) r2;

        $r4 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r3);

        $z0 = $r4 instanceof kotlinx.coroutines.JobSupport;

        if $z0 == 0 goto label1;

        r5 = (kotlinx.coroutines.JobSupport) $r4;

        goto label2;

     label1:
        r5 = null;

     label2:
        if r5 != null goto label3;

        return 0;

     label3:
        $r6 = (kotlinx.coroutines.Job) r5;

        $r1 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: java.lang.Throwable orCancellation$JobKt__JobKt(java.lang.Throwable,kotlinx.coroutines.Job)>($r1, $r6);

        virtualinvoke r5.<kotlinx.coroutines.JobSupport: void cancelInternal(java.lang.Throwable)>($r1);

        return 1;
    }

    public static void cancel$default(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        java.util.concurrent.CancellationException $r2;
        int $i0;
        java.lang.Object $r1;
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        staticinvoke <kotlinx.coroutines.JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>($r0, $r2);

        return;
    }

    public static void cancel$default(kotlinx.coroutines.Job, java.lang.String, java.lang.Throwable, int, java.lang.Object)
    {
        java.lang.Throwable $r3;
        kotlinx.coroutines.Job $r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Throwable;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = null;

     label1:
        staticinvoke <kotlinx.coroutines.JobKt: void cancel(kotlinx.coroutines.Job,java.lang.String,java.lang.Throwable)>($r0, $r1, $r3);

        return;
    }

    public static boolean cancel$default(kotlin.coroutines.CoroutineContext, java.lang.Throwable, int, java.lang.Object)
    {
        java.lang.Throwable $r2;
        int $i0;
        java.lang.Object $r0;
        kotlin.coroutines.CoroutineContext $r1;
        boolean $z0;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.JobKt: boolean cancel(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r1, $r2);

        return $z0;
    }

    public static final java.lang.Object cancelAndJoin(kotlinx.coroutines.Job, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.Unit r4;
        kotlinx.coroutines.Job $r0;
        java.lang.Object $r2, $r3;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r0, null, 1, null);

        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.Job: java.lang.Object join(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r2 != $r3 goto label1;

        return $r2;

     label1:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    public static final void cancelChildren(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlinx.coroutines.JobKt: void cancelChildren(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>($r0, null);

        return;
    }

    public static final void cancelChildren(kotlin.coroutines.CoroutineContext, java.lang.Throwable)
    {
        java.lang.Throwable $r1, $r11;
        kotlinx.coroutines.Job$Key r2;
        java.util.Iterator $r7;
        kotlinx.coroutines.Job r5, r9;
        kotlin.sequences.Sequence $r6;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlinx.coroutines.JobSupport $r10;
        kotlin.coroutines.CoroutineContext $r0;
        kotlin.coroutines.CoroutineContext$Key r3;
        java.lang.Object $r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Throwable;

        r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        r3 = (kotlin.coroutines.CoroutineContext$Key) r2;

        $r4 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r3);

        r5 = (kotlinx.coroutines.Job) $r4;

        if r5 != null goto label1;

        return;

     label1:
        $r6 = interfaceinvoke r5.<kotlinx.coroutines.Job: kotlin.sequences.Sequence getChildren()>();

        $r7 = interfaceinvoke $r6.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kotlinx.coroutines.Job) $r8;

        $z0 = r9 instanceof kotlinx.coroutines.JobSupport;

        if $z0 == 0 goto label3;

        $r10 = (kotlinx.coroutines.JobSupport) r9;

        goto label4;

     label3:
        $r10 = null;

     label4:
        if $r10 == null goto label5;

        $r11 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: java.lang.Throwable orCancellation$JobKt__JobKt(java.lang.Throwable,kotlinx.coroutines.Job)>($r1, r5);

        virtualinvoke $r10.<kotlinx.coroutines.JobSupport: void cancelInternal(java.lang.Throwable)>($r11);

     label5:
        goto label2;

     label6:
        return;
    }

    public static final void cancelChildren(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.Job$Key $r2;
        java.util.Iterator $r7;
        java.util.concurrent.CancellationException $r1;
        kotlinx.coroutines.Job $r5;
        kotlin.sequences.Sequence $r6;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlin.coroutines.CoroutineContext $r0;
        kotlin.coroutines.CoroutineContext$Key $r3;
        java.lang.Object $r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        $r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) $r2;

        $r4 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r3);

        $r5 = (kotlinx.coroutines.Job) $r4;

        if $r5 == null goto label2;

        $r6 = interfaceinvoke $r5.<kotlinx.coroutines.Job: kotlin.sequences.Sequence getChildren()>();

        if $r6 == null goto label2;

        $r7 = interfaceinvoke $r6.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kotlinx.coroutines.Job) $r8;

        interfaceinvoke $r5.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>($r1);

        goto label1;

     label2:
        return;
    }

    public static final void cancelChildren(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        staticinvoke <kotlinx.coroutines.JobKt: void cancelChildren(kotlinx.coroutines.Job,java.util.concurrent.CancellationException)>($r0, null);

        return;
    }

    public static final void cancelChildren(kotlinx.coroutines.Job, java.lang.Throwable)
    {
        java.lang.Throwable $r1, $r7;
        java.util.Iterator $r3;
        kotlinx.coroutines.Job $r0, r5;
        kotlin.sequences.Sequence $r2;
        kotlinx.coroutines.JobSupport $r6;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.Job: kotlin.sequences.Sequence getChildren()>();

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kotlinx.coroutines.Job) $r4;

        $z0 = r5 instanceof kotlinx.coroutines.JobSupport;

        if $z0 == 0 goto label2;

        $r6 = (kotlinx.coroutines.JobSupport) r5;

        goto label3;

     label2:
        $r6 = null;

     label3:
        if $r6 == null goto label4;

        $r7 = staticinvoke <kotlinx.coroutines.JobKt__JobKt: java.lang.Throwable orCancellation$JobKt__JobKt(java.lang.Throwable,kotlinx.coroutines.Job)>($r1, $r0);

        virtualinvoke $r6.<kotlinx.coroutines.JobSupport: void cancelInternal(java.lang.Throwable)>($r7);

     label4:
        goto label1;

     label5:
        return;
    }

    public static final void cancelChildren(kotlinx.coroutines.Job, java.util.concurrent.CancellationException)
    {
        java.util.Iterator $r3;
        java.util.concurrent.CancellationException $r1;
        kotlinx.coroutines.Job $r0;
        kotlin.sequences.Sequence $r2;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.Job: kotlin.sequences.Sequence getChildren()>();

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (kotlinx.coroutines.Job) $r4;

        interfaceinvoke $r0.<kotlinx.coroutines.Job: void cancel(java.util.concurrent.CancellationException)>($r1);

        goto label1;

     label2:
        return;
    }

    public static void cancelChildren$default(kotlin.coroutines.CoroutineContext, java.lang.Throwable, int, java.lang.Object)
    {
        java.lang.Throwable $r2;
        int $i0;
        java.lang.Object $r1;
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        staticinvoke <kotlinx.coroutines.JobKt: void cancelChildren(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r0, $r2);

        return;
    }

    public static void cancelChildren$default(kotlin.coroutines.CoroutineContext, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        java.util.concurrent.CancellationException $r2;
        int $i0;
        java.lang.Object $r1;
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        staticinvoke <kotlinx.coroutines.JobKt: void cancelChildren(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)>($r0, $r2);

        return;
    }

    public static void cancelChildren$default(kotlinx.coroutines.Job, java.lang.Throwable, int, java.lang.Object)
    {
        java.lang.Throwable $r2;
        kotlinx.coroutines.Job $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r2 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        staticinvoke <kotlinx.coroutines.JobKt: void cancelChildren(kotlinx.coroutines.Job,java.lang.Throwable)>($r0, $r2);

        return;
    }

    public static void cancelChildren$default(kotlinx.coroutines.Job, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        java.util.concurrent.CancellationException $r2;
        kotlinx.coroutines.Job $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r2 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        staticinvoke <kotlinx.coroutines.JobKt: void cancelChildren(kotlinx.coroutines.Job,java.util.concurrent.CancellationException)>($r0, $r2);

        return;
    }

    public static final kotlinx.coroutines.DisposableHandle disposeOnCompletion(kotlinx.coroutines.Job, kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.DisposeOnCompletion $r2;
        kotlinx.coroutines.Job $r0;
        kotlin.jvm.functions.Function1 $r4;
        kotlinx.coroutines.CompletionHandlerBase $r3;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $r1 := @parameter1: kotlinx.coroutines.DisposableHandle;

        $r2 = new kotlinx.coroutines.DisposeOnCompletion;

        specialinvoke $r2.<kotlinx.coroutines.DisposeOnCompletion: void <init>(kotlinx.coroutines.DisposableHandle)>($r1);

        $r3 = (kotlinx.coroutines.CompletionHandlerBase) $r2;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        $r1 = interfaceinvoke $r0.<kotlinx.coroutines.Job: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>($r4);

        return $r1;
    }

    public static final void ensureActive(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.Job$Key $r2;
        kotlinx.coroutines.Job $r4;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r3;
        kotlin.coroutines.CoroutineContext $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) $r2;

        $r1 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r3);

        $r4 = (kotlinx.coroutines.Job) $r1;

        if $r4 == null goto label1;

        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlinx.coroutines.Job)>($r4);

     label1:
        return;
    }

    public static final void ensureActive(kotlinx.coroutines.Job)
    {
        java.util.concurrent.CancellationException $r1;
        kotlinx.coroutines.Job $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        $z0 = interfaceinvoke $r0.<kotlinx.coroutines.Job: boolean isActive()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = interfaceinvoke $r0.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        throw $r1;
    }

    public static final kotlinx.coroutines.Job getJob(kotlin.coroutines.CoroutineContext)
    {
        java.lang.IllegalStateException $r5;
        kotlinx.coroutines.Job$Key $r1;
        kotlinx.coroutines.Job $r4;
        kotlin.coroutines.CoroutineContext$Element $r3;
        kotlin.coroutines.CoroutineContext $r0;
        kotlin.coroutines.CoroutineContext$Key $r2;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r4 = (kotlinx.coroutines.Job) $r3;

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current context doesn\'t contain Job in it: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;
    }

    public static final boolean isActive(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.Job$Key $r1;
        kotlinx.coroutines.Job $r4;
        kotlin.coroutines.CoroutineContext$Element $r3;
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlin.coroutines.CoroutineContext $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r4 = (kotlinx.coroutines.Job) $r3;

        if $r4 == null goto label1;

        $z0 = interfaceinvoke $r4.<kotlinx.coroutines.Job: boolean isActive()>();

        return $z0;

     label1:
        return 1;
    }

    private static final java.lang.Throwable orCancellation$JobKt__JobKt(java.lang.Throwable, kotlinx.coroutines.Job)
    {
        java.lang.Throwable $r0;
        kotlinx.coroutines.JobCancellationException $r2;
        kotlinx.coroutines.Job $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: kotlinx.coroutines.Job;

        if $r0 != null goto label1;

        $r2 = new kotlinx.coroutines.JobCancellationException;

        specialinvoke $r2.<kotlinx.coroutines.JobCancellationException: void <init>(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)>("Job was cancelled", null, $r1);

        $r0 = (java.lang.Throwable) $r2;

     label1:
        return $r0;
    }
}
