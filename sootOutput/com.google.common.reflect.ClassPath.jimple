public final class com.google.common.reflect.ClassPath extends java.lang.Object
{
    private static final java.lang.String CLASS_FILE_NAME_EXTENSION;
    private static final com.google.common.base.Splitter CLASS_PATH_ATTRIBUTE_SEPARATOR;
    private static final java.util.logging.Logger logger;
    private final com.google.common.collect.ImmutableSet resources;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        com.google.common.base.Splitter $r3;

        <com.google.common.reflect.ClassPath: java.lang.String CLASS_FILE_NAME_EXTENSION> = ".class";

        $r0 = class "Lcom/google/common/reflect/ClassPath;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.reflect.ClassPath: java.util.logging.Logger logger> = $r2;

        $r3 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>(" ");

        $r3 = virtualinvoke $r3.<com.google.common.base.Splitter: com.google.common.base.Splitter omitEmptyStrings()>();

        <com.google.common.reflect.ClassPath: com.google.common.base.Splitter CLASS_PATH_ATTRIBUTE_SEPARATOR> = $r3;

        return;
    }

    private void <init>(com.google.common.collect.ImmutableSet)
    {
        com.google.common.reflect.ClassPath r0;
        com.google.common.collect.ImmutableSet r1;

        r0 := @this: com.google.common.reflect.ClassPath;

        r1 := @parameter0: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet resources> = r1;

        return;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger r0;

        r0 = <com.google.common.reflect.ClassPath: java.util.logging.Logger logger>;

        return r0;
    }

    public static com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader) throws java.io.IOException
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableSet$Builder $r7;
        java.io.File $r6;
        com.google.common.reflect.ClassPath$LocationInfo r5;
        java.util.HashSet r1;
        java.lang.Object $r4;
        java.lang.ClassLoader $r0;
        com.google.common.collect.UnmodifiableIterator $r3;
        com.google.common.reflect.ClassPath r8;
        boolean $z0;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r2 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet locationsFrom(java.lang.ClassLoader)>($r0);

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.common.reflect.ClassPath$LocationInfo) $r4;

        $r6 = virtualinvoke r5.<com.google.common.reflect.ClassPath$LocationInfo: java.io.File file()>();

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r7 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.common.reflect.ClassPath$LocationInfo) $r4;

        $r2 = virtualinvoke r5.<com.google.common.reflect.ClassPath$LocationInfo: com.google.common.collect.ImmutableSet scanResources(java.util.Set)>(r1);

        virtualinvoke $r7.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable)>($r2);

        goto label3;

     label4:
        r8 = new com.google.common.reflect.ClassPath;

        $r2 = virtualinvoke $r7.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        specialinvoke r8.<com.google.common.reflect.ClassPath: void <init>(com.google.common.collect.ImmutableSet)>($r2);

        return r8;
    }

    private static com.google.common.collect.ImmutableList getClassLoaderUrls(java.lang.ClassLoader)
    {
        java.net.URL[] $r2;
        java.net.URLClassLoader $r1;
        com.google.common.collect.ImmutableList $r3;
        java.lang.ClassLoader $r0, $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.ClassLoader;

        $z0 = $r0 instanceof java.net.URLClassLoader;

        if $z0 == 0 goto label1;

        $r1 = (java.net.URLClassLoader) $r0;

        $r2 = virtualinvoke $r1.<java.net.URLClassLoader: java.net.URL[] getURLs()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r2);

        return $r3;

     label1:
        $r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableList parseJavaClassPath()>();

        return $r3;

     label2:
        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r3;
    }

    static java.lang.String getClassName(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r1 = ".class";

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 - $i1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r0;
    }

    static com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader)
    {
        com.google.common.collect.ImmutableMap $r3;
        java.net.URL r7;
        java.io.File $r9;
        java.util.LinkedHashMap $r1;
        com.google.common.collect.ImmutableList $r4;
        java.lang.Object $r6;
        java.lang.ClassLoader $r0, $r2;
        com.google.common.collect.UnmodifiableIterator $r5;
        java.lang.String $r8;
        boolean $z0;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r2 = virtualinvoke $r0.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        if $r2 == null goto label1;

        $r3 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader)>($r2);

        virtualinvoke $r1.<java.util.LinkedHashMap: void putAll(java.util.Map)>($r3);

     label1:
        $r4 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableList getClassLoaderUrls(java.lang.ClassLoader)>($r0);

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.net.URL) $r6;

        $r8 = virtualinvoke r7.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label2;

        $r9 = staticinvoke <com.google.common.reflect.ClassPath: java.io.File toFile(java.net.URL)>(r7);

        $z0 = virtualinvoke $r1.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($r9);

        if $z0 != 0 goto label2;

        virtualinvoke $r1.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r0);

        goto label2;

     label3:
        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r1);

        return $r3;
    }

    static java.net.URL getClassPathEntry(java.io.File, java.lang.String) throws java.net.MalformedURLException
    {
        java.net.URL $r2, $r4;
        java.lang.String $r1;
        java.net.URI $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.net.URL;

        $r3 = virtualinvoke $r0.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        specialinvoke $r2.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r4, $r1);

        return $r2;
    }

    static com.google.common.collect.ImmutableSet getClassPathFromManifest(java.io.File, java.util.jar.Manifest)
    {
        java.util.jar.Manifest $r1;
        java.net.URL $r11;
        com.google.common.collect.ImmutableSet$Builder $r4;
        java.lang.Iterable $r8;
        int $i0;
        java.util.jar.Attributes$Name $r6;
        java.lang.String $r2, $r15;
        com.google.common.base.Splitter $r7;
        boolean $z0;
        com.google.common.collect.ImmutableSet $r3;
        java.util.Iterator $r9;
        java.net.MalformedURLException r13;
        java.util.logging.Logger $r14;
        java.util.jar.Attributes $r5;
        java.io.File $r0, $r12;
        java.lang.Object $r10;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.jar.Manifest;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r3;

     label1:
        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r5 = virtualinvoke $r1.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        $r6 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name CLASS_PATH>;

        $r2 = virtualinvoke $r6.<java.util.jar.Attributes$Name: java.lang.String toString()>();

        $r2 = virtualinvoke $r5.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>($r2);

        if $r2 == null goto label8;

        $r7 = <com.google.common.reflect.ClassPath: com.google.common.base.Splitter CLASS_PATH_ATTRIBUTE_SEPARATOR>;

        $r8 = virtualinvoke $r7.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r2);

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.String) $r10;

     label3:
        $r11 = staticinvoke <com.google.common.reflect.ClassPath: java.net.URL getClassPathEntry(java.io.File,java.lang.String)>($r0, $r2);

     label4:
        $r2 = virtualinvoke $r11.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label2;

        $r12 = staticinvoke <com.google.common.reflect.ClassPath: java.io.File toFile(java.net.URL)>($r11);

        virtualinvoke $r4.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r12);

        goto label2;

     label5:
        r13 := @caughtexception;

        $r14 = <com.google.common.reflect.ClassPath: java.util.logging.Logger logger>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r15.<java.lang.String: int length()>();

        $r2 = "Invalid Class-Path entry: ";

        if $i0 == 0 goto label6;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r15);

        goto label7;

     label6:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>("Invalid Class-Path entry: ");

     label7:
        virtualinvoke $r14.<java.util.logging.Logger: void warning(java.lang.String)>($r2);

        goto label2;

     label8:
        $r3 = virtualinvoke $r4.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r3;

        catch java.net.MalformedURLException from label3 to label4 with label5;
    }

    static com.google.common.collect.ImmutableSet locationsFrom(java.lang.ClassLoader)
    {
        java.util.Map$Entry r7;
        com.google.common.collect.ImmutableSet $r4;
        com.google.common.collect.ImmutableMap $r3;
        com.google.common.collect.ImmutableSet$Builder $r2;
        java.io.File $r8;
        com.google.common.reflect.ClassPath$LocationInfo $r1;
        java.lang.Object $r6;
        java.lang.ClassLoader $r0;
        com.google.common.collect.UnmodifiableIterator $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r3 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader)>($r0);

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r1 = new com.google.common.reflect.ClassPath$LocationInfo;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.io.File) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0 = (java.lang.ClassLoader) $r6;

        specialinvoke $r1.<com.google.common.reflect.ClassPath$LocationInfo: void <init>(java.io.File,java.lang.ClassLoader)>($r8, $r0);

        virtualinvoke $r2.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r1);

        goto label1;

     label2:
        $r4 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r4;
    }

    static com.google.common.collect.ImmutableList parseJavaClassPath()
    {
        java.net.URL $r9;
        java.lang.Iterable $r4;
        java.util.logging.Level $r14;
        com.google.common.base.StandardSystemProperty $r2;
        com.google.common.collect.ImmutableList $r15;
        int $i0;
        java.lang.SecurityException r11;
        java.lang.String $r0, $r12;
        java.net.URI $r8;
        com.google.common.base.Splitter $r3;
        boolean $z0;
        java.util.Iterator $r5;
        java.net.MalformedURLException r10;
        java.util.logging.Logger $r13;
        java.io.File r7;
        java.lang.Object $r6;
        com.google.common.collect.ImmutableList$Builder $r1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r2 = <com.google.common.base.StandardSystemProperty: com.google.common.base.StandardSystemProperty PATH_SEPARATOR>;

        $r0 = virtualinvoke $r2.<com.google.common.base.StandardSystemProperty: java.lang.String value()>();

        $r3 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>($r0);

        $r2 = <com.google.common.base.StandardSystemProperty: com.google.common.base.StandardSystemProperty JAVA_CLASS_PATH>;

        $r0 = virtualinvoke $r2.<com.google.common.base.StandardSystemProperty: java.lang.String value()>();

        $r4 = virtualinvoke $r3.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r0);

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.lang.String) $r6;

        r7 = new java.io.File;

     label02:
        specialinvoke r7.<java.io.File: void <init>(java.lang.String)>($r0);

        $r8 = virtualinvoke r7.<java.io.File: java.net.URI toURI()>();

        $r9 = virtualinvoke $r8.<java.net.URI: java.net.URL toURL()>();

        virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r9);

     label03:
        goto label07;

     label04:
        r10 := @caughtexception;

        goto label08;

     label05:
        r11 := @caughtexception;

        $r9 = new java.net.URL;

        r7 = new java.io.File;

     label06:
        specialinvoke r7.<java.io.File: void <init>(java.lang.String)>($r0);

        $r12 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r9.<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>("file", null, $r12);

        virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r9);

     label07:
        goto label01;

     label08:
        $r13 = <com.google.common.reflect.ClassPath: java.util.logging.Logger logger>;

        $r14 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        $r0 = "malformed classpath entry: ";

        if $i0 == 0 goto label09;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>($r12);

        goto label10;

     label09:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>("malformed classpath entry: ");

     label10:
        virtualinvoke $r13.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, $r0, r10);

        goto label01;

     label11:
        $r15 = virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r15;

        catch java.lang.SecurityException from label02 to label03 with label05;
        catch java.net.MalformedURLException from label02 to label03 with label04;
        catch java.net.MalformedURLException from label06 to label07 with label04;
    }

    static java.io.File toFile(java.net.URL)
    {
        java.net.URL $r0;
        java.net.URISyntaxException r4;
        java.lang.String $r1;
        java.net.URI $r3;
        java.io.File r2;
        boolean $z0;

        $r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke $r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("file");

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r2 = new java.io.File;

     label1:
        $r3 = virtualinvoke $r0.<java.net.URL: java.net.URI toURI()>();

        specialinvoke r2.<java.io.File: void <init>(java.net.URI)>($r3);

     label2:
        return r2;

     label3:
        r4 := @caughtexception;

        r2 = new java.io.File;

        $r1 = virtualinvoke $r0.<java.net.URL: java.lang.String getPath()>();

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r1);

        return r2;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public com.google.common.collect.ImmutableSet getAllClasses()
    {
        com.google.common.reflect.ClassPath r0;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.FluentIterable $r2;

        r0 := @this: com.google.common.reflect.ClassPath;

        $r1 = r0.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet resources>;

        $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r1);

        $r2 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(java.lang.Class)>(class "Lcom/google/common/reflect/ClassPath$ClassInfo;");

        $r1 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableSet toSet()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSet getResources()
    {
        com.google.common.reflect.ClassPath r0;
        com.google.common.collect.ImmutableSet r1;

        r0 := @this: com.google.common.reflect.ClassPath;

        r1 = r0.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet resources>;

        return r1;
    }

    public com.google.common.collect.ImmutableSet getTopLevelClasses()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.FluentIterable $r2;
        com.google.common.reflect.ClassPath$$ExternalSyntheticLambda0 $r3;
        com.google.common.reflect.ClassPath r0;

        r0 := @this: com.google.common.reflect.ClassPath;

        $r1 = r0.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet resources>;

        $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r1);

        $r2 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(java.lang.Class)>(class "Lcom/google/common/reflect/ClassPath$ClassInfo;");

        $r3 = new com.google.common.reflect.ClassPath$$ExternalSyntheticLambda0;

        specialinvoke $r3.<com.google.common.reflect.ClassPath$$ExternalSyntheticLambda0: void <init>()>();

        $r2 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)>($r3);

        $r1 = virtualinvoke $r2.<com.google.common.collect.FluentIterable: com.google.common.collect.ImmutableSet toSet()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSet getTopLevelClasses(java.lang.String)
    {
        com.google.common.collect.ImmutableSet $r3;
        com.google.common.collect.ImmutableSet$Builder $r2;
        com.google.common.reflect.ClassPath$ClassInfo r6;
        java.lang.Object $r5;
        com.google.common.reflect.ClassPath r0;
        java.lang.String $r1, $r7;
        com.google.common.collect.UnmodifiableIterator $r4;
        boolean $z0;

        r0 := @this: com.google.common.reflect.ClassPath;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r3 = virtualinvoke r0.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClasses()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.common.reflect.ClassPath$ClassInfo) $r5;

        $r7 = virtualinvoke r6.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>(r6);

        goto label1;

     label2:
        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r3;
    }

    public com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)
    {
        com.google.common.collect.ImmutableSet $r5;
        com.google.common.collect.ImmutableSet$Builder $r4;
        com.google.common.reflect.ClassPath$ClassInfo r8;
        int $i0;
        java.lang.StringBuilder r3;
        java.lang.Object $r7;
        com.google.common.reflect.ClassPath r0;
        java.lang.String $r1, $r2;
        com.google.common.collect.UnmodifiableIterator $r6;
        boolean $z0;

        r0 := @this: com.google.common.reflect.ClassPath;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>($i0);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r1 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r5 = virtualinvoke r0.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClasses()>();

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.google.common.reflect.ClassPath$ClassInfo) $r7;

        $r2 = virtualinvoke r8.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke $r4.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>(r8);

        goto label1;

     label2:
        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r5;
    }
}
