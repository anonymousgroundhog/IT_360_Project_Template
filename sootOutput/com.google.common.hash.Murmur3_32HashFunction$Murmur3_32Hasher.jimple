final class com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher extends com.google.common.hash.AbstractHasher
{
    private long buffer;
    private int h1;
    private boolean isDone;
    private int length;
    private int shift;

    void <init>(int)
    {
        int $i0;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.hash.AbstractHasher: void <init>()>();

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int h1> = $i0;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int length> = 0;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: boolean isDone> = 0;

        return;
    }

    private void update(int, long)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        int $i0, $i2, $i4;
        long $l1, $l3;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l3 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: long buffer>;

        $l1 = 4294967295L & $l1;

        $i2 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int shift>;

        $l1 = $l1 << $i2;

        $l1 = $l3 | $l1;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: long buffer> = $l1;

        $i2 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int shift>;

        $i4 = $i0 * 8;

        $i2 = $i2 + $i4;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int shift> = $i2;

        $i2 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int length>;

        $i0 = $i2 + $i0;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int length> = $i0;

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int shift>;

        if $i0 < 32 goto label1;

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int h1>;

        $l1 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: long buffer>;

        $i2 = (int) $l1;

        $i2 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int access$000(int)>($i2);

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int access$100(int,int)>($i0, $i2);

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int h1> = $i0;

        $l1 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: long buffer>;

        $l1 = $l1 >>> 32;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: long buffer> = $l1;

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int shift>;

        $i0 = $i0 - 32;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int shift> = $i0;

     label1:
        return;
    }

    public com.google.common.hash.HashCode hash()
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        com.google.common.hash.HashCode $r1;
        int $i0, $i1;
        long $l2;
        boolean $z0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $z0 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: boolean isDone>;

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: boolean isDone> = 1;

        $i1 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int h1>;

        $l2 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: long buffer>;

        $i0 = (int) $l2;

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int access$000(int)>($i0);

        $i1 = $i1 ^ $i0;

        r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int h1> = $i1;

        $i1 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int h1>;

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: int length>;

        $r1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashCode access$600(int,int)>($i1, $i0);

        return $r1;
    }

    public com.google.common.hash.Hasher putByte(byte)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        short $s1;
        byte $b0;
        long $l2;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $b0 := @parameter0: byte;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $l2 = (long) $s1;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(1, $l2);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putByte(byte)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        com.google.common.hash.Hasher $r1;
        byte $b0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return $r1;
    }

    public com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)
    {
        java.nio.ByteOrder $r2, $r3;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        byte $b1;
        int $i0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

     label1:
        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 < 4 goto label2;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putInt(int)>($i0);

        goto label1;

     label2:
        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label3;

        $b1 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putByte(byte)>($b1);

        goto label2;

     label3:
        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        return r0;
    }

    public com.google.common.hash.Hasher putBytes(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        long $l4;
        byte $b5;
        int $i0, $i1, $i2, i3;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i3 = $i0 + $i1;

        $i2 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, i3, $i2);

        i3 = 0;

     label1:
        $i2 = i3 + 4;

        if $i2 > $i1 goto label2;

        $i2 = $i0 + i3;

        $i2 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int access$200(byte[],int)>($r1, $i2);

        $l4 = (long) $i2;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(4, $l4);

        i3 = i3 + 4;

        goto label1;

     label2:
        if i3 >= $i1 goto label3;

        $i2 = $i0 + i3;

        $b5 = $r1[$i2];

        virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putByte(byte)>($b5);

        i3 = i3 + 1;

        goto label2;

     label3:
        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        com.google.common.hash.Hasher $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $r2 := @parameter0: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r2);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)
    {
        byte[] $r2;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        int $i0, $i1;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public com.google.common.hash.Hasher putChar(char)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        char $c0;
        long $l1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $c0 := @parameter0: char;

        $l1 = (long) $c0;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(2, $l1);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putChar(char)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        char $c0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putChar(char)>($c0);

        return $r1;
    }

    public com.google.common.hash.Hasher putInt(int)
    {
        int $i0;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        long $l1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(4, $l1);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putInt(int)
    {
        int $i0;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putInt(int)>($i0);

        return $r1;
    }

    public com.google.common.hash.Hasher putLong(long)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        int $i1;
        long $l0, $l2;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        $l2 = (long) $i1;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(4, $l2);

        $l0 = $l0 >>> 32;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(4, $l0);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putLong(long)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        long $l0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putLong(long)>($l0);

        return $r1;
    }

    public com.google.common.hash.Hasher putString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        byte[] $r5;
        long $l8;
        java.nio.charset.Charset $r2, r3;
        int $i0, i1, i2, $i7;
        java.lang.String $r4;
        com.google.common.hash.Hasher $r6;
        boolean $z0;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        java.lang.CharSequence $r1;
        char $c3, $c4, $c5, $c6;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.nio.charset.Charset;

        r3 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;

        $z0 = virtualinvoke r3.<java.nio.charset.Charset: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label10;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label01:
        i2 = i1 + 4;

        if i2 > $i0 goto label02;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i1);

        i2 = i1 + 1;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i2);

        i2 = i1 + 2;

        $c5 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i2);

        i2 = i1 + 3;

        $c6 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i2);

        i2 = (int) $c3;

        if i2 >= 128 goto label02;

        i2 = (int) $c4;

        if i2 >= 128 goto label02;

        i2 = (int) $c5;

        if i2 >= 128 goto label02;

        i2 = (int) $c6;

        if i2 >= 128 goto label02;

        i2 = (int) $c4;

        i2 = i2 << 8;

        $i7 = (int) $c3;

        i2 = i2 | $i7;

        $i7 = (int) $c5;

        $i7 = $i7 << 16;

        i2 = i2 | $i7;

        $i7 = (int) $c6;

        $i7 = $i7 << 24;

        i2 = i2 | $i7;

        $l8 = (long) i2;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(4, $l8);

        i1 = i1 + 4;

        goto label01;

     label02:
        if i1 >= $i0 goto label09;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i1);

        i2 = (int) $c3;

        if i2 >= 128 goto label03;

        $l8 = (long) $c3;

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(1, $l8);

        goto label08;

     label03:
        i2 = (int) $c3;

        if i2 >= 2048 goto label04;

        $l8 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long access$300(char)>($c3);

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(2, $l8);

        goto label08;

     label04:
        i2 = (int) $c3;

        if i2 < 55296 goto label07;

        i2 = (int) $c3;

        if i2 <= 57343 goto label05;

        goto label07;

     label05:
        i2 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>($r1, i1);

        $i7 = (int) $c3;

        if i2 != $i7 goto label06;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, $i0);

        $r4 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putBytes(byte[])>($r5);

        return r0;

     label06:
        i1 = i1 + 1;

        $l8 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long access$500(int)>(i2);

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(4, $l8);

        goto label08;

     label07:
        $l8 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long access$400(char)>($c3);

        specialinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void update(int,long)>(3, $l8);

     label08:
        i1 = i1 + 1;

        goto label02;

     label09:
        return r0;

     label10:
        $r6 = specialinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset)>($r1, $r2);

        return $r6;
    }

    public volatile com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher r0;
        java.nio.charset.Charset $r1;
        java.lang.CharSequence $r3;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $r3 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 = virtualinvoke r0.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset)>($r3, $r1);

        return $r2;
    }
}
