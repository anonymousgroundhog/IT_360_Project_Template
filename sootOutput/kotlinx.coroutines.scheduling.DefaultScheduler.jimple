public final class kotlinx.coroutines.scheduling.DefaultScheduler extends kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher
{
    public static final kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE;

    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.DefaultScheduler $r0;

        $r0 = new kotlinx.coroutines.scheduling.DefaultScheduler;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.DefaultScheduler: void <init>()>();

        <kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.scheduling.DefaultScheduler r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultScheduler;

        $i0 = <kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE>;

        $i1 = <kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE>;

        $l2 = <kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS>;

        $r1 = <kotlinx.coroutines.scheduling.TasksKt: java.lang.String DEFAULT_SCHEDULER_NAME>;

        specialinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l2, $r1);

        return;
    }

    public void close()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlinx.coroutines.scheduling.DefaultScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultScheduler;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Dispatchers.Default cannot be closed");

        throw $r1;
    }

    public kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)
    {
        kotlinx.coroutines.scheduling.DefaultScheduler r0;
        int $i0, $i1;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultScheduler;

        $i0 := @parameter0: int;

        staticinvoke <kotlinx.coroutines.internal.LimitedDispatcherKt: void checkParallelism(int)>($i0);

        $i1 = <kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE>;

        if $i0 < $i1 goto label1;

        $r1 = (kotlinx.coroutines.CoroutineDispatcher) r0;

        return $r1;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)>($i0);

        return $r1;
    }

    public final void shutdown$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.scheduling.DefaultScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultScheduler;

        specialinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: void close()>();

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.scheduling.DefaultScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultScheduler;

        return "Dispatchers.Default";
    }
}
