public final class kotlinx.coroutines.EventLoopKt extends java.lang.Object
{

    public static final kotlinx.coroutines.EventLoop createEventLoop()
    {
        kotlinx.coroutines.BlockingEventLoop $r1;
        kotlinx.coroutines.EventLoop $r2;
        java.lang.Thread $r0;

        $r1 = new kotlinx.coroutines.BlockingEventLoop;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        specialinvoke $r1.<kotlinx.coroutines.BlockingEventLoop: void <init>(java.lang.Thread)>($r0);

        $r2 = (kotlinx.coroutines.EventLoop) $r1;

        return $r2;
    }

    public static final boolean isIoDispatcherThread(java.lang.Thread)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        java.lang.Thread $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Thread;

        $z0 = $r0 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r0;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isIo()>();

        return $z0;
    }

    public static final void platformAutoreleasePool(kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

        interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public static final long processNextEventInCurrentThread()
    {
        kotlinx.coroutines.ThreadLocalEventLoop $r0;
        long $l0;
        kotlinx.coroutines.EventLoop $r1;

        $r0 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop currentOrNull$kotlinx_coroutines_core()>();

        if $r1 == null goto label1;

        $l0 = virtualinvoke $r1.<kotlinx.coroutines.EventLoop: long processNextEvent()>();

        return $l0;

     label1:
        return 9223372036854775807L;
    }

    public static final long runSingleTaskFromCurrentSystemDispatcher()
    {
        java.lang.IllegalStateException $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        java.lang.Thread $r0;
        long $l0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = $r0 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        if $z0 == 0 goto label1;

        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r0;

        $l0 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long runSingleTask()>();

        return $l0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected CoroutineScheduler.Worker, but got ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }
}
