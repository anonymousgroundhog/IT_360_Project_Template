public abstract class com.google.android.gms.internal.ads.zzats extends java.lang.Object
{
    private static final java.lang.String zza;

    static void <clinit>()
    {
        java.lang.Class $r1;
        java.lang.String $r0;

        $r1 = class "Lcom/google/android/gms/internal/ads/zzats;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.google.android.gms.internal.ads.zzats: java.lang.String zza> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.android.gms.internal.ads.zzats r0;

        r0 := @this: com.google.android.gms.internal.ads.zzats;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static java.util.HashMap zza(java.lang.String)
    {
        byte[] $r2;
        java.io.ObjectInputStream $r3;
        java.util.HashMap $r5;
        java.io.IOException $r7;
        java.io.ByteArrayInputStream $r1;
        java.lang.Object $r4;
        java.lang.ClassNotFoundException $r6;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

     label01:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

     label02:
        if $z0 != 0 goto label10;

        $r1 = new java.io.ByteArrayInputStream;

     label03:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r2, 0);

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

     label04:
        $r3 = new java.io.ObjectInputStream;

     label05:
        specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r1);

        $r4 = virtualinvoke $r3.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label06:
        $r5 = (java.util.HashMap) $r4;

        return $r5;

     label07:
        $r6 := @caughtexception;

        goto label09;

     label08:
        $r7 := @caughtexception;

     label09:
        $r0 = <com.google.android.gms.internal.ads.zzats: java.lang.String zza>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r0, "decode object failure");

     label10:
        return null;

        catch java.io.IOException from label01 to label02 with label08;
        catch java.io.IOException from label03 to label04 with label08;
        catch java.io.IOException from label05 to label06 with label08;
        catch java.lang.ClassNotFoundException from label01 to label02 with label07;
        catch java.lang.ClassNotFoundException from label03 to label04 with label07;
        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
    }

    public final java.lang.String toString()
    {
        byte[] $r4;
        com.google.android.gms.internal.ads.zzats r0;
        java.io.ByteArrayOutputStream $r1;
        java.io.ObjectOutputStream $r2;
        java.util.HashMap $r3;
        java.io.IOException $r6;
        java.lang.String $r5;

        r0 := @this: com.google.android.gms.internal.ads.zzats;

        $r1 = new java.io.ByteArrayOutputStream;

     label1:
        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label2:
        $r2 = new java.io.ObjectOutputStream;

     label3:
        specialinvoke $r2.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r3 = virtualinvoke r0.<com.google.android.gms.internal.ads.zzats: java.util.HashMap zzb()>();

        virtualinvoke $r2.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.io.ObjectOutputStream: void close()>();

        $r4 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r5 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 0);

     label4:
        return $r5;

     label5:
        $r6 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    protected abstract java.util.HashMap zzb();
}
