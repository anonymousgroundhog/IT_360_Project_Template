public final class kotlin.time.Duration extends java.lang.Object implements java.lang.Comparable
{
    public static final kotlin.time.Duration$Companion Companion;
    private static final long INFINITE;
    private static final long NEG_INFINITE;
    private static final long ZERO;
    private final long rawValue;

    static void <clinit>()
    {
        long $l0;
        kotlin.time.Duration$Companion $r0;

        $r0 = new kotlin.time.Duration$Companion;

        specialinvoke $r0.<kotlin.time.Duration$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.time.Duration: kotlin.time.Duration$Companion Companion> = $r0;

        $l0 = staticinvoke <kotlin.time.Duration: long constructor-impl(long)>(0L);

        <kotlin.time.Duration: long ZERO> = $l0;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfMillis(long)>(4611686018427387903L);

        <kotlin.time.Duration: long INFINITE> = $l0;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfMillis(long)>(-4611686018427387903L);

        <kotlin.time.Duration: long NEG_INFINITE> = $l0;

        return;
    }

    private void <init>(long)
    {
        long $l0;
        kotlin.time.Duration r0;

        r0 := @this: kotlin.time.Duration;

        $l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.time.Duration: long rawValue> = $l0;

        return;
    }

    public static final long access$getINFINITE$cp()
    {
        long l0;

        l0 = <kotlin.time.Duration: long INFINITE>;

        return l0;
    }

    public static final long access$getNEG_INFINITE$cp()
    {
        long l0;

        l0 = <kotlin.time.Duration: long NEG_INFINITE>;

        return l0;
    }

    public static final long access$getZERO$cp()
    {
        long l0;

        l0 = <kotlin.time.Duration: long ZERO>;

        return l0;
    }

    private static final long addValuesMixedRanges-UwyO8pc(long, long, long)
    {
        long $l0, $l1, $l2, $l3;
        kotlin.ranges.LongRange r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $l3 = staticinvoke <kotlin.time.DurationKt: long access$nanosToMillis(long)>($l2);

        $l0 = $l1 + $l3;

        r0 = new kotlin.ranges.LongRange;

        specialinvoke r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018426L, 4611686018426L);

        $z0 = virtualinvoke r0.<kotlin.ranges.LongRange: boolean contains(long)>($l0);

        if $z0 == 0 goto label1;

        $l1 = staticinvoke <kotlin.time.DurationKt: long access$millisToNanos(long)>($l3);

        $l1 = $l2 - $l1;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$millisToNanos(long)>($l0);

        $l0 = $l0 + $l1;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfNanos(long)>($l0);

        return $l0;

     label1:
        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceIn(long,long,long)>($l0, -4611686018427387903L, 4611686018427387903L);

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfMillis(long)>($l0);

        return $l0;
    }

    private static final void appendFractional-impl(long, java.lang.StringBuilder, int, int, int, java.lang.String, boolean)
    {
        java.lang.CharSequence $r3;
        long $l0;
        char $c4;
        int $i1, $i2, $i3, $i5;
        java.lang.StringBuilder $r0, $r4;
        java.lang.String $r1, $r2;
        boolean $z0, z1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.lang.StringBuilder;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.String;

        $z0 := @parameter6: boolean;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        if $i2 == 0 goto label7;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String padStart(java.lang.String,int,char)>($r2, $i3, 48);

        $r3 = (java.lang.CharSequence) $r2;

        $i2 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $i1 = -1;

        $i3 = $i2 + -1;

        if $i3 < 0 goto label5;

     label1:
        $i2 = $i3;

        $i3 = $i3 + -1;

        $c4 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>($i2);

        $i5 = (int) $c4;

        if $i5 == 48 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        if z1 == 0 goto label4;

        $i1 = $i2;

        goto label5;

     label4:
        if $i3 >= 0 goto label1;

     label5:
        $i1 = $i1 + 1;

        if $z0 != 0 goto label6;

        if $i1 >= 3 goto label6;

        $r3 = (java.lang.CharSequence) $r2;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r3, 0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "this.append(value, startIndex, endIndex)");

        goto label7;

     label6:
        $r3 = (java.lang.CharSequence) $r2;

        $i1 = $i1 + 2;

        $i1 = $i1 / 3;

        $i1 = $i1 * 3;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r3, 0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "this.append(value, startIndex, endIndex)");

        goto label7;

     label7:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        return;
    }

    public static final kotlin.time.Duration box-impl(long)
    {
        long $l0;
        kotlin.time.Duration $r0;

        $l0 := @parameter0: long;

        $r0 = new kotlin.time.Duration;

        specialinvoke $r0.<kotlin.time.Duration: void <init>(long)>($l0);

        return $r0;
    }

    public static int compareTo-LRDsOJo(long, long)
    {
        byte $b3;
        int $i4, $i5;
        long $l0, $l1, l2;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 ^ $l1;

        $b3 = l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 < 0 goto label3;

        $i4 = (int) l2;

        $i4 = $i4 & 1;

        if $i4 != 0 goto label1;

        goto label3;

     label1:
        $i4 = (int) $l0;

        $i4 = $i4 & 1;

        $i5 = (int) $l1;

        $i5 = $i5 & 1;

        $i4 = $i4 - $i5;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isNegative-impl(long)>($l0);

        if $z0 == 0 goto label2;

        $i4 = neg $i4;

     label2:
        return $i4;

     label3:
        $i4 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(long,long)>($l0, $l1);

        return $i4;
    }

    public static long constructor-impl(long)
    {
        long $l0, $l1;
        java.lang.StringBuilder $r2;
        java.lang.AssertionError $r1;
        java.lang.String $r3;
        kotlin.ranges.LongRange $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.DurationJvmKt: boolean getDurationAssertionsEnabled()>();

        if $z0 == 0 goto label5;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInNanos-impl(long)>($l0);

        if $z0 == 0 goto label2;

        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018426999999L, 4611686018426999999L);

        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l1);

        if $z0 == 0 goto label1;

        return $l0;

     label1:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ns is out of nanoseconds range");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        throw $r1;

     label2:
        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018427387903L, 4611686018427387903L);

        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l1);

        if $z0 == 0 goto label4;

        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018426L, 4611686018426L);

        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l1);

        if $z0 != 0 goto label3;

        return $l0;

     label3:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms is denormalized");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        throw $r1;

     label4:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms is out of milliseconds range");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        throw $r1;

     label5:
        return $l0;
    }

    public static final double div-LRDsOJo(long, long)
    {
        kotlin.time.DurationUnit $r0;
        long $l0, $l1;
        java.lang.Comparable r1, $r2;
        double $d0, $d1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 = staticinvoke <kotlin.time.Duration: kotlin.time.DurationUnit getStorageUnit-impl(long)>($l0);

        r1 = (java.lang.Comparable) $r0;

        $r0 = staticinvoke <kotlin.time.Duration: kotlin.time.DurationUnit getStorageUnit-impl(long)>($l1);

        $r2 = (java.lang.Comparable) $r0;

        r1 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.lang.Comparable maxOf(java.lang.Comparable,java.lang.Comparable)>(r1, $r2);

        $r0 = (kotlin.time.DurationUnit) r1;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        $d1 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l1, $r0);

        $d0 = $d0 / $d1;

        return $d0;
    }

    public static final long div-UwyO8pc(long, double)
    {
        byte $b1;
        kotlin.time.DurationUnit $r0;
        int $i2;
        long $l0;
        double $d0, d1;
        boolean z0;

        $l0 := @parameter0: long;

        $d0 := @parameter1: double;

        $i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(double)>($d0);

        d1 = (double) $i2;

        $b1 = d1 cmpg $d0;

        if $b1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label3;

        if $i2 == 0 goto label3;

        $l0 = staticinvoke <kotlin.time.Duration: long div-UwyO8pc(long,int)>($l0, $i2);

        return $l0;

     label3:
        $r0 = staticinvoke <kotlin.time.Duration: kotlin.time.DurationUnit getStorageUnit-impl(long)>($l0);

        d1 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        $d0 = d1 / $d0;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long div-UwyO8pc(long, int)
    {
        int $i1;
        long $l0, l2, l3;
        java.lang.IllegalArgumentException r0;
        kotlin.ranges.LongRange r1;
        boolean $z0;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        if $i1 != 0 goto label3;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isPositive-impl(long)>($l0);

        if $z0 == 0 goto label1;

        $l0 = <kotlin.time.Duration: long INFINITE>;

        return $l0;

     label1:
        $z0 = staticinvoke <kotlin.time.Duration: boolean isNegative-impl(long)>($l0);

        if $z0 == 0 goto label2;

        $l0 = <kotlin.time.Duration: long NEG_INFINITE>;

        return $l0;

     label2:
        r0 = new java.lang.IllegalArgumentException;

        specialinvoke r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Dividing zero duration by zero yields an undefined result.");

        throw r0;

     label3:
        $z0 = staticinvoke <kotlin.time.Duration: boolean isInNanos-impl(long)>($l0);

        if $z0 == 0 goto label4;

        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        l2 = (long) $i1;

        $l0 = $l0 / l2;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfNanos(long)>($l0);

        return $l0;

     label4:
        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label5;

        $i1 = staticinvoke <kotlin.math.MathKt: int getSign(int)>($i1);

        $l0 = staticinvoke <kotlin.time.Duration: long times-UwyO8pc(long,int)>($l0, $i1);

        return $l0;

     label5:
        l2 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        l3 = (long) $i1;

        l2 = l2 / l3;

        r1 = new kotlin.ranges.LongRange;

        specialinvoke r1.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018426L, 4611686018426L);

        $z0 = virtualinvoke r1.<kotlin.ranges.LongRange: boolean contains(long)>(l2);

        if $z0 == 0 goto label6;

        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        l3 = (long) $i1;

        l3 = l3 * l2;

        $l0 = $l0 - l3;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$millisToNanos(long)>($l0);

        l3 = (long) $i1;

        $l0 = $l0 / l3;

        l2 = staticinvoke <kotlin.time.DurationKt: long access$millisToNanos(long)>(l2);

        $l0 = l2 + $l0;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfNanos(long)>($l0);

        return $l0;

     label6:
        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfMillis(long)>(l2);

        return $l0;
    }

    public static boolean equals-impl(long, java.lang.Object)
    {
        byte $b2;
        kotlin.time.Duration $r1;
        long $l0, $l1;
        java.lang.Object $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.lang.Object;

        $z0 = $r0 instanceof kotlin.time.Duration;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = (kotlin.time.Duration) $r0;

        $l1 = virtualinvoke $r1.<kotlin.time.Duration: long unbox-impl()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static final boolean equals-impl0(long, long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final long getAbsoluteValue-UwyO8pc(long)
    {
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isNegative-impl(long)>($l0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>($l0);

     label1:
        return $l0;
    }

    public static void getHoursComponent$annotations()
    {
        return;
    }

    public static final int getHoursComponent-impl(long)
    {
        int $i2;
        long $l0, $l1;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $l0 = staticinvoke <kotlin.time.Duration: long getInWholeHours-impl(long)>($l0);

        $l1 = (long) 24;

        $l0 = $l0 % $l1;

        $i2 = (int) $l0;

        return $i2;
    }

    public static void getInDays$annotations()
    {
        return;
    }

    public static final double getInDays-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $d0;
    }

    public static void getInHours$annotations()
    {
        return;
    }

    public static final double getInHours-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $d0;
    }

    public static void getInMicroseconds$annotations()
    {
        return;
    }

    public static final double getInMicroseconds-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $d0;
    }

    public static void getInMilliseconds$annotations()
    {
        return;
    }

    public static final double getInMilliseconds-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $d0;
    }

    public static void getInMinutes$annotations()
    {
        return;
    }

    public static final double getInMinutes-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $d0;
    }

    public static void getInNanoseconds$annotations()
    {
        return;
    }

    public static final double getInNanoseconds-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $d0;
    }

    public static void getInSeconds$annotations()
    {
        return;
    }

    public static final double getInSeconds-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $d0;
    }

    public static final long getInWholeDays-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>;

        $l0 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static final long getInWholeHours-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>;

        $l0 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static final long getInWholeMicroseconds-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>;

        $l0 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static final long getInWholeMilliseconds-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInMillis-impl(long)>($l0);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isFinite-impl(long)>($l0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        return $l0;

     label1:
        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $l0 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static final long getInWholeMinutes-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>;

        $l0 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static final long getInWholeNanoseconds-impl(long)
    {
        byte $b2;
        int $i3;
        long $l0, $l1;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInNanos-impl(long)>($l0);

        if $z0 == 0 goto label1;

        return $l1;

     label1:
        $b2 = $l1 cmp 9223372036854L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

        return 9223372036854775807L;

     label2:
        $b2 = $l1 cmp -9223372036854L;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label3;

        return -9223372036854775808L;

     label3:
        $l0 = staticinvoke <kotlin.time.DurationKt: long access$millisToNanos(long)>($l1);

        return $l0;
    }

    public static final long getInWholeSeconds-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        $l0 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getMinutesComponent$annotations()
    {
        return;
    }

    public static final int getMinutesComponent-impl(long)
    {
        int $i2;
        long $l0, $l1;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $l0 = staticinvoke <kotlin.time.Duration: long getInWholeMinutes-impl(long)>($l0);

        $l1 = (long) 60;

        $l0 = $l0 % $l1;

        $i2 = (int) $l0;

        return $i2;
    }

    public static void getNanosecondsComponent$annotations()
    {
        return;
    }

    public static final int getNanosecondsComponent-impl(long)
    {
        int $i2;
        long $l0, $l1;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <kotlin.time.Duration: boolean isInMillis-impl(long)>($l0);

        if $z0 == 0 goto label2;

        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $l1 = (long) 1000;

        $l0 = $l0 % $l1;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$millisToNanos(long)>($l0);

        $i2 = (int) $l0;

        return $i2;

     label2:
        $l0 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $l1 = (long) 1000000000;

        $l0 = $l0 % $l1;

        $i2 = (int) $l0;

        return $i2;
    }

    public static void getSecondsComponent$annotations()
    {
        return;
    }

    public static final int getSecondsComponent-impl(long)
    {
        int $i2;
        long $l0, $l1;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $l0 = staticinvoke <kotlin.time.Duration: long getInWholeSeconds-impl(long)>($l0);

        $l1 = (long) 60;

        $l0 = $l0 % $l1;

        $i2 = (int) $l0;

        return $i2;
    }

    private static final kotlin.time.DurationUnit getStorageUnit-impl(long)
    {
        long $l0;
        kotlin.time.DurationUnit r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInNanos-impl(long)>($l0);

        if $z0 == 0 goto label1;

        r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        return r0;

     label1:
        r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        return r0;
    }

    private static final int getUnitDiscriminator-impl(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        $i1 = $i1 & 1;

        return $i1;
    }

    private static final long getValue-impl(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = $l0 >> 1;

        return $l0;
    }

    public static int hashCode-impl(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $i1 = staticinvoke <androidx.privacysandbox.ads.adservices.adselection.AdSelectionOutcome$$ExternalSyntheticBackport0: int m(long)>($l0);

        return $i1;
    }

    public static final boolean isFinite-impl(long)
    {
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    private static final boolean isInMillis-impl(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        $i1 = $i1 & 1;

        if $i1 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static final boolean isInNanos-impl(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        $i1 = $i1 & 1;

        if $i1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean isInfinite-impl(long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 = <kotlin.time.Duration: long INFINITE>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

        $l1 = <kotlin.time.Duration: long NEG_INFINITE>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static final boolean isNegative-impl(long)
    {
        int $i2;
        long $l0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean isPositive-impl(long)
    {
        int $i2;
        long $l0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final long minus-LRDsOJo(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l1 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>($l1);

        $l0 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>($l0, $l1);

        return $l0;
    }

    public static final long plus-LRDsOJo(long, long)
    {
        long $l0, $l1, $l5;
        java.lang.IllegalArgumentException $r0;
        byte $b2;
        int $i3, $i4;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isFinite-impl(long)>($l1);

        if $z0 != 0 goto label7;

        $l1 = $l0 ^ $l1;

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        return $l0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Summing infinite durations of different signs yields an undefined result.");

        throw $r0;

     label2:
        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l1);

        if $z0 == 0 goto label3;

        return $l1;

     label3:
        $i3 = (int) $l0;

        $i3 = $i3 & 1;

        $i4 = (int) $l1;

        $i4 = $i4 & 1;

        if $i3 != $i4 goto label5;

        $l5 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l1);

        $l1 = $l5 + $l1;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInNanos-impl(long)>($l0);

        if $z0 == 0 goto label4;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfNanosNormalized(long)>($l1);

        return $l0;

     label4:
        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfMillisNormalized(long)>($l1);

        return $l0;

     label5:
        $z0 = staticinvoke <kotlin.time.Duration: boolean isInMillis-impl(long)>($l0);

        if $z0 == 0 goto label6;

        $l5 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l1);

        $l0 = staticinvoke <kotlin.time.Duration: long addValuesMixedRanges-UwyO8pc(long,long,long)>($l0, $l5, $l1);

        return $l0;

     label6:
        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l1);

        $l5 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $l0 = staticinvoke <kotlin.time.Duration: long addValuesMixedRanges-UwyO8pc(long,long,long)>($l0, $l1, $l5);

     label7:
        return $l0;
    }

    public static final long times-UwyO8pc(long, double)
    {
        byte $b1;
        kotlin.time.DurationUnit $r0;
        int $i2;
        long $l0;
        double $d0, d1;
        boolean z0;

        $l0 := @parameter0: long;

        $d0 := @parameter1: double;

        $i2 = staticinvoke <kotlin.math.MathKt: int roundToInt(double)>($d0);

        d1 = (double) $i2;

        $b1 = d1 cmpg $d0;

        if $b1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label3;

        $l0 = staticinvoke <kotlin.time.Duration: long times-UwyO8pc(long,int)>($l0, $i2);

        return $l0;

     label3:
        $r0 = staticinvoke <kotlin.time.Duration: kotlin.time.DurationUnit getStorageUnit-impl(long)>($l0);

        d1 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        $d0 = d1 * $d0;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long times-UwyO8pc(long, int)
    {
        long $l0, $l2, l3, l5, $l6;
        java.lang.IllegalArgumentException $r1;
        kotlin.ranges.LongRange $r2;
        kotlin.ranges.ClosedRange $r0;
        byte b4;
        int $i1, $i7;
        boolean $z0;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label03;

        if $i1 == 0 goto label02;

        if $i1 <= 0 goto label01;

        return $l0;

     label01:
        $l0 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>($l0);

        return $l0;

     label02:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multiplying infinite duration by zero yields an undefined result.");

        throw $r1;

     label03:
        if $i1 != 0 goto label04;

        $l0 = <kotlin.time.Duration: long ZERO>;

        return $l0;

     label04:
        $l2 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        l3 = (long) $i1;

        l3 = l3 * $l2;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInNanos-impl(long)>($l0);

        if $z0 == 0 goto label09;

        $r2 = new kotlin.ranges.LongRange;

        specialinvoke $r2.<kotlin.ranges.LongRange: void <init>(long,long)>(-2147483647L, 2147483647L);

        $z0 = virtualinvoke $r2.<kotlin.ranges.LongRange: boolean contains(long)>($l2);

        if $z0 == 0 goto label05;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfNanos(long)>(l3);

        return $l0;

     label05:
        $l0 = (long) $i1;

        $l0 = l3 / $l0;

        b4 = $l0 cmp $l2;

        if b4 != 0 goto label06;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfNanosNormalized(long)>(l3);

        return $l0;

     label06:
        $l0 = staticinvoke <kotlin.time.DurationKt: long access$nanosToMillis(long)>($l2);

        l3 = staticinvoke <kotlin.time.DurationKt: long access$millisToNanos(long)>($l0);

        l5 = $l2 - l3;

        l3 = (long) $i1;

        l3 = l3 * $l0;

        $l6 = (long) $i1;

        l5 = $l6 * l5;

        l5 = staticinvoke <kotlin.time.DurationKt: long access$nanosToMillis(long)>(l5);

        l5 = l5 + l3;

        $l6 = (long) $i1;

        $l6 = l3 / $l6;

        b4 = $l6 cmp $l0;

        if b4 != 0 goto label07;

        $l0 = l5 ^ l3;

        b4 = $l0 cmp 0L;

        $i7 = (int) b4;

        if $i7 < 0 goto label07;

        $r2 = new kotlin.ranges.LongRange;

        specialinvoke $r2.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018427387903L, 4611686018427387903L);

        $r0 = (kotlin.ranges.ClosedRange) $r2;

        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceIn(long,kotlin.ranges.ClosedRange)>(l5, $r0);

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfMillis(long)>($l0);

        return $l0;

     label07:
        $i7 = staticinvoke <kotlin.math.MathKt: int getSign(long)>($l2);

        $i1 = staticinvoke <kotlin.math.MathKt: int getSign(int)>($i1);

        $i1 = $i7 * $i1;

        if $i1 <= 0 goto label08;

        $l0 = <kotlin.time.Duration: long INFINITE>;

        return $l0;

     label08:
        $l0 = <kotlin.time.Duration: long NEG_INFINITE>;

        return $l0;

     label09:
        $l0 = (long) $i1;

        $l0 = l3 / $l0;

        b4 = $l0 cmp $l2;

        if b4 != 0 goto label10;

        $r2 = new kotlin.ranges.LongRange;

        specialinvoke $r2.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018427387903L, 4611686018427387903L);

        $r0 = (kotlin.ranges.ClosedRange) $r2;

        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceIn(long,kotlin.ranges.ClosedRange)>(l3, $r0);

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOfMillis(long)>($l0);

        return $l0;

     label10:
        $i7 = staticinvoke <kotlin.math.MathKt: int getSign(long)>($l2);

        $i1 = staticinvoke <kotlin.math.MathKt: int getSign(int)>($i1);

        $i1 = $i7 * $i1;

        if $i1 <= 0 goto label11;

        $l0 = <kotlin.time.Duration: long INFINITE>;

        return $l0;

     label11:
        $l0 = <kotlin.time.Duration: long NEG_INFINITE>;

        return $l0;
    }

    public static final java.lang.Object toComponents-impl(long, kotlin.jvm.functions.Function2)
    {
        java.lang.Long $r1;
        int $i2;
        long $l0, $l1;
        java.lang.Object $r3;
        kotlin.jvm.functions.Function2 $r0;
        java.lang.Integer $r2;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $l1 = staticinvoke <kotlin.time.Duration: long getInWholeSeconds-impl(long)>($l0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $i2 = staticinvoke <kotlin.time.Duration: int getNanosecondsComponent-impl(long)>($l0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    public static final java.lang.Object toComponents-impl(long, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r0;
        long $l0, $l1;
        java.lang.Integer $r2, $r3;
        java.lang.Long $r1;
        int $i2;
        java.lang.Object $r4;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $l1 = staticinvoke <kotlin.time.Duration: long getInWholeMinutes-impl(long)>($l0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $i2 = staticinvoke <kotlin.time.Duration: int getSecondsComponent-impl(long)>($l0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i2 = staticinvoke <kotlin.time.Duration: int getNanosecondsComponent-impl(long)>($l0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        return $r4;
    }

    public static final java.lang.Object toComponents-impl(long, kotlin.jvm.functions.Function4)
    {
        kotlin.jvm.functions.Function4 $r0;
        long $l0, $l1;
        java.lang.Integer $r2, $r3, $r4;
        java.lang.Long $r1;
        int $i2;
        java.lang.Object $r5;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.jvm.functions.Function4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $l1 = staticinvoke <kotlin.time.Duration: long getInWholeHours-impl(long)>($l0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $i2 = staticinvoke <kotlin.time.Duration: int getMinutesComponent-impl(long)>($l0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i2 = staticinvoke <kotlin.time.Duration: int getSecondsComponent-impl(long)>($l0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i2 = staticinvoke <kotlin.time.Duration: int getNanosecondsComponent-impl(long)>($l0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function4: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r4);

        return $r5;
    }

    public static final java.lang.Object toComponents-impl(long, kotlin.jvm.functions.Function5)
    {
        long $l0, $l1;
        java.lang.Integer $r2, $r3, $r4, $r5;
        java.lang.Long $r1;
        kotlin.jvm.functions.Function5 $r0;
        int $i2;
        java.lang.Object $r6;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.jvm.functions.Function5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $l1 = staticinvoke <kotlin.time.Duration: long getInWholeDays-impl(long)>($l0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $i2 = staticinvoke <kotlin.time.Duration: int getHoursComponent-impl(long)>($l0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i2 = staticinvoke <kotlin.time.Duration: int getMinutesComponent-impl(long)>($l0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i2 = staticinvoke <kotlin.time.Duration: int getSecondsComponent-impl(long)>($l0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i2 = staticinvoke <kotlin.time.Duration: int getNanosecondsComponent-impl(long)>($l0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6 = interfaceinvoke $r0.<kotlin.jvm.functions.Function5: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

    public static final double toDouble-impl(long, kotlin.time.DurationUnit)
    {
        byte $b2;
        kotlin.time.DurationUnit $r0, $r1;
        long $l0, $l1;
        double $d0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "unit");

        $l1 = <kotlin.time.Duration: long INFINITE>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return #Infinity;

     label1:
        $l1 = <kotlin.time.Duration: long NEG_INFINITE>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        return #-Infinity;

     label2:
        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $d0 = (double) $l1;

        $r1 = staticinvoke <kotlin.time.Duration: kotlin.time.DurationUnit getStorageUnit-impl(long)>($l0);

        $d0 = staticinvoke <kotlin.time.DurationUnitKt: double convertDurationUnit(double,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>($d0, $r1, $r0);

        return $d0;
    }

    public static final int toInt-impl(long, kotlin.time.DurationUnit)
    {
        int $i1;
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "unit");

        $l0 = staticinvoke <kotlin.time.Duration: long toLong-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceIn(long,long,long)>($l0, -2147483648L, 2147483647L);

        $i1 = (int) $l0;

        return $i1;
    }

    public static final java.lang.String toIsoString-impl(long)
    {
        long $l0, $l1, $l2;
        byte $b6;
        int $i3, $i4, $i5;
        java.lang.StringBuilder $r0, $r1;
        java.lang.String $r2;
        boolean z0, z1, z2, z3;

        $l0 := @parameter0: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        z0 = staticinvoke <kotlin.time.Duration: boolean isNegative-impl(long)>($l0);

        if z0 == 0 goto label01;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label01:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PT");

        $l1 = staticinvoke <kotlin.time.Duration: long getAbsoluteValue-UwyO8pc(long)>($l0);

        $l2 = staticinvoke <kotlin.time.Duration: long getInWholeHours-impl(long)>($l1);

        $i3 = staticinvoke <kotlin.time.Duration: int getMinutesComponent-impl(long)>($l1);

        $i4 = staticinvoke <kotlin.time.Duration: int getSecondsComponent-impl(long)>($l1);

        $i5 = staticinvoke <kotlin.time.Duration: int getNanosecondsComponent-impl(long)>($l1);

        z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if z0 == 0 goto label02;

        $l1 = 9999999999999L;

        goto label03;

     label02:
        $l1 = $l2;

     label03:
        z2 = 1;

        $b6 = $l1 cmp 0L;

        if $b6 == 0 goto label04;

        z0 = 1;

        goto label05;

     label04:
        z0 = 0;

     label05:
        if $i4 != 0 goto label07;

        if $i5 == 0 goto label06;

        goto label07;

     label06:
        z3 = 0;

        goto label08;

     label07:
        z3 = 1;

     label08:
        z1 = z3;

        if $i3 != 0 goto label10;

        if z3 == 0 goto label09;

        if z0 == 0 goto label09;

        goto label10;

     label09:
        z2 = 0;

     label10:
        if z0 == 0 goto label11;

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(72);

     label11:
        if z2 == 0 goto label12;

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(77);

     label12:
        if z1 != 0 goto label14;

        if z0 != 0 goto label13;

        if z2 != 0 goto label13;

        goto label14;

     label13:
        goto label15;

     label14:
        staticinvoke <kotlin.time.Duration: void appendFractional-impl(long,java.lang.StringBuilder,int,int,int,java.lang.String,boolean)>($l0, $r0, $i4, $i5, 9, "S", 1);

     label15:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "StringBuilder().apply(builderAction).toString()");

        return $r2;
    }

    public static final long toLong-impl(long, kotlin.time.DurationUnit)
    {
        byte $b2;
        kotlin.time.DurationUnit $r0, $r1;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "unit");

        $l1 = <kotlin.time.Duration: long INFINITE>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return 9223372036854775807L;

     label1:
        $l1 = <kotlin.time.Duration: long NEG_INFINITE>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        return -9223372036854775808L;

     label2:
        $l1 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $r1 = staticinvoke <kotlin.time.Duration: kotlin.time.DurationUnit getStorageUnit-impl(long)>($l0);

        $l0 = staticinvoke <kotlin.time.DurationUnitKt: long convertDurationUnit(long,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>($l1, $r1, $r0);

        return $l0;
    }

    public static final long toLongMilliseconds-impl(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.Duration: long getInWholeMilliseconds-impl(long)>($l0);

        return $l0;
    }

    public static final long toLongNanoseconds-impl(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.Duration: long getInWholeNanoseconds-impl(long)>($l0);

        return $l0;
    }

    public static java.lang.String toString-impl(long)
    {
        long $l0, l3, $l4;
        byte b2;
        int i1, $i5, $i6, $i7, i8, i9;
        java.lang.String $r2;
        boolean z0, z1, z2, $z3, z4;
        java.lang.StringBuilder $r0, $r1;

        $l0 := @parameter0: long;

        b2 = $l0 cmp 0L;

        if b2 != 0 goto label01;

        return "0s";

     label01:
        l3 = <kotlin.time.Duration: long INFINITE>;

        b2 = $l0 cmp l3;

        if b2 != 0 goto label02;

        return "Infinity";

     label02:
        l3 = <kotlin.time.Duration: long NEG_INFINITE>;

        b2 = $l0 cmp l3;

        if b2 != 0 goto label03;

        return "-Infinity";

     label03:
        $z3 = staticinvoke <kotlin.time.Duration: boolean isNegative-impl(long)>($l0);

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        if $z3 == 0 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label04:
        l3 = staticinvoke <kotlin.time.Duration: long getAbsoluteValue-UwyO8pc(long)>($l0);

        $l4 = staticinvoke <kotlin.time.Duration: long getInWholeDays-impl(long)>(l3);

        $i5 = staticinvoke <kotlin.time.Duration: int getHoursComponent-impl(long)>(l3);

        i1 = staticinvoke <kotlin.time.Duration: int getMinutesComponent-impl(long)>(l3);

        $i6 = staticinvoke <kotlin.time.Duration: int getSecondsComponent-impl(long)>(l3);

        $i7 = staticinvoke <kotlin.time.Duration: int getNanosecondsComponent-impl(long)>(l3);

        z2 = 0;

        b2 = $l4 cmp 0L;

        if b2 == 0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        if $i5 == 0 goto label07;

        z0 = 1;

        goto label08;

     label07:
        z0 = 0;

     label08:
        if i1 == 0 goto label09;

        z1 = 1;

        goto label10;

     label09:
        z1 = 0;

     label10:
        if $i6 != 0 goto label11;

        if $i7 == 0 goto label12;

     label11:
        z2 = 1;

     label12:
        i8 = 0;

        if z4 == 0 goto label13;

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(100);

        i8 = 1;

     label13:
        if z0 != 0 goto label14;

        if z4 == 0 goto label16;

        if z1 != 0 goto label14;

        if z2 == 0 goto label16;

     label14:
        i9 = i8 + 1;

        if i8 <= 0 goto label15;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label15:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(104);

        i8 = i9;

     label16:
        if z1 != 0 goto label17;

        if z2 == 0 goto label19;

        if z0 != 0 goto label17;

        if z4 == 0 goto label19;

     label17:
        $i5 = i8 + 1;

        if i8 <= 0 goto label18;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label18:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(109);

        i8 = $i5;

     label19:
        if z2 == 0 goto label26;

        i1 = i8 + 1;

        if i8 <= 0 goto label20;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label20:
        if $i6 != 0 goto label24;

        if z4 != 0 goto label24;

        if z0 != 0 goto label24;

        if z1 == 0 goto label21;

        goto label24;

     label21:
        if $i7 < 1000000 goto label22;

        $i6 = $i7 / 1000000;

        $i7 = $i7 % 1000000;

        staticinvoke <kotlin.time.Duration: void appendFractional-impl(long,java.lang.StringBuilder,int,int,int,java.lang.String,boolean)>($l0, $r0, $i6, $i7, 6, "ms", 0);

        goto label25;

     label22:
        if $i7 < 1000 goto label23;

        $i6 = $i7 / 1000;

        $i7 = $i7 % 1000;

        staticinvoke <kotlin.time.Duration: void appendFractional-impl(long,java.lang.StringBuilder,int,int,int,java.lang.String,boolean)>($l0, $r0, $i6, $i7, 3, "us", 0);

        goto label25;

     label23:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns");

        goto label25;

     label24:
        staticinvoke <kotlin.time.Duration: void appendFractional-impl(long,java.lang.StringBuilder,int,int,int,java.lang.String,boolean)>($l0, $r0, $i6, $i7, 9, "s", 0);

     label25:
        i8 = i1;

        goto label26;

     label26:
        if $z3 == 0 goto label27;

        if i8 <= 1 goto label27;

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(1, 40);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label27:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "StringBuilder().apply(builderAction).toString()");

        return $r2;
    }

    public static final java.lang.String toString-impl(long, kotlin.time.DurationUnit, int)
    {
        kotlin.time.DurationUnit $r0;
        long $l0;
        java.lang.IllegalArgumentException $r3;
        int $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean z0;
        double $d0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "unit");

        if $i1 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label4;

        $d0 = staticinvoke <kotlin.time.Duration: double toDouble-impl(long,kotlin.time.DurationUnit)>($l0, $r0);

        z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if z0 == 0 goto label3;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i1, 12);

        $r1 = staticinvoke <kotlin.time.DurationJvmKt: java.lang.String formatToExactDecimals(double,int)>($d0, $i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = staticinvoke <kotlin.time.DurationUnitKt: java.lang.String shortName(kotlin.time.DurationUnit)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decimals must be not negative, but was ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public static java.lang.String toString-impl$default(long, kotlin.time.DurationUnit, int, int, java.lang.Object)
    {
        kotlin.time.DurationUnit $r0;
        int $i1, $i2;
        java.lang.Object $r1;
        long $l0;
        java.lang.String $r2;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $i1 = 0;

     label1:
        $r2 = staticinvoke <kotlin.time.Duration: java.lang.String toString-impl(long,kotlin.time.DurationUnit,int)>($l0, $r0, $i1);

        return $r2;
    }

    public static final long unaryMinus-UwyO8pc(long)
    {
        int $i1;
        long $l0, $l2;

        $l0 := @parameter0: long;

        $l2 = staticinvoke <kotlin.time.Duration: long getValue-impl(long)>($l0);

        $l2 = neg $l2;

        $i1 = (int) $l0;

        $i1 = $i1 & 1;

        $l0 = staticinvoke <kotlin.time.DurationKt: long access$durationOf(long,int)>($l2, $i1);

        return $l0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        kotlin.time.Duration r0, $r2;
        int $i1;
        java.lang.Object $r1;
        long $l0;

        r0 := @this: kotlin.time.Duration;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.time.Duration) $r1;

        $l0 = virtualinvoke $r2.<kotlin.time.Duration: long unbox-impl()>();

        $i1 = virtualinvoke r0.<kotlin.time.Duration: int compareTo-LRDsOJo(long)>($l0);

        return $i1;
    }

    public int compareTo-LRDsOJo(long)
    {
        kotlin.time.Duration r0;
        int $i1;
        long $l0, $l2;

        r0 := @this: kotlin.time.Duration;

        $l0 := @parameter0: long;

        $l2 = r0.<kotlin.time.Duration: long rawValue>;

        $i1 = staticinvoke <kotlin.time.Duration: int compareTo-LRDsOJo(long,long)>($l2, $l0);

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.time.Duration r0;
        java.lang.Object $r1;
        long $l0;
        boolean $z0;

        r0 := @this: kotlin.time.Duration;

        $r1 := @parameter0: java.lang.Object;

        $l0 = r0.<kotlin.time.Duration: long rawValue>;

        $z0 = staticinvoke <kotlin.time.Duration: boolean equals-impl(long,java.lang.Object)>($l0, $r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        long $l1;
        kotlin.time.Duration r0;

        r0 := @this: kotlin.time.Duration;

        $l1 = r0.<kotlin.time.Duration: long rawValue>;

        $i0 = staticinvoke <kotlin.time.Duration: int hashCode-impl(long)>($l1);

        return $i0;
    }

    public java.lang.String toString()
    {
        long $l0;
        java.lang.String $r1;
        kotlin.time.Duration r0;

        r0 := @this: kotlin.time.Duration;

        $l0 = r0.<kotlin.time.Duration: long rawValue>;

        $r1 = staticinvoke <kotlin.time.Duration: java.lang.String toString-impl(long)>($l0);

        return $r1;
    }

    public final long unbox-impl()
    {
        long l0;
        kotlin.time.Duration r0;

        r0 := @this: kotlin.time.Duration;

        l0 = r0.<kotlin.time.Duration: long rawValue>;

        return l0;
    }
}
