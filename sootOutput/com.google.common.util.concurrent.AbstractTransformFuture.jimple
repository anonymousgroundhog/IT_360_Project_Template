abstract class com.google.common.util.concurrent.AbstractTransformFuture extends com.google.common.util.concurrent.FluentFuture$TrustedFuture implements java.lang.Runnable
{
    java.lang.Object function;
    com.google.common.util.concurrent.ListenableFuture inputFuture;

    void <init>(com.google.common.util.concurrent.ListenableFuture, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        java.lang.Object r2, $r3;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.google.common.util.concurrent.FluentFuture$TrustedFuture: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (com.google.common.util.concurrent.ListenableFuture) $r3;

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = r1;

        r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = r2;

        return;
    }

    static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.ListenableFuture r0;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture r3;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        $r2 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r3 = new com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture;

        specialinvoke r3.<com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>(r0, r1);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r2, r3);

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r3, $r2);

        return r3;
    }

    static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture r3;
        com.google.common.util.concurrent.ListenableFuture r0;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.AsyncFunction r1;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.util.concurrent.AsyncFunction;

        $r2 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r3 = new com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture;

        specialinvoke r3.<com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>(r0, r1);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r2, r3);

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r3, $r2);

        return r3;
    }

    protected final void afterDone()
    {
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        $r1 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: void maybePropagateCancellationTo(java.util.concurrent.Future)>($r1);

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = null;

        return;
    }

    abstract java.lang.Object doTransform(java.lang.Object, java.lang.Object) throws java.lang.Exception;

    protected java.lang.String pendingToString()
    {
        com.google.common.util.concurrent.ListenableFuture r1;
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        int $i0, $i1;
        java.lang.Object r2;
        java.lang.StringBuilder $r6;
        java.lang.String $r3, r4, $r5;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        r1 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        r2 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function>;

        $r3 = specialinvoke r0.<com.google.common.util.concurrent.FluentFuture$TrustedFuture: java.lang.String pendingToString()>();

        r4 = "";

        if r1 == null goto label1;

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 16;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inputFuture=[");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        if r2 == null goto label2;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 11;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("function=[");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        if $r3 == null goto label4;

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        $r3 = virtualinvoke r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r3);

        return $r3;

     label3:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>(r4);

        return $r3;

     label4:
        return null;
    }

    public final void run()
    {
        java.lang.Throwable r4, r5;
        com.google.common.util.concurrent.ListenableFuture r1;
        java.util.concurrent.CancellationException r9;
        java.lang.Error r6;
        java.lang.RuntimeException r7;
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        java.util.concurrent.ExecutionException r8;
        java.lang.Object r2, $r3;
        boolean $z0, z1, $z2;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        r1 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        r2 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function>;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: boolean isCancelled()>();

        z1 = 1;

        if r1 != null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        $z0 = $z0 | $z2;

        if r2 != null goto label03;

        goto label04;

     label03:
        z1 = 0;

     label04:
        z1 = $z0 | z1;

        if z1 == 0 goto label05;

        return;

     label05:
        r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        z1 = interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: boolean isCancelled()>();

        if z1 == 0 goto label06;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: boolean setFuture(com.google.common.util.concurrent.ListenableFuture)>(r1);

        return;

     label06:
        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>(r1);

     label07:
        r2 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object doTransform(java.lang.Object,java.lang.Object)>(r2, $r3);

     label08:
        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = null;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: void setResult(java.lang.Object)>(r2);

        return;

     label09:
        r4 := @caughtexception;

     label10:
        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: boolean setException(java.lang.Throwable)>(r4);

     label11:
        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = null;

        return;

     label12:
        r5 := @caughtexception;

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = null;

        throw r5;

     label13:
        r6 := @caughtexception;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: boolean setException(java.lang.Throwable)>(r6);

        return;

     label14:
        r7 := @caughtexception;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: boolean setException(java.lang.Throwable)>(r7);

        return;

     label15:
        r8 := @caughtexception;

        r4 = virtualinvoke r8.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: boolean setException(java.lang.Throwable)>(r4);

        return;

     label16:
        r9 := @caughtexception;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: boolean cancel(boolean)>(0);

        return;

        catch java.util.concurrent.CancellationException from label06 to label07 with label16;
        catch java.util.concurrent.ExecutionException from label06 to label07 with label15;
        catch java.lang.RuntimeException from label06 to label07 with label14;
        catch java.lang.Error from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    abstract void setResult(java.lang.Object);
}
