final class kotlinx.coroutines.sync.MutexImpl$onLock$2 extends kotlin.jvm.internal.FunctionReferenceImpl implements kotlin.jvm.functions.Function3
{
    public static final kotlinx.coroutines.sync.MutexImpl$onLock$2 INSTANCE;

    static void <clinit>()
    {
        kotlinx.coroutines.sync.MutexImpl$onLock$2 $r0;

        $r0 = new kotlinx.coroutines.sync.MutexImpl$onLock$2;

        specialinvoke $r0.<kotlinx.coroutines.sync.MutexImpl$onLock$2: void <init>()>();

        <kotlinx.coroutines.sync.MutexImpl$onLock$2: kotlinx.coroutines.sync.MutexImpl$onLock$2 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        kotlinx.coroutines.sync.MutexImpl$onLock$2 r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$onLock$2;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int)>(3, class "Lkotlinx/coroutines/sync/MutexImpl;", "onLockProcessResult", "onLockProcessResult(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", 0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$onLock$2 r0;
        java.lang.Object $r1, $r2, $r3;
        kotlinx.coroutines.sync.MutexImpl $r4;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$onLock$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 = (kotlinx.coroutines.sync.MutexImpl) $r1;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$onLock$2: java.lang.Object invoke(kotlinx.coroutines.sync.MutexImpl,java.lang.Object,java.lang.Object)>($r4, $r2, $r3);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.sync.MutexImpl, java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$onLock$2 r0;
        kotlinx.coroutines.sync.MutexImpl $r1;
        java.lang.Object $r2, $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$onLock$2;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object onLockProcessResult(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r2;
    }
}
