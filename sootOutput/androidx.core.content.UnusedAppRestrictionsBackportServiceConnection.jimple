class androidx.core.content.UnusedAppRestrictionsBackportServiceConnection extends java.lang.Object implements android.content.ServiceConnection
{
    private final android.content.Context mContext;
    private boolean mHasBoundService;
    androidx.concurrent.futures.ResolvableFuture mResultFuture;
    androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService mUnusedAppRestrictionsService;

    void <init>(android.content.Context)
    {
        android.content.Context $r1;
        androidx.core.content.UnusedAppRestrictionsBackportServiceConnection r0;

        r0 := @this: androidx.core.content.UnusedAppRestrictionsBackportServiceConnection;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService mUnusedAppRestrictionsService> = null;

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: boolean mHasBoundService> = 0;

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: android.content.Context mContext> = $r1;

        return;
    }

    private androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportCallback getBackportCallback()
    {
        androidx.core.content.UnusedAppRestrictionsBackportServiceConnection r0;
        androidx.core.content.UnusedAppRestrictionsBackportServiceConnection$1 $r1;

        r0 := @this: androidx.core.content.UnusedAppRestrictionsBackportServiceConnection;

        $r1 = new androidx.core.content.UnusedAppRestrictionsBackportServiceConnection$1;

        specialinvoke $r1.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection$1: void <init>(androidx.core.content.UnusedAppRestrictionsBackportServiceConnection)>(r0);

        return $r1;
    }

    public void connectAndFetchResult(androidx.concurrent.futures.ResolvableFuture)
    {
        android.content.Context $r3;
        java.lang.IllegalStateException $r6;
        androidx.core.content.UnusedAppRestrictionsBackportServiceConnection r0;
        android.content.pm.PackageManager $r4;
        androidx.concurrent.futures.ResolvableFuture r1;
        android.content.Intent r2;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: androidx.core.content.UnusedAppRestrictionsBackportServiceConnection;

        r1 := @parameter0: androidx.concurrent.futures.ResolvableFuture;

        $z0 = r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: boolean mHasBoundService>;

        if $z0 != 0 goto label1;

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: boolean mHasBoundService> = 1;

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: androidx.concurrent.futures.ResolvableFuture mResultFuture> = r1;

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.support.unusedapprestrictions.action.CustomUnusedAppRestrictionsBackportService");

        $r3 = r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = staticinvoke <androidx.core.content.PackageManagerCompat: java.lang.String getPermissionRevocationVerifierApp(android.content.pm.PackageManager)>($r4);

        r2 = virtualinvoke r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r5);

        $r3 = r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r2, r0, 1);

        return;

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Each UnusedAppRestrictionsBackportServiceConnection can only be bound once.");

        throw $r6;
    }

    public void disconnectFromService()
    {
        android.content.Context $r1;
        java.lang.IllegalStateException $r2;
        androidx.core.content.UnusedAppRestrictionsBackportServiceConnection r0;
        boolean $z0;

        r0 := @this: androidx.core.content.UnusedAppRestrictionsBackportServiceConnection;

        $z0 = r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: boolean mHasBoundService>;

        if $z0 == 0 goto label1;

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: boolean mHasBoundService> = 0;

        $r1 = r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r0);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("bindService must be called before unbind");

        throw $r2;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        androidx.core.content.UnusedAppRestrictionsBackportServiceConnection r0;
        android.content.ComponentName $r1;
        androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService $r3;
        androidx.concurrent.futures.ResolvableFuture $r6;
        android.os.RemoteException r5;
        androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportCallback $r4;
        java.lang.Integer $r7;
        android.os.IBinder $r2;

        r0 := @this: androidx.core.content.UnusedAppRestrictionsBackportServiceConnection;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 := @parameter1: android.os.IBinder;

        $r3 = staticinvoke <androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService$Stub: androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService asInterface(android.os.IBinder)>($r2);

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService mUnusedAppRestrictionsService> = $r3;

        $r3 = r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService mUnusedAppRestrictionsService>;

     label1:
        $r4 = specialinvoke r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportCallback getBackportCallback()>();

        interfaceinvoke $r3.<androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService: void isPermissionRevocationEnabledForApp(androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportCallback)>($r4);

     label2:
        return;

     label3:
        r5 := @caughtexception;

        $r6 = r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: androidx.concurrent.futures.ResolvableFuture mResultFuture>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r6.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>($r7);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        androidx.core.content.UnusedAppRestrictionsBackportServiceConnection r0;
        android.content.ComponentName $r1;

        r0 := @this: androidx.core.content.UnusedAppRestrictionsBackportServiceConnection;

        $r1 := @parameter0: android.content.ComponentName;

        r0.<androidx.core.content.UnusedAppRestrictionsBackportServiceConnection: androidx.core.app.unusedapprestrictions.IUnusedAppRestrictionsBackportService mUnusedAppRestrictionsService> = null;

        return;
    }
}
