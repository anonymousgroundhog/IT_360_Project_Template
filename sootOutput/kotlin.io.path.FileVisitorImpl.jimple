final class kotlin.io.path.FileVisitorImpl extends java.nio.file.SimpleFileVisitor
{
    private final kotlin.jvm.functions.Function2 onPostVisitDirectory;
    private final kotlin.jvm.functions.Function2 onPreVisitDirectory;
    private final kotlin.jvm.functions.Function2 onVisitFile;
    private final kotlin.jvm.functions.Function2 onVisitFileFailed;

    public void <init>(kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r1, $r2, $r3, $r4;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 := @parameter2: kotlin.jvm.functions.Function2;

        $r4 := @parameter3: kotlin.jvm.functions.Function2;

        specialinvoke r0.<java.nio.file.SimpleFileVisitor: void <init>()>();

        r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onPreVisitDirectory> = $r1;

        r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onVisitFile> = $r2;

        r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onVisitFileFailed> = $r3;

        r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onPostVisitDirectory> = $r4;

        return;
    }

    public volatile java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object, java.io.IOException)
    {
        java.nio.file.FileVisitResult $r3;
        java.lang.Object $r1;
        java.io.IOException $r2;
        java.nio.file.Path $r4;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.io.IOException;

        $r4 = (java.nio.file.Path) $r1;

        $r3 = virtualinvoke r0.<kotlin.io.path.FileVisitorImpl: java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path,java.io.IOException)>($r4, $r2);

        return $r3;
    }

    public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException)
    {
        java.nio.file.FileVisitResult $r5;
        java.io.IOException $r2;
        java.lang.Object $r4;
        kotlin.jvm.functions.Function2 $r3;
        java.nio.file.Path $r1;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.io.IOException;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "dir");

        $r3 = r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onPostVisitDirectory>;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r5 = (java.nio.file.FileVisitResult) $r4;

        if $r5 != null goto label2;

     label1:
        $r5 = specialinvoke r0.<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object,java.io.IOException)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "super.postVisitDirectory(dir, exc)");

     label2:
        return $r5;
    }

    public volatile java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.FileVisitResult $r3;
        java.lang.Object $r1;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.Path $r4;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r4 = (java.nio.file.Path) $r1;

        $r3 = virtualinvoke r0.<kotlin.io.path.FileVisitorImpl: java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r4, $r2);

        return $r3;
    }

    public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.FileVisitResult $r5;
        java.lang.Object $r4;
        kotlin.jvm.functions.Function2 $r3;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.Path $r1;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "dir");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "attrs");

        $r3 = r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onPreVisitDirectory>;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r5 = (java.nio.file.FileVisitResult) $r4;

        if $r5 != null goto label2;

     label1:
        $r5 = specialinvoke r0.<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "super.preVisitDirectory(dir, attrs)");

     label2:
        return $r5;
    }

    public volatile java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.FileVisitResult $r3;
        java.lang.Object $r1;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.Path $r4;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r4 = (java.nio.file.Path) $r1;

        $r3 = virtualinvoke r0.<kotlin.io.path.FileVisitorImpl: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r4, $r2);

        return $r3;
    }

    public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.FileVisitResult $r5;
        java.lang.Object $r4;
        kotlin.jvm.functions.Function2 $r3;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.Path $r1;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "attrs");

        $r3 = r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onVisitFile>;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r5 = (java.nio.file.FileVisitResult) $r4;

        if $r5 != null goto label2;

     label1:
        $r5 = specialinvoke r0.<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "super.visitFile(file, attrs)");

     label2:
        return $r5;
    }

    public volatile java.nio.file.FileVisitResult visitFileFailed(java.lang.Object, java.io.IOException)
    {
        java.nio.file.FileVisitResult $r3;
        java.lang.Object $r1;
        java.io.IOException $r2;
        java.nio.file.Path $r4;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.io.IOException;

        $r4 = (java.nio.file.Path) $r1;

        $r3 = virtualinvoke r0.<kotlin.io.path.FileVisitorImpl: java.nio.file.FileVisitResult visitFileFailed(java.nio.file.Path,java.io.IOException)>($r4, $r2);

        return $r3;
    }

    public java.nio.file.FileVisitResult visitFileFailed(java.nio.file.Path, java.io.IOException)
    {
        java.nio.file.FileVisitResult $r5;
        java.io.IOException $r2;
        java.lang.Object $r4;
        kotlin.jvm.functions.Function2 $r3;
        java.nio.file.Path $r1;
        kotlin.io.path.FileVisitorImpl r0;

        r0 := @this: kotlin.io.path.FileVisitorImpl;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.io.IOException;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "exc");

        $r3 = r0.<kotlin.io.path.FileVisitorImpl: kotlin.jvm.functions.Function2 onVisitFileFailed>;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r5 = (java.nio.file.FileVisitResult) $r4;

        if $r5 != null goto label2;

     label1:
        $r5 = specialinvoke r0.<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult visitFileFailed(java.lang.Object,java.io.IOException)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "super.visitFileFailed(file, exc)");

     label2:
        return $r5;
    }
}
