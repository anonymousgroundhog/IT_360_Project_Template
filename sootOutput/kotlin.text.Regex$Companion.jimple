public final class kotlin.text.Regex$Companion extends java.lang.Object
{

    private void <init>()
    {
        kotlin.text.Regex$Companion r0;

        r0 := @this: kotlin.text.Regex$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.text.Regex$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: kotlin.text.Regex$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.text.Regex$Companion: void <init>()>();

        return;
    }

    public static final int access$ensureUnicodeCase(kotlin.text.Regex$Companion, int)
    {
        int $i0;
        kotlin.text.Regex$Companion $r0;

        $r0 := @parameter0: kotlin.text.Regex$Companion;

        $i0 := @parameter1: int;

        $i0 = specialinvoke $r0.<kotlin.text.Regex$Companion: int ensureUnicodeCase(int)>($i0);

        return $i0;
    }

    private final int ensureUnicodeCase(int)
    {
        int $i0, $i1;
        kotlin.text.Regex$Companion r0;

        r0 := @this: kotlin.text.Regex$Companion;

        $i0 := @parameter0: int;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $i0 = $i0 | 64;

     label1:
        return $i0;
    }

    public final java.lang.String escape(java.lang.String)
    {
        kotlin.text.Regex$Companion r0;
        java.lang.String $r1;

        r0 := @this: kotlin.text.Regex$Companion;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "literal");

        $r1 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "quote(literal)");

        return $r1;
    }

    public final java.lang.String escapeReplacement(java.lang.String)
    {
        kotlin.text.Regex$Companion r0;
        java.lang.String $r1;

        r0 := @this: kotlin.text.Regex$Companion;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "literal");

        $r1 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "quoteReplacement(literal)");

        return $r1;
    }

    public final kotlin.text.Regex fromLiteral(java.lang.String)
    {
        kotlin.text.Regex$Companion r0;
        java.lang.String $r1;
        kotlin.text.RegexOption $r2;
        kotlin.text.Regex $r3;

        r0 := @this: kotlin.text.Regex$Companion;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "literal");

        $r3 = new kotlin.text.Regex;

        $r2 = <kotlin.text.RegexOption: kotlin.text.RegexOption LITERAL>;

        specialinvoke $r3.<kotlin.text.Regex: void <init>(java.lang.String,kotlin.text.RegexOption)>($r1, $r2);

        return $r3;
    }
}
