final class kotlinx.coroutines.flow.FlowKt__DelayKt extends java.lang.Object
{

    public static final kotlinx.coroutines.flow.Flow debounce(kotlinx.coroutines.flow.Flow, long)
    {
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.IllegalArgumentException $r4;
        kotlinx.coroutines.flow.Flow $r0;
        byte $b1;
        kotlinx.coroutines.flow.FlowKt__DelayKt$debounce$2 $r3;
        int $i2;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        return $r0;

     label3:
        $r3 = new kotlinx.coroutines.flow.FlowKt__DelayKt$debounce$2;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__DelayKt$debounce$2: void <init>(long)>($l0);

        $r1 = (kotlin.jvm.functions.Function1) $r3;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__DelayKt: kotlinx.coroutines.flow.Flow debounceInternal$FlowKt__DelayKt(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r0;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r2 = "Debounce timeout should not be negative";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;
    }

    public static final kotlinx.coroutines.flow.Flow debounce(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__DelayKt: kotlinx.coroutines.flow.Flow debounceInternal$FlowKt__DelayKt(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow debounce-HG0u8IE(kotlinx.coroutines.flow.Flow, long)
    {
        kotlinx.coroutines.flow.Flow $r0;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $l0 = staticinvoke <kotlinx.coroutines.DelayKt: long toDelayMillis-LRDsOJo(long)>($l0);

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow debounce(kotlinx.coroutines.flow.Flow,long)>($r0, $l0);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow debounceDuration(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.flow.FlowKt__DelayKt$debounce$3 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 = new kotlinx.coroutines.flow.FlowKt__DelayKt$debounce$3;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__DelayKt$debounce$3: void <init>(kotlin.jvm.functions.Function1)>($r1);

        $r1 = (kotlin.jvm.functions.Function1) $r2;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__DelayKt: kotlinx.coroutines.flow.Flow debounceInternal$FlowKt__DelayKt(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r0;
    }

    private static final kotlinx.coroutines.flow.Flow debounceInternal$FlowKt__DelayKt(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__DelayKt$debounceInternal$1 $r2;
        kotlin.jvm.functions.Function3 $r3;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 = new kotlinx.coroutines.flow.FlowKt__DelayKt$debounceInternal$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__DelayKt$debounceInternal$1: void <init>(kotlin.jvm.functions.Function1,kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r1, $r0, null);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        $r0 = staticinvoke <kotlinx.coroutines.flow.internal.FlowCoroutineKt: kotlinx.coroutines.flow.Flow scopedFlow(kotlin.jvm.functions.Function3)>($r3);

        return $r0;
    }

    public static final kotlinx.coroutines.channels.ReceiveChannel fixedPeriodTicker(kotlinx.coroutines.CoroutineScope, long, long)
    {
        kotlinx.coroutines.flow.FlowKt__DelayKt$fixedPeriodTicker$3 $r5;
        kotlinx.coroutines.channels.ReceiveChannel $r2;
        long $l0, $l1;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.IllegalArgumentException $r7;
        kotlinx.coroutines.CoroutineScope $r0;
        byte $b2;
        int $i3;
        java.lang.StringBuilder $r3, $r6;
        java.lang.String $r4;
        boolean $z0, $z1;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $z0 = 1;

        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label6;

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $r5 = new kotlinx.coroutines.flow.FlowKt__DelayKt$fixedPeriodTicker$3;

        specialinvoke $r5.<kotlinx.coroutines.flow.FlowKt__DelayKt$fixedPeriodTicker$3: void <init>(long,long,kotlin.coroutines.Continuation)>($l1, $l0, null);

        $r1 = (kotlin.jvm.functions.Function2) $r5;

        $r2 = staticinvoke <kotlinx.coroutines.channels.ProduceKt: kotlinx.coroutines.channels.ReceiveChannel produce$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r0, null, 0, $r1, 1, null);

        return $r2;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected non-negative initial delay, but has ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label6:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected non-negative delay, but has ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r7;
    }

    public static kotlinx.coroutines.channels.ReceiveChannel fixedPeriodTicker$default(kotlinx.coroutines.CoroutineScope, long, long, int, java.lang.Object)
    {
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        int $i2;
        long $l0, $l1;
        java.lang.Object $r0;
        kotlinx.coroutines.CoroutineScope $r2;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $l1 = $l0;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.channels.ReceiveChannel fixedPeriodTicker(kotlinx.coroutines.CoroutineScope,long,long)>($r2, $l0, $l1);

        return $r1;
    }

    public static final kotlinx.coroutines.flow.Flow sample(kotlinx.coroutines.flow.Flow, long)
    {
        kotlin.jvm.functions.Function3 $r1;
        long $l0;
        java.lang.IllegalArgumentException $r4;
        kotlinx.coroutines.flow.Flow $r0;
        byte $b1;
        int $i2;
        java.lang.String $r2;
        kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2 $r3;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = new kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2: void <init>(long,kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($l0, $r0, null);

        $r1 = (kotlin.jvm.functions.Function3) $r3;

        $r0 = staticinvoke <kotlinx.coroutines.flow.internal.FlowCoroutineKt: kotlinx.coroutines.flow.Flow scopedFlow(kotlin.jvm.functions.Function3)>($r1);

        return $r0;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r2 = "Sample period should be positive";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;
    }

    public static final kotlinx.coroutines.flow.Flow sample-HG0u8IE(kotlinx.coroutines.flow.Flow, long)
    {
        kotlinx.coroutines.flow.Flow $r0;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $l0 = staticinvoke <kotlinx.coroutines.DelayKt: long toDelayMillis-LRDsOJo(long)>($l0);

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow sample(kotlinx.coroutines.flow.Flow,long)>($r0, $l0);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow timeout-HG0u8IE(kotlinx.coroutines.flow.Flow, long)
    {
        kotlinx.coroutines.flow.Flow $r0;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt__DelayKt: kotlinx.coroutines.flow.Flow timeoutInternal-HG0u8IE$FlowKt__DelayKt(kotlinx.coroutines.flow.Flow,long)>($r0, $l0);

        return $r0;
    }

    private static final kotlinx.coroutines.flow.Flow timeoutInternal-HG0u8IE$FlowKt__DelayKt(kotlinx.coroutines.flow.Flow, long)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__DelayKt$timeoutInternal$1 $r1;
        kotlin.jvm.functions.Function3 $r2;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $l0 := @parameter1: long;

        $r1 = new kotlinx.coroutines.flow.FlowKt__DelayKt$timeoutInternal$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__DelayKt$timeoutInternal$1: void <init>(long,kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($l0, $r0, null);

        $r2 = (kotlin.jvm.functions.Function3) $r1;

        $r0 = staticinvoke <kotlinx.coroutines.flow.internal.FlowCoroutineKt: kotlinx.coroutines.flow.Flow scopedFlow(kotlin.jvm.functions.Function3)>($r2);

        return $r0;
    }
}
