public class com.google.common.collect.ImmutableSet$Builder extends com.google.common.collect.ImmutableCollection$ArrayBasedBuilder
{
    private int hashCode;
    java.lang.Object[] hashTable;

    public void <init>()
    {
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void <init>(int)>(4);

        return;
    }

    void <init>(int)
    {
        int $i0;
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void <init>(int)>($i0);

        $i0 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i0);

        $r1 = newarray (java.lang.Object)[$i0];

        r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable> = $r1;

        return;
    }

    private void addDeduping(java.lang.Object)
    {
        java.lang.Object[] r2;
        com.google.common.collect.ImmutableSet$Builder r0;
        int i0, i1, $i2;
        java.lang.Object r1, r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        i0 = lengthof r2;

        i1 = i0 + -1;

        i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>(i0);

     label1:
        $i2 = $i2 & i1;

        r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        r3 = r2[$i2];

        if r3 != null goto label2;

        r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        r2[$i2] = r1;

        i1 = r0.<com.google.common.collect.ImmutableSet$Builder: int hashCode>;

        i0 = i1 + i0;

        r0.<com.google.common.collect.ImmutableSet$Builder: int hashCode> = i0;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)>(r1);

        return;

     label2:
        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        return;

     label3:
        $i2 = $i2 + 1;

        goto label1;
    }

    public volatile com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $r1 := @parameter0: java.lang.Object[];

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[])>($r1);

        return r0;
    }

    public com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableSet$Builder r0;
        int $i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        if $r2 == null goto label1;

        $i0 = r0.<com.google.common.collect.ImmutableSet$Builder: int size>;

        $i0 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i0);

        $r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        $i1 = lengthof $r2;

        if $i0 > $i1 goto label1;

        specialinvoke r0.<com.google.common.collect.ImmutableSet$Builder: void addDeduping(java.lang.Object)>(r1);

        return r0;

     label1:
        r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable> = null;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)>(r1);

        return r0;
    }

    public transient com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[])
    {
        java.lang.Object[] r1, $r3;
        com.google.common.collect.ImmutableSet$Builder r0;
        int $i0, $i1;
        java.lang.Object r2;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        r1 := @parameter0: java.lang.Object[];

        $r3 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        if $r3 == null goto label2;

        $i0 = lengthof r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r2 = r1[$i1];

        virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>(r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])>(r1);

     label3:
        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)
    {
        java.lang.Iterable $r1;
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator $r1;
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $r1 := @parameter0: java.util.Iterator;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator)>($r1);

        return r0;
    }

    public com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable)
    {
        java.lang.Object[] $r2;
        java.util.Iterator $r3;
        com.google.common.collect.ImmutableSet$Builder r0;
        java.lang.Object $r4;
        java.lang.Iterable r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        r1 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        if $r2 == null goto label3;

        $r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return r0;

     label3:
        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)>(r1);

        return r0;
    }

    public com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator r1;
        com.google.common.collect.ImmutableSet$Builder r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        r1 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection build()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableSet$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSet build()
    {
        java.lang.Object[] $r1, r2, $r5;
        com.google.common.collect.ImmutableSet $r4, $r6;
        com.google.common.collect.ImmutableSet$Builder r0;
        com.google.common.collect.RegularImmutableSet $r7;
        int $i0, $i1, $i2;
        java.lang.Object r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        $i0 = r0.<com.google.common.collect.ImmutableSet$Builder: int size>;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        if $r1 == null goto label6;

        $i0 = r0.<com.google.common.collect.ImmutableSet$Builder: int size>;

        $i0 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i0);

        $r1 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label6;

        $i0 = r0.<com.google.common.collect.ImmutableSet$Builder: int size>;

        $r1 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] contents>;

        $i1 = lengthof $r1;

        $z0 = staticinvoke <com.google.common.collect.ImmutableSet: boolean access$000(int,int)>($i0, $i1);

        if $z0 == 0 goto label4;

        $r1 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] contents>;

        $i0 = r0.<com.google.common.collect.ImmutableSet$Builder: int size>;

        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        goto label5;

     label2:
        $r1 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] contents>;

        r3 = $r1[0];

        r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>(r3);

        return $r4;

     label3:
        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r4;

     label4:
        r2 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] contents>;

     label5:
        $r7 = new com.google.common.collect.RegularImmutableSet;

        $r4 = $r7;

        $i0 = r0.<com.google.common.collect.ImmutableSet$Builder: int hashCode>;

        $r1 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        $r5 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        $i1 = lengthof $r5;

        $i1 = $i1 + -1;

        $i2 = r0.<com.google.common.collect.ImmutableSet$Builder: int size>;

        specialinvoke $r7.<com.google.common.collect.RegularImmutableSet: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>(r2, $i0, $r1, $i1, $i2);

        goto label7;

     label6:
        $i0 = r0.<com.google.common.collect.ImmutableSet$Builder: int size>;

        $r1 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] contents>;

        $r6 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet access$100(int,java.lang.Object[])>($i0, $r1);

        $r4 = $r6;

        $i0 = virtualinvoke $r6.<com.google.common.collect.ImmutableSet: int size()>();

        r0.<com.google.common.collect.ImmutableSet$Builder: int size> = $i0;

     label7:
        r0.<com.google.common.collect.ImmutableSet$Builder: boolean forceCopy> = 1;

        r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable> = null;

        return $r4;
    }

    com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder)
    {
        java.lang.Object[] r3;
        com.google.common.collect.ImmutableSet$Builder r0, r1;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ImmutableSet$Builder;

        r1 := @parameter0: com.google.common.collect.ImmutableSet$Builder;

        r3 = r0.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable>;

        if r3 == null goto label3;

        i0 = 0;

     label1:
        $i1 = r1.<com.google.common.collect.ImmutableSet$Builder: int size>;

        if i0 >= $i1 goto label2;

        r3 = r1.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] contents>;

        $r2 = r3[i0];

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;

     label3:
        r3 = r1.<com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] contents>;

        i0 = r1.<com.google.common.collect.ImmutableSet$Builder: int size>;

        virtualinvoke r0.<com.google.common.collect.ImmutableSet$Builder: void addAll(java.lang.Object[],int)>(r3, i0);

        return r0;
    }
}
