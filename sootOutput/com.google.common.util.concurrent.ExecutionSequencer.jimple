public final class com.google.common.util.concurrent.ExecutionSequencer extends java.lang.Object
{
    private com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue latestTaskQueue;
    private final java.util.concurrent.atomic.AtomicReference ref;

    private void <init>()
    {
        com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue $r3;
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.ExecutionSequencer r0;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: com.google.common.util.concurrent.ExecutionSequencer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        $r1 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture immediateVoidFuture()>();

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.ExecutionSequencer: java.util.concurrent.atomic.AtomicReference ref> = $r2;

        $r3 = new com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue;

        specialinvoke $r3.<com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue: void <init>(com.google.common.util.concurrent.ExecutionSequencer$1)>(null);

        r0.<com.google.common.util.concurrent.ExecutionSequencer: com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue latestTaskQueue> = $r3;

        return;
    }

    static com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue access$300(com.google.common.util.concurrent.ExecutionSequencer)
    {
        com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue r1;
        com.google.common.util.concurrent.ExecutionSequencer $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ExecutionSequencer;

        r1 = $r0.<com.google.common.util.concurrent.ExecutionSequencer: com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue latestTaskQueue>;

        return r1;
    }

    static com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue access$302(com.google.common.util.concurrent.ExecutionSequencer, com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue)
    {
        com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue $r1;
        com.google.common.util.concurrent.ExecutionSequencer $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ExecutionSequencer;

        $r1 := @parameter1: com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue;

        $r0.<com.google.common.util.concurrent.ExecutionSequencer: com.google.common.util.concurrent.ExecutionSequencer$ThreadConfinedTaskQueue latestTaskQueue> = $r1;

        return $r1;
    }

    public static com.google.common.util.concurrent.ExecutionSequencer create()
    {
        com.google.common.util.concurrent.ExecutionSequencer $r0;

        $r0 = new com.google.common.util.concurrent.ExecutionSequencer;

        specialinvoke $r0.<com.google.common.util.concurrent.ExecutionSequencer: void <init>()>();

        return $r0;
    }

    static void lambda$submitAsync$0(com.google.common.util.concurrent.TrustedListenableFutureTask, com.google.common.util.concurrent.SettableFuture, com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor)
    {
        com.google.common.util.concurrent.ListenableFuture $r2, $r3;
        com.google.common.util.concurrent.TrustedListenableFutureTask $r0;
        com.google.common.util.concurrent.SettableFuture $r1;
        com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor $r4;
        boolean $z0;

        $r0 := @parameter0: com.google.common.util.concurrent.TrustedListenableFutureTask;

        $r1 := @parameter1: com.google.common.util.concurrent.SettableFuture;

        $r2 := @parameter2: com.google.common.util.concurrent.ListenableFuture;

        $r3 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        $r4 := @parameter4: com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor;

        $z0 = virtualinvoke $r0.<com.google.common.util.concurrent.TrustedListenableFutureTask: boolean isDone()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<com.google.common.util.concurrent.SettableFuture: boolean setFuture(com.google.common.util.concurrent.ListenableFuture)>($r2);

        return;

     label1:
        $z0 = interfaceinvoke $r3.<com.google.common.util.concurrent.ListenableFuture: boolean isCancelled()>();

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor: boolean access$400(com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor)>($r4);

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<com.google.common.util.concurrent.TrustedListenableFutureTask: boolean cancel(boolean)>(0);

     label2:
        return;
    }

    public com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture $r3;
        com.google.common.util.concurrent.ExecutionSequencer$1 $r4;
        java.util.concurrent.Executor $r2;
        java.util.concurrent.Callable r1;
        com.google.common.util.concurrent.ExecutionSequencer r0;

        r0 := @this: com.google.common.util.concurrent.ExecutionSequencer;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = new com.google.common.util.concurrent.ExecutionSequencer$1;

        specialinvoke $r4.<com.google.common.util.concurrent.ExecutionSequencer$1: void <init>(com.google.common.util.concurrent.ExecutionSequencer,java.util.concurrent.Callable)>(r0, r1);

        $r3 = virtualinvoke r0.<com.google.common.util.concurrent.ExecutionSequencer: com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)>($r4, $r2);

        return $r3;
    }

    public com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture r9, $r11;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.SettableFuture $r6;
        java.util.concurrent.atomic.AtomicReference r7;
        com.google.common.util.concurrent.AsyncCallable r1;
        com.google.common.util.concurrent.ExecutionSequencer$2 r5;
        com.google.common.util.concurrent.ExecutionSequencer$$ExternalSyntheticLambda0 $r4;
        com.google.common.util.concurrent.TrustedListenableFutureTask $r10;
        java.lang.Object $r8;
        com.google.common.util.concurrent.ExecutionSequencer r0;
        com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor r3;

        r0 := @this: com.google.common.util.concurrent.ExecutionSequencer;

        r1 := @parameter0: com.google.common.util.concurrent.AsyncCallable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r3 = new com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor;

        specialinvoke r3.<com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor: void <init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ExecutionSequencer$1)>($r2, r0, null);

        r5 = new com.google.common.util.concurrent.ExecutionSequencer$2;

        specialinvoke r5.<com.google.common.util.concurrent.ExecutionSequencer$2: void <init>(com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor,com.google.common.util.concurrent.AsyncCallable)>(r0, r3, r1);

        $r6 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        r7 = r0.<com.google.common.util.concurrent.ExecutionSequencer: java.util.concurrent.atomic.AtomicReference ref>;

        $r8 = virtualinvoke r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>($r6);

        r9 = (com.google.common.util.concurrent.ListenableFuture) $r8;

        $r10 = staticinvoke <com.google.common.util.concurrent.TrustedListenableFutureTask: com.google.common.util.concurrent.TrustedListenableFutureTask create(com.google.common.util.concurrent.AsyncCallable)>(r5);

        interfaceinvoke r9.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r10, r3);

        $r11 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r10);

        $r4 = new com.google.common.util.concurrent.ExecutionSequencer$$ExternalSyntheticLambda0;

        specialinvoke $r4.<com.google.common.util.concurrent.ExecutionSequencer$$ExternalSyntheticLambda0: void <init>(com.google.common.util.concurrent.TrustedListenableFutureTask,com.google.common.util.concurrent.SettableFuture,com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor)>($r10, $r6, r9, $r11, r3);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r11.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r2);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r10.<com.google.common.util.concurrent.TrustedListenableFutureTask: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r2);

        return $r11;
    }
}
