final class com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask extends com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask
{
    private final java.util.concurrent.Callable callable;
    final com.google.common.util.concurrent.CombinedFuture this$0;

    void <init>(com.google.common.util.concurrent.CombinedFuture, java.util.concurrent.Callable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.CombinedFuture $r4;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask r0;
        java.util.concurrent.Callable r1;
        java.lang.Object $r3;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask;

        $r4 := @parameter0: com.google.common.util.concurrent.CombinedFuture;

        r1 := @parameter1: java.util.concurrent.Callable;

        $r2 := @parameter2: java.util.concurrent.Executor;

        r0.<com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask: com.google.common.util.concurrent.CombinedFuture this$0> = $r4;

        specialinvoke r0.<com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask: void <init>(com.google.common.util.concurrent.CombinedFuture,java.util.concurrent.Executor)>($r4, $r2);

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.util.concurrent.Callable) $r3;

        r0.<com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask: java.util.concurrent.Callable callable> = r1;

        return;
    }

    java.lang.Object runInterruptibly() throws java.lang.Exception
    {
        com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask r0;
        java.lang.Object $r1;
        java.util.concurrent.Callable $r2;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask;

        $r2 = r0.<com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask: java.util.concurrent.Callable callable>;

        $r1 = interfaceinvoke $r2.<java.util.concurrent.Callable: java.lang.Object call()>();

        return $r1;
    }

    void setValue(java.lang.Object)
    {
        com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask r0;
        java.lang.Object r1;
        com.google.common.util.concurrent.CombinedFuture $r2;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask: com.google.common.util.concurrent.CombinedFuture this$0>;

        virtualinvoke $r2.<com.google.common.util.concurrent.CombinedFuture: boolean set(java.lang.Object)>(r1);

        return;
    }

    java.lang.String toPendingString()
    {
        com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask r0;
        java.util.concurrent.Callable $r2;
        java.lang.String $r1;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask;

        $r2 = r0.<com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask: java.util.concurrent.Callable callable>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
}
