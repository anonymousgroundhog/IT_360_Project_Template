public final class kotlin.internal.PlatformImplementationsKt extends java.lang.Object
{
    public static final kotlin.internal.PlatformImplementations IMPLEMENTATIONS;

    static void <clinit>()
    {
        java.lang.Throwable $r10;
        kotlin.internal.PlatformImplementations $r2;
        java.lang.ClassCastException $r3, $r11, $r13, $r15;
        java.lang.NullPointerException $r4;
        java.lang.String $r9;
        boolean $z0;
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.ClassNotFoundException $r7, $r12, $r14, $r16;
        java.lang.StringBuilder $r8;
        java.lang.ClassLoader $r5, $r6;

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.jdk8.JDK8PlatformImplementations");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

     label02:
        if $r1 == null goto label06;

     label03:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label04:
        goto label69;

     label05:
        $r3 := @caughtexception;

        goto label09;

     label06:
        $r4 = new java.lang.NullPointerException;

     label07:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label08:
        throw $r4;

     label09:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label10:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label11:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

     label12:
        if $z0 != 0 goto label16;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        $r10 = (java.lang.Throwable) $r3;

     label15:
        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r10);

        throw $r7;

     label16:
        throw $r3;

     label17:
        $r7 := @caughtexception;

     label18:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.JRE8PlatformImplementations");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

     label19:
        if $r1 == null goto label23;

     label20:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label21:
        goto label69;

     label22:
        $r11 := @caughtexception;

        goto label26;

     label23:
        $r4 = new java.lang.NullPointerException;

     label24:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label25:
        throw $r4;

     label26:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label27:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label28:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

     label29:
        if $z0 != 0 goto label33;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label30:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label31:
        $r10 = (java.lang.Throwable) $r11;

     label32:
        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r10);

        throw $r7;

     label33:
        throw $r11;

     label34:
        $r12 := @caughtexception;

     label35:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.jdk7.JDK7PlatformImplementations");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

     label36:
        if $r1 == null goto label40;

     label37:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label38:
        goto label69;

     label39:
        $r13 := @caughtexception;

        goto label43;

     label40:
        $r4 = new java.lang.NullPointerException;

     label41:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label42:
        throw $r4;

     label43:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label44:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label45:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

     label46:
        if $z0 != 0 goto label50;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label47:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label48:
        $r10 = (java.lang.Throwable) $r13;

     label49:
        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r10);

        throw $r7;

     label50:
        throw $r13;

     label51:
        $r14 := @caughtexception;

     label52:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.JRE7PlatformImplementations");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"kotlin.internal\u2026entations\").newInstance()");

     label53:
        if $r1 == null goto label57;

     label54:
        $r2 = (kotlin.internal.PlatformImplementations) $r1;

     label55:
        goto label69;

     label56:
        $r15 := @caughtexception;

        goto label60;

     label57:
        $r4 = new java.lang.NullPointerException;

     label58:
        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");

     label59:
        throw $r4;

     label60:
        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label61:
        $r0 = class "Lkotlin/internal/PlatformImplementations;";

     label62:
        $r6 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

     label63:
        if $z0 != 0 goto label67;

        $r7 = new java.lang.ClassNotFoundException;

        $r8 = new java.lang.StringBuilder;

     label64:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label65:
        $r10 = (java.lang.Throwable) $r15;

     label66:
        specialinvoke $r7.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r10);

        throw $r7;

     label67:
        throw $r15;

     label68:
        $r16 := @caughtexception;

        $r2 = new kotlin.internal.PlatformImplementations;

        specialinvoke $r2.<kotlin.internal.PlatformImplementations: void <init>()>();

     label69:
        <kotlin.internal.PlatformImplementationsKt: kotlin.internal.PlatformImplementations IMPLEMENTATIONS> = $r2;

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label17;
        catch java.lang.ClassCastException from label03 to label04 with label05;
        catch java.lang.ClassCastException from label07 to label08 with label05;
        catch java.lang.ClassNotFoundException from label07 to label08 with label17;
        catch java.lang.ClassNotFoundException from label09 to label10 with label17;
        catch java.lang.ClassNotFoundException from label11 to label12 with label17;
        catch java.lang.ClassNotFoundException from label13 to label14 with label17;
        catch java.lang.ClassNotFoundException from label15 to label16 with label17;
        catch java.lang.ClassNotFoundException from label18 to label19 with label34;
        catch java.lang.ClassCastException from label20 to label21 with label22;
        catch java.lang.ClassCastException from label24 to label25 with label22;
        catch java.lang.ClassNotFoundException from label24 to label25 with label34;
        catch java.lang.ClassNotFoundException from label26 to label27 with label34;
        catch java.lang.ClassNotFoundException from label28 to label29 with label34;
        catch java.lang.ClassNotFoundException from label30 to label31 with label34;
        catch java.lang.ClassNotFoundException from label32 to label33 with label34;
        catch java.lang.ClassNotFoundException from label35 to label36 with label51;
        catch java.lang.ClassCastException from label37 to label38 with label39;
        catch java.lang.ClassCastException from label41 to label42 with label39;
        catch java.lang.ClassNotFoundException from label41 to label42 with label51;
        catch java.lang.ClassNotFoundException from label43 to label44 with label51;
        catch java.lang.ClassNotFoundException from label45 to label46 with label51;
        catch java.lang.ClassNotFoundException from label47 to label48 with label51;
        catch java.lang.ClassNotFoundException from label49 to label50 with label51;
        catch java.lang.ClassNotFoundException from label52 to label53 with label68;
        catch java.lang.ClassCastException from label54 to label55 with label56;
        catch java.lang.ClassCastException from label58 to label59 with label56;
        catch java.lang.ClassNotFoundException from label58 to label59 with label68;
        catch java.lang.ClassNotFoundException from label60 to label61 with label68;
        catch java.lang.ClassNotFoundException from label62 to label63 with label68;
        catch java.lang.ClassNotFoundException from label64 to label65 with label68;
        catch java.lang.ClassNotFoundException from label66 to label67 with label68;
    }

    public static final boolean apiVersionIsAtLeast(int, int, int)
    {
        int $i0, $i1, $i2;
        boolean $z0;
        kotlin.KotlinVersion $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r0 = <kotlin.KotlinVersion: kotlin.KotlinVersion CURRENT>;

        $z0 = virtualinvoke $r0.<kotlin.KotlinVersion: boolean isAtLeast(int,int,int)>($i0, $i1, $i2);

        return $z0;
    }

    private static final java.lang.Object castToBaseType(java.lang.Object)
    {
        java.lang.Throwable $r8;
        java.lang.ClassCastException r1;
        java.lang.Object $r0;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r5;
        java.lang.StringBuilder $r6;
        java.lang.ClassLoader $r3, $r4;
        java.lang.String $r7;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(1, "T");

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(4, "T");

        $r2 = class "Ljava/lang/Object;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 != 0 goto label4;

        $r5 = new java.lang.ClassNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance class was loaded from a different classloader: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", base type classloader: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = (java.lang.Throwable) r1;

        specialinvoke $r5.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r8);

        throw $r5;

     label4:
        throw r1;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
}
