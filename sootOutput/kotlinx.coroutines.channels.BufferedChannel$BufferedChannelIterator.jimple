final class kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator extends java.lang.Object implements kotlinx.coroutines.channels.ChannelIterator, kotlinx.coroutines.Waiter
{
    private kotlinx.coroutines.CancellableContinuationImpl continuation;
    private java.lang.Object receiveResult;
    final kotlinx.coroutines.channels.BufferedChannel this$0;

    public void <init>(kotlinx.coroutines.channels.BufferedChannel)
    {
        kotlinx.coroutines.internal.Symbol $r2;
        kotlinx.coroutines.channels.BufferedChannel $r1;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_RECEIVE_RESULT$p()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r2;

        return;
    }

    public static final java.lang.Object access$hasNextOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator, kotlinx.coroutines.channels.ChannelSegment, int, long, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        $l1 := @parameter3: long;

        $r2 := @parameter4: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object hasNextOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment,int,long,kotlin.coroutines.Continuation)>($r1, $i0, $l1, $r2);

        return $r3;
    }

    public static final void access$onClosedHasNextNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator)
    {
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void onClosedHasNextNoWaiterSuspend()>();

        return;
    }

    public static final void access$setContinuation$p(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator, kotlinx.coroutines.CancellableContinuationImpl)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r1;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuationImpl;

        $r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation> = $r1;

        return;
    }

    public static final void access$setReceiveResult$p(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator, java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter1: java.lang.Object;

        $r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r1;

        return;
    }

    private final java.lang.Object hasNextOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment, int, long, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r9;
        java.lang.IllegalStateException $r18;
        kotlin.coroutines.Continuation $r2, $r4;
        kotlinx.coroutines.channels.ChannelSegment r1, $r12;
        long l1, $l2, $l4;
        kotlinx.coroutines.CancellableContinuationImpl $r5;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;
        byte $b3;
        int i0;
        java.lang.Boolean $r13;
        java.lang.String r16;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r8;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r10;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r11;
        kotlin.jvm.functions.Function1 $r14;
        kotlin.coroutines.CoroutineContext $r15;
        kotlinx.coroutines.Waiter r6;
        java.lang.Object $r7, $r17;
        kotlinx.coroutines.channels.BufferedChannel $r3;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $r3 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0>;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r5 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r4);

     label01:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void access$setContinuation$p(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator,kotlinx.coroutines.CancellableContinuationImpl)>(r0, $r5);

        r6 = (kotlinx.coroutines.Waiter) r0;

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r3, r1, i0, l1, r6);

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

     label02:
        if $r7 != $r8 goto label09;

     label03:
        r6 = (kotlinx.coroutines.Waiter) r0;

     label04:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>($r3, r6, r1, i0);

     label05:
        goto label66;

     label06:
        $r9 := @caughtexception;

        goto label08;

     label07:
        $r9 := @caughtexception;

     label08:
        goto label70;

     label09:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

     label10:
        if $r7 != $r8 goto label60;

     label11:
        $l2 = virtualinvoke $r3.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

     label12:
        $b3 = l1 cmp $l2;

        i0 = (int) $b3;

        if i0 >= 0 goto label14;

     label13:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label14:
        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r7 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (kotlinx.coroutines.channels.ChannelSegment) $r7;

     label15:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

     label16:
        if $z0 == 0 goto label19;

     label17:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void access$onClosedHasNextNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator)>(r0);

     label18:
        goto label66;

     label19:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        l1 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>($r3);

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label20:
        $l2 = (long) i0;

     label21:
        $l2 = l1 / $l2;

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label22:
        $l4 = (long) i0;

     label23:
        $l4 = l1 % $l4;

     label24:
        i0 = (int) $l4;

     label25:
        $l4 = r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

     label26:
        $b3 = $l4 cmp $l2;

        if $b3 == 0 goto label30;

     label27:
        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>($r3, $l2, r1);

     label28:
        if $r12 != null goto label29;

        goto label15;

     label29:
        r1 = $r12;

        goto label30;

     label30:
        r6 = (kotlinx.coroutines.Waiter) r0;

     label31:
        $r12 = r1;

     label32:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r3, r1, i0, l1, r6);

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

     label33:
        if $r7 != $r8 goto label42;

     label34:
        r6 = (kotlinx.coroutines.Waiter) r0;

        $z0 = r6 instanceof kotlinx.coroutines.Waiter;

     label35:
        if $z0 == 0 goto label38;

     label36:
        r6 = (kotlinx.coroutines.Waiter) r0;

     label37:
        goto label39;

     label38:
        r6 = null;

     label39:
        if r6 == null goto label41;

     label40:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>($r3, r6, $r12, i0);

     label41:
        goto label56;

     label42:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

     label43:
        if $r7 != $r8 goto label48;

     label44:
        $l2 = virtualinvoke $r3.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

     label45:
        $b3 = l1 cmp $l2;

        i0 = (int) $b3;

        if i0 >= 0 goto label47;

     label46:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label47:
        r1 = $r12;

        goto label15;

     label48:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

     label49:
        if $r7 == $r8 goto label57;

     label50:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void access$setReceiveResult$p(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator,java.lang.Object)>(r0, $r7);

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void access$setContinuation$p(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator,kotlinx.coroutines.CancellableContinuationImpl)>(r0, null);

        $r13 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(1);

        $r14 = $r3.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

     label51:
        if $r14 == null goto label54;

     label52:
        $r15 = virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r14 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r14, $r7, $r15);

     label53:
        goto label55;

     label54:
        $r14 = null;

     label55:
        virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r13, $r14);

     label56:
        goto label66;

     label57:
        $r18 = new java.lang.IllegalStateException;

     label58:
        r16 = "unexpected";

     label59:
        r16 = virtualinvoke r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r16);

        throw $r18;

     label60:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void access$setReceiveResult$p(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator,java.lang.Object)>(r0, $r7);

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void access$setContinuation$p(kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator,kotlinx.coroutines.CancellableContinuationImpl)>(r0, null);

        $r13 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(1);

        $r14 = $r3.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

     label61:
        if $r14 == null goto label64;

     label62:
        $r15 = virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r14 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r14, $r7, $r15);

     label63:
        goto label65;

     label64:
        $r14 = null;

     label65:
        virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r13, $r14);

     label66:
        $r7 = virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r17 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r7 != $r17 goto label67;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label67:
        return $r7;

     label68:
        $r9 := @caughtexception;

        goto label70;

     label69:
        $r9 := @caughtexception;

     label70:
        virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label69;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label69;
        catch java.lang.Throwable from label11 to label12 with label69;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label14 to label16 with label69;
        catch java.lang.Throwable from label17 to label18 with label06;
        catch java.lang.Throwable from label19 to label20 with label69;
        catch java.lang.Throwable from label21 to label22 with label69;
        catch java.lang.Throwable from label23 to label24 with label68;
        catch java.lang.Throwable from label25 to label26 with label68;
        catch java.lang.Throwable from label27 to label28 with label68;
        catch java.lang.Throwable from label30 to label31 with label68;
        catch java.lang.Throwable from label32 to label33 with label68;
        catch java.lang.Throwable from label34 to label35 with label68;
        catch java.lang.Throwable from label36 to label37 with label68;
        catch java.lang.Throwable from label40 to label41 with label68;
        catch java.lang.Throwable from label42 to label43 with label68;
        catch java.lang.Throwable from label44 to label45 with label68;
        catch java.lang.Throwable from label46 to label47 with label68;
        catch java.lang.Throwable from label48 to label49 with label68;
        catch java.lang.Throwable from label50 to label51 with label68;
        catch java.lang.Throwable from label52 to label53 with label68;
        catch java.lang.Throwable from label55 to label56 with label68;
        catch java.lang.Throwable from label57 to label58 with label68;
        catch java.lang.Throwable from label59 to label61 with label68;
        catch java.lang.Throwable from label62 to label63 with label68;
        catch java.lang.Throwable from label65 to label66 with label68;
    }

    private final boolean onClosedHasNext()
    {
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Throwable $r3;
        kotlinx.coroutines.channels.BufferedChannel r2;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r1;

        r2 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0>;

        $r3 = virtualinvoke r2.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        if $r3 != null goto label1;

        return 0;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r3);

        throw $r3;
    }

    private final void onClosedHasNextNoWaiterSuspend()
    {
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.Throwable $r4;
        kotlin.coroutines.Continuation $r5, $r9;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r10;
        kotlin.Result$Companion $r6;
        kotlinx.coroutines.CancellableContinuationImpl r1;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;
        java.lang.Boolean $r7;
        java.lang.Object $r8;
        kotlinx.coroutines.channels.BufferedChannel r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        r1 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r1);

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation> = null;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r2;

        r3 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0>;

        $r4 = virtualinvoke r3.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        if $r4 != null goto label1;

        $r5 = (kotlin.coroutines.Continuation) r1;

        $r6 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r7);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r8);

        return;

     label1:
        $r5 = (kotlin.coroutines.Continuation) r1;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label3;

        $r9 = (kotlin.coroutines.Continuation) r1;

        $z0 = $r9 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r9 = (kotlin.coroutines.Continuation) r1;

        $r10 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r9;

        $r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r4, $r10);

        goto label3;

     label3:
        $r6 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r4);

        $r8 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r8);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r8);

        return;
    }

    public java.lang.Object hasNext(kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException $r11;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.channels.ChannelSegment r5, $r8;
        long $l0, $l2, $l3;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;
        byte b4;
        int $i1;
        java.lang.Boolean $r6;
        java.lang.String r10;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r9;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r7;
        java.lang.Object $r4;
        kotlinx.coroutines.channels.BufferedChannel r2;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        r2 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (kotlinx.coroutines.channels.ChannelSegment) $r4;

     label1:
        $z0 = virtualinvoke r2.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label2;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: boolean onClosedHasNext()>();

        $r6 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z0);

        return $r6;

     label2:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r2);

        $i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i1;

        $l2 = $l0 / $l2;

        $i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) $i1;

        $l3 = $l0 % $l3;

        $i1 = (int) $l3;

        $l3 = r5.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        b4 = $l3 cmp $l2;

        if b4 == 0 goto label4;

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r2, $l2, r5);

        if $r8 != null goto label3;

        goto label1;

     label3:
        r5 = $r8;

        goto label4;

     label4:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r2, r5, $i1, $l0, null);

        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r4 == $r9 goto label8;

        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r4 != $r9 goto label6;

        $l2 = virtualinvoke r2.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        b4 = $l0 cmp $l2;

        $i1 = (int) b4;

        if $i1 >= 0 goto label5;

        virtualinvoke r5.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label5:
        goto label1;

     label6:
        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r4 != $r9 goto label7;

        $r4 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object hasNextOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment,int,long,kotlin.coroutines.Continuation)>(r5, $i1, $l0, $r1);

        return $r4;

     label7:
        virtualinvoke r5.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r4;

        $r6 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(1);

        return $r6;

     label8:
        $r11 = new java.lang.IllegalStateException;

        r10 = "unreachable";

        r10 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r10);

        throw $r11;
    }

    public void invokeOnCancellation(kotlinx.coroutines.internal.Segment, int)
    {
        int $i0;
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        kotlinx.coroutines.internal.Segment $r1;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter0: kotlinx.coroutines.internal.Segment;

        $i0 := @parameter1: int;

        $r2 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: void invokeOnCancellation(kotlinx.coroutines.internal.Segment,int)>($r1, $i0);

     label1:
        return;
    }

    public java.lang.Object next()
    {
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r5;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;
        java.lang.Object r1;
        java.lang.String $r6;
        kotlinx.coroutines.channels.BufferedChannel $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        r1 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult>;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_RECEIVE_RESULT$p()>();

        if r1 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_RECEIVE_RESULT$p()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r2;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if r1 == $r2 goto label3;

        return r1;

     label3:
        $r3 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0>;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable access$getReceiveException(kotlinx.coroutines.channels.BufferedChannel)>($r3);

        $r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r4);

        throw $r4;

     label4:
        $r5 = new java.lang.IllegalStateException;

        $r6 = "`hasNext()` has not been invoked";

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public java.lang.Object next(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.channels.ChannelIterator$DefaultImpls: java.lang.Object next(kotlinx.coroutines.channels.ChannelIterator,kotlin.coroutines.Continuation)>(r0, $r1);

        return $r2;
    }

    public final boolean tryResumeHasNext(java.lang.Object)
    {
        kotlin.jvm.functions.Function1 $r3, $r7;
        kotlinx.coroutines.CancellableContinuationImpl r2;
        kotlin.coroutines.CoroutineContext $r8;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;
        kotlinx.coroutines.CancellableContinuation $r4;
        java.lang.Boolean $r5;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BufferedChannel $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        $r1 := @parameter0: java.lang.Object;

        r2 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r2);

        $r3 = null;

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation> = null;

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r1;

        $r4 = (kotlinx.coroutines.CancellableContinuation) r2;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r6 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0>;

        $r7 = $r6.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r7 == null goto label1;

        $r8 = virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r7, $r1, $r8);

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: boolean access$tryResume0(kotlinx.coroutines.CancellableContinuation,java.lang.Object,kotlin.jvm.functions.Function1)>($r4, $r5, $r3);

        return $z0;
    }

    public final void tryResumeHasNextOnClosedChannel()
    {
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.Throwable $r4;
        kotlin.coroutines.Continuation $r5, $r9;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r10;
        kotlin.Result$Companion $r6;
        kotlinx.coroutines.CancellableContinuationImpl r1;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator r0;
        java.lang.Boolean $r7;
        java.lang.Object $r8;
        kotlinx.coroutines.channels.BufferedChannel r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        r1 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r1);

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.CancellableContinuationImpl continuation> = null;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: java.lang.Object receiveResult> = $r2;

        r3 = r0.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: kotlinx.coroutines.channels.BufferedChannel this$0>;

        $r4 = virtualinvoke r3.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        if $r4 != null goto label1;

        $r5 = (kotlin.coroutines.Continuation) r1;

        $r6 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r7);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r8);

        return;

     label1:
        $r5 = (kotlin.coroutines.Continuation) r1;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label3;

        $r9 = (kotlin.coroutines.Continuation) r1;

        $z0 = $r9 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r9 = (kotlin.coroutines.Continuation) r1;

        $r10 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r9;

        $r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r4, $r10);

        goto label3;

     label3:
        $r6 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r4);

        $r8 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r8);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r8);

        return;
    }
}
