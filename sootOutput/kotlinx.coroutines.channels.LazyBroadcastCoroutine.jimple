final class kotlinx.coroutines.channels.LazyBroadcastCoroutine extends kotlinx.coroutines.channels.BroadcastCoroutine
{
    private final kotlin.coroutines.Continuation continuation;

    public void <init>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.BroadcastChannel, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.channels.BroadcastChannel $r2;
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.channels.LazyBroadcastCoroutine r0;
        kotlin.jvm.functions.Function2 $r3;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlinx.coroutines.channels.LazyBroadcastCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlinx.coroutines.channels.BroadcastChannel;

        $r3 := @parameter2: kotlin.jvm.functions.Function2;

        specialinvoke r0.<kotlinx.coroutines.channels.BroadcastCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlinx.coroutines.channels.BroadcastChannel,boolean)>($r1, $r2, 0);

        $r4 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r3, r0, $r4);

        r0.<kotlinx.coroutines.channels.LazyBroadcastCoroutine: kotlin.coroutines.Continuation continuation> = $r4;

        return;
    }

    protected void onStart()
    {
        kotlin.coroutines.Continuation $r1, $r2;
        kotlinx.coroutines.channels.LazyBroadcastCoroutine r0;

        r0 := @this: kotlinx.coroutines.channels.LazyBroadcastCoroutine;

        $r1 = r0.<kotlinx.coroutines.channels.LazyBroadcastCoroutine: kotlin.coroutines.Continuation continuation>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation)>($r1, $r2);

        return;
    }

    public kotlinx.coroutines.channels.ReceiveChannel openSubscription()
    {
        kotlinx.coroutines.channels.BroadcastChannel $r1;
        kotlinx.coroutines.channels.LazyBroadcastCoroutine r0;
        kotlinx.coroutines.channels.ReceiveChannel $r2;

        r0 := @this: kotlinx.coroutines.channels.LazyBroadcastCoroutine;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.LazyBroadcastCoroutine: kotlinx.coroutines.channels.BroadcastChannel get_channel()>();

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.channels.BroadcastChannel: kotlinx.coroutines.channels.ReceiveChannel openSubscription()>();

        virtualinvoke r0.<kotlinx.coroutines.channels.LazyBroadcastCoroutine: boolean start()>();

        return $r2;
    }
}
