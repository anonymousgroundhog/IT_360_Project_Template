final class com.google.common.util.concurrent.ServiceManager$ServiceManagerState extends java.lang.Object
{
    final com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard;
    final com.google.common.util.concurrent.ListenerCallQueue listeners;
    final com.google.common.util.concurrent.Monitor monitor;
    final int numberOfServices;
    boolean ready;
    final com.google.common.collect.SetMultimap servicesByState;
    final java.util.Map startupTimers;
    final com.google.common.collect.Multiset states;
    final com.google.common.util.concurrent.Monitor$Guard stoppedGuard;
    boolean transitioned;

    void <init>(com.google.common.collect.ImmutableCollection)
    {
        java.util.IdentityHashMap $r8;
        com.google.common.collect.Multiset $r7;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard $r10;
        com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys $r4;
        com.google.common.collect.ImmutableCollection r1;
        com.google.common.collect.SetMultimap $r6;
        com.google.common.util.concurrent.Service$State $r2;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard $r9;
        com.google.common.util.concurrent.ListenerCallQueue $r11;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        int $i0;
        com.google.common.util.concurrent.Monitor $r3;
        com.google.common.collect.MultimapBuilder$SetMultimapBuilder $r5;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new com.google.common.util.concurrent.Monitor;

        specialinvoke $r3.<com.google.common.util.concurrent.Monitor: void <init>()>();

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor> = $r3;

        $r4 = staticinvoke <com.google.common.collect.MultimapBuilder: com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys enumKeys(java.lang.Class)>(class "Lcom/google/common/util/concurrent/Service$State;");

        $r5 = virtualinvoke $r4.<com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys: com.google.common.collect.MultimapBuilder$SetMultimapBuilder linkedHashSetValues()>();

        $r6 = virtualinvoke $r5.<com.google.common.collect.MultimapBuilder$SetMultimapBuilder: com.google.common.collect.SetMultimap build()>();

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState> = $r6;

        $r6 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        $r7 = interfaceinvoke $r6.<com.google.common.collect.SetMultimap: com.google.common.collect.Multiset keys()>();

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.Multiset states> = $r7;

        $r8 = staticinvoke <com.google.common.collect.Maps: java.util.IdentityHashMap newIdentityHashMap()>();

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: java.util.Map startupTimers> = $r8;

        $r9 = new com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard;

        specialinvoke $r9.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard: void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState)>(r0);

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard> = $r9;

        $r10 = new com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard;

        specialinvoke $r10.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard: void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState)>(r0);

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor$Guard stoppedGuard> = $r10;

        $r11 = new com.google.common.util.concurrent.ListenerCallQueue;

        specialinvoke $r11.<com.google.common.util.concurrent.ListenerCallQueue: void <init>()>();

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.ListenerCallQueue listeners> = $r11;

        $i0 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: int size()>();

        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: int numberOfServices> = $i0;

        $r6 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        $r2 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State NEW>;

        interfaceinvoke $r6.<com.google.common.collect.SetMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>($r2, r1);

        return;
    }

    void addListener(com.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ListenerCallQueue $r3;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.ServiceManager$Listener $r1;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 := @parameter0: com.google.common.util.concurrent.ServiceManager$Listener;

        $r2 := @parameter1: java.util.concurrent.Executor;

        $r3 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.ListenerCallQueue listeners>;

        virtualinvoke $r3.<com.google.common.util.concurrent.ListenerCallQueue: void addListener(java.lang.Object,java.util.concurrent.Executor)>($r1, $r2);

        return;
    }

    void awaitHealthy()
    {
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.Monitor$Guard $r2;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor $r1;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard>;

        virtualinvoke $r1.<com.google.common.util.concurrent.Monitor: void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)>($r2);

     label1:
        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void checkHealthy()>();

     label2:
        $r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r1.<com.google.common.util.concurrent.Monitor: void leave()>();

        return;

     label3:
        $r3 := @caughtexception;

        $r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r1.<com.google.common.util.concurrent.Monitor: void leave()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void awaitHealthy(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r13;
        java.util.concurrent.TimeoutException $r4;
        long l0;
        com.google.common.util.concurrent.Service$State $r6, $r7;
        int $i1;
        java.lang.String $r10, $r11;
        boolean $z0;
        com.google.common.collect.ImmutableSet $r8;
        com.google.common.collect.SetMultimap $r5;
        java.util.concurrent.TimeUnit r1;
        com.google.common.util.concurrent.Monitor$Guard $r3;
        com.google.common.base.Predicate $r9;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor $r2;
        java.lang.StringBuilder $r12;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void enter()>();

     label1:
        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        $r3 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard>;

        $z0 = virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)>($r3, l0, r1);

     label2:
        if $z0 == 0 goto label5;

     label3:
        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void checkHealthy()>();

     label4:
        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        return;

     label5:
        $r4 = new java.util.concurrent.TimeoutException;

        $r5 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        $r6 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State NEW>;

        $r7 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State STARTING>;

        $r8 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r9 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate in(java.util.Collection)>($r8);

        $r5 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)>($r5, $r9);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

     label6:
        $i1 = $i1 + 93;

     label7:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for the services to become healthy. The following services have not started: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label8:
        $r13 := @caughtexception;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    void awaitStopped()
    {
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor $r2;
        com.google.common.util.concurrent.Monitor$Guard $r1;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        $r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor$Guard stoppedGuard>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)>($r1);

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        return;
    }

    void awaitStopped(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r13;
        java.util.concurrent.TimeoutException $r4;
        long l0;
        com.google.common.util.concurrent.Service$State $r6, $r7;
        int $i1;
        java.lang.String $r10, $r11;
        java.util.EnumSet $r8;
        boolean $z0;
        com.google.common.collect.SetMultimap $r5;
        java.util.concurrent.TimeUnit r1;
        com.google.common.util.concurrent.Monitor$Guard $r3;
        com.google.common.base.Predicate $r9;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor $r2;
        java.lang.StringBuilder $r12;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void enter()>();

     label1:
        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        $r3 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor$Guard stoppedGuard>;

        $z0 = virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)>($r3, l0, r1);

     label2:
        if $z0 == 0 goto label3;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        return;

     label3:
        $r4 = new java.util.concurrent.TimeoutException;

        $r5 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        $r6 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State TERMINATED>;

        $r7 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State FAILED>;

        $r8 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r6, $r7);

        $r9 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate in(java.util.Collection)>($r8);

        $r9 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate not(com.google.common.base.Predicate)>($r9);

        $r5 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)>($r5, $r9);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

     label4:
        $i1 = $i1 + 83;

     label5:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for the services to stop. The following services have not stopped: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label6:
        $r13 := @caughtexception;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    void checkHealthy()
    {
        java.lang.IllegalStateException r4;
        com.google.common.collect.Multiset r2;
        com.google.common.collect.SetMultimap $r5;
        com.google.common.util.concurrent.Service$State $r3;
        com.google.common.base.Predicate $r6;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r7, $r8;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.Multiset states>;

        $r3 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State RUNNING>;

        $i0 = interfaceinvoke r2.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r3);

        $i1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: int numberOfServices>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        r4 = new java.lang.IllegalStateException;

        $r5 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        $r3 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State RUNNING>;

        $r6 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>($r3);

        $r6 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate not(com.google.common.base.Predicate)>($r6);

        $r5 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)>($r5, $r6);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i0 = $i0 + 79;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected to be healthy after starting. The following services are not running: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r4;
    }

    void dispatchListenerEvents()
    {
        com.google.common.util.concurrent.ListenerCallQueue $r2;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        $z0 = virtualinvoke $r1.<com.google.common.util.concurrent.Monitor: boolean isOccupiedByCurrentThread()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "It is incorrect to execute listeners with the monitor held.");

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.ListenerCallQueue listeners>;

        virtualinvoke $r2.<com.google.common.util.concurrent.ListenerCallQueue: void dispatch()>();

        return;
    }

    void enqueueFailedEvent(com.google.common.util.concurrent.Service)
    {
        com.google.common.util.concurrent.ListenerCallQueue $r2;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2 $r3;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 := @parameter0: com.google.common.util.concurrent.Service;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.ListenerCallQueue listeners>;

        $r3 = new com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2;

        specialinvoke $r3.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2: void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState,com.google.common.util.concurrent.Service)>(r0, $r1);

        virtualinvoke $r2.<com.google.common.util.concurrent.ListenerCallQueue: void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event)>($r3);

        return;
    }

    void enqueueHealthyEvent()
    {
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.ListenerCallQueue$Event $r2;
        com.google.common.util.concurrent.ListenerCallQueue $r1;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.ListenerCallQueue listeners>;

        $r2 = staticinvoke <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ListenerCallQueue$Event access$400()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.ListenerCallQueue: void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event)>($r2);

        return;
    }

    void enqueueStoppedEvent()
    {
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.ListenerCallQueue$Event $r2;
        com.google.common.util.concurrent.ListenerCallQueue $r1;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.ListenerCallQueue listeners>;

        $r2 = staticinvoke <com.google.common.util.concurrent.ServiceManager: com.google.common.util.concurrent.ListenerCallQueue$Event access$300()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.ListenerCallQueue: void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event)>($r2);

        return;
    }

    void markReady()
    {
        java.lang.Throwable r14;
        com.google.common.collect.ImmutableCollection $r4;
        java.util.ArrayList $r2;
        com.google.common.util.concurrent.Service$State $r8, $r9;
        int $i0;
        java.lang.String $r11, $r12;
        boolean z0;
        com.google.common.collect.ImmutableSetMultimap $r3;
        java.lang.IllegalArgumentException $r10;
        com.google.common.util.concurrent.Service r7;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor r1;
        java.lang.Object $r6;
        java.lang.StringBuilder $r13;
        com.google.common.collect.UnmodifiableIterator $r5;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r1.<com.google.common.util.concurrent.Monitor: void enter()>();

     label01:
        z0 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: boolean transitioned>;

     label02:
        if z0 != 0 goto label05;

     label03:
        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: boolean ready> = 1;

     label04:
        r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r1.<com.google.common.util.concurrent.Monitor: void leave()>();

        return;

     label05:
        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r3 = virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.ImmutableSetMultimap servicesByState()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableCollection values()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label06:
        z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label07:
        if z0 == 0 goto label12;

     label08:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.common.util.concurrent.Service) $r6;

        $r8 = interfaceinvoke r7.<com.google.common.util.concurrent.Service: com.google.common.util.concurrent.Service$State state()>();

        $r9 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State NEW>;

     label09:
        if $r8 == $r9 goto label06;

     label10:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r7);

     label11:
        goto label06;

     label12:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

     label13:
        $i0 = $i0 + 89;

     label14:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Services started transitioning asynchronously before the ServiceManager was constructed: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label15:
        r14 := @caughtexception;

        r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r1.<com.google.common.util.concurrent.Monitor: void leave()>();

        throw r14;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    com.google.common.collect.ImmutableSetMultimap servicesByState()
    {
        java.lang.Throwable $r9;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        com.google.common.collect.ImmutableSetMultimap$Builder $r1;
        com.google.common.collect.SetMultimap $r3;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor $r2;
        java.lang.Object $r6;
        boolean $z0;
        com.google.common.collect.ImmutableSetMultimap $r8;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap$Builder builder()>();

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void enter()>();

     label1:
        $r3 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.SetMultimap: java.util.Set entries()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label8;

     label4:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = $r6 instanceof com.google.common.util.concurrent.ServiceManager$NoOpService;

     label5:
        if $z0 != 0 goto label2;

     label6:
        virtualinvoke $r1.<com.google.common.collect.ImmutableSetMultimap$Builder: com.google.common.collect.ImmutableSetMultimap$Builder put(java.util.Map$Entry)>(r7);

     label7:
        goto label2;

     label8:
        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        $r8 = virtualinvoke $r1.<com.google.common.collect.ImmutableSetMultimap$Builder: com.google.common.collect.ImmutableSetMultimap build()>();

        return $r8;

     label9:
        $r9 := @caughtexception;

        $r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke $r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    com.google.common.collect.ImmutableMap startupTimes()
    {
        java.lang.Throwable r15;
        com.google.common.base.Stopwatch r9;
        long $l1;
        java.util.ArrayList $r3;
        java.lang.Long $r11;
        java.util.Map r2;
        int $i0;
        boolean $z0;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        com.google.common.collect.ImmutableMap $r14;
        java.util.Set $r4;
        com.google.common.util.concurrent.Service r8;
        java.util.concurrent.TimeUnit $r10;
        com.google.common.collect.Ordering $r12;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1 r13;
        com.google.common.util.concurrent.Monitor r1;
        java.lang.Object $r6;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r1.<com.google.common.util.concurrent.Monitor: void enter()>();

     label01:
        r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: java.util.Map startupTimers>;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

        r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: java.util.Map startupTimers>;

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label10;

     label04:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (com.google.common.util.concurrent.Service) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (com.google.common.base.Stopwatch) $r6;

        $z0 = virtualinvoke r9.<com.google.common.base.Stopwatch: boolean isRunning()>();

     label05:
        if $z0 != 0 goto label02;

     label06:
        $z0 = r8 instanceof com.google.common.util.concurrent.ServiceManager$NoOpService;

     label07:
        if $z0 != 0 goto label02;

     label08:
        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = virtualinvoke r9.<com.google.common.base.Stopwatch: long elapsed(java.util.concurrent.TimeUnit)>($r10);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r7 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>(r8, $r11);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r7);

     label09:
        goto label02;

     label10:
        r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r1.<com.google.common.util.concurrent.Monitor: void leave()>();

        $r12 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        r13 = new com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1;

        specialinvoke r13.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1: void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState)>(r0);

        $r12 = virtualinvoke $r12.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>(r13);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r3, $r12);

        $r14 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)>($r3);

        return $r14;

     label11:
        r15 := @caughtexception;

        r1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r1.<com.google.common.util.concurrent.Monitor: void leave()>();

        throw r15;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    void transitionService(com.google.common.util.concurrent.Service, com.google.common.util.concurrent.Service$State, com.google.common.util.concurrent.Service$State)
    {
        java.lang.Throwable $r14;
        java.lang.Object[] $r12;
        com.google.common.base.Stopwatch r9, $r10;
        com.google.common.collect.Multiset $r13;
        java.util.logging.Level $r4;
        com.google.common.util.concurrent.Service$State $r2, $r3;
        java.util.Map r7;
        int $i0, $i1;
        boolean z0;
        java.util.logging.Logger $r11;
        com.google.common.collect.SetMultimap r6;
        com.google.common.util.concurrent.Service $r1;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor r5;
        java.lang.Object $r8;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 := @parameter0: com.google.common.util.concurrent.Service;

        $r2 := @parameter1: com.google.common.util.concurrent.Service$State;

        $r3 := @parameter2: com.google.common.util.concurrent.Service$State;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        if $r2 == $r3 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        r5 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r5.<com.google.common.util.concurrent.Monitor: void enter()>();

     label03:
        r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: boolean transitioned> = 1;

        z0 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: boolean ready>;

     label04:
        if z0 != 0 goto label05;

        r5 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r5.<com.google.common.util.concurrent.Monitor: void leave()>();

        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void dispatchListenerEvents()>();

        return;

     label05:
        r6 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        z0 = interfaceinvoke r6.<com.google.common.collect.SetMultimap: boolean remove(java.lang.Object,java.lang.Object)>($r2, $r1);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)>(z0, "Service %s not at the expected location in the state map %s", $r1, $r2);

        r6 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.SetMultimap servicesByState>;

        z0 = interfaceinvoke r6.<com.google.common.collect.SetMultimap: boolean put(java.lang.Object,java.lang.Object)>($r3, $r1);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)>(z0, "Service %s in the state map unexpectedly at %s", $r1, $r3);

        r7 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: java.util.Map startupTimers>;

        $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r9 = (com.google.common.base.Stopwatch) $r8;

     label06:
        if r9 != null goto label10;

     label07:
        $r10 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>();

     label08:
        r9 = $r10;

     label09:
        r7 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: java.util.Map startupTimers>;

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r10);

     label10:
        $r2 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State RUNNING>;

        $i0 = virtualinvoke $r3.<com.google.common.util.concurrent.Service$State: int compareTo(java.lang.Enum)>($r2);

     label11:
        if $i0 < 0 goto label17;

     label12:
        z0 = virtualinvoke r9.<com.google.common.base.Stopwatch: boolean isRunning()>();

     label13:
        if z0 == 0 goto label17;

     label14:
        virtualinvoke r9.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch stop()>();

        z0 = $r1 instanceof com.google.common.util.concurrent.ServiceManager$NoOpService;

     label15:
        if z0 != 0 goto label17;

     label16:
        $r11 = staticinvoke <com.google.common.util.concurrent.ServiceManager: java.util.logging.Logger access$200()>();

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = $r1;

        $r12[1] = r9;

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r4, "Started {0} in {1}.", $r12);

     label17:
        $r2 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State FAILED>;

     label18:
        if $r3 != $r2 goto label20;

     label19:
        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void enqueueFailedEvent(com.google.common.util.concurrent.Service)>($r1);

     label20:
        $r13 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.Multiset states>;

        $r2 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State RUNNING>;

        $i0 = interfaceinvoke $r13.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r2);

        $i1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: int numberOfServices>;

     label21:
        if $i0 != $i1 goto label24;

     label22:
        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void enqueueHealthyEvent()>();

     label23:
        goto label29;

     label24:
        $r13 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.Multiset states>;

        $r2 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State TERMINATED>;

        $i0 = interfaceinvoke $r13.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r2);

        $r13 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.collect.Multiset states>;

        $r2 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State FAILED>;

        $i1 = interfaceinvoke $r13.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r2);

     label25:
        $i0 = $i0 + $i1;

     label26:
        $i1 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: int numberOfServices>;

     label27:
        if $i0 != $i1 goto label29;

     label28:
        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void enqueueStoppedEvent()>();

     label29:
        r5 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r5.<com.google.common.util.concurrent.Monitor: void leave()>();

        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void dispatchListenerEvents()>();

        return;

     label30:
        $r14 := @caughtexception;

        r5 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r5.<com.google.common.util.concurrent.Monitor: void leave()>();

        virtualinvoke r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: void dispatchListenerEvents()>();

        throw $r14;

        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label09 to label11 with label30;
        catch java.lang.Throwable from label12 to label13 with label30;
        catch java.lang.Throwable from label14 to label15 with label30;
        catch java.lang.Throwable from label16 to label18 with label30;
        catch java.lang.Throwable from label19 to label21 with label30;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch java.lang.Throwable from label26 to label27 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
    }

    void tryStartTiming(com.google.common.util.concurrent.Service)
    {
        java.lang.Throwable r6;
        com.google.common.base.Stopwatch r5;
        java.util.Map r3;
        com.google.common.util.concurrent.ServiceManager$ServiceManagerState r0;
        com.google.common.util.concurrent.Monitor r2;
        java.lang.Object $r4;
        com.google.common.util.concurrent.Service $r1;

        r0 := @this: com.google.common.util.concurrent.ServiceManager$ServiceManagerState;

        $r1 := @parameter0: com.google.common.util.concurrent.Service;

        r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r2.<com.google.common.util.concurrent.Monitor: void enter()>();

     label1:
        r3 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: java.util.Map startupTimers>;

        $r4 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (com.google.common.base.Stopwatch) $r4;

     label2:
        if r5 != null goto label4;

     label3:
        r3 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: java.util.Map startupTimers>;

        r5 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createStarted()>();

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label4:
        r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        return;

     label5:
        r6 := @caughtexception;

        r2 = r0.<com.google.common.util.concurrent.ServiceManager$ServiceManagerState: com.google.common.util.concurrent.Monitor monitor>;

        virtualinvoke r2.<com.google.common.util.concurrent.Monitor: void leave()>();

        throw r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
