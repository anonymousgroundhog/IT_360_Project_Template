public abstract class kotlin.jvm.internal.PrimitiveSpreadBuilder extends java.lang.Object
{
    private int position;
    private final int size;
    private final java.lang.Object[] spreads;

    public void <init>(int)
    {
        int $i0;
        java.lang.Object[] $r1;
        kotlin.jvm.internal.PrimitiveSpreadBuilder r0;

        r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size> = $i0;

        $i0 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        $r1 = newarray (java.lang.Object)[$i0];

        r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads> = $r1;

        return;
    }

    private static void getSpreads$annotations()
    {
        return;
    }

    public final void addSpread(java.lang.Object)
    {
        java.lang.Object[] $r2;
        kotlin.jvm.internal.PrimitiveSpreadBuilder r0;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "spreadArgument");

        $r2 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads>;

        $i0 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position>;

        $i1 = $i0 + 1;

        r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    protected final int getPosition()
    {
        int i0;
        kotlin.jvm.internal.PrimitiveSpreadBuilder r0;

        r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        i0 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position>;

        return i0;
    }

    protected abstract int getSize(java.lang.Object);

    protected final void setPosition(int)
    {
        int $i0;
        kotlin.jvm.internal.PrimitiveSpreadBuilder r0;

        r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $i0 := @parameter0: int;

        r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int position> = $i0;

        return;
    }

    protected final int size()
    {
        java.lang.Object[] $r3;
        kotlin.collections.IntIterator $r2;
        kotlin.jvm.internal.PrimitiveSpreadBuilder r0;
        int i0, i1;
        java.lang.Object $r4;
        kotlin.ranges.IntRange $r1;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        i0 = 0;

        $r1 = new kotlin.ranges.IntRange;

        i1 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        i1 = i1 - 1;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, i1);

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r2.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        i1 = virtualinvoke $r2.<kotlin.collections.IntIterator: int nextInt()>();

        $r3 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads>;

        $r4 = $r3[i1];

        if $r4 == null goto label2;

        i1 = virtualinvoke r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int getSize(java.lang.Object)>($r4);

        goto label3;

     label2:
        i1 = 1;

     label3:
        i0 = i0 + i1;

        goto label1;

     label4:
        return i0;
    }

    protected final java.lang.Object toArray(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] r4;
        kotlin.collections.IntIterator $r3;
        kotlin.jvm.internal.PrimitiveSpreadBuilder r0;
        int i0, i1, i2, i3;
        java.lang.Object $r1, $r2, r5;
        boolean $z0;
        kotlin.ranges.IntRange $r6;

        r0 := @this: kotlin.jvm.internal.PrimitiveSpreadBuilder;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "values");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "result");

        i0 = 0;

        i1 = 0;

        $r6 = new kotlin.ranges.IntRange;

        i2 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        i2 = i2 + -1;

        specialinvoke $r6.<kotlin.ranges.IntRange: void <init>(int,int)>(0, i2);

        $r3 = virtualinvoke $r6.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label1:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        i2 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        r4 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: java.lang.Object[] spreads>;

        r5 = r4[i2];

        if r5 == null goto label1;

        if i1 >= i2 goto label2;

        i3 = i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i1, $r2, i0, i3);

        i1 = i2 - i1;

        i0 = i0 + i1;

     label2:
        i1 = virtualinvoke r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int getSize(java.lang.Object)>(r5);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r2, i0, i1);

        i0 = i0 + i1;

        i1 = i2 + 1;

        goto label1;

     label3:
        i2 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        if i1 >= i2 goto label4;

        i2 = r0.<kotlin.jvm.internal.PrimitiveSpreadBuilder: int size>;

        i2 = i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i1, $r2, i0, i2);

     label4:
        return $r2;
    }
}
