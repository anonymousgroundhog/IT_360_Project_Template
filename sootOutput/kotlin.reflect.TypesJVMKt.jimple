public final class kotlin.reflect.TypesJVMKt extends java.lang.Object
{

    public static final java.lang.reflect.Type access$computeJavaType(kotlin.reflect.KType, boolean)
    {
        kotlin.reflect.KType $r0;
        java.lang.reflect.Type $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.reflect.KType;

        $z0 := @parameter1: boolean;

        $r1 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r0, $z0);

        return $r1;
    }

    public static final java.lang.String access$typeToString(java.lang.reflect.Type)
    {
        java.lang.String $r1;
        java.lang.reflect.Type $r0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r1 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.String typeToString(java.lang.reflect.Type)>($r0);

        return $r1;
    }

    private static final java.lang.reflect.Type computeJavaType(kotlin.reflect.KType, boolean)
    {
        kotlin.reflect.GenericArrayTypeImpl $r16;
        kotlin.reflect.KClass r4;
        kotlin.reflect.KClassifier $r1;
        int[] r11;
        kotlin.reflect.KVariance $r10;
        int i0;
        java.lang.String $r13;
        boolean $z0, z1;
        java.lang.UnsupportedOperationException $r19;
        kotlin.NoWhenBranchMatchedException $r15;
        kotlin.reflect.KTypeParameter r2;
        kotlin.reflect.KTypeProjection r9;
        java.lang.IllegalArgumentException $r18;
        kotlin.reflect.KType $r0;
        java.util.List $r6;
        kotlin.reflect.TypeVariableImpl $r14;
        java.lang.reflect.Type r3;
        java.lang.Class $r5, $r7;
        java.lang.Object $r8;
        java.lang.StringBuilder r12, $r17;

        $r0 := @parameter0: kotlin.reflect.KType;

        $z0 := @parameter1: boolean;

        $r1 = interfaceinvoke $r0.<kotlin.reflect.KType: kotlin.reflect.KClassifier getClassifier()>();

        z1 = $r1 instanceof kotlin.reflect.KTypeParameter;

        if z1 == 0 goto label01;

        $r14 = new kotlin.reflect.TypeVariableImpl;

        r2 = (kotlin.reflect.KTypeParameter) $r1;

        specialinvoke $r14.<kotlin.reflect.TypeVariableImpl: void <init>(kotlin.reflect.KTypeParameter)>(r2);

        r3 = (java.lang.reflect.Type) $r14;

        return r3;

     label01:
        z1 = $r1 instanceof kotlin.reflect.KClass;

        if z1 == 0 goto label14;

        r4 = (kotlin.reflect.KClass) $r1;

        if $z0 == 0 goto label02;

        $r5 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>(r4);

        goto label03;

     label02:
        $r5 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r4);

     label03:
        $r6 = interfaceinvoke $r0.<kotlin.reflect.KType: java.util.List getArguments()>();

        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        r3 = (java.lang.reflect.Type) $r5;

        return r3;

     label04:
        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label13;

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label05;

        r3 = (java.lang.reflect.Type) $r5;

        return r3;

     label05:
        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object singleOrNull(java.util.List)>($r6);

        r9 = (kotlin.reflect.KTypeProjection) $r8;

        if r9 == null goto label12;

        $r10 = virtualinvoke r9.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance component1()>();

        $r0 = virtualinvoke r9.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType component2()>();

        if $r10 != null goto label06;

        i0 = -1;

        goto label07;

     label06:
        r11 = <kotlin.reflect.TypesJVMKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        i0 = virtualinvoke $r10.<kotlin.reflect.KVariance: int ordinal()>();

        i0 = r11[i0];

     label07:
        lookupswitch(i0)
        {
            case -1: goto label11;
            case 0: goto label08;
            case 1: goto label11;
            case 2: goto label09;
            case 3: goto label09;
            default: goto label08;
        };

     label08:
        $r15 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r15.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r15;

     label09:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r0);

        r3 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType$default(kotlin.reflect.KType,boolean,int,java.lang.Object)>($r0, 0, 1, null);

        $z0 = r3 instanceof java.lang.Class;

        if $z0 == 0 goto label10;

        r3 = (java.lang.reflect.Type) $r5;

        return r3;

     label10:
        $r16 = new kotlin.reflect.GenericArrayTypeImpl;

        specialinvoke $r16.<kotlin.reflect.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>(r3);

        r3 = (java.lang.reflect.Type) $r16;

        return r3;

     label11:
        r3 = (java.lang.reflect.Type) $r5;

        return r3;

     label12:
        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        r12 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kotlin.Array must have exactly one type argument: ");

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r13 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r18;

     label13:
        r3 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type createPossiblyInnerType(java.lang.Class,java.util.List)>($r5, $r6);

        return r3;

     label14:
        $r19 = new java.lang.UnsupportedOperationException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        r12 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported type classifier: ");

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r13 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r13);

        throw $r19;
    }

    static java.lang.reflect.Type computeJavaType$default(kotlin.reflect.KType, boolean, int, java.lang.Object)
    {
        kotlin.reflect.KType $r2;
        java.lang.reflect.Type $r1;
        int $i0;
        java.lang.Object $r0;
        boolean $z0;

        $r2 := @parameter0: kotlin.reflect.KType;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $r1 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r2, $z0);

        return $r1;
    }

    private static final java.lang.reflect.Type createPossiblyInnerType(java.lang.Class, java.util.List)
    {
        kotlin.reflect.ParameterizedTypeImpl $r10;
        java.lang.Iterable $r3;
        java.util.ArrayList $r4;
        int $i0, $i1;
        boolean $z0;
        java.util.Iterator $r6;
        java.util.Collection r5;
        kotlin.reflect.KTypeProjection r8;
        java.util.List $r1, $r13;
        java.lang.reflect.Type $r9, $r11;
        java.lang.reflect.TypeVariable[] $r12;
        java.lang.Class $r0, $r2;
        java.lang.Object $r7;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.util.List;

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if $r2 != null goto label3;

        $r3 = (java.lang.Iterable) $r1;

        $r4 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r5 = (java.util.Collection) $r4;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlin.reflect.KTypeProjection) $r7;

        $r9 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)>(r8);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r1 = (java.util.List) r5;

        $r10 = new kotlin.reflect.ParameterizedTypeImpl;

        specialinvoke $r10.<kotlin.reflect.ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.util.List)>($r0, null, $r1);

        $r9 = (java.lang.reflect.Type) $r10;

        return $r9;

     label3:
        $i0 = virtualinvoke $r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label6;

        $r9 = (java.lang.reflect.Type) $r2;

        $r3 = (java.lang.Iterable) $r1;

        $r4 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r5 = (java.util.Collection) $r4;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlin.reflect.KTypeProjection) $r7;

        $r11 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)>(r8);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        goto label4;

     label5:
        $r1 = (java.util.List) r5;

        $r10 = new kotlin.reflect.ParameterizedTypeImpl;

        specialinvoke $r10.<kotlin.reflect.ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.util.List)>($r0, $r9, $r1);

        $r9 = (java.lang.reflect.Type) $r10;

        return $r9;

     label6:
        $r12 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = lengthof $r12;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r13 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        $r9 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type createPossiblyInnerType(java.lang.Class,java.util.List)>($r2, $r13);

        $r1 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        $r3 = (java.lang.Iterable) $r1;

        $r4 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r5 = (java.util.Collection) $r4;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlin.reflect.KTypeProjection) $r7;

        $r11 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)>(r8);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        goto label7;

     label8:
        $r1 = (java.util.List) r5;

        $r10 = new kotlin.reflect.ParameterizedTypeImpl;

        specialinvoke $r10.<kotlin.reflect.ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.util.List)>($r0, $r9, $r1);

        $r9 = (java.lang.reflect.Type) $r10;

        return $r9;
    }

    public static final java.lang.reflect.Type getJavaType(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0;
        java.lang.reflect.Type $r2;
        kotlin.jvm.internal.KTypeBase r1;
        boolean z0;

        $r0 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        z0 = $r0 instanceof kotlin.jvm.internal.KTypeBase;

        if z0 == 0 goto label1;

        r1 = (kotlin.jvm.internal.KTypeBase) $r0;

        $r2 = interfaceinvoke r1.<kotlin.jvm.internal.KTypeBase: java.lang.reflect.Type getJavaType()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r2 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType$default(kotlin.reflect.KType,boolean,int,java.lang.Object)>($r0, 0, 1, null);

        return $r2;
    }

    private static final java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)
    {
        kotlin.NoWhenBranchMatchedException $r7;
        kotlin.reflect.WildcardTypeImpl$Companion r2;
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KType $r5;
        java.lang.reflect.Type r4;
        int[] $r6;
        kotlin.reflect.KVariance $r1;
        int $i0;
        kotlin.reflect.WildcardTypeImpl $r3;

        $r0 := @parameter0: kotlin.reflect.KTypeProjection;

        $r1 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance getVariance()>();

        if $r1 != null goto label1;

        r2 = <kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl$Companion Companion>;

        $r3 = virtualinvoke r2.<kotlin.reflect.WildcardTypeImpl$Companion: kotlin.reflect.WildcardTypeImpl getSTAR()>();

        r4 = (java.lang.reflect.Type) $r3;

        return r4;

     label1:
        $r5 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = <kotlin.reflect.TypesJVMKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r1.<kotlin.reflect.KVariance: int ordinal()>();

        $i0 = $r6[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            default: goto label2;
        };

     label2:
        $r7 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r7.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r7;

     label3:
        $r3 = new kotlin.reflect.WildcardTypeImpl;

        r4 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r5, 1);

        specialinvoke $r3.<kotlin.reflect.WildcardTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type)>(r4, null);

        r4 = (java.lang.reflect.Type) $r3;

        return r4;

     label4:
        r4 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r5, 1);

        return r4;

     label5:
        $r3 = new kotlin.reflect.WildcardTypeImpl;

        r4 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r5, 1);

        specialinvoke $r3.<kotlin.reflect.WildcardTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type)>(null, r4);

        r4 = (java.lang.reflect.Type) $r3;

        return r4;
    }

    public static void getJavaType$annotations(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0;

        $r0 := @parameter0: kotlin.reflect.KType;

        return;
    }

    private static void getJavaType$annotations(kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KTypeProjection $r0;

        $r0 := @parameter0: kotlin.reflect.KTypeProjection;

        return;
    }

    private static final java.lang.String typeToString(java.lang.reflect.Type)
    {
        kotlin.reflect.TypesJVMKt$typeToString$unwrap$1 r2;
        java.lang.CharSequence $r8;
        kotlin.sequences.Sequence $r4;
        kotlin.jvm.functions.Function1 r3;
        java.lang.reflect.Type $r0;
        int $i0;
        java.lang.Class r1;
        java.lang.StringBuilder $r5;
        java.lang.Object $r6;
        java.lang.String $r7;
        boolean z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        z0 = $r0 instanceof java.lang.Class;

        if z0 == 0 goto label3;

        r1 = (java.lang.Class) $r0;

        z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if z0 == 0 goto label1;

        r2 = <kotlin.reflect.TypesJVMKt$typeToString$unwrap$1: kotlin.reflect.TypesJVMKt$typeToString$unwrap$1 INSTANCE>;

        r3 = (kotlin.jvm.functions.Function1) r2;

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence generateSequence(java.lang.Object,kotlin.jvm.functions.Function1)>($r0, r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object last(kotlin.sequences.Sequence)>($r4);

        r1 = (java.lang.Class) $r6;

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = (java.lang.CharSequence) "[]";

        $i0 = staticinvoke <kotlin.sequences.SequencesKt: int count(kotlin.sequences.Sequence)>($r4);

        $r7 = staticinvoke <kotlin.text.StringsKt: java.lang.String repeat(java.lang.CharSequence,int)>($r8, $i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        r1 = (java.lang.Class) $r0;

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "{\n        if (type.isArr\u2026   } else type.name\n    }");

        return $r7;

     label3:
        $r7 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r7;
    }
}
