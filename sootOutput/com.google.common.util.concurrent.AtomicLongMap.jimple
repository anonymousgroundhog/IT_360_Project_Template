public final class com.google.common.util.concurrent.AtomicLongMap extends java.lang.Object implements java.io.Serializable
{
    private transient java.util.Map asMap;
    private final java.util.concurrent.ConcurrentHashMap map;

    private void <init>(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap r1;
        java.lang.Object $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.util.concurrent.ConcurrentHashMap) $r2;

        r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map> = r1;

        return;
    }

    public static com.google.common.util.concurrent.AtomicLongMap create()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap $r0;

        $r0 = new com.google.common.util.concurrent.AtomicLongMap;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        specialinvoke $r0.<com.google.common.util.concurrent.AtomicLongMap: void <init>(java.util.concurrent.ConcurrentHashMap)>($r1);

        return $r0;
    }

    public static com.google.common.util.concurrent.AtomicLongMap create(java.util.Map)
    {
        com.google.common.util.concurrent.AtomicLongMap $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <com.google.common.util.concurrent.AtomicLongMap: com.google.common.util.concurrent.AtomicLongMap create()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.AtomicLongMap: void putAll(java.util.Map)>(r0);

        return $r1;
    }

    private java.util.Map createAsMap()
    {
        java.util.Map $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;
        com.google.common.util.concurrent.AtomicLongMap$1 $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r1 = new com.google.common.util.concurrent.AtomicLongMap$1;

        specialinvoke $r1.<com.google.common.util.concurrent.AtomicLongMap$1: void <init>(com.google.common.util.concurrent.AtomicLongMap)>(r0);

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>($r2, $r1);

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        return $r3;
    }

    public long addAndGet(java.lang.Object, long)
    {
        java.util.concurrent.ConcurrentHashMap r3;
        long $l0, $l1, l3;
        java.util.concurrent.atomic.AtomicLong $r2, r5;
        byte $b2;
        java.lang.Object r1, $r4;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

     label1:
        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r2);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        return $l0;

     label2:
        $l1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label3;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $z0 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r5, $r2);

        if $z0 == 0 goto label1;

        return $l0;

     label3:
        l3 = $l1 + $l0;

        $z0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l1, l3);

        if $z0 == 0 goto label2;

        return l3;
    }

    public java.util.Map asMap()
    {
        com.google.common.util.concurrent.AtomicLongMap r0;
        java.util.Map r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.Map asMap>;

        if r1 != null goto label1;

        r1 = specialinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.Map createAsMap()>();

        r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.Map asMap> = r1;

     label1:
        return r1;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public long decrementAndGet(java.lang.Object)
    {
        java.lang.Object r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long addAndGet(java.lang.Object,long)>(r1, -1L);

        return $l0;
    }

    public long get(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLong r3;
        java.util.concurrent.ConcurrentHashMap r2;
        java.lang.Object r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        r1 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.concurrent.atomic.AtomicLong) r1;

        if r3 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getAndAdd(java.lang.Object, long)
    {
        java.util.concurrent.ConcurrentHashMap r3;
        long $l0, $l1, l3;
        java.util.concurrent.atomic.AtomicLong $r2, r5;
        byte b2;
        java.lang.Object r1, $r4;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

     label1:
        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r2);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        return 0L;

     label2:
        $l1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        b2 = $l1 cmp 0L;

        if b2 != 0 goto label3;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $z0 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r5, $r2);

        if $z0 == 0 goto label1;

        return 0L;

     label3:
        l3 = $l1 + $l0;

        $z0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l1, l3);

        if $z0 == 0 goto label2;

        return $l1;
    }

    public long getAndDecrement(java.lang.Object)
    {
        java.lang.Object r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long getAndAdd(java.lang.Object,long)>(r1, -1L);

        return $l0;
    }

    public long getAndIncrement(java.lang.Object)
    {
        java.lang.Object r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long getAndAdd(java.lang.Object,long)>(r1, 1L);

        return $l0;
    }

    public long incrementAndGet(java.lang.Object)
    {
        java.lang.Object r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long addAndGet(java.lang.Object,long)>(r1, 1L);

        return $l0;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        return $z0;
    }

    public long put(java.lang.Object, long)
    {
        java.util.concurrent.ConcurrentHashMap r3;
        long $l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r2, r5;
        byte $b2;
        java.lang.Object r1, $r4;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

     label1:
        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r2);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        return 0L;

     label2:
        $l1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label3;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $z0 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r5, $r2);

        if $z0 == 0 goto label1;

        return 0L;

     label3:
        $z0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l1, $l0);

        if $z0 == 0 goto label2;

        return $l1;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        long $l0;
        java.lang.Long $r7;
        java.util.Map r1;
        java.lang.Object $r4, $r6;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long put(java.lang.Object,long)>($r4, $l0);

        goto label1;

     label2:
        return;
    }

    long putIfAbsent(java.lang.Object, long)
    {
        java.util.concurrent.ConcurrentHashMap r3;
        long $l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r2, r5;
        byte $b2;
        java.lang.Object r1, $r4;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

     label1:
        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $r4 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r2);

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r5 != null goto label2;

        return 0L;

     label2:
        $l1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label3;

        r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        $z0 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r5, $r2);

        if $z0 == 0 goto label1;

        return 0L;

     label3:
        return $l1;
    }

    public long remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r2;
        long $l0;
        java.util.concurrent.atomic.AtomicLong r4;
        byte $b1;
        java.lang.Object r1, $r3;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.concurrent.atomic.AtomicLong) $r3;

        if r4 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $z0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l0, 0L);

        if $z0 == 0 goto label1;

        goto label2;

     label2:
        r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r4);

        return $l0;
    }

    boolean remove(java.lang.Object, long)
    {
        java.util.concurrent.ConcurrentHashMap r2;
        long $l0, $l2;
        java.util.concurrent.atomic.AtomicLong r4;
        byte $b1;
        java.lang.Object r1, $r3;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.concurrent.atomic.AtomicLong) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $l2 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l2 cmp $l0;

        if $b1 == 0 goto label2;

        return 0;

     label2:
        $b1 = $l2 cmp 0L;

        if $b1 == 0 goto label4;

        $z0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l2, 0L);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        return 0;

     label4:
        r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r4);

        return 1;
    }

    public void removeAllZeros()
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.concurrent.ConcurrentHashMap r1;
        java.util.Set $r2;
        long $l1;
        java.util.concurrent.atomic.AtomicLong r6;
        byte $b0;
        java.lang.Object $r4;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.util.concurrent.atomic.AtomicLong) $r4;

        if r6 == null goto label1;

        $l1 = virtualinvoke r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public boolean removeIfZero(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: boolean remove(java.lang.Object,long)>(r1, 0L);

        return $z0;
    }

    boolean replace(java.lang.Object, long, long)
    {
        java.util.concurrent.ConcurrentHashMap r2;
        long $l0, $l1;
        java.util.concurrent.atomic.AtomicLong r3;
        byte $b2;
        java.lang.Object r1;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        r1 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label1;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long putIfAbsent(java.lang.Object,long)>(r1, $l1);

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label3;

        return 1;

     label1:
        r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        r1 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.concurrent.atomic.AtomicLong) r1;

        if r3 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l0, $l1);

        return $z0;

     label3:
        return 0;
    }

    public int size()
    {
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public long sum()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.util.concurrent.ConcurrentHashMap $r1;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLong r5;
        java.lang.Object $r4;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        l0 = 0L;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.atomic.AtomicLong) $r4;

        $l1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l0 = l0 + $l1;

        goto label1;

     label2:
        return l0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>();

        return $r1;
    }
}
