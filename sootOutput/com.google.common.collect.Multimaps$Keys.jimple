class com.google.common.collect.Multimaps$Keys extends com.google.common.collect.AbstractMultiset
{
    final com.google.common.collect.Multimap multimap;

    void <init>(com.google.common.collect.Multimap)
    {
        com.google.common.collect.Multimaps$Keys r0;
        com.google.common.collect.Multimap r1;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        r1 := @parameter0: com.google.common.collect.Multimap;

        specialinvoke r0.<com.google.common.collect.AbstractMultiset: void <init>()>();

        r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap> = r1;

        return;
    }

    public void clear()
    {
        com.google.common.collect.Multimaps$Keys r0;
        com.google.common.collect.Multimap $r1;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        interfaceinvoke $r1.<com.google.common.collect.Multimap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.Multimaps$Keys r0;
        java.lang.Object $r1;
        com.google.common.collect.Multimap $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $z0 = interfaceinvoke $r2.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public int count(java.lang.Object)
    {
        java.util.Map $r3;
        java.util.Collection r4;
        com.google.common.collect.Multimaps$Keys r0;
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.Multimap r2;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $r3 = interfaceinvoke r2.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r1);

        r4 = (java.util.Collection) $r1;

        if r4 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke r4.<java.util.Collection: int size()>();

        return $i0;
    }

    int distinctElements()
    {
        java.util.Map $r2;
        com.google.common.collect.Multimaps$Keys r0;
        int $i0;
        com.google.common.collect.Multimap $r1;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    java.util.Iterator elementIterator()
    {
        com.google.common.collect.Multimaps$Keys r0;
        java.lang.AssertionError $r1;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    public java.util.Set elementSet()
    {
        com.google.common.collect.Multimaps$Keys r0;
        java.util.Set $r1;
        com.google.common.collect.Multimap $r2;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r2 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Multimap: java.util.Set keySet()>();

        return $r1;
    }

    java.util.Iterator entryIterator()
    {
        java.util.Iterator $r5;
        java.util.Map $r3;
        com.google.common.collect.Multimaps$Keys r0;
        java.util.Set $r4;
        com.google.common.collect.Multimaps$Keys$1 $r1;
        com.google.common.collect.Multimap $r2;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 = new com.google.common.collect.Multimaps$Keys$1;

        $r2 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r1.<com.google.common.collect.Multimaps$Keys$1: void <init>(com.google.common.collect.Multimaps$Keys,java.util.Iterator)>(r0, $r5);

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.google.common.collect.Multimaps$Keys r0;
        com.google.common.collect.Multimap $r1;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multimap: java.util.Collection entries()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.Iterator keyIterator(java.util.Iterator)>($r3);

        return $r3;
    }

    public int remove(java.lang.Object, int)
    {
        java.util.Iterator $r5;
        java.util.Collection r4;
        com.google.common.collect.Multimaps$Keys r0;
        com.google.common.collect.Multimap r2;
        java.util.Map $r3;
        int $i0, $i1, i2;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "occurrences");

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.Multimaps$Keys: int count(java.lang.Object)>($r1);

        return $i0;

     label1:
        r2 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $r3 = interfaceinvoke r2.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r1);

        r4 = (java.util.Collection) $r1;

        if r4 != null goto label2;

        return 0;

     label2:
        $i1 = interfaceinvoke r4.<java.util.Collection: int size()>();

        if $i0 < $i1 goto label3;

        interfaceinvoke r4.<java.util.Collection: void clear()>();

        return $i1;

     label3:
        $r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

        i2 = 0;

     label4:
        if i2 >= $i0 goto label5;

        interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        i2 = i2 + 1;

        goto label4;

     label5:
        return $i1;
    }

    public int size()
    {
        com.google.common.collect.Multimaps$Keys r0;
        int $i0;
        com.google.common.collect.Multimap $r1;

        r0 := @this: com.google.common.collect.Multimaps$Keys;

        $r1 = r0.<com.google.common.collect.Multimaps$Keys: com.google.common.collect.Multimap multimap>;

        $i0 = interfaceinvoke $r1.<com.google.common.collect.Multimap: int size()>();

        return $i0;
    }
}
