public final class kotlinx.coroutines.internal.OnDemandAllocatingPool extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU;
    private volatile int controlState;
    private final kotlin.jvm.functions.Function1 create;
    private final java.util.concurrent.atomic.AtomicReferenceArray elements;
    private final int maxCapacity;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/OnDemandAllocatingPool;", "controlState");

        <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU> = $r0;

        return;
    }

    public void <init>(int, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;
        int $i0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        $i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: int maxCapacity> = $i0;

        r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: kotlin.jvm.functions.Function1 create> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 = r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: int maxCapacity>;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i0);

        r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicReferenceArray elements> = $r2;

        return;
    }

    private final boolean isClosed(int)
    {
        int $i0;
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        $i0 := @parameter0: int;

        $i0 = -2147483648 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicIntegerFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final int tryForbidNewElements()
    {
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        r1 = <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU>;

     label1:
        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        return 0;

     label4:
        $r2 = <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU>;

        $i1 = $i0 | -2147483648;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, $i1);

        if $z0 == 0 goto label5;

        return $i0;

     label5:
        goto label1;
    }

    public final boolean allocate()
    {
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1, $r2;
        kotlin.jvm.functions.Function1 r4;
        java.lang.Integer $r5;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        int $i0, $i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        r1 = <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU>;

     label1:
        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i1 = -2147483648 & $i0;

        if $i1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        return 0;

     label4:
        $i1 = r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: int maxCapacity>;

        if $i0 < $i1 goto label5;

        return 1;

     label5:
        $r2 = <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU>;

        $i1 = $i0 + 1;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, $i1);

        if $z0 == 0 goto label6;

        $r3 = r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicReferenceArray elements>;

        r4 = r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: kotlin.jvm.functions.Function1 create>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r6);

        return 1;

     label6:
        goto label1;
    }

    public final java.util.List close()
    {
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1, $r2;
        java.lang.Iterable $r4;
        java.util.ArrayList r5;
        java.util.concurrent.atomic.AtomicReferenceArray r9;
        int $i0, i1, $i2;
        boolean $z0;
        kotlin.ranges.IntRange $r3;
        java.util.Iterator $r7;
        java.util.Collection r6;
        java.util.List r11;
        kotlin.collections.IntIterator $r8;
        java.lang.Object $r10;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        r1 = <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU>;

     label01:
        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        i1 = $i0;

        $i2 = $i0 & -2147483648;

        if $i2 == 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 == 0 goto label04;

        i1 = 0;

        goto label05;

     label04:
        $r2 = <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU>;

        $i2 = $i0 | -2147483648;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, $i2);

        if $z0 == 0 goto label10;

     label05:
        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, i1);

        $r4 = (java.lang.Iterable) $r3;

        r5 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r4, 10);

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

        r6 = (java.util.Collection) r5;

        $r7 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r8 = (kotlin.collections.IntIterator) $r7;

        $i0 = virtualinvoke $r8.<kotlin.collections.IntIterator: int nextInt()>();

     label07:
        r9 = r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicReferenceArray elements>;

        $r10 = virtualinvoke r9.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i0, null);

        if $r10 == null goto label08;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label06;

     label08:
        goto label07;

     label09:
        r11 = (java.util.List) r6;

        return r11;

     label10:
        goto label01;
    }

    public final java.lang.String stateRepresentation$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r2;
        java.lang.Iterable $r4;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        java.util.ArrayList r5;
        int $i0, $i1;
        java.lang.String $r11, r12;
        boolean z0, $z1;
        kotlin.ranges.IntRange $r3;
        java.util.Iterator $r7;
        java.util.Collection r6;
        java.util.List r10;
        kotlin.collections.IntIterator r8;
        java.lang.Object $r9;
        java.lang.StringBuilder $r13;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        r2 = <kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicIntegerFieldUpdater controlState$FU>;

        $i0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i1 = 2147483647 & $i0;

        z0 = 0;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i1);

        $r4 = (java.lang.Iterable) $r3;

        r5 = new java.util.ArrayList;

        $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r4, 10);

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i1);

        r6 = (java.util.Collection) r5;

        $r7 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r8 = (kotlin.collections.IntIterator) $r7;

        $i1 = virtualinvoke r8.<kotlin.collections.IntIterator: int nextInt()>();

        $r1 = r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: java.util.concurrent.atomic.AtomicReferenceArray elements>;

        $r9 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i1);

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        r10 = (java.util.List) r6;

        $r11 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

        $i0 = -2147483648 & $i0;

        if $i0 == 0 goto label3;

        z0 = 1;

     label3:
        if z0 == 0 goto label4;

        r12 = "[closed]";

        goto label5;

     label4:
        r12 = "";

     label5:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.internal.OnDemandAllocatingPool r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.internal.OnDemandAllocatingPool;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OnDemandAllocatingPool(");

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.OnDemandAllocatingPool: java.lang.String stateRepresentation$kotlinx_coroutines_core()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
