abstract class com.google.common.collect.AbstractTable extends java.lang.Object implements com.google.common.collect.Table
{
    private transient java.util.Set cellSet;
    private transient java.util.Collection values;

    void <init>()
    {
        com.google.common.collect.AbstractTable r0;

        r0 := @this: com.google.common.collect.AbstractTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    abstract java.util.Iterator cellIterator();

    public java.util.Set cellSet()
    {
        java.util.Set r1;
        com.google.common.collect.AbstractTable r0;

        r0 := @this: com.google.common.collect.AbstractTable;

        r1 = r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set createCellSet()>();

        r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet> = r1;

     label1:
        return r1;
    }

    public void clear()
    {
        java.util.Set $r1;
        java.util.Iterator $r2;
        com.google.common.collect.AbstractTable r0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        staticinvoke <com.google.common.collect.Iterators: void clear(java.util.Iterator)>($r2);

        return;
    }

    public java.util.Set columnKeySet()
    {
        java.util.Set $r2;
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map columnMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map rowMap()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r1);

        $r3 = (java.util.Map) $r1;

        if $r3 == null goto label1;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean safeContainsKey(java.util.Map,java.lang.Object)>($r3, $r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsColumn(java.lang.Object)
    {
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map columnMap()>();

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean safeContainsKey(java.util.Map,java.lang.Object)>($r2, $r1);

        return $z0;
    }

    public boolean containsRow(java.lang.Object)
    {
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map rowMap()>();

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean safeContainsKey(java.util.Map,java.lang.Object)>($r2, $r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Iterator $r4;
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.lang.Object $r1, $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map rowMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.util.Map) $r5;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    java.util.Set createCellSet()
    {
        com.google.common.collect.AbstractTable$CellSet $r1;
        com.google.common.collect.AbstractTable r0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = new com.google.common.collect.AbstractTable$CellSet;

        specialinvoke $r1.<com.google.common.collect.AbstractTable$CellSet: void <init>(com.google.common.collect.AbstractTable)>(r0);

        return $r1;
    }

    java.util.Collection createValues()
    {
        com.google.common.collect.AbstractTable$Values $r1;
        com.google.common.collect.AbstractTable r0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = new com.google.common.collect.AbstractTable$Values;

        specialinvoke $r1.<com.google.common.collect.AbstractTable$Values: void <init>(com.google.common.collect.AbstractTable)>(r0);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.collect.Tables: boolean equalsImpl(com.google.common.collect.Table,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map rowMap()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r1);

        $r3 = (java.util.Map) $r1;

        if $r3 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r2);

        return $r1;
    }

    public int hashCode()
    {
        int $i0;
        java.util.Set $r1;
        com.google.common.collect.AbstractTable r0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.google.common.collect.AbstractTable r0;

        r0 := @this: com.google.common.collect.AbstractTable;

        $i0 = virtualinvoke r0.<com.google.common.collect.AbstractTable: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r4;
        java.lang.Object r1, r2, r3;

        r0 := @this: com.google.common.collect.AbstractTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map row(java.lang.Object)>(r1);

        r1 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return r1;
    }

    public void putAll(com.google.common.collect.Table)
    {
        java.util.Iterator $r3;
        com.google.common.collect.AbstractTable r0;
        java.util.Set $r2;
        com.google.common.collect.Table$Cell r5;
        java.lang.Object $r4, $r6, $r7;
        com.google.common.collect.Table r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable;

        r1 := @parameter0: com.google.common.collect.Table;

        $r2 = interfaceinvoke r1.<com.google.common.collect.Table: java.util.Set cellSet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.common.collect.Table$Cell) $r4;

        $r4 = interfaceinvoke r5.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r6 = interfaceinvoke r5.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r7 = interfaceinvoke r5.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        virtualinvoke r0.<com.google.common.collect.AbstractTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r6, $r7);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map rowMap()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r1);

        $r3 = (java.util.Map) $r1;

        if $r3 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeRemove(java.util.Map,java.lang.Object)>($r3, $r2);

        return $r1;
    }

    public java.util.Set rowKeySet()
    {
        java.util.Set $r2;
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map rowMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.google.common.collect.AbstractTable r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Map rowMap()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public java.util.Collection values()
    {
        com.google.common.collect.AbstractTable r0;
        java.util.Collection r1;

        r0 := @this: com.google.common.collect.AbstractTable;

        r1 = r0.<com.google.common.collect.AbstractTable: java.util.Collection values>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Collection createValues()>();

        r0.<com.google.common.collect.AbstractTable: java.util.Collection values> = r1;

     label1:
        return r1;
    }

    java.util.Iterator valuesIterator()
    {
        com.google.common.collect.AbstractTable$1 $r1;
        java.util.Iterator $r3;
        com.google.common.collect.AbstractTable r0;
        java.util.Set $r2;

        r0 := @this: com.google.common.collect.AbstractTable;

        $r1 = new com.google.common.collect.AbstractTable$1;

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r1.<com.google.common.collect.AbstractTable$1: void <init>(com.google.common.collect.AbstractTable,java.util.Iterator)>(r0, $r3);

        return $r1;
    }
}
