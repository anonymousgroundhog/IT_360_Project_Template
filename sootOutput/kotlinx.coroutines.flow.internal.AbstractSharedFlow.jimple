public abstract class kotlinx.coroutines.flow.internal.AbstractSharedFlow extends java.lang.Object
{
    private kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow _subscriptionCount;
    private int nCollectors;
    private int nextIndex;
    private kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] slots;

    public void <init>()
    {
        kotlinx.coroutines.flow.internal.AbstractSharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int access$getNCollectors(kotlinx.coroutines.flow.internal.AbstractSharedFlow)
    {
        int i0;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        i0 = $r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors>;

        return i0;
    }

    public static final kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] access$getSlots(kotlinx.coroutines.flow.internal.AbstractSharedFlow)
    {
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        r1 = $r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] slots>;

        return r1;
    }

    protected final kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot allocateSlot()
    {
        java.lang.Throwable $r6;
        java.lang.Object[] $r2;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] r1;
        kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow $r5;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r3, $r4;
        int i0, $i1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        entermonitor r0;

     label1:
        r1 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] slots>;

        if r1 != null goto label2;

        r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] createSlotArray(int)>(2);

        r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] slots> = r1;

        goto label3;

     label2:
        i0 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors>;

        $i1 = lengthof r1;

        if i0 < $i1 goto label3;

        i0 = lengthof r1;

        i0 = i0 * 2;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "copyOf(this, newSize)");

        r1 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) $r2;

        r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] slots> = r1;

        r1 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) $r2;

        goto label3;

     label3:
        i0 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nextIndex>;

     label4:
        $r3 = r1[i0];

        if $r3 != null goto label5;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot createSlot()>();

        $r3 = $r4;

        r1[i0] = $r4;

     label5:
        i0 = i0 + 1;

        $i1 = lengthof r1;

        if i0 < $i1 goto label6;

        i0 = 0;

     label6:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot<kotlin.Any>");

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot: boolean allocateLocked(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

        r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nextIndex> = i0;

        i0 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors>;

        i0 = i0 + 1;

        r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors> = i0;

        $r5 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow _subscriptionCount>;

     label7:
        exitmonitor r0;

        if $r5 == null goto label9;

        virtualinvoke $r5.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: boolean increment(int)>(1);

        return $r3;

     label8:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

     label9:
        return $r3;

        catch java.lang.Throwable from label1 to label7 with label8;
    }

    protected abstract kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot createSlot();

    protected abstract kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] createSlotArray(int);

    protected final void forEachSlotLocked(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r3;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot r2;
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $i0 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: int access$getNCollectors(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>(r0);

        if $i0 != 0 goto label1;

        return;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] access$getSlots(kotlinx.coroutines.flow.internal.AbstractSharedFlow)>(r0);

        if $r3 == null goto label4;

        $i0 = lengthof $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        r2 = $r3[$i1];

        if r2 == null goto label3;

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return;
    }

    protected final void freeSlot(kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)
    {
        java.lang.Throwable $r8;
        kotlin.coroutines.Continuation $r4;
        kotlin.Result$Companion $r5;
        kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow $r2;
        kotlin.Unit $r6;
        kotlin.coroutines.Continuation[] $r3;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r1;
        int $i0, $i1;
        java.lang.Object $r7;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        $r1 := @parameter0: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot;

        entermonitor r0;

     label1:
        $i0 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors>;

        $i0 = $i0 + -1;

        r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors> = $i0;

        $r2 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow _subscriptionCount>;

        $i1 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors>;

        $i0 = 0;

        if $i1 != 0 goto label2;

        r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nextIndex> = 0;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot<kotlin.Any>");

        $r3 = virtualinvoke $r1.<kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot: kotlin.coroutines.Continuation[] freeLocked(java.lang.Object)>(r0);

     label3:
        exitmonitor r0;

        $i1 = lengthof $r3;

     label4:
        if $i0 >= $i1 goto label6;

        $r4 = $r3[$i0];

        if $r4 == null goto label5;

        $r5 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r7);

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        if $r2 == null goto label8;

        virtualinvoke $r2.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: boolean increment(int)>(-1);

        return;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label7;
    }

    protected final int getNCollectors()
    {
        int i0;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        i0 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors>;

        return i0;
    }

    protected final kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] getSlots()
    {
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        r1 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] slots>;

        return r1;
    }

    public final kotlinx.coroutines.flow.StateFlow getSubscriptionCount()
    {
        java.lang.Throwable $r3;
        int i0;
        kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow $r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlow r0;
        kotlinx.coroutines.flow.StateFlow $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.AbstractSharedFlow;

        entermonitor r0;

     label1:
        $r1 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow _subscriptionCount>;

        if $r1 != null goto label2;

        $r1 = new kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow;

        i0 = r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: int nCollectors>;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: void <init>(int)>(i0);

        r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow _subscriptionCount> = $r1;

     label2:
        exitmonitor r0;

        $r2 = (kotlinx.coroutines.flow.StateFlow) $r1;

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
