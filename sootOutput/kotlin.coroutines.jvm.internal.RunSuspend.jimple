final class kotlin.coroutines.jvm.internal.RunSuspend extends java.lang.Object implements kotlin.coroutines.Continuation
{
    private kotlin.Result result;

    public void <init>()
    {
        kotlin.coroutines.jvm.internal.RunSuspend r0;

        r0 := @this: kotlin.coroutines.jvm.internal.RunSuspend;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void await()
    {
        java.lang.Throwable $r3;
        kotlin.Result r1;
        kotlin.coroutines.jvm.internal.RunSuspend r0;
        java.lang.Object $r2;

        r0 := @this: kotlin.coroutines.jvm.internal.RunSuspend;

        entermonitor r0;

     label1:
        r1 = r0.<kotlin.coroutines.jvm.internal.RunSuspend: kotlin.Result result>;

        if r1 != null goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "null cannot be cast to non-null type java.lang.Object");

        $r2 = (java.lang.Object) r0;

        virtualinvoke $r2.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<kotlin.Result: java.lang.Object unbox-impl()>();

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlin.coroutines.jvm.internal.RunSuspend r0;
        kotlin.coroutines.EmptyCoroutineContext $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: kotlin.coroutines.jvm.internal.RunSuspend;

        $r1 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r2 = (kotlin.coroutines.CoroutineContext) $r1;

        return $r2;
    }

    public final kotlin.Result getResult-xLWZpok()
    {
        kotlin.Result r1;
        kotlin.coroutines.jvm.internal.RunSuspend r0;

        r0 := @this: kotlin.coroutines.jvm.internal.RunSuspend;

        r1 = r0.<kotlin.coroutines.jvm.internal.RunSuspend: kotlin.Result result>;

        return r1;
    }

    public void resumeWith(java.lang.Object)
    {
        java.lang.Throwable $r4;
        kotlin.Result $r2;
        kotlin.coroutines.jvm.internal.RunSuspend r0;
        kotlin.Unit $r3;
        java.lang.Object $r1;

        r0 := @this: kotlin.coroutines.jvm.internal.RunSuspend;

        $r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $r2 = staticinvoke <kotlin.Result: kotlin.Result box-impl(java.lang.Object)>($r1);

        r0.<kotlin.coroutines.jvm.internal.RunSuspend: kotlin.Result result> = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "null cannot be cast to non-null type java.lang.Object");

        $r1 = (java.lang.Object) r0;

        virtualinvoke $r1.<java.lang.Object: void notifyAll()>();

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void setResult(kotlin.Result)
    {
        kotlin.Result $r1;
        kotlin.coroutines.jvm.internal.RunSuspend r0;

        r0 := @this: kotlin.coroutines.jvm.internal.RunSuspend;

        $r1 := @parameter0: kotlin.Result;

        r0.<kotlin.coroutines.jvm.internal.RunSuspend: kotlin.Result result> = $r1;

        return;
    }
}
