final class com.google.common.collect.SparseImmutableTable extends com.google.common.collect.RegularImmutableTable
{
    static final com.google.common.collect.ImmutableTable EMPTY;
    private final int[] cellColumnInRowIndices;
    private final int[] cellRowIndices;
    private final com.google.common.collect.ImmutableMap columnMap;
    private final com.google.common.collect.ImmutableMap rowMap;

    static void <clinit>()
    {
        com.google.common.collect.ImmutableSet $r2, $r3;
        com.google.common.collect.SparseImmutableTable $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 = new com.google.common.collect.SparseImmutableTable;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        specialinvoke $r0.<com.google.common.collect.SparseImmutableTable: void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)>($r1, $r2, $r3);

        <com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableTable EMPTY> = $r0;

        return;
    }

    void <init>(com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSet, com.google.common.collect.ImmutableSet)
    {
        java.lang.Integer r16;
        java.util.LinkedHashMap $r5, r8, r9;
        com.google.common.collect.SparseImmutableTable r0;
        com.google.common.collect.ImmutableList r1;
        int[] r10, r11;
        java.util.Map r17;
        int $i0, $i1;
        com.google.common.collect.Table$Cell r12;
        boolean $z0;
        java.util.Map$Entry r21;
        com.google.common.collect.ImmutableSet r2, r3;
        java.util.Iterator $r20;
        com.google.common.collect.ImmutableMap $r4;
        java.util.Set $r19;
        com.google.common.collect.ImmutableMap$Builder r18;
        java.lang.Object $r7, $r13, $r14, $r15;
        com.google.common.collect.UnmodifiableIterator $r6;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        r1 := @parameter0: com.google.common.collect.ImmutableList;

        r2 := @parameter1: com.google.common.collect.ImmutableSet;

        r3 := @parameter2: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<com.google.common.collect.RegularImmutableTable: void <init>()>();

        $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap indexMap(java.util.Collection)>(r2);

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r6 = virtualinvoke r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = new java.util.LinkedHashMap;

        specialinvoke r8.<java.util.LinkedHashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r8);

        goto label01;

     label02:
        r8 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r6 = virtualinvoke r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = new java.util.LinkedHashMap;

        specialinvoke r9.<java.util.LinkedHashMap: void <init>()>();

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r9);

        goto label03;

     label04:
        $i0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        r10 = newarray (int)[$i0];

        $i0 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        r11 = newarray (int)[$i0];

        $i0 = 0;

     label05:
        $i1 = virtualinvoke r1.<com.google.common.collect.ImmutableList: int size()>();

        if $i0 >= $i1 goto label06;

        $r7 = virtualinvoke r1.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>($i0);

        r12 = (com.google.common.collect.Table$Cell) $r7;

        $r7 = interfaceinvoke r12.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r13 = interfaceinvoke r12.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r14 = interfaceinvoke r12.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        $r15 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r16 = (java.lang.Integer) $r15;

        $r15 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r16);

        r16 = (java.lang.Integer) $r15;

        $i1 = virtualinvoke r16.<java.lang.Integer: int intValue()>();

        r10[$i0] = $i1;

        $r15 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r17 = (java.util.Map) $r15;

        $r15 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r17);

        r17 = (java.util.Map) $r15;

        $i1 = interfaceinvoke r17.<java.util.Map: int size()>();

        r11[$i0] = $i1;

        $r15 = interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r14);

        virtualinvoke r0.<com.google.common.collect.SparseImmutableTable: void checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r13, $r15, $r14);

        $r13 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r17 = (java.util.Map) $r13;

        $r13 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r17);

        r17 = (java.util.Map) $r13;

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r14);

        $i0 = $i0 + 1;

        goto label05;

     label06:
        r0.<com.google.common.collect.SparseImmutableTable: int[] cellRowIndices> = r10;

        r0.<com.google.common.collect.SparseImmutableTable: int[] cellColumnInRowIndices> = r11;

        r18 = new com.google.common.collect.ImmutableMap$Builder;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        specialinvoke r18.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        $r19 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r7 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getValue()>();

        r17 = (java.util.Map) $r14;

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r17);

        virtualinvoke r18.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r7, $r4);

        goto label07;

     label08:
        $r4 = virtualinvoke r18.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap> = $r4;

        r18 = new com.google.common.collect.ImmutableMap$Builder;

        $i0 = interfaceinvoke r8.<java.util.Map: int size()>();

        specialinvoke r18.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        $r19 = interfaceinvoke r8.<java.util.Map: java.util.Set entrySet()>();

        $r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = interfaceinvoke r21.<java.util.Map$Entry: java.lang.Object getValue()>();

        r17 = (java.util.Map) $r14;

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r17);

        virtualinvoke r18.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r7, $r4);

        goto label09;

     label10:
        $r4 = virtualinvoke r18.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap> = $r4;

        return;
    }

    public com.google.common.collect.ImmutableMap columnMap()
    {
        com.google.common.collect.SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap r1;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        r1 = r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap>;

        r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r1);

        return r1;
    }

    public volatile java.util.Map columnMap()
    {
        com.google.common.collect.SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        return $r1;
    }

    com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap $r2;
        java.lang.Integer $r7;
        com.google.common.collect.SparseImmutableTable r0;
        int[] r3, $r8;
        com.google.common.collect.ImmutableTable$SerializedForm $r9;
        int i0, i1, $i2;
        com.google.common.collect.Table$Cell r6;
        java.lang.Object $r5;
        com.google.common.collect.UnmodifiableIterator $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableSet columnKeySet()>();

        $r2 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap indexMap(java.util.Collection)>($r1);

        $r1 = virtualinvoke r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: int size()>();

        r3 = newarray (int)[i0];

        i1 = 0;

        $r1 = virtualinvoke r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        $r4 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.common.collect.Table$Cell) $r5;

        $r5 = interfaceinvoke r6.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r5;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        $r7 = (java.lang.Integer) $r5;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        r3[i1] = $i2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = r0.<com.google.common.collect.SparseImmutableTable: int[] cellRowIndices>;

        $r9 = staticinvoke <com.google.common.collect.ImmutableTable$SerializedForm: com.google.common.collect.ImmutableTable$SerializedForm create(com.google.common.collect.ImmutableTable,int[],int[])>(r0, $r8, r3);

        return $r9;
    }

    com.google.common.collect.Table$Cell getCell(int)
    {
        java.util.Map$Entry r6, r7;
        com.google.common.collect.ImmutableSet $r3;
        com.google.common.collect.ImmutableMap r2;
        com.google.common.collect.SparseImmutableTable r0;
        com.google.common.collect.ImmutableList $r4;
        int[] r1;
        int $i0, i1;
        com.google.common.collect.Table$Cell $r10;
        java.lang.Object $r5, $r8, $r9;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        $i0 := @parameter0: int;

        r1 = r0.<com.google.common.collect.SparseImmutableTable: int[] cellRowIndices>;

        i1 = r1[$i0];

        r2 = r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $r3 = virtualinvoke r2.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r2 = (com.google.common.collect.ImmutableMap) $r5;

        r1 = r0.<com.google.common.collect.SparseImmutableTable: int[] cellColumnInRowIndices>;

        $i0 = r1[$i0];

        $r3 = virtualinvoke r2.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>($i0);

        r7 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = staticinvoke <com.google.common.collect.SparseImmutableTable: com.google.common.collect.Table$Cell cellOf(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r8, $r9);

        return $r10;
    }

    java.lang.Object getValue(int)
    {
        com.google.common.collect.ImmutableMap r2;
        com.google.common.collect.ImmutableCollection $r3;
        com.google.common.collect.SparseImmutableTable r0;
        com.google.common.collect.ImmutableList $r4;
        int[] r1;
        int $i0, i1;
        java.lang.Object $r5;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        $i0 := @parameter0: int;

        r1 = r0.<com.google.common.collect.SparseImmutableTable: int[] cellRowIndices>;

        i1 = r1[$i0];

        r2 = r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $r3 = virtualinvoke r2.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i1);

        r2 = (com.google.common.collect.ImmutableMap) $r5;

        r1 = r0.<com.google.common.collect.SparseImmutableTable: int[] cellColumnInRowIndices>;

        $i0 = r1[$i0];

        $r3 = virtualinvoke r2.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>($i0);

        return $r5;
    }

    public com.google.common.collect.ImmutableMap rowMap()
    {
        com.google.common.collect.SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap r1;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        r1 = r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r1);

        return r1;
    }

    public volatile java.util.Map rowMap()
    {
        com.google.common.collect.SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        return $r1;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.SparseImmutableTable r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.SparseImmutableTable;

        $r1 = r0.<com.google.common.collect.SparseImmutableTable: int[] cellRowIndices>;

        $i0 = lengthof $r1;

        return $i0;
    }
}
