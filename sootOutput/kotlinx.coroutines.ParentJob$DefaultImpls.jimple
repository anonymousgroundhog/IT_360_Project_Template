public final class kotlinx.coroutines.ParentJob$DefaultImpls extends java.lang.Object
{

    public static void cancel(kotlinx.coroutines.ParentJob)
    {
        kotlinx.coroutines.ParentJob $r0;
        kotlinx.coroutines.Job $r1;

        $r0 := @parameter0: kotlinx.coroutines.ParentJob;

        $r1 = (kotlinx.coroutines.Job) $r0;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel(kotlinx.coroutines.Job)>($r1);

        return;
    }

    public static java.lang.Object fold(kotlinx.coroutines.ParentJob, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.Job $r3;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.ParentJob $r0;

        $r0 := @parameter0: kotlinx.coroutines.ParentJob;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        $r3 = (kotlinx.coroutines.Job) $r0;

        $r1 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.Job,java.lang.Object,kotlin.jvm.functions.Function2)>($r3, $r1, $r2);

        return $r1;
    }

    public static kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.ParentJob, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.Job $r3;
        kotlin.coroutines.CoroutineContext$Element $r2;
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlinx.coroutines.ParentJob $r0;

        $r0 := @parameter0: kotlinx.coroutines.ParentJob;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        $r3 = (kotlinx.coroutines.Job) $r0;

        $r2 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>($r3, $r1);

        return $r2;
    }

    public static kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.ParentJob, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlinx.coroutines.Job $r3;
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlinx.coroutines.ParentJob $r0;
        kotlin.coroutines.CoroutineContext $r2;

        $r0 := @parameter0: kotlinx.coroutines.ParentJob;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        $r3 = (kotlinx.coroutines.Job) $r0;

        $r2 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)>($r3, $r1);

        return $r2;
    }

    public static kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.ParentJob, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.ParentJob $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.Job $r2;

        $r0 := @parameter0: kotlinx.coroutines.ParentJob;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r2 = (kotlinx.coroutines.Job) $r0;

        $r1 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext)>($r2, $r1);

        return $r1;
    }

    public static kotlinx.coroutines.Job plus(kotlinx.coroutines.ParentJob, kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.ParentJob $r0;
        kotlinx.coroutines.Job $r1, $r2;

        $r0 := @parameter0: kotlinx.coroutines.ParentJob;

        $r1 := @parameter1: kotlinx.coroutines.Job;

        $r2 = (kotlinx.coroutines.Job) $r0;

        $r1 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.Job plus(kotlinx.coroutines.Job,kotlinx.coroutines.Job)>($r2, $r1);

        return $r1;
    }
}
