final class kotlinx.coroutines.stream.StreamFlow extends java.lang.Object implements kotlinx.coroutines.flow.Flow
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumed$FU;
    private volatile int consumed;
    private final java.util.stream.Stream stream;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/stream/StreamFlow;", "consumed");

        <kotlinx.coroutines.stream.StreamFlow: java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumed$FU> = $r0;

        return;
    }

    public void <init>(java.util.stream.Stream)
    {
        kotlinx.coroutines.stream.StreamFlow r0;
        java.util.stream.Stream $r1;

        r0 := @this: kotlinx.coroutines.stream.StreamFlow;

        $r1 := @parameter0: java.util.stream.Stream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.stream.StreamFlow: java.util.stream.Stream stream> = $r1;

        r0.<kotlinx.coroutines.stream.StreamFlow: int consumed> = 0;

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r13;
        java.lang.IllegalStateException r7;
        kotlin.coroutines.Continuation $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r11;
        kotlinx.coroutines.stream.StreamFlow r0, r10;
        int $i0;
        java.lang.String $r14;
        boolean $z0;
        java.util.Iterator r9;
        kotlinx.coroutines.stream.StreamFlow$collect$1 $r3, $r4;
        kotlin.Unit r15;
        java.util.stream.Stream r12;
        kotlinx.coroutines.flow.FlowCollector r1;
        java.lang.Object $r5, $r6, r8;

        r0 := @this: kotlinx.coroutines.stream.StreamFlow;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.stream.StreamFlow$collect$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.stream.StreamFlow$collect$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.stream.StreamFlow$collect$1;

        specialinvoke $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: void <init>(kotlinx.coroutines.stream.StreamFlow,kotlin.coroutines.Continuation)>(r0, $r2);

     label02:
        $r4 = $r3;

        $r5 = $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label07;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r7;

     label04:
        r8 = $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: java.lang.Object L$2>;

        r9 = (java.util.Iterator) r8;

        r8 = $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: java.lang.Object L$1>;

        r1 = (kotlinx.coroutines.flow.FlowCollector) r8;

        r8 = $r3.<kotlinx.coroutines.stream.StreamFlow$collect$1: java.lang.Object L$0>;

        r10 = (kotlinx.coroutines.stream.StreamFlow) r8;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label06:
        goto label09;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        r10 = r0;

        r11 = <kotlinx.coroutines.stream.StreamFlow: java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumed$FU>;

        $z0 = virtualinvoke r11.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, 0, 1);

        if $z0 == 0 goto label15;

     label08:
        r12 = r0.<kotlinx.coroutines.stream.StreamFlow: java.util.stream.Stream stream>;

        r9 = interfaceinvoke r12.<java.util.stream.Stream: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

     label10:
        if $z0 == 0 goto label13;

     label11:
        $r5 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r4.<kotlinx.coroutines.stream.StreamFlow$collect$1: java.lang.Object L$0> = r10;

        $r4.<kotlinx.coroutines.stream.StreamFlow$collect$1: java.lang.Object L$1> = r1;

        $r4.<kotlinx.coroutines.stream.StreamFlow$collect$1: java.lang.Object L$2> = r9;

        $r4.<kotlinx.coroutines.stream.StreamFlow$collect$1: int label> = 1;

        $r5 = interfaceinvoke r1.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r5, $r4);

     label12:
        if $r5 != $r6 goto label09;

        return $r6;

     label13:
        r12 = r10.<kotlinx.coroutines.stream.StreamFlow: java.util.stream.Stream stream>;

        interfaceinvoke r12.<java.util.stream.Stream: void close()>();

        r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r15;

     label14:
        r13 := @caughtexception;

        r12 = r10.<kotlinx.coroutines.stream.StreamFlow: java.util.stream.Stream stream>;

        interfaceinvoke r12.<java.util.stream.Stream: void close()>();

        throw r13;

     label15:
        r7 = new java.lang.IllegalStateException;

        $r14 = "Stream.consumeAsFlow can be collected only once";

        $r14 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw r7;

        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
    }
}
