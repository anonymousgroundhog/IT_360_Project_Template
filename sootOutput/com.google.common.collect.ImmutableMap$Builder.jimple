public class com.google.common.collect.ImmutableMap$Builder extends java.lang.Object
{
    java.lang.Object[] alternatingKeysAndValues;
    com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey;
    boolean entriesUsed;
    int size;
    java.util.Comparator valueComparator;

    public void <init>()
    {
        com.google.common.collect.ImmutableMap$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>(4);

        return;
    }

    void <init>(int)
    {
        int $i0;
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableMap$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = $i0 * 2;

        $r1 = newarray (java.lang.Object)[$i0];

        r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues> = $r1;

        r0.<com.google.common.collect.ImmutableMap$Builder: int size> = 0;

        r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 0;

        return;
    }

    private com.google.common.collect.ImmutableMap build(boolean)
    {
        java.lang.Object[] r4, $r5, $r6;
        com.google.common.collect.RegularImmutableMap $r7;
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey r1;
        java.lang.IllegalArgumentException $r2;
        com.google.common.collect.ImmutableMap$Builder r0;
        int i0, $i1, $i2;
        java.util.Comparator r3;
        boolean $z0, z1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        r1 = r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey>;

        if r1 != null goto label1;

        goto label2;

     label1:
        r1 = r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey>;

        $r2 = virtualinvoke r1.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.IllegalArgumentException exception()>();

        throw $r2;

     label2:
        i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        r3 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        if r3 != null goto label3;

        r4 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        goto label6;

     label3:
        z1 = r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed>;

        if z1 == 0 goto label4;

        r4 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i1 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = $i1 * 2;

        r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, $i1);

        r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues> = r4;

     label4:
        r4 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        if $z0 != 0 goto label5;

        $i1 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r5 = specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] lastEntryForEachKey(java.lang.Object[],int)>(r4, $i1);

        r4 = $r5;

        $i1 = lengthof $r5;

        $r6 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i2 = lengthof $r6;

        if $i1 >= $i2 goto label5;

        i0 = lengthof $r5;

        i0 = i0 >>> 1;

     label5:
        r3 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        staticinvoke <com.google.common.collect.ImmutableMap$Builder: void sortEntries(java.lang.Object[],int,java.util.Comparator)>(r4, i0, r3);

     label6:
        r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 1;

        $r7 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[],com.google.common.collect.ImmutableMap$Builder)>(i0, r4, r0);

        if $z0 == 0 goto label8;

        r1 = r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey>;

        if r1 != null goto label7;

        return $r7;

     label7:
        r1 = r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey>;

        $r2 = virtualinvoke r1.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.IllegalArgumentException exception()>();

        throw $r2;

     label8:
        return $r7;
    }

    private void ensureCapacity(int)
    {
        java.lang.Object[] $r1, $r2;
        int $i0, $i1, $i2;
        com.google.common.collect.ImmutableMap$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $i0 := @parameter0: int;

        $i1 = $i0 * 2;

        $r1 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i2 = lengthof $r1;

        if $i1 <= $i2 goto label1;

        $r1 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i1 = lengthof $r2;

        $i0 = $i0 * 2;

        $i0 = staticinvoke <com.google.common.collect.ImmutableCollection$Builder: int expandedCapacity(int,int)>($i1, $i0);

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues> = $r1;

        r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 0;

     label1:
        return;
    }

    private java.lang.Object[] lastEntryForEachKey(java.lang.Object[], int)
    {
        java.lang.Object[] $r1, r3;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.util.HashSet $r4;
        int $i0, i1, i2, i3, i4;
        java.lang.Object r2;
        java.util.BitSet $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = new java.util.BitSet;

        specialinvoke $r5.<java.util.BitSet: void <init>()>();

        i1 = $i0 + -1;

     label1:
        if i1 < 0 goto label3;

        i2 = i1 * 2;

        r2 = $r1[i2];

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        virtualinvoke $r5.<java.util.BitSet: void set(int)>(i1);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        $z0 = virtualinvoke $r5.<java.util.BitSet: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        return $r1;

     label4:
        i1 = virtualinvoke $r5.<java.util.BitSet: int cardinality()>();

        i1 = $i0 - i1;

        i1 = i1 * 2;

        r3 = newarray (java.lang.Object)[i1];

        i1 = 0;

        i2 = 0;

     label5:
        i3 = $i0 * 2;

        if i1 >= i3 goto label7;

        i3 = i1 >>> 1;

        $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i3);

        if $z0 == 0 goto label6;

        i1 = i1 + 2;

        goto label5;

     label6:
        i3 = i2 + 1;

        i4 = i1 + 1;

        r2 = $r1[i1];

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        r3[i2] = r2;

        i2 = i3 + 1;

        i1 = i4 + 1;

        r2 = $r1[i4];

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        r3[i3] = r2;

        goto label5;

     label7:
        return r3;
    }

    static void sortEntries(java.lang.Object[], int, java.util.Comparator)
    {
        java.util.Map$Entry r8;
        java.lang.Object[] $r0;
        com.google.common.base.Function $r7;
        java.util.AbstractMap$SimpleImmutableEntry $r3;
        com.google.common.collect.Ordering $r6;
        int $i0, i1, i2;
        java.lang.Object r4, r5;
        java.util.Comparator r1;
        java.util.Map$Entry[] r2;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        r1 := @parameter2: java.util.Comparator;

        r2 = newarray (java.util.Map$Entry)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        i2 = i1 * 2;

        r4 = $r0[i2];

        r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        i2 = i1 * 2;

        i2 = i2 + 1;

        r5 = $r0[i2];

        r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        $r3 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r3.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r4, r5);

        r2[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>(r1);

        $r7 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Function valueFunction()>();

        $r6 = virtualinvoke $r6.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r7);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>(r2, 0, $i0, $r6);

        i1 = 0;

     label3:
        if i1 >= $i0 goto label4;

        i2 = i1 * 2;

        r8 = r2[i1];

        r4 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r0[i2] = r4;

        i2 = i1 * 2;

        i2 = i2 + 1;

        r8 = r2[i1];

        r4 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0[i2] = r4;

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public com.google.common.collect.ImmutableMap build()
    {
        com.google.common.collect.ImmutableMap$Builder r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableMap buildKeepingLast()
    {
        com.google.common.collect.ImmutableMap$Builder r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 = specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build(boolean)>(0);

        return $r1;
    }

    public com.google.common.collect.ImmutableMap buildOrThrow()
    {
        com.google.common.collect.ImmutableMap$Builder r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 = specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build(boolean)>(1);

        return $r1;
    }

    com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder)
    {
        java.lang.Object[] $r2, $r3;
        int $i0, $i1;
        com.google.common.collect.ImmutableMap$Builder r0, r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        r1 := @parameter0: com.google.common.collect.ImmutableMap$Builder;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = r1.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 + $i1;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i0);

        $r2 = r1.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $r3 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 * 2;

        $i1 = r1.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = $i1 * 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, $i0, $i1);

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = r1.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 + $i1;

        r0.<com.google.common.collect.ImmutableMap$Builder: int size> = $i0;

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator)
    {
        java.lang.Object $r2;
        java.util.Comparator r1, $r3;
        com.google.common.collect.ImmutableMap$Builder r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        r1 := @parameter0: java.util.Comparator;

        $r3 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "valueComparator was already set");

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "valueComparator");

        r1 = (java.util.Comparator) $r2;

        r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator> = r1;

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r3;
        int $i0;
        java.lang.Object r1, r2;
        com.google.common.collect.ImmutableMap$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 + 1;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i0);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 * 2;

        $r3[$i0] = r1;

        $r3 = r0.<com.google.common.collect.ImmutableMap$Builder: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        $r3[$i0] = r2;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.ImmutableMap$Builder: int size> = $i0;

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)
    {
        java.util.Map$Entry r1;
        java.lang.Object $r2, $r3;
        com.google.common.collect.ImmutableMap$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        r1 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Collection r2;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.lang.Iterable r1;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        r1 := @parameter0: java.lang.Iterable;

        $z0 = r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        r2 = (java.util.Collection) r1;

        $i1 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $i0 = $i0 + $i1;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i0);

     label1:
        $r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        virtualinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)>(r5);

        goto label2;

     label3:
        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)
    {
        java.util.Set $r2;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable)>($r2);

        return r0;
    }
}
