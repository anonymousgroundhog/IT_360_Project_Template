public class kotlin.internal.PlatformImplementations extends java.lang.Object
{

    public void <init>()
    {
        kotlin.internal.PlatformImplementations r0;

        r0 := @this: kotlin.internal.PlatformImplementations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addSuppressed(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable $r1, $r2;
        kotlin.internal.PlatformImplementations r0;
        java.lang.Object[] $r4;
        java.lang.reflect.Method $r3;

        r0 := @this: kotlin.internal.PlatformImplementations;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cause");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "exception");

        $r3 = <kotlin.internal.PlatformImplementations$ReflectThrowable: java.lang.reflect.Method addSuppressed>;

        if $r3 == null goto label1;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r2;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r4);

     label1:
        return;
    }

    public kotlin.random.Random defaultPlatformRandom()
    {
        kotlin.internal.PlatformImplementations r0;
        kotlin.random.Random $r2;
        kotlin.random.FallbackThreadLocalRandom $r1;

        r0 := @this: kotlin.internal.PlatformImplementations;

        $r1 = new kotlin.random.FallbackThreadLocalRandom;

        specialinvoke $r1.<kotlin.random.FallbackThreadLocalRandom: void <init>()>();

        $r2 = (kotlin.random.Random) $r1;

        return $r2;
    }

    public kotlin.text.MatchGroup getMatchResultNamedGroup(java.util.regex.MatchResult, java.lang.String)
    {
        kotlin.internal.PlatformImplementations r0;
        java.lang.UnsupportedOperationException $r3;
        java.util.regex.MatchResult $r1;
        java.lang.String $r2;

        r0 := @this: kotlin.internal.PlatformImplementations;

        $r1 := @parameter0: java.util.regex.MatchResult;

        $r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "matchResult");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "name");

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Retrieving groups by name is not supported on this platform.");

        throw $r3;
    }

    public java.util.List getSuppressed(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlin.internal.PlatformImplementations r0;
        java.util.List $r6;
        java.lang.Object[] $r3;
        java.lang.Throwable[] $r5;
        java.lang.Object $r4;
        java.lang.reflect.Method r2;

        r0 := @this: kotlin.internal.PlatformImplementations;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "exception");

        r2 = <kotlin.internal.PlatformImplementations$ReflectThrowable: java.lang.reflect.Method getSuppressed>;

        if r2 == null goto label1;

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

        if $r4 == null goto label1;

        $r5 = (java.lang.Throwable[]) $r4;

        $r6 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(java.lang.Object[])>($r5);

        if $r6 != null goto label2;

     label1:
        $r6 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        return $r6;
    }
}
