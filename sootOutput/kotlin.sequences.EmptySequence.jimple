final class kotlin.sequences.EmptySequence extends java.lang.Object implements kotlin.sequences.Sequence, kotlin.sequences.DropTakeSequence
{
    public static final kotlin.sequences.EmptySequence INSTANCE;

    static void <clinit>()
    {
        kotlin.sequences.EmptySequence $r0;

        $r0 = new kotlin.sequences.EmptySequence;

        specialinvoke $r0.<kotlin.sequences.EmptySequence: void <init>()>();

        <kotlin.sequences.EmptySequence: kotlin.sequences.EmptySequence INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlin.sequences.EmptySequence r0;

        r0 := @this: kotlin.sequences.EmptySequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public kotlin.sequences.EmptySequence drop(int)
    {
        int $i0;
        kotlin.sequences.EmptySequence r0;

        r0 := @this: kotlin.sequences.EmptySequence;

        $i0 := @parameter0: int;

        r0 = <kotlin.sequences.EmptySequence: kotlin.sequences.EmptySequence INSTANCE>;

        return r0;
    }

    public volatile kotlin.sequences.Sequence drop(int)
    {
        int $i0;
        kotlin.sequences.EmptySequence r0;
        kotlin.sequences.Sequence $r1;

        r0 := @this: kotlin.sequences.EmptySequence;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<kotlin.sequences.EmptySequence: kotlin.sequences.EmptySequence drop(int)>($i0);

        $r1 = (kotlin.sequences.Sequence) r0;

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.EmptyIterator $r1;
        java.util.Iterator $r2;
        kotlin.sequences.EmptySequence r0;

        r0 := @this: kotlin.sequences.EmptySequence;

        $r1 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE>;

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }

    public kotlin.sequences.EmptySequence take(int)
    {
        int $i0;
        kotlin.sequences.EmptySequence r0;

        r0 := @this: kotlin.sequences.EmptySequence;

        $i0 := @parameter0: int;

        r0 = <kotlin.sequences.EmptySequence: kotlin.sequences.EmptySequence INSTANCE>;

        return r0;
    }

    public volatile kotlin.sequences.Sequence take(int)
    {
        int $i0;
        kotlin.sequences.EmptySequence r0;
        kotlin.sequences.Sequence $r1;

        r0 := @this: kotlin.sequences.EmptySequence;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<kotlin.sequences.EmptySequence: kotlin.sequences.EmptySequence take(int)>($i0);

        $r1 = (kotlin.sequences.Sequence) r0;

        return $r1;
    }
}
