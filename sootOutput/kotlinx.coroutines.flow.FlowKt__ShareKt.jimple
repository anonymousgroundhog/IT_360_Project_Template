final class kotlinx.coroutines.flow.FlowKt__ShareKt extends java.lang.Object
{

    public static final kotlinx.coroutines.flow.SharedFlow asSharedFlow(kotlinx.coroutines.flow.MutableSharedFlow)
    {
        kotlinx.coroutines.flow.SharedFlow $r2;
        kotlinx.coroutines.flow.ReadonlySharedFlow $r1;
        kotlinx.coroutines.flow.MutableSharedFlow $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.MutableSharedFlow;

        $r1 = new kotlinx.coroutines.flow.ReadonlySharedFlow;

        $r2 = (kotlinx.coroutines.flow.SharedFlow) $r0;

        specialinvoke $r1.<kotlinx.coroutines.flow.ReadonlySharedFlow: void <init>(kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.Job)>($r2, null);

        $r2 = (kotlinx.coroutines.flow.SharedFlow) $r1;

        return $r2;
    }

    public static final kotlinx.coroutines.flow.StateFlow asStateFlow(kotlinx.coroutines.flow.MutableStateFlow)
    {
        kotlinx.coroutines.flow.MutableStateFlow $r0;
        kotlinx.coroutines.flow.ReadonlyStateFlow $r1;
        kotlinx.coroutines.flow.StateFlow $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.MutableStateFlow;

        $r1 = new kotlinx.coroutines.flow.ReadonlyStateFlow;

        $r2 = (kotlinx.coroutines.flow.StateFlow) $r0;

        specialinvoke $r1.<kotlinx.coroutines.flow.ReadonlyStateFlow: void <init>(kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.Job)>($r2, null);

        $r2 = (kotlinx.coroutines.flow.StateFlow) $r1;

        return $r2;
    }

    private static final kotlinx.coroutines.flow.SharingConfig configureSharing$FlowKt__ShareKt(kotlinx.coroutines.flow.Flow, int)
    {
        kotlinx.coroutines.flow.internal.ChannelFlow r5;
        kotlinx.coroutines.channels.BufferOverflow $r2, $r7;
        java.lang.AssertionError $r3;
        kotlin.coroutines.CoroutineContext $r8;
        kotlinx.coroutines.flow.Flow $r0, $r6;
        kotlinx.coroutines.channels.Channel$Factory $r4;
        kotlin.coroutines.EmptyCoroutineContext r9;
        int $i0, $i1, $i2, $i3;
        kotlinx.coroutines.flow.SharingConfig $r1;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $i1 = 1;

        if $z0 == 0 goto label04;

        if $i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $r4 = <kotlinx.coroutines.channels.Channel: kotlinx.coroutines.channels.Channel$Factory Factory>;

        $i2 = virtualinvoke $r4.<kotlinx.coroutines.channels.Channel$Factory: int getCHANNEL_DEFAULT_CAPACITY$kotlinx_coroutines_core()>();

        $i2 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, $i2);

        $i2 = $i2 - $i0;

        $z0 = $r0 instanceof kotlinx.coroutines.flow.internal.ChannelFlow;

        if $z0 == 0 goto label11;

        r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        $r6 = virtualinvoke r5.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.flow.Flow dropChannelOperators()>();

        if $r6 == null goto label11;

        $r1 = new kotlinx.coroutines.flow.SharingConfig;

        r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        $i3 = r5.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        lookupswitch($i3)
        {
            case -3: goto label06;
            case -2: goto label06;
            case -1: goto label05;
            case 0: goto label06;
            default: goto label05;
        };

     label05:
        r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        $i1 = r5.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        goto label10;

     label06:
        r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        $r7 = r5.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r2 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        if $r7 != $r2 goto label08;

        r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        $i0 = r5.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if $i0 != 0 goto label07;

        $i1 = 0;

        goto label10;

     label07:
        $i1 = $i2;

        goto label10;

     label08:
        if $i0 != 0 goto label09;

        goto label10;

     label09:
        $i1 = 0;

     label10:
        r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        $r2 = r5.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        r5 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        $r8 = r5.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context>;

        specialinvoke $r1.<kotlinx.coroutines.flow.SharingConfig: void <init>(kotlinx.coroutines.flow.Flow,int,kotlinx.coroutines.channels.BufferOverflow,kotlin.coroutines.CoroutineContext)>($r6, $i1, $r2, $r8);

        return $r1;

     label11:
        $r1 = new kotlinx.coroutines.flow.SharingConfig;

        $r2 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        r9 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r8 = (kotlin.coroutines.CoroutineContext) r9;

        specialinvoke $r1.<kotlinx.coroutines.flow.SharingConfig: void <init>(kotlinx.coroutines.flow.Flow,int,kotlinx.coroutines.channels.BufferOverflow,kotlin.coroutines.CoroutineContext)>($r0, $i2, $r2, $r8);

        return $r1;
    }

    private static final kotlinx.coroutines.Job launchSharing$FlowKt__ShareKt(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.MutableSharedFlow, kotlinx.coroutines.flow.SharingStarted, java.lang.Object)
    {
        kotlinx.coroutines.flow.SharingStarted $r4, $r7;
        kotlinx.coroutines.Job $r11;
        kotlinx.coroutines.flow.MutableSharedFlow $r3;
        kotlin.jvm.functions.Function2 $r10;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.CoroutineScope $r0;
        kotlinx.coroutines.flow.SharingStarted$Companion r6;
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 $r9;
        kotlinx.coroutines.CoroutineStart r8;
        java.lang.Object $r5;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter2: kotlinx.coroutines.flow.Flow;

        $r3 := @parameter3: kotlinx.coroutines.flow.MutableSharedFlow;

        $r4 := @parameter4: kotlinx.coroutines.flow.SharingStarted;

        $r5 := @parameter5: java.lang.Object;

        r6 = <kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.SharingStarted$Companion Companion>;

        $r7 = virtualinvoke r6.<kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted getEagerly()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $z0 == 0 goto label1;

        r8 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT>;

        goto label2;

     label1:
        r8 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED>;

     label2:
        $r9 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        specialinvoke $r9.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: void <init>(kotlinx.coroutines.flow.SharingStarted,kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,java.lang.Object,kotlin.coroutines.Continuation)>($r4, $r2, $r3, $r5, null);

        $r10 = (kotlin.jvm.functions.Function2) $r9;

        $r11 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)>($r0, $r1, r8, $r10);

        return $r11;
    }

    private static final void launchSharingDeferred$FlowKt__ShareKt(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CompletableDeferred)
    {
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.CompletableDeferred $r3;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 $r4;
        kotlin.jvm.functions.Function2 $r5;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.CoroutineScope $r0;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter2: kotlinx.coroutines.flow.Flow;

        $r3 := @parameter3: kotlinx.coroutines.CompletableDeferred;

        $r4 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1;

        specialinvoke $r4.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: void <init>(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.CompletableDeferred,kotlin.coroutines.Continuation)>($r2, $r3, null);

        $r5 = (kotlin.jvm.functions.Function2) $r4;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r0, $r1, null, $r5, 2, null);

        return;
    }

    public static final kotlinx.coroutines.flow.SharedFlow onSubscription(kotlinx.coroutines.flow.SharedFlow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.SubscribedSharedFlow $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.SubscribedSharedFlow;

        specialinvoke $r2.<kotlinx.coroutines.flow.SubscribedSharedFlow: void <init>(kotlinx.coroutines.flow.SharedFlow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.SharedFlow) $r2;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.SharedFlow shareIn(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.flow.SharingStarted, int)
    {
        kotlinx.coroutines.internal.Symbol r7;
        kotlinx.coroutines.flow.SharingStarted $r2;
        kotlinx.coroutines.Job $r9;
        kotlinx.coroutines.flow.MutableSharedFlow $r5;
        kotlinx.coroutines.channels.BufferOverflow r4;
        kotlin.coroutines.CoroutineContext $r6;
        kotlinx.coroutines.flow.ReadonlySharedFlow $r10;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.SharedFlow $r11;
        int $i0, i1;
        java.lang.Object $r8;
        kotlinx.coroutines.flow.SharingConfig $r3;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter2: kotlinx.coroutines.flow.SharingStarted;

        $i0 := @parameter3: int;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ShareKt: kotlinx.coroutines.flow.SharingConfig configureSharing$FlowKt__ShareKt(kotlinx.coroutines.flow.Flow,int)>($r0, $i0);

        i1 = $r3.<kotlinx.coroutines.flow.SharingConfig: int extraBufferCapacity>;

        r4 = $r3.<kotlinx.coroutines.flow.SharingConfig: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r5 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.flow.MutableSharedFlow MutableSharedFlow(int,int,kotlinx.coroutines.channels.BufferOverflow)>($i0, i1, r4);

        $r6 = $r3.<kotlinx.coroutines.flow.SharingConfig: kotlin.coroutines.CoroutineContext context>;

        $r0 = $r3.<kotlinx.coroutines.flow.SharingConfig: kotlinx.coroutines.flow.Flow upstream>;

        r7 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        $r8 = (java.lang.Object) r7;

        $r9 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ShareKt: kotlinx.coroutines.Job launchSharing$FlowKt__ShareKt(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.SharingStarted,java.lang.Object)>($r1, $r6, $r0, $r5, $r2, $r8);

        $r10 = new kotlinx.coroutines.flow.ReadonlySharedFlow;

        $r11 = (kotlinx.coroutines.flow.SharedFlow) $r5;

        specialinvoke $r10.<kotlinx.coroutines.flow.ReadonlySharedFlow: void <init>(kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.Job)>($r11, $r9);

        $r11 = (kotlinx.coroutines.flow.SharedFlow) $r10;

        return $r11;
    }

    public static kotlinx.coroutines.flow.SharedFlow shareIn$default(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.flow.SharingStarted, int, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.SharedFlow $r3;
        kotlinx.coroutines.flow.Flow $r4;
        kotlinx.coroutines.flow.SharingStarted $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        kotlinx.coroutines.CoroutineScope $r0;

        $r4 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r0 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter2: kotlinx.coroutines.flow.SharingStarted;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.SharedFlow shareIn(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.flow.SharingStarted,int)>($r4, $r0, $r1, $i0);

        return $r3;
    }

    public static final java.lang.Object stateIn(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.CompletableDeferred $r4;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r6;
        kotlinx.coroutines.flow.SharingConfig $r3;
        kotlin.coroutines.CoroutineContext $r5;
        kotlinx.coroutines.CoroutineScope $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ShareKt: kotlinx.coroutines.flow.SharingConfig configureSharing$FlowKt__ShareKt(kotlinx.coroutines.flow.Flow,int)>($r0, 1);

        $r4 = staticinvoke <kotlinx.coroutines.CompletableDeferredKt: kotlinx.coroutines.CompletableDeferred CompletableDeferred$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r5 = $r3.<kotlinx.coroutines.flow.SharingConfig: kotlin.coroutines.CoroutineContext context>;

        $r0 = $r3.<kotlinx.coroutines.flow.SharingConfig: kotlinx.coroutines.flow.Flow upstream>;

        staticinvoke <kotlinx.coroutines.flow.FlowKt__ShareKt: void launchSharingDeferred$FlowKt__ShareKt(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.flow.Flow,kotlinx.coroutines.CompletableDeferred)>($r1, $r5, $r0, $r4);

        $r6 = interfaceinvoke $r4.<kotlinx.coroutines.CompletableDeferred: java.lang.Object await(kotlin.coroutines.Continuation)>($r2);

        return $r6;
    }

    public static final kotlinx.coroutines.flow.StateFlow stateIn(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.flow.SharingStarted, java.lang.Object)
    {
        kotlinx.coroutines.flow.SharingStarted $r2;
        kotlinx.coroutines.Job $r8;
        kotlinx.coroutines.flow.ReadonlyStateFlow $r9;
        kotlinx.coroutines.flow.MutableSharedFlow $r7;
        kotlin.coroutines.CoroutineContext $r6;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlinx.coroutines.flow.Flow $r0;
        java.lang.Object $r3;
        kotlinx.coroutines.flow.SharingConfig $r4;
        kotlinx.coroutines.flow.MutableStateFlow $r5;
        kotlinx.coroutines.flow.StateFlow $r10;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter2: kotlinx.coroutines.flow.SharingStarted;

        $r3 := @parameter3: java.lang.Object;

        $r4 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ShareKt: kotlinx.coroutines.flow.SharingConfig configureSharing$FlowKt__ShareKt(kotlinx.coroutines.flow.Flow,int)>($r0, 1);

        $r5 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)>($r3);

        $r6 = $r4.<kotlinx.coroutines.flow.SharingConfig: kotlin.coroutines.CoroutineContext context>;

        $r0 = $r4.<kotlinx.coroutines.flow.SharingConfig: kotlinx.coroutines.flow.Flow upstream>;

        $r7 = (kotlinx.coroutines.flow.MutableSharedFlow) $r5;

        $r8 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ShareKt: kotlinx.coroutines.Job launchSharing$FlowKt__ShareKt(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.SharingStarted,java.lang.Object)>($r1, $r6, $r0, $r7, $r2, $r3);

        $r9 = new kotlinx.coroutines.flow.ReadonlyStateFlow;

        $r10 = (kotlinx.coroutines.flow.StateFlow) $r5;

        specialinvoke $r9.<kotlinx.coroutines.flow.ReadonlyStateFlow: void <init>(kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.Job)>($r10, $r8);

        $r10 = (kotlinx.coroutines.flow.StateFlow) $r9;

        return $r10;
    }
}
