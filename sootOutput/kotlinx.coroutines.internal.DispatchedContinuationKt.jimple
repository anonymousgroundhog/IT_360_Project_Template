public final class kotlinx.coroutines.internal.DispatchedContinuationKt extends java.lang.Object
{
    public static final kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED;
    private static final kotlinx.coroutines.internal.Symbol UNDEFINED;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("UNDEFINED");

        <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol UNDEFINED> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("REUSABLE_CLAIMED");

        <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED> = $r0;

        return;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol UNDEFINED>;

        return r0;
    }

    private static final boolean executeUnconfined(kotlinx.coroutines.internal.DispatchedContinuation, java.lang.Object, int, boolean, kotlin.jvm.functions.Function0)
    {
        java.lang.Throwable r6, $r7;
        kotlinx.coroutines.ThreadLocalEventLoop $r3;
        kotlinx.coroutines.DispatchedTask $r5;
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        java.lang.AssertionError $r8;
        kotlin.jvm.functions.Function0 $r2;
        int $i0;
        java.lang.Object $r1;
        kotlinx.coroutines.EventLoop $r4;
        boolean $z0, $z1;

        $r0 := @parameter0: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r2 := @parameter4: kotlin.jvm.functions.Function0;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label04;

        if $i0 == -1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        goto label04;

     label03:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label04:
        $r3 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r4 = virtualinvoke $r3.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label05;

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>();

        if $z0 == 0 goto label05;

        return 0;

     label05:
        $z0 = virtualinvoke $r4.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label06;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r1;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = $i0;

        $r5 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r4.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r5);

        return 1;

     label06:
        $r5 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r4.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label07:
        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label08:
        $z0 = virtualinvoke $r4.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label09:
        if $z0 != 0 goto label08;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        goto label13;

     label10:
        r6 := @caughtexception;

     label11:
        virtualinvoke $r5.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>(r6, null);

     label12:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label13:
        virtualinvoke $r4.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return 0;

     label14:
        $r7 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r4.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r7;

        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label14;
    }

    static boolean executeUnconfined$default(kotlinx.coroutines.internal.DispatchedContinuation, java.lang.Object, int, boolean, kotlin.jvm.functions.Function0, int, java.lang.Object)
    {
        java.lang.Throwable r7, $r8;
        kotlinx.coroutines.ThreadLocalEventLoop $r4;
        kotlinx.coroutines.DispatchedTask $r6;
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        java.lang.AssertionError $r9;
        kotlin.jvm.functions.Function0 $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3;
        kotlinx.coroutines.EventLoop $r5;
        boolean $z0, $z1;

        $r0 := @parameter0: kotlinx.coroutines.internal.DispatchedContinuation;

        $r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r2 := @parameter4: kotlin.jvm.functions.Function0;

        $i1 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label01;

        $z0 = 0;

     label01:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label05;

        if $i0 == -1 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        if $z1 == 0 goto label04;

        goto label05;

     label04:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label05:
        $r4 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label06;

        $z0 = virtualinvoke $r5.<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>();

        if $z0 == 0 goto label06;

        return 0;

     label06:
        $z0 = virtualinvoke $r5.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z0 == 0 goto label07;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r1;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = $i0;

        $r6 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r6);

        return 1;

     label07:
        $r6 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label08:
        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label09:
        $z0 = virtualinvoke $r5.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label10:
        if $z0 != 0 goto label09;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        goto label14;

     label11:
        r7 := @caughtexception;

     label12:
        virtualinvoke $r6.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>(r7, null);

     label13:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

     label14:
        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return 0;

     label15:
        $r8 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke $r5.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r8;

        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    public static final void resumeCancellableWith(kotlin.coroutines.Continuation, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Throwable r16, r18, r23, r24;
        kotlinx.coroutines.ThreadLocalEventLoop r8;
        kotlin.coroutines.Continuation $r0;
        kotlinx.coroutines.DispatchedTask r10;
        kotlinx.coroutines.Job$Key $r11;
        kotlinx.coroutines.Job r14;
        kotlin.Result$Companion $r17;
        kotlin.coroutines.CoroutineContext$Element $r13;
        kotlinx.coroutines.internal.DispatchedContinuation r3;
        java.lang.Runnable $r7;
        kotlinx.coroutines.EventLoop $r9;
        boolean z0;
        kotlinx.coroutines.internal.Symbol r19;
        java.util.concurrent.CancellationException $r15;
        kotlin.jvm.functions.Function1 r2;
        kotlinx.coroutines.CoroutineDispatcher r5;
        kotlin.coroutines.CoroutineContext $r6;
        kotlin.Unit r22;
        kotlin.coroutines.CoroutineContext$Key r12;
        java.lang.Object r1, $r4;
        kotlinx.coroutines.UndispatchedCoroutine $r20, r21;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        z0 = $r0 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        if z0 == 0 goto label44;

        r3 = (kotlinx.coroutines.internal.DispatchedContinuation) $r0;

        $r4 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState(java.lang.Object,kotlin.jvm.functions.Function1)>(r1, r2);

        r5 = r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r6 = virtualinvoke r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        z0 = virtualinvoke r5.<kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)>($r6);

        if z0 == 0 goto label01;

        r3.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r4;

        r3.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        r5 = r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r6 = virtualinvoke r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r7 = (java.lang.Runnable) r3;

        virtualinvoke r5.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r6, $r7);

        goto label42;

     label01:
        z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if z0 == 0 goto label02;

     label02:
        r8 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r9 = virtualinvoke r8.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        z0 = virtualinvoke $r9.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if z0 == 0 goto label03;

        r3.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = $r4;

        r3.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        r10 = (kotlinx.coroutines.DispatchedTask) r3;

        virtualinvoke $r9.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>(r10);

        goto label42;

     label03:
        r10 = (kotlinx.coroutines.DispatchedTask) r3;

        virtualinvoke $r9.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label04:
        $r6 = virtualinvoke r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r11 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        r12 = (kotlin.coroutines.CoroutineContext$Key) $r11;

        $r13 = interfaceinvoke $r6.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r12);

        r14 = (kotlinx.coroutines.Job) $r13;

     label05:
        if r14 == null goto label11;

     label06:
        z0 = interfaceinvoke r14.<kotlinx.coroutines.Job: boolean isActive()>();

     label07:
        if z0 != 0 goto label11;

     label08:
        $r15 = interfaceinvoke r14.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        r16 = (java.lang.Throwable) $r15;

        virtualinvoke r3.<kotlinx.coroutines.internal.DispatchedContinuation: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)>($r4, r16);

        $r0 = (kotlin.coroutines.Continuation) r3;

        $r17 = <kotlin.Result: kotlin.Result$Companion Companion>;

        r16 = (java.lang.Throwable) $r15;

        $r4 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>(r16);

        $r4 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r4);

        interfaceinvoke $r0.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r4);

     label09:
        z0 = 1;

        goto label12;

     label10:
        r18 := @caughtexception;

        goto label40;

     label11:
        z0 = 0;

     label12:
        if z0 != 0 goto label36;

     label13:
        $r0 = r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

        $r4 = r3.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement>;

        $r6 = interfaceinvoke $r0.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

     label14:
        $r4 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r6, $r4);

        r19 = <kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS>;

     label15:
        if $r4 == r19 goto label19;

     label16:
        $r20 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r6, $r4);

     label17:
        goto label20;

     label18:
        r18 := @caughtexception;

        goto label40;

     label19:
        $r20 = null;

     label20:
        r21 = $r20;

     label21:
        $r0 = r3.<kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation>;

     label22:
        interfaceinvoke $r0.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>(r1);

        r22 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label23:
        if $r20 == null goto label26;

     label24:
        z0 = virtualinvoke $r20.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

     label25:
        if z0 == 0 goto label27;

     label26:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r6, $r4);

     label27:
        goto label36;

     label28:
        r23 := @caughtexception;

        goto label30;

     label29:
        r23 := @caughtexception;

     label30:
        if r21 == null goto label33;

     label31:
        z0 = virtualinvoke r21.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

     label32:
        if z0 == 0 goto label34;

     label33:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r6, $r4);

     label34:
        throw r23;

     label35:
        r18 := @caughtexception;

        goto label40;

     label36:
        z0 = virtualinvoke $r9.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label37:
        if z0 != 0 goto label36;

        goto label41;

     label38:
        r18 := @caughtexception;

        goto label40;

     label39:
        r18 := @caughtexception;

     label40:
        virtualinvoke r10.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>(r18, null);

     label41:
        virtualinvoke $r9.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

     label42:
        return;

     label43:
        r24 := @caughtexception;

        virtualinvoke $r9.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        throw r24;

     label44:
        interfaceinvoke $r0.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>(r1);

        return;

        catch java.lang.Throwable from label04 to label05 with label39;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label39;
        catch java.lang.Throwable from label14 to label15 with label35;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label24 to label25 with label38;
        catch java.lang.Throwable from label26 to label27 with label38;
        catch java.lang.Throwable from label31 to label32 with label38;
        catch java.lang.Throwable from label33 to label35 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label40 to label41 with label43;
    }

    public static void resumeCancellableWith$default(kotlin.coroutines.Continuation, java.lang.Object, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r0;
        int $i0;
        java.lang.Object $r1, $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $r1 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = null;

     label1:
        staticinvoke <kotlinx.coroutines.internal.DispatchedContinuationKt: void resumeCancellableWith(kotlin.coroutines.Continuation,java.lang.Object,kotlin.jvm.functions.Function1)>($r0, $r1, $r3);

        return;
    }

    public static final boolean yieldUndispatched(kotlinx.coroutines.internal.DispatchedContinuation)
    {
        java.lang.Throwable $r5, $r6;
        kotlinx.coroutines.ThreadLocalEventLoop $r2;
        kotlinx.coroutines.DispatchedTask $r4;
        kotlinx.coroutines.internal.DispatchedContinuation $r0;
        kotlin.Unit r1;
        kotlinx.coroutines.EventLoop $r3;
        boolean $z0, $z1;

        $r0 := @parameter0: kotlinx.coroutines.internal.DispatchedContinuation;

        r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label01;

     label01:
        $r2 = <kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()>();

        $z1 = virtualinvoke $r3.<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>();

        $z0 = 0;

        if $z1 == 0 goto label02;

        return 0;

     label02:
        $z1 = virtualinvoke $r3.<kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()>();

        if $z1 == 0 goto label03;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state> = r1;

        $r0.<kotlinx.coroutines.internal.DispatchedContinuation: int resumeMode> = 1;

        $r4 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)>($r4);

        $z0 = 1;

        goto label10;

     label03:
        $r4 = (kotlinx.coroutines.DispatchedTask) $r0;

        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>(1);

     label04:
        virtualinvoke $r0.<kotlinx.coroutines.internal.DispatchedContinuation: void run()>();

     label05:
        $z1 = virtualinvoke $r3.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

     label06:
        if $z1 != 0 goto label05;

        goto label09;

     label07:
        $r5 := @caughtexception;

     label08:
        virtualinvoke $r4.<kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)>($r5, null);

     label09:
        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

     label10:
        return $z0;

     label11:
        $r6 := @caughtexception;

        virtualinvoke $r3.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>(1);

        throw $r6;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label11;
    }
}
