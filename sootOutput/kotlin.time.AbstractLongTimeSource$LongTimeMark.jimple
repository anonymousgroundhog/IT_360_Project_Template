final class kotlin.time.AbstractLongTimeSource$LongTimeMark extends java.lang.Object implements kotlin.time.ComparableTimeMark
{
    private final long offset;
    private final long startedAt;
    private final kotlin.time.AbstractLongTimeSource timeSource;

    private void <init>(long, kotlin.time.AbstractLongTimeSource, long)
    {
        kotlin.time.AbstractLongTimeSource $r1;
        long $l0, $l1;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.time.AbstractLongTimeSource;

        $l1 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "timeSource");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt> = $l0;

        r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource> = $r1;

        r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset> = $l1;

        return;
    }

    public void <init>(long, kotlin.time.AbstractLongTimeSource, long, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.time.AbstractLongTimeSource $r1;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;
        long $l0, $l1;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.time.AbstractLongTimeSource;

        $l1 := @parameter2: long;

        $r2 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: void <init>(long,kotlin.time.AbstractLongTimeSource,long)>($l0, $r1, $l1);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        kotlin.time.ComparableTimeMark $r2;
        int $i0;
        java.lang.Object $r1;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlin.time.ComparableTimeMark) $r1;

        $i0 = virtualinvoke r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: int compareTo(kotlin.time.ComparableTimeMark)>($r2);

        return $i0;
    }

    public int compareTo(kotlin.time.ComparableTimeMark)
    {
        int $i0;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;
        kotlin.time.ComparableTimeMark $r1;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $r1 := @parameter0: kotlin.time.ComparableTimeMark;

        $i0 = staticinvoke <kotlin.time.ComparableTimeMark$DefaultImpls: int compareTo(kotlin.time.ComparableTimeMark,kotlin.time.ComparableTimeMark)>(r0, $r1);

        return $i0;
    }

    public final long effectiveDuration-UwyO8pc$kotlin_stdlib()
    {
        kotlin.time.AbstractLongTimeSource r1;
        kotlin.time.DurationUnit $r2, r3;
        long l0, l1, l3, l4;
        kotlin.time.Duration$Companion r5;
        java.lang.Enum r4;
        int $i2, $i5;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;
        boolean $z0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        l1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>(l1);

        if $z0 == 0 goto label1;

        l1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        return l1;

     label1:
        r1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $r2 = virtualinvoke r1.<kotlin.time.AbstractLongTimeSource: kotlin.time.DurationUnit getUnit()>();

        r3 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        r4 = (java.lang.Enum) r3;

        $i2 = virtualinvoke $r2.<kotlin.time.DurationUnit: int compareTo(java.lang.Enum)>(r4);

        if $i2 < 0 goto label2;

        l1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>(l1, $r2);

        l3 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        l1 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l1, l3);

        return l1;

     label2:
        r3 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        l1 = staticinvoke <kotlin.time.DurationUnitKt: long convertDurationUnit(long,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>(1L, r3, $r2);

        l3 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        l3 = l3 / l1;

        l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        l4 = l0 % l1;

        l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        l1 = staticinvoke <kotlin.time.Duration: long getInWholeSeconds-impl(long)>(l0);

        $i5 = staticinvoke <kotlin.time.Duration: int getNanosecondsComponent-impl(long)>(l0);

        $i2 = $i5 / 1000000;

        $i5 = $i5 % 1000000;

        l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>(l4, $r2);

        r5 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        $r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        l4 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i5, $r2);

        l0 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l0, l4);

        r5 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        l4 = (long) $i2;

        l3 = l4 + l3;

        $r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        l3 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>(l3, $r2);

        l3 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l0, l3);

        r5 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        $r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>(l1, $r2);

        l1 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l3, l1);

        return l1;
    }

    public long elapsedNow-UwyO8pc()
    {
        kotlin.time.AbstractLongTimeSource $r1;
        kotlin.time.DurationUnit $r2;
        long $l0, $l1;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;
        boolean $z0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>($l0);

        if $z0 == 0 goto label1;

        $l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $l0 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>($l0);

        return $l0;

     label1:
        $r1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $l0 = virtualinvoke $r1.<kotlin.time.AbstractLongTimeSource: long read()>();

        $l1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        $l0 = $l0 - $l1;

        $r1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $r2 = virtualinvoke $r1.<kotlin.time.AbstractLongTimeSource: kotlin.time.DurationUnit getUnit()>();

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r2);

        $l1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $l0 = staticinvoke <kotlin.time.Duration: long minus-LRDsOJo(long,long)>($l0, $l1);

        return $l0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.time.AbstractLongTimeSource $r2, $r4;
        long $l0, $l1;
        kotlin.time.Duration$Companion $r6;
        kotlin.time.ComparableTimeMark $r5;
        java.lang.Object $r1;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0, $r3;
        boolean $z0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.time.AbstractLongTimeSource$LongTimeMark;

        if $z0 == 0 goto label1;

        $r2 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $r3 = (kotlin.time.AbstractLongTimeSource$LongTimeMark) $r1;

        $r4 = $r3.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label1;

        $r5 = (kotlin.time.ComparableTimeMark) $r1;

        $l0 = virtualinvoke r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long minus-UwyO8pc(kotlin.time.ComparableTimeMark)>($r5);

        $r6 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        $l1 = virtualinvoke $r6.<kotlin.time.Duration$Companion: long getZERO-UwyO8pc()>();

        $z0 = staticinvoke <kotlin.time.Duration: boolean equals-impl0(long,long)>($l0, $l1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasNotPassedNow()
    {
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;
        boolean $z0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $z0 = staticinvoke <kotlin.time.ComparableTimeMark$DefaultImpls: boolean hasNotPassedNow(kotlin.time.ComparableTimeMark)>(r0);

        return $z0;
    }

    public boolean hasPassedNow()
    {
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;
        boolean $z0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $z0 = staticinvoke <kotlin.time.ComparableTimeMark$DefaultImpls: boolean hasPassedNow(kotlin.time.ComparableTimeMark)>(r0);

        return $z0;
    }

    public int hashCode()
    {
        int $i1;
        long $l0;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 = virtualinvoke r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long effectiveDuration-UwyO8pc$kotlin_stdlib()>();

        $i1 = staticinvoke <kotlin.time.Duration: int hashCode-impl(long)>($l0);

        return $i1;
    }

    public kotlin.time.ComparableTimeMark minus-LRDsOJo(long)
    {
        long $l0;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;
        kotlin.time.ComparableTimeMark $r1;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <kotlin.time.ComparableTimeMark$DefaultImpls: kotlin.time.ComparableTimeMark minus-LRDsOJo(kotlin.time.ComparableTimeMark,long)>(r0, $l0);

        return $r1;
    }

    public volatile kotlin.time.TimeMark minus-LRDsOJo(long)
    {
        kotlin.time.ComparableTimeMark $r1;
        long $l0;
        kotlin.time.TimeMark $r2;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.ComparableTimeMark minus-LRDsOJo(long)>($l0);

        $r2 = (kotlin.time.TimeMark) $r1;

        return $r2;
    }

    public long minus-UwyO8pc(kotlin.time.ComparableTimeMark)
    {
        kotlin.time.AbstractLongTimeSource r2, $r4;
        kotlin.time.DurationUnit $r6;
        long l0, l1, $l2;
        java.lang.IllegalArgumentException r7;
        kotlin.time.Duration$Companion r5;
        kotlin.time.ComparableTimeMark $r1;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0, $r3;
        boolean z0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $r1 := @parameter0: kotlin.time.ComparableTimeMark;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        z0 = $r1 instanceof kotlin.time.AbstractLongTimeSource$LongTimeMark;

        if z0 == 0 goto label3;

        r2 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $r3 = (kotlin.time.AbstractLongTimeSource$LongTimeMark) $r1;

        $r4 = $r3.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r4);

        if z0 == 0 goto label3;

        l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $r3 = (kotlin.time.AbstractLongTimeSource$LongTimeMark) $r1;

        l1 = $r3.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        z0 = staticinvoke <kotlin.time.Duration: boolean equals-impl0(long,long)>(l0, l1);

        if z0 == 0 goto label1;

        l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        z0 = staticinvoke <kotlin.time.Duration: boolean isInfinite-impl(long)>(l0);

        if z0 == 0 goto label1;

        r5 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        l0 = virtualinvoke r5.<kotlin.time.Duration$Companion: long getZERO-UwyO8pc()>();

        return l0;

     label1:
        l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $r3 = (kotlin.time.AbstractLongTimeSource$LongTimeMark) $r1;

        l1 = $r3.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        l0 = staticinvoke <kotlin.time.Duration: long minus-LRDsOJo(long,long)>(l0, l1);

        l1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        $r3 = (kotlin.time.AbstractLongTimeSource$LongTimeMark) $r1;

        $l2 = $r3.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        l1 = l1 - $l2;

        r2 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $r6 = virtualinvoke r2.<kotlin.time.AbstractLongTimeSource: kotlin.time.DurationUnit getUnit()>();

        l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>(l1, $r6);

        $l2 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>(l0);

        z0 = staticinvoke <kotlin.time.Duration: boolean equals-impl0(long,long)>(l1, $l2);

        if z0 == 0 goto label2;

        r5 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        l0 = virtualinvoke r5.<kotlin.time.Duration$Companion: long getZERO-UwyO8pc()>();

        return l0;

     label2:
        l0 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l1, l0);

        return l0;

     label3:
        r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subtracting or comparing time marks from different time sources is not possible: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r7;
    }

    public kotlin.time.ComparableTimeMark plus-LRDsOJo(long)
    {
        kotlin.time.AbstractLongTimeSource $r1;
        kotlin.time.ComparableTimeMark $r3;
        long $l0, $l1, $l2;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0, $r2;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 := @parameter0: long;

        $r2 = new kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        $r1 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $l2 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $l0 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>($l2, $l0);

        specialinvoke $r2.<kotlin.time.AbstractLongTimeSource$LongTimeMark: void <init>(long,kotlin.time.AbstractLongTimeSource,long,kotlin.jvm.internal.DefaultConstructorMarker)>($l1, $r1, $l0, null);

        $r3 = (kotlin.time.ComparableTimeMark) $r2;

        return $r3;
    }

    public volatile kotlin.time.TimeMark plus-LRDsOJo(long)
    {
        kotlin.time.ComparableTimeMark $r1;
        long $l0;
        kotlin.time.TimeMark $r2;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.ComparableTimeMark plus-LRDsOJo(long)>($l0);

        $r2 = (kotlin.time.TimeMark) $r1;

        return $r2;
    }

    public java.lang.String toString()
    {
        kotlin.time.AbstractLongTimeSource $r2;
        kotlin.time.DurationUnit $r3;
        java.lang.StringBuilder $r1;
        long $l0;
        java.lang.String $r4;
        kotlin.time.AbstractLongTimeSource$LongTimeMark r0;

        r0 := @this: kotlin.time.AbstractLongTimeSource$LongTimeMark;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LongTimeMark(");

        $l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long startedAt>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $r3 = virtualinvoke $r2.<kotlin.time.AbstractLongTimeSource: kotlin.time.DurationUnit getUnit()>();

        $r4 = staticinvoke <kotlin.time.DurationUnitKt: java.lang.String shortName(kotlin.time.DurationUnit)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        $l0 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long offset>;

        $r4 = staticinvoke <kotlin.time.Duration: java.lang.String toString-impl(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (=");

        $l0 = virtualinvoke r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: long effectiveDuration-UwyO8pc$kotlin_stdlib()>();

        $r4 = staticinvoke <kotlin.time.Duration: java.lang.String toString-impl(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");

        $r2 = r0.<kotlin.time.AbstractLongTimeSource$LongTimeMark: kotlin.time.AbstractLongTimeSource timeSource>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
