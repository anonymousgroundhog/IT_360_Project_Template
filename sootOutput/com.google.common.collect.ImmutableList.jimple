public abstract class com.google.common.collect.ImmutableList extends com.google.common.collect.ImmutableCollection implements java.util.List, java.util.RandomAccess
{
    private static final com.google.common.collect.UnmodifiableListIterator EMPTY_ITR;

    static void <clinit>()
    {
        com.google.common.collect.ImmutableList$Itr $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 = new com.google.common.collect.ImmutableList$Itr;

        $r1 = <com.google.common.collect.RegularImmutableList: com.google.common.collect.ImmutableList EMPTY>;

        specialinvoke $r0.<com.google.common.collect.ImmutableList$Itr: void <init>(com.google.common.collect.ImmutableList,int)>($r1, 0);

        <com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator EMPTY_ITR> = $r0;

        return;
    }

    void <init>()
    {
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection: void <init>()>();

        return;
    }

    static com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int)>($r0, $i0);

        return $r1;
    }

    static com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[], int)
    {
        com.google.common.collect.RegularImmutableList $r2;
        java.lang.Object[] $r0;
        com.google.common.collect.ImmutableList $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r1;

     label1:
        $r2 = new com.google.common.collect.RegularImmutableList;

        specialinvoke $r2.<com.google.common.collect.RegularImmutableList: void <init>(java.lang.Object[],int)>($r0, $i0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableList$Builder builder()
    {
        com.google.common.collect.ImmutableList$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableList$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableList$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableList$Builder builderWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.ImmutableList$Builder $r0;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "expectedSize");

        $r0 = new com.google.common.collect.ImmutableList$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableList$Builder: void <init>(int)>($i0);

        return $r0;
    }

    private static transient com.google.common.collect.ImmutableList construct(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 := @parameter0: java.lang.Object[];

        $r0 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[])>($r0);

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[])>($r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableList $r2;
        java.util.Iterator $r3;
        java.util.Collection $r1;
        java.lang.Iterable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = (java.util.Collection) r0;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r1);

        return $r2;

     label1:
        $r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Iterator)>($r3);

        return $r2;
    }

    public static com.google.common.collect.ImmutableList copyOf(java.util.Collection)
    {
        java.lang.Object[] $r3;
        com.google.common.collect.ImmutableList $r2;
        java.util.Collection r0;
        com.google.common.collect.ImmutableCollection r1;
        boolean z0;

        r0 := @parameter0: java.util.Collection;

        z0 = r0 instanceof com.google.common.collect.ImmutableCollection;

        if z0 == 0 goto label2;

        r1 = (com.google.common.collect.ImmutableCollection) r0;

        $r2 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>();

        z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableList: boolean isPartialView()>();

        if z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableList: java.lang.Object[] toArray()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[])>($r3);

     label1:
        return $r2;

     label2:
        $r3 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r3);

        return $r2;
    }

    public static com.google.common.collect.ImmutableList copyOf(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.google.common.collect.ImmutableList $r1;
        java.lang.Object $r2;
        boolean $z0;
        com.google.common.collect.ImmutableList$Builder $r3;

        r0 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r1;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r2);

        return $r1;

     label2:
        $r3 = new com.google.common.collect.ImmutableList$Builder;

        specialinvoke $r3.<com.google.common.collect.ImmutableList$Builder: void <init>()>();

        $r3 = virtualinvoke $r3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder addAll(java.util.Iterator)>(r0);

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r1;
    }

    public static com.google.common.collect.ImmutableList copyOf(java.lang.Object[])
    {
        java.lang.Object[] r0;
        com.google.common.collect.ImmutableList $r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r0 = (java.lang.Object[]) $r2;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>(r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableList of()
    {
        com.google.common.collect.ImmutableList r0;

        r0 = <com.google.common.collect.RegularImmutableList: com.google.common.collect.ImmutableList EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList $r1;

        r0 := @parameter0: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r2);

        return $r1;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r3;
        com.google.common.collect.ImmutableList $r2;
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r0;

        $r3[1] = r1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r3);

        return $r2;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r4;
        com.google.common.collect.ImmutableList $r3;
        java.lang.Object r0, r1, r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r0;

        $r4[1] = r1;

        $r4[2] = r2;

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r4);

        return $r3;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r5;
        com.google.common.collect.ImmutableList $r4;
        java.lang.Object r0, r1, r2, r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = r0;

        $r5[1] = r1;

        $r5[2] = r2;

        $r5[3] = r3;

        $r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r5);

        return $r4;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r6;
        com.google.common.collect.ImmutableList $r5;
        java.lang.Object r0, r1, r2, r3, r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $r6 = newarray (java.lang.Object)[5];

        $r6[0] = r0;

        $r6[1] = r1;

        $r6[2] = r2;

        $r6[3] = r3;

        $r6[4] = r4;

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r6);

        return $r5;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r7;
        com.google.common.collect.ImmutableList $r6;
        java.lang.Object r0, r1, r2, r3, r4, r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $r7 = newarray (java.lang.Object)[6];

        $r7[0] = r0;

        $r7[1] = r1;

        $r7[2] = r2;

        $r7[3] = r3;

        $r7[4] = r4;

        $r7[5] = r5;

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r7);

        return $r6;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r8;
        com.google.common.collect.ImmutableList $r7;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        $r8 = newarray (java.lang.Object)[7];

        $r8[0] = r0;

        $r8[1] = r1;

        $r8[2] = r2;

        $r8[3] = r3;

        $r8[4] = r4;

        $r8[5] = r5;

        $r8[6] = r6;

        $r7 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r8);

        return $r7;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r9;
        com.google.common.collect.ImmutableList $r8;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        $r9 = newarray (java.lang.Object)[8];

        $r9[0] = r0;

        $r9[1] = r1;

        $r9[2] = r2;

        $r9[3] = r3;

        $r9[4] = r4;

        $r9[5] = r5;

        $r9[6] = r6;

        $r9[7] = r7;

        $r8 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r9);

        return $r8;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r10;
        com.google.common.collect.ImmutableList $r9;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        $r10 = newarray (java.lang.Object)[9];

        $r10[0] = r0;

        $r10[1] = r1;

        $r10[2] = r2;

        $r10[3] = r3;

        $r10[4] = r4;

        $r10[5] = r5;

        $r10[6] = r6;

        $r10[7] = r7;

        $r10[8] = r8;

        $r9 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r10);

        return $r9;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r11;
        com.google.common.collect.ImmutableList $r10;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        $r11 = newarray (java.lang.Object)[10];

        $r11[0] = r0;

        $r11[1] = r1;

        $r11[2] = r2;

        $r11[3] = r3;

        $r11[4] = r4;

        $r11[5] = r5;

        $r11[6] = r6;

        $r11[7] = r7;

        $r11[8] = r8;

        $r11[9] = r9;

        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r11);

        return $r10;
    }

    public static com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r12;
        com.google.common.collect.ImmutableList $r11;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        r10 := @parameter10: java.lang.Object;

        $r12 = newarray (java.lang.Object)[11];

        $r12[0] = r0;

        $r12[1] = r1;

        $r12[2] = r2;

        $r12[3] = r3;

        $r12[4] = r4;

        $r12[5] = r5;

        $r12[6] = r6;

        $r12[7] = r7;

        $r12[8] = r8;

        $r12[9] = r9;

        $r12[10] = r10;

        $r11 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>($r12);

        return $r11;
    }

    public static transient com.google.common.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r12, r14;
        com.google.common.collect.ImmutableList $r13;
        int i0;
        boolean z0;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        r10 := @parameter10: java.lang.Object;

        r11 := @parameter11: java.lang.Object;

        r12 := @parameter12: java.lang.Object[];

        i0 = lengthof r12;

        if i0 > 2147483635 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "the total number of elements must fit in an int");

        i0 = lengthof r12;

        i0 = i0 + 12;

        r14 = newarray (java.lang.Object)[i0];

        r14[0] = r0;

        r14[1] = r1;

        r14[2] = r2;

        r14[3] = r3;

        r14[4] = r4;

        r14[5] = r5;

        r14[6] = r6;

        r14[7] = r7;

        r14[8] = r8;

        r14[9] = r9;

        r14[10] = r10;

        r14[11] = r11;

        i0 = lengthof r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r14, 12, i0);

        $r13 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])>(r14);

        return $r13;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException
    {
        java.io.ObjectInputStream $r1;
        java.io.InvalidObjectException $r2;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.io.InvalidObjectException;

        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Use SerializedForm");

        throw $r2;
    }

    public static com.google.common.collect.ImmutableList sortedCopyOf(java.lang.Iterable)
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList $r3;
        java.lang.Comparable[] r1;
        java.lang.Iterable r0;

        r0 := @parameter0: java.lang.Iterable;

        r1 = newarray (java.lang.Comparable)[0];

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(r0, r1);

        r1 = (java.lang.Comparable[]) $r2;

        $r2 = (java.lang.Object[]) r1;

        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[])>($r2);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r1);

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[])>(r1);

        return $r3;
    }

    public static com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator, java.lang.Iterable)
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList $r3;
        java.util.Comparator r0;
        java.lang.Iterable r1;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable)>(r1);

        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[])>($r2);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, r0);

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[])>($r2);

        return $r3;
    }

    public final void add(int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.ImmutableList r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean addAll(int, java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.ImmutableList r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final com.google.common.collect.ImmutableList asList()
    {
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        return r0;
    }

    public boolean contains(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableList: int indexOf(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    int copyIntoArray(java.lang.Object[], int)
    {
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableList r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.google.common.collect.ImmutableList: int size()>();

        i3 = 0;

     label1:
        if i3 >= $i2 goto label2;

        $i1 = $i0 + i3;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i3);

        $r1[$i1] = $r2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i0 = $i0 + $i2;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableList r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.collect.Lists: boolean equalsImpl(java.util.List,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public int hashCode()
    {
        com.google.common.collect.ImmutableList r0;
        int i0, $i1, i2, $i3;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        i0 = 1;

        $i1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: int size()>();

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        i0 = i0 * 31;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(i2);

        $i3 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i0 = i0 + $i3;

        i0 = i0 ^ -1;

        i0 = i0 ^ -1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i0;
    }

    public int indexOf(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.google.common.collect.Lists: int indexOfImpl(java.util.List,java.lang.Object)>(r0, $r1);

        return $i0;
    }

    public com.google.common.collect.UnmodifiableIterator iterator()
    {
        com.google.common.collect.ImmutableList r0;
        com.google.common.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator()>();

        return $r1;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.google.common.collect.Lists: int lastIndexOfImpl(java.util.List,java.lang.Object)>(r0, $r1);

        return $i0;
    }

    public com.google.common.collect.UnmodifiableListIterator listIterator()
    {
        com.google.common.collect.ImmutableList r0;
        com.google.common.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator(int)>(0);

        return $r1;
    }

    public com.google.common.collect.UnmodifiableListIterator listIterator(int)
    {
        com.google.common.collect.ImmutableList r0;
        com.google.common.collect.ImmutableList$Itr $r1;
        com.google.common.collect.UnmodifiableListIterator r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: int size()>();

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i0, $i1);

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r2 = <com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator EMPTY_ITR>;

        return r2;

     label1:
        $r1 = new com.google.common.collect.ImmutableList$Itr;

        specialinvoke $r1.<com.google.common.collect.ImmutableList$Itr: void <init>(com.google.common.collect.ImmutableList,int)>(r0, $i0);

        return $r1;
    }

    public volatile java.util.ListIterator listIterator()
    {
        com.google.common.collect.ImmutableList r0;
        com.google.common.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator()>();

        return $r1;
    }

    public volatile java.util.ListIterator listIterator(int)
    {
        int $i0;
        com.google.common.collect.ImmutableList r0;
        com.google.common.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator(int)>($i0);

        return $r1;
    }

    public final java.lang.Object remove(int)
    {
        int $i0;
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public com.google.common.collect.ImmutableList reverse()
    {
        int $i0;
        com.google.common.collect.ImmutableList$ReverseImmutableList $r1;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableList: int size()>();

        if $i0 > 1 goto label1;

        return r0;

     label1:
        $r1 = new com.google.common.collect.ImmutableList$ReverseImmutableList;

        specialinvoke $r1.<com.google.common.collect.ImmutableList$ReverseImmutableList: void <init>(com.google.common.collect.ImmutableList)>(r0);

        return $r1;
    }

    public final java.lang.Object set(int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.ImmutableList r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public com.google.common.collect.ImmutableList subList(int, int)
    {
        com.google.common.collect.ImmutableList r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.google.common.collect.ImmutableList: int size()>();

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        $i2 = $i1 - $i0;

        $i3 = virtualinvoke r0.<com.google.common.collect.ImmutableList: int size()>();

        if $i2 != $i3 goto label1;

        return r0;

     label1:
        if $i2 != 0 goto label2;

        r0 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return r0;

     label2:
        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList subListUnchecked(int,int)>($i0, $i1);

        return r0;
    }

    public volatile java.util.List subList(int, int)
    {
        int $i0, $i1;
        com.google.common.collect.ImmutableList r0;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList subList(int,int)>($i1, $i0);

        return r0;
    }

    com.google.common.collect.ImmutableList subListUnchecked(int, int)
    {
        com.google.common.collect.ImmutableList r0;
        com.google.common.collect.ImmutableList$SubList $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new com.google.common.collect.ImmutableList$SubList;

        $i1 = $i1 - $i0;

        specialinvoke $r1.<com.google.common.collect.ImmutableList$SubList: void <init>(com.google.common.collect.ImmutableList,int,int)>(r0, $i0, $i1);

        return $r1;
    }

    java.lang.Object writeReplace()
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList r0;
        com.google.common.collect.ImmutableList$SerializedForm $r1;

        r0 := @this: com.google.common.collect.ImmutableList;

        $r1 = new com.google.common.collect.ImmutableList$SerializedForm;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableList: java.lang.Object[] toArray()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableList$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return $r1;
    }
}
