final class kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2 extends kotlin.jvm.internal.Lambda implements kotlin.jvm.functions.Function3
{
    final boolean $followLinks;

    void <init>(boolean)
    {
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2 r0;
        boolean $z0;

        r0 := @this: kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2;

        $z0 := @parameter0: boolean;

        r0.<kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2: boolean $followLinks> = $z0;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(3);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        kotlin.io.path.CopyActionResult $r4;
        kotlin.io.path.CopyActionContext $r5;
        java.lang.Object $r1, $r2, $r3;
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2 r0;
        java.nio.file.Path $r6, $r7;

        r0 := @this: kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r5 = (kotlin.io.path.CopyActionContext) $r1;

        $r6 = (java.nio.file.Path) $r2;

        $r7 = (java.nio.file.Path) $r3;

        $r4 = virtualinvoke r0.<kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2: kotlin.io.path.CopyActionResult invoke(kotlin.io.path.CopyActionContext,java.nio.file.Path,java.nio.file.Path)>($r5, $r6, $r7);

        return $r4;
    }

    public final kotlin.io.path.CopyActionResult invoke(kotlin.io.path.CopyActionContext, java.nio.file.Path, java.nio.file.Path)
    {
        java.nio.file.CopyOption[] $r11;
        java.lang.Object[] $r8;
        java.nio.file.StandardCopyOption $r10;
        kotlin.io.path.LinkFollowing r4;
        java.nio.file.LinkOption $r7;
        int i0;
        java.nio.file.Path $r2, $r3;
        boolean z0, $z1;
        kotlin.jvm.internal.SpreadBuilder $r9;
        java.nio.file.LinkOption[] $r5, r6;
        kotlin.io.path.CopyActionResult r12;
        kotlin.io.path.CopyActionContext $r1;
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2 r0;

        r0 := @this: kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2;

        $r1 := @parameter0: kotlin.io.path.CopyActionContext;

        $r2 := @parameter1: java.nio.file.Path;

        $r3 := @parameter2: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$copyToRecursively");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "src");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "dst");

        r4 = <kotlin.io.path.LinkFollowing: kotlin.io.path.LinkFollowing INSTANCE>;

        z0 = r0.<kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2: boolean $followLinks>;

        $r5 = virtualinvoke r4.<kotlin.io.path.LinkFollowing: java.nio.file.LinkOption[] toLinkOptions(boolean)>(z0);

        r6 = newarray (java.nio.file.LinkOption)[1];

        $r7 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        r6[0] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r6, 1);

        r6 = (java.nio.file.LinkOption[]) $r8;

        z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r3, r6);

        i0 = lengthof $r5;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, i0);

        r6 = (java.nio.file.LinkOption[]) $r8;

        i0 = lengthof r6;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r6, i0);

        r6 = (java.nio.file.LinkOption[]) $r8;

        $z1 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r2, r6);

        if $z1 == 0 goto label1;

        if z0 != 0 goto label3;

     label1:
        if z0 == 0 goto label2;

        staticinvoke <kotlin.io.path.PathsKt: void deleteRecursively(java.nio.file.Path)>($r3);

     label2:
        $r9 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r9.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(2);

        virtualinvoke $r9.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>($r5);

        $r10 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;

        virtualinvoke $r9.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>($r10);

        i0 = virtualinvoke $r9.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r11 = newarray (java.nio.file.CopyOption)[i0];

        $r8 = virtualinvoke $r9.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r11 = (java.nio.file.CopyOption[]) $r8;

        i0 = lengthof $r11;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r11, i0);

        $r11 = (java.nio.file.CopyOption[]) $r8;

        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r2, $r3, $r11);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "copy(this, target, *options)");

     label3:
        r12 = <kotlin.io.path.CopyActionResult: kotlin.io.path.CopyActionResult CONTINUE>;

        return r12;
    }
}
