final class kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered extends kotlinx.coroutines.channels.BufferedChannel
{
    final kotlinx.coroutines.channels.BroadcastChannelImpl this$0;

    public void <init>(kotlinx.coroutines.channels.BroadcastChannelImpl)
    {
        int $i0;
        kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered r0;
        kotlinx.coroutines.channels.BroadcastChannelImpl $r1;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered;

        $r1 := @parameter0: kotlinx.coroutines.channels.BroadcastChannelImpl;

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered: kotlinx.coroutines.channels.BroadcastChannelImpl this$0> = $r1;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.channels.BroadcastChannelImpl: int getCapacity()>();

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void <init>(int,kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker)>($i0, null, 2, null);

        return;
    }

    public boolean cancelImpl(java.lang.Throwable)
    {
        java.lang.Throwable $r1, $r6;
        java.util.concurrent.locks.ReentrantLock $r3;
        kotlinx.coroutines.channels.ReceiveChannel $r5;
        kotlinx.coroutines.channels.BroadcastChannelImpl $r2;
        kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered r0;
        java.util.concurrent.locks.Lock $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock access$getLock$p(kotlinx.coroutines.channels.BroadcastChannelImpl)>($r2);

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r5 = (kotlinx.coroutines.channels.ReceiveChannel) r0;

        staticinvoke <kotlinx.coroutines.channels.BroadcastChannelImpl: void access$removeSubscriber(kotlinx.coroutines.channels.BroadcastChannelImpl,kotlinx.coroutines.channels.ReceiveChannel)>($r2, $r5);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)>($r1);

     label2:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r6 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public volatile boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered: boolean cancelImpl(java.lang.Throwable)>($r1);

        return $z0;
    }
}
