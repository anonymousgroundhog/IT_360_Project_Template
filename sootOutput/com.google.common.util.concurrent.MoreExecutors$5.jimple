class com.google.common.util.concurrent.MoreExecutors$5 extends java.lang.Object implements java.util.concurrent.Executor
{
    final java.util.concurrent.Executor val$delegate;
    final com.google.common.util.concurrent.AbstractFuture val$future;

    void <init>(java.util.concurrent.Executor, com.google.common.util.concurrent.AbstractFuture)
    {
        java.util.concurrent.Executor $r1;
        com.google.common.util.concurrent.AbstractFuture $r2;
        com.google.common.util.concurrent.MoreExecutors$5 r0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$5;

        $r1 := @parameter0: java.util.concurrent.Executor;

        $r2 := @parameter1: com.google.common.util.concurrent.AbstractFuture;

        r0.<com.google.common.util.concurrent.MoreExecutors$5: java.util.concurrent.Executor val$delegate> = $r1;

        r0.<com.google.common.util.concurrent.MoreExecutors$5: com.google.common.util.concurrent.AbstractFuture val$future> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.RejectedExecutionException r4;
        java.util.concurrent.Executor r3;
        com.google.common.util.concurrent.MoreExecutors$5 r0;
        java.lang.Runnable $r1;
        com.google.common.util.concurrent.AbstractFuture $r2;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$5;

        $r1 := @parameter0: java.lang.Runnable;

        r3 = r0.<com.google.common.util.concurrent.MoreExecutors$5: java.util.concurrent.Executor val$delegate>;

     label1:
        interfaceinvoke r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

     label2:
        return;

     label3:
        r4 := @caughtexception;

        $r2 = r0.<com.google.common.util.concurrent.MoreExecutors$5: com.google.common.util.concurrent.AbstractFuture val$future>;

        virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>(r4);

        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }
}
