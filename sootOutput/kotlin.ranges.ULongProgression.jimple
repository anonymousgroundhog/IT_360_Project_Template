public class kotlin.ranges.ULongProgression extends java.lang.Object implements java.lang.Iterable, kotlin.jvm.internal.markers.KMappedMarker
{
    public static final kotlin.ranges.ULongProgression$Companion Companion;
    private final long first;
    private final long last;
    private final long step;

    static void <clinit>()
    {
        kotlin.ranges.ULongProgression$Companion $r0;

        $r0 = new kotlin.ranges.ULongProgression$Companion;

        specialinvoke $r0.<kotlin.ranges.ULongProgression$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.ranges.ULongProgression: kotlin.ranges.ULongProgression$Companion Companion> = $r0;

        return;
    }

    private void <init>(long, long, long)
    {
        kotlin.ranges.ULongProgression r0;
        byte $b3;
        long $l0, $l1, $l2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: kotlin.ranges.ULongProgression;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

        $b3 = $l2 cmp -9223372036854775808L;

        if $b3 == 0 goto label1;

        r0.<kotlin.ranges.ULongProgression: long first> = $l0;

        $l0 = staticinvoke <kotlin.internal.UProgressionUtilKt: long getProgressionLastElement-7ftBX0g(long,long,long)>($l0, $l1, $l2);

        r0.<kotlin.ranges.ULongProgression: long last> = $l0;

        r0.<kotlin.ranges.ULongProgression: long step> = $l2;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Step must be greater than Long.MIN_VALUE to avoid overflow on negation.");

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Step must be non-zero.");

        throw $r1;
    }

    public void <init>(long, long, long, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.ranges.ULongProgression r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        long $l0, $l1, $l2;

        r0 := @this: kotlin.ranges.ULongProgression;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.ranges.ULongProgression: void <init>(long,long,long)>($l0, $l1, $l2);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.ranges.ULongProgression r0, $r2;
        byte $b2;
        java.lang.Object $r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: kotlin.ranges.ULongProgression;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.ULongProgression;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<kotlin.ranges.ULongProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.ULongProgression) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.ULongProgression: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $l0 = r0.<kotlin.ranges.ULongProgression: long first>;

        $r2 = (kotlin.ranges.ULongProgression) $r1;

        $l1 = $r2.<kotlin.ranges.ULongProgression: long first>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $l0 = r0.<kotlin.ranges.ULongProgression: long last>;

        $r2 = (kotlin.ranges.ULongProgression) $r1;

        $l1 = $r2.<kotlin.ranges.ULongProgression: long last>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $l0 = r0.<kotlin.ranges.ULongProgression: long step>;

        r0 = (kotlin.ranges.ULongProgression) $r1;

        $l1 = r0.<kotlin.ranges.ULongProgression: long step>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public final long getFirst-s-VKNKU()
    {
        kotlin.ranges.ULongProgression r0;
        long l0;

        r0 := @this: kotlin.ranges.ULongProgression;

        l0 = r0.<kotlin.ranges.ULongProgression: long first>;

        return l0;
    }

    public final long getLast-s-VKNKU()
    {
        kotlin.ranges.ULongProgression r0;
        long l0;

        r0 := @this: kotlin.ranges.ULongProgression;

        l0 = r0.<kotlin.ranges.ULongProgression: long last>;

        return l0;
    }

    public final long getStep()
    {
        kotlin.ranges.ULongProgression r0;
        long l0;

        r0 := @this: kotlin.ranges.ULongProgression;

        l0 = r0.<kotlin.ranges.ULongProgression: long step>;

        return l0;
    }

    public int hashCode()
    {
        kotlin.ranges.ULongProgression r0;
        int $i2, $i3;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: kotlin.ranges.ULongProgression;

        $z0 = virtualinvoke r0.<kotlin.ranges.ULongProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $l0 = r0.<kotlin.ranges.ULongProgression: long first>;

        $l1 = r0.<kotlin.ranges.ULongProgression: long first>;

        $l1 = $l1 >>> 32;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        $l0 = $l0 ^ $l1;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        $i2 = (int) $l0;

        $i2 = $i2 * 31;

        $l0 = r0.<kotlin.ranges.ULongProgression: long last>;

        $l1 = r0.<kotlin.ranges.ULongProgression: long last>;

        $l1 = $l1 >>> 32;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        $l0 = $l0 ^ $l1;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        $i3 = (int) $l0;

        $i2 = $i2 + $i3;

        $i2 = $i2 * 31;

        $l0 = r0.<kotlin.ranges.ULongProgression: long step>;

        $l1 = r0.<kotlin.ranges.ULongProgression: long step>;

        $l1 = $l1 >>> 32;

        $l0 = $l0 ^ $l1;

        $i3 = (int) $l0;

        $i2 = $i3 + $i2;

        return $i2;
    }

    public boolean isEmpty()
    {
        kotlin.ranges.ULongProgression r0;
        byte $b0;
        int $i3;
        long $l1, $l2;

        r0 := @this: kotlin.ranges.ULongProgression;

        $l1 = r0.<kotlin.ranges.ULongProgression: long step>;

        $b0 = $l1 cmp 0L;

        $l1 = r0.<kotlin.ranges.ULongProgression: long first>;

        $l2 = r0.<kotlin.ranges.ULongProgression: long last>;

        $i3 = (int) $b0;

        if $i3 <= 0 goto label1;

        $i3 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport4: int m(long,long)>($l1, $l2);

        if $i3 <= 0 goto label3;

        goto label2;

     label1:
        $i3 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport4: int m(long,long)>($l1, $l2);

        if $i3 >= 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public final java.util.Iterator iterator()
    {
        kotlin.ranges.ULongProgression r0;
        java.util.Iterator $r2;
        kotlin.ranges.ULongProgressionIterator $r1;
        long $l0, $l1, $l2;

        r0 := @this: kotlin.ranges.ULongProgression;

        $r1 = new kotlin.ranges.ULongProgressionIterator;

        $l0 = r0.<kotlin.ranges.ULongProgression: long first>;

        $l1 = r0.<kotlin.ranges.ULongProgression: long last>;

        $l2 = r0.<kotlin.ranges.ULongProgression: long step>;

        specialinvoke $r1.<kotlin.ranges.ULongProgressionIterator: void <init>(long,long,long,kotlin.jvm.internal.DefaultConstructorMarker)>($l0, $l1, $l2, null);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }

    public java.lang.String toString()
    {
        kotlin.ranges.ULongProgression r0;
        byte $b0;
        int $i2;
        long $l1;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r2;

        r0 := @this: kotlin.ranges.ULongProgression;

        $l1 = r0.<kotlin.ranges.ULongProgression: long step>;

        $b0 = $l1 cmp 0L;

        $r3 = new java.lang.StringBuilder;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $l1 = r0.<kotlin.ranges.ULongProgression: long first>;

        $r2 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>($l1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $l1 = r0.<kotlin.ranges.ULongProgression: long last>;

        $r2 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" step ");

        $l1 = r0.<kotlin.ranges.ULongProgression: long step>;

        goto label2;

     label1:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $l1 = r0.<kotlin.ranges.ULongProgression: long first>;

        $r2 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>($l1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" downTo ");

        $l1 = r0.<kotlin.ranges.ULongProgression: long last>;

        $r2 = staticinvoke <kotlin.ULong: java.lang.String toString-impl(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" step ");

        $l1 = r0.<kotlin.ranges.ULongProgression: long step>;

        $l1 = neg $l1;

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
