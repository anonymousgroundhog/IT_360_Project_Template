final class kotlin.ranges.UIntProgressionIterator extends java.lang.Object implements java.util.Iterator, kotlin.jvm.internal.markers.KMappedMarker
{
    private final int finalElement;
    private boolean hasNext;
    private int next;
    private final int step;

    private void <init>(int, int, int)
    {
        kotlin.ranges.UIntProgressionIterator r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: kotlin.ranges.UIntProgressionIterator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.ranges.UIntProgressionIterator: int finalElement> = $i1;

        $z0 = 1;

        if $i2 <= 0 goto label1;

        $i1 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport5: int m(int,int)>($i0, $i1);

        if $i1 > 0 goto label3;

        goto label2;

     label1:
        $i1 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport5: int m(int,int)>($i0, $i1);

        if $i1 < 0 goto label3;

     label2:
        goto label4;

     label3:
        $z0 = 0;

     label4:
        r0.<kotlin.ranges.UIntProgressionIterator: boolean hasNext> = $z0;

        $i1 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i2);

        r0.<kotlin.ranges.UIntProgressionIterator: int step> = $i1;

        $z0 = r0.<kotlin.ranges.UIntProgressionIterator: boolean hasNext>;

        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $i0 = r0.<kotlin.ranges.UIntProgressionIterator: int finalElement>;

     label6:
        r0.<kotlin.ranges.UIntProgressionIterator: int next> = $i0;

        return;
    }

    public void <init>(int, int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.ranges.UIntProgressionIterator r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        int $i0, $i1, $i2;

        r0 := @this: kotlin.ranges.UIntProgressionIterator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.ranges.UIntProgressionIterator: void <init>(int,int,int)>($i0, $i1, $i2);

        return;
    }

    public boolean hasNext()
    {
        kotlin.ranges.UIntProgressionIterator r0;
        boolean z0;

        r0 := @this: kotlin.ranges.UIntProgressionIterator;

        z0 = r0.<kotlin.ranges.UIntProgressionIterator: boolean hasNext>;

        return z0;
    }

    public volatile java.lang.Object next()
    {
        int $i0;
        kotlin.UInt $r1;
        kotlin.ranges.UIntProgressionIterator r0;

        r0 := @this: kotlin.ranges.UIntProgressionIterator;

        $i0 = virtualinvoke r0.<kotlin.ranges.UIntProgressionIterator: int next-pVg5ArA()>();

        $r1 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        return $r1;
    }

    public int next-pVg5ArA()
    {
        kotlin.ranges.UIntProgressionIterator r0;
        int i0, $i1, $i2;
        java.util.NoSuchElementException $r1;
        boolean $z0;

        r0 := @this: kotlin.ranges.UIntProgressionIterator;

        i0 = r0.<kotlin.ranges.UIntProgressionIterator: int next>;

        $i1 = r0.<kotlin.ranges.UIntProgressionIterator: int finalElement>;

        if i0 != $i1 goto label2;

        $z0 = r0.<kotlin.ranges.UIntProgressionIterator: boolean hasNext>;

        if $z0 == 0 goto label1;

        r0.<kotlin.ranges.UIntProgressionIterator: boolean hasNext> = 0;

        return i0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label2:
        $i2 = r0.<kotlin.ranges.UIntProgressionIterator: int next>;

        $i1 = r0.<kotlin.ranges.UIntProgressionIterator: int step>;

        $i1 = $i2 + $i1;

        $i1 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i1);

        r0.<kotlin.ranges.UIntProgressionIterator: int next> = $i1;

        return i0;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.ranges.UIntProgressionIterator r0;

        r0 := @this: kotlin.ranges.UIntProgressionIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }
}
