public final class kotlinx.coroutines.channels.BroadcastChannelImpl extends kotlinx.coroutines.channels.BufferedChannel implements kotlinx.coroutines.channels.BroadcastChannel
{
    private final int capacity;
    private java.lang.Object lastConflatedElement;
    private final java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.HashMap onSendInternalResult;
    private java.util.List subscribers;

    public void <init>(int)
    {
        kotlinx.coroutines.internal.Symbol $r2;
        java.util.concurrent.locks.ReentrantLock $r5;
        java.util.HashMap $r6;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.lang.IllegalArgumentException $r8;
        java.util.List $r1;
        int $i0;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $i0 := @parameter0: int;

        $z0 = 0;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void <init>(int,kotlin.jvm.functions.Function1)>(0, null);

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity> = $i0;

        $i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity>;

        if $i0 >= 1 goto label1;

        $i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity>;

        if $i0 != -1 goto label2;

     label1:
        $z0 = 1;

     label2:
        if $z0 == 0 goto label3;

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock> = $r5;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers> = $r1;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_ELEMENT$p()>();

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement> = $r2;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.HashMap onSendInternalResult> = $r6;

        return;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BroadcastChannel capacity must be positive or Channel.CONFLATED, but ");

        $i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was specified");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r8;
    }

    public static final java.util.concurrent.locks.ReentrantLock access$getLock$p(kotlinx.coroutines.channels.BroadcastChannelImpl)
    {
        kotlinx.coroutines.channels.BroadcastChannelImpl $r0;
        java.util.concurrent.locks.ReentrantLock r1;

        $r0 := @parameter0: kotlinx.coroutines.channels.BroadcastChannelImpl;

        r1 = $r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        return r1;
    }

    public static final java.util.HashMap access$getOnSendInternalResult$p(kotlinx.coroutines.channels.BroadcastChannelImpl)
    {
        java.util.HashMap r1;
        kotlinx.coroutines.channels.BroadcastChannelImpl $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BroadcastChannelImpl;

        r1 = $r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.HashMap onSendInternalResult>;

        return r1;
    }

    public static final void access$removeSubscriber(kotlinx.coroutines.channels.BroadcastChannelImpl, kotlinx.coroutines.channels.ReceiveChannel)
    {
        kotlinx.coroutines.channels.BroadcastChannelImpl $r0;
        kotlinx.coroutines.channels.ReceiveChannel $r1;

        $r0 := @parameter0: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 := @parameter1: kotlinx.coroutines.channels.ReceiveChannel;

        specialinvoke $r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: void removeSubscriber(kotlinx.coroutines.channels.ReceiveChannel)>($r1);

        return;
    }

    public static void getValue$annotations()
    {
        return;
    }

    public static void getValueOrNull$annotations()
    {
        return;
    }

    private final void removeSubscriber(kotlinx.coroutines.channels.ReceiveChannel)
    {
        java.lang.Throwable $r12;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.Iterator $r8;
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        java.util.Collection r7;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.lang.Iterable $r5;
        java.util.ArrayList r6;
        java.util.concurrent.locks.Lock $r3;
        java.util.List $r4;
        kotlin.Unit $r11;
        java.lang.Object $r9;
        kotlinx.coroutines.channels.BufferedChannel r10;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 := @parameter0: kotlinx.coroutines.channels.ReceiveChannel;

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r5 = (java.lang.Iterable) $r4;

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        r7 = (java.util.Collection) r6;

        $r8 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label10;

     label04:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (kotlinx.coroutines.channels.BufferedChannel) $r9;

     label05:
        if r10 == $r1 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        if $z0 == 0 goto label02;

     label08:
        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r9);

     label09:
        goto label02;

     label10:
        $r4 = (java.util.List) r7;

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers> = $r4;

        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label11:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label12:
        $r12 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)
    {
        java.lang.Throwable $r1, $r10;
        kotlinx.coroutines.internal.Symbol $r9;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.Iterator $r6;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.lang.Iterable $r5;
        java.util.concurrent.locks.Lock $r3;
        java.util.List $r4;
        java.lang.Object $r7;
        kotlinx.coroutines.channels.BufferedChannel r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r5 = (java.lang.Iterable) $r4;

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label6;

     label4:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlinx.coroutines.channels.BufferedChannel) $r7;

        virtualinvoke r8.<kotlinx.coroutines.channels.BufferedChannel: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)>($r1);

     label5:
        goto label2;

     label6:
        $r9 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_ELEMENT$p()>();

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement> = $r9;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)>($r1);

     label7:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label8:
        $r10 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public boolean close(java.lang.Throwable)
    {
        java.lang.Throwable $r1, $r11;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.Iterator $r6;
        java.util.Collection r10;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.lang.Iterable $r5;
        java.util.ArrayList r9;
        java.util.concurrent.locks.Lock $r3;
        java.util.List $r4;
        java.lang.Object $r7;
        kotlinx.coroutines.channels.BufferedChannel r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r5 = (java.lang.Iterable) $r4;

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label06;

     label04:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlinx.coroutines.channels.BufferedChannel) $r7;

        virtualinvoke r8.<kotlinx.coroutines.channels.BufferedChannel: boolean close(java.lang.Throwable)>($r1);

     label05:
        goto label02;

     label06:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r5 = (java.lang.Iterable) $r4;

        r9 = new java.util.ArrayList;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        r10 = (java.util.Collection) r9;

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label08:
        if $z0 == 0 goto label13;

     label09:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlinx.coroutines.channels.BufferedChannel) $r7;

        $z0 = virtualinvoke r8.<kotlinx.coroutines.channels.BufferedChannel: boolean hasElements$kotlinx_coroutines_core()>();

     label10:
        if $z0 == 0 goto label07;

     label11:
        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>($r7);

     label12:
        goto label07;

     label13:
        $r4 = (java.util.List) r10;

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers> = $r4;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean close(java.lang.Throwable)>($r1);

     label14:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label15:
        $r11 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public final int getCapacity()
    {
        int i0;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity>;

        return i0;
    }

    public final java.lang.Object getValue()
    {
        java.lang.Throwable $r3, $r4;
        kotlinx.coroutines.internal.Symbol $r7;
        java.lang.IllegalStateException $r5;
        java.util.concurrent.locks.ReentrantLock $r1;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.util.concurrent.locks.Lock $r2;
        java.lang.Object $r6;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: boolean isClosedForSend()>();

     label02:
        if $z0 == 0 goto label07;

     label03:
        $r3 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Throwable getCloseCause()>();

     label04:
        $r4 = $r3;

        if $r3 != null goto label06;

     label05:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This broadcast channel is closed");

        $r4 = (java.lang.Throwable) $r5;

     label06:
        throw $r4;

     label07:
        $r6 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

        $r7 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_ELEMENT$p()>();

     label08:
        if $r6 == $r7 goto label11;

     label09:
        $r6 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

     label10:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r6;

     label11:
        $r5 = new java.lang.IllegalStateException;

     label12:
        $r8 = "No value";

     label13:
        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label14:
        $r3 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public final java.lang.Object getValueOrNull()
    {
        kotlinx.coroutines.internal.Symbol $r5;
        java.lang.Throwable $r6;
        java.util.concurrent.locks.ReentrantLock $r1;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.util.concurrent.locks.Lock $r2;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: boolean isClosedForReceive()>();

     label2:
        $r3 = null;

        if $z0 == 0 goto label3;

        goto label6;

     label3:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_ELEMENT$p()>();

     label4:
        if $r4 != $r5 goto label5;

        goto label6;

     label5:
        $r3 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

     label6:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r3;

     label7:
        $r6 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean isClosedForSend()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.locks.Lock $r2;
        java.util.concurrent.locks.ReentrantLock $r1;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForSend()>();

     label2:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public kotlinx.coroutines.channels.ReceiveChannel openSubscription()
    {
        kotlinx.coroutines.internal.Symbol $r5;
        java.lang.Throwable $r6;
        java.util.concurrent.locks.ReentrantLock $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r7;
        java.util.Collection $r9;
        kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberConflated $r10;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered $r11;
        java.util.concurrent.locks.Lock $r2;
        java.util.List $r8;
        int i0;
        java.lang.Object $r4;
        kotlinx.coroutines.channels.BufferedChannel r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r2 = (java.util.concurrent.locks.Lock) $r1;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity>;

     label02:
        if i0 != -1 goto label07;

     label03:
        $r10 = new kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberConflated;

     label04:
        r3 = $r10;

     label05:
        specialinvoke $r10.<kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberConflated: void <init>(kotlinx.coroutines.channels.BroadcastChannelImpl)>(r0);

     label06:
        goto label10;

     label07:
        $r11 = new kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered;

     label08:
        r3 = $r11;

     label09:
        specialinvoke $r11.<kotlinx.coroutines.channels.BroadcastChannelImpl$SubscriberBuffered: void <init>(kotlinx.coroutines.channels.BroadcastChannelImpl)>(r0);

     label10:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: boolean isClosedForSend()>();

     label11:
        if $z0 == 0 goto label16;

     label12:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_ELEMENT$p()>();

     label13:
        if $r4 != $r5 goto label16;

     label14:
        $r6 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Throwable getCloseCause()>();

        virtualinvoke r3.<kotlinx.coroutines.channels.BufferedChannel: boolean close(java.lang.Throwable)>($r6);

        $r7 = (kotlinx.coroutines.channels.ReceiveChannel) r3;

     label15:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r7;

     label16:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_ELEMENT$p()>();

     label17:
        if $r4 == $r5 goto label19;

     label18:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object getValue()>();

        virtualinvoke r3.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r4);

     label19:
        $r8 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r9 = (java.util.Collection) $r8;

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r9, r3);

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers> = $r8;

     label20:
        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        $r7 = (kotlinx.coroutines.channels.ReceiveChannel) r3;

        return $r7;

     label21:
        $r6 := @caughtexception;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label11 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label20 with label21;
    }

    protected void registerSelectForSend(kotlinx.coroutines.selects.SelectInstance, java.lang.Object)
    {
        java.lang.Throwable $r13;
        java.util.concurrent.locks.ReentrantLock $r3;
        kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2 $r11;
        java.util.HashMap r5;
        kotlin.jvm.functions.Function2 r12;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        kotlin.coroutines.CoroutineContext $r8;
        kotlinx.coroutines.CoroutineScope $r9;
        java.util.concurrent.locks.Lock $r4;
        kotlin.Unit $r7;
        kotlinx.coroutines.selects.SelectInstance $r1;
        kotlinx.coroutines.CoroutineStart $r10;
        java.lang.Object $r2, $r6;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        r5 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.HashMap onSendInternalResult>;

        $r6 = virtualinvoke r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

     label2:
        if $r6 == null goto label5;

     label3:
        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r6);

     label4:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label5:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label6:
        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        $r8 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: kotlin.coroutines.CoroutineContext getContext()>();

        $r9 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r8);

        $r10 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED>;

        $r11 = new kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2;

        specialinvoke $r11.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: void <init>(kotlinx.coroutines.channels.BroadcastChannelImpl,java.lang.Object,kotlinx.coroutines.selects.SelectInstance,kotlin.coroutines.Continuation)>(r0, $r2, $r1, null);

        r12 = (kotlin.jvm.functions.Function2) $r11;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r9, null, $r10, r12, 1, null);

        return;

     label7:
        $r13 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.Object send(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r15;
        java.lang.IllegalStateException $r17;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.lang.Iterable $r12;
        int $i0;
        java.lang.Boolean $r14;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.concurrent.locks.ReentrantLock $r9;
        kotlinx.coroutines.channels.BroadcastChannelImpl$send$1 $r3, $r4;
        java.util.concurrent.locks.Lock r10;
        java.util.List $r11;
        kotlin.Unit r16;
        java.lang.Object $r1, $r5, $r6, $r7;
        kotlinx.coroutines.channels.BufferedChannel $r13;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.channels.BroadcastChannelImpl$send$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.channels.BroadcastChannelImpl$send$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: int label> = $i0;

        goto label02;

     label01:
        $r4 = new kotlinx.coroutines.channels.BroadcastChannelImpl$send$1;

        $r3 = $r4;

        specialinvoke $r4.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: void <init>(kotlinx.coroutines.channels.BroadcastChannelImpl,kotlin.coroutines.Continuation)>(r0, $r2);

     label02:
        $r4 = $r3;

        $r5 = $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r7 = $r6;

        $i0 = $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label05;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r17;

     label04:
        $r1 = $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: java.lang.Object L$2>;

        $r8 = (java.util.Iterator) $r1;

        $r1 = $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: java.lang.Object L$1>;

        $r7 = $r3.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.BroadcastChannelImpl) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        goto label15;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        $r9 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        r10 = (java.util.concurrent.locks.Lock) $r9;

        interfaceinvoke r10.<java.util.concurrent.locks.Lock: void lock()>();

     label06:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: boolean isClosedForSend()>();

     label07:
        if $z0 != 0 goto label19;

     label08:
        $i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity>;

     label09:
        if $i0 != -1 goto label11;

     label10:
        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement> = $r1;

     label11:
        $r11 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

     label12:
        interfaceinvoke r10.<java.util.concurrent.locks.Lock: void unlock()>();

        $r12 = (java.lang.Iterable) $r11;

        $r8 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r5 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (kotlinx.coroutines.channels.BufferedChannel) $r5;

        $r4.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: java.lang.Object L$0> = r0;

        $r4.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: java.lang.Object L$1> = $r1;

        $r4.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: java.lang.Object L$2> = $r8;

        $r4.<kotlinx.coroutines.channels.BroadcastChannelImpl$send$1: int label> = 1;

        $r5 = virtualinvoke $r13.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendBroadcast$kotlinx_coroutines_core(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r4);

        if $r5 != $r7 goto label14;

        return $r7;

     label14:
        $r6 = $r7;

     label15:
        $r14 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label17;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: boolean isClosedForSend()>();

        if $z0 != 0 goto label16;

        goto label17;

     label16:
        $r15 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Throwable getSendException()>();

        throw $r15;

     label17:
        $r7 = $r6;

        goto label13;

     label18:
        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r16;

     label19:
        $r15 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Throwable getSendException()>();

        throw $r15;

     label20:
        $r15 := @caughtexception;

        interfaceinvoke r10.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r15;

        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label12 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.CharSequence $r8, $r9, $r10;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.lang.Iterable $r7;
        java.util.List $r6;
        java.lang.StringBuilder $r1, $r4;
        java.lang.Object $r2;
        java.lang.String $r5;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_ELEMENT$p()>();

        if $r2 == $r3 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CONFLATED_ELEMENT=");

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r5 = "";

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BROADCAST=<");

        $r5 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">; SUBSCRIBERS=");

        $r6 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r7 = (java.lang.Iterable) $r6;

        $r8 = (java.lang.CharSequence) ";";

        $r9 = (java.lang.CharSequence) "<";

        $r10 = (java.lang.CharSequence) ">";

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r7, $r8, $r9, $r10, 0, null, null, 56, null);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.Object trySend-JP2dKIU(java.lang.Object)
    {
        java.lang.Throwable $r12;
        kotlinx.coroutines.channels.ChannelResult$Companion $r10;
        kotlinx.coroutines.channels.BroadcastChannelImpl r0;
        java.lang.Iterable $r5;
        int $i0;
        boolean $z0, $z1;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.Iterator $r7;
        java.util.Collection $r6;
        java.util.concurrent.locks.Lock $r3;
        java.util.List $r4;
        kotlin.Unit $r11;
        java.lang.Object $r1, $r8;
        kotlinx.coroutines.channels.BufferedChannel r9;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = (java.util.concurrent.locks.Lock) $r2;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: boolean isClosedForSend()>();

     label02:
        if $z0 == 0 goto label05;

     label03:
        $r1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r1);

     label04:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label05:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r5 = (java.lang.Iterable) $r4;

        $z1 = $r5 instanceof java.util.Collection;

     label06:
        $z0 = 0;

        if $z1 == 0 goto label09;

     label07:
        $r6 = (java.util.Collection) $r5;

        $z1 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

     label08:
        if $z1 == 0 goto label09;

        goto label14;

     label09:
        $r7 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label11:
        if $z1 == 0 goto label14;

     label12:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kotlinx.coroutines.channels.BufferedChannel) $r8;

        $z1 = virtualinvoke r9.<kotlinx.coroutines.channels.BufferedChannel: boolean shouldSendSuspend$kotlinx_coroutines_core()>();

     label13:
        if $z1 == 0 goto label10;

        $z0 = 1;

        goto label14;

     label14:
        if $z0 == 0 goto label17;

     label15:
        $r10 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r1 = virtualinvoke $r10.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object failure-PtdJZtk()>();

     label16:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label17:
        $i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: int capacity>;

     label18:
        if $i0 != -1 goto label20;

     label19:
        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object lastConflatedElement> = $r1;

     label20:
        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.List subscribers>;

        $r5 = (java.lang.Iterable) $r4;

        $r7 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label21:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label22:
        if $z0 == 0 goto label25;

     label23:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kotlinx.coroutines.channels.BufferedChannel) $r8;

        virtualinvoke r9.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>($r1);

     label24:
        goto label21;

     label25:
        $r10 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r1 = virtualinvoke $r10.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r11);

     label26:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r1;

     label27:
        $r12 := @caughtexception;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.lang.Throwable from label05 to label06 with label27;
        catch java.lang.Throwable from label07 to label08 with label27;
        catch java.lang.Throwable from label09 to label11 with label27;
        catch java.lang.Throwable from label12 to label13 with label27;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label22 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
    }
}
