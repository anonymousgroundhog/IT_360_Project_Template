public final class kotlin.random.Random$Default extends kotlin.random.Random implements java.io.Serializable
{

    private void <init>()
    {
        kotlin.random.Random$Default r0;

        r0 := @this: kotlin.random.Random$Default;

        specialinvoke r0.<kotlin.random.Random: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        kotlin.random.Random$Default r0;

        r0 := @this: kotlin.random.Random$Default;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.random.Random$Default: void <init>()>();

        return;
    }

    private final java.lang.Object writeReplace()
    {
        kotlin.random.Random$Default$Serialized r1;
        kotlin.random.Random$Default r0;

        r0 := @this: kotlin.random.Random$Default;

        r1 = <kotlin.random.Random$Default$Serialized: kotlin.random.Random$Default$Serialized INSTANCE>;

        return r1;
    }

    public int nextBits(int)
    {
        int $i0;
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextBits(int)>($i0);

        return $i0;
    }

    public boolean nextBoolean()
    {
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;
        boolean $z0;

        r0 := @this: kotlin.random.Random$Default;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $z0 = virtualinvoke $r1.<kotlin.random.Random: boolean nextBoolean()>();

        return $z0;
    }

    public byte[] nextBytes(int)
    {
        byte[] $r2;
        kotlin.random.Random$Default r0;
        int $i0;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $r2 = virtualinvoke $r1.<kotlin.random.Random: byte[] nextBytes(int)>($i0);

        return $r2;
    }

    public byte[] nextBytes(byte[])
    {
        byte[] $r1;
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r2;

        r0 := @this: kotlin.random.Random$Default;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r2 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $r1 = virtualinvoke $r2.<kotlin.random.Random: byte[] nextBytes(byte[])>($r1);

        return $r1;
    }

    public byte[] nextBytes(byte[], int, int)
    {
        byte[] $r1;
        kotlin.random.Random$Default r0;
        int $i0, $i1;
        kotlin.random.Random $r2;

        r0 := @this: kotlin.random.Random$Default;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r2 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $r1 = virtualinvoke $r2.<kotlin.random.Random: byte[] nextBytes(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }

    public double nextDouble()
    {
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;
        double $d0;

        r0 := @this: kotlin.random.Random$Default;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $d0 = virtualinvoke $r1.<kotlin.random.Random: double nextDouble()>();

        return $d0;
    }

    public double nextDouble(double)
    {
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;
        double $d0;

        r0 := @this: kotlin.random.Random$Default;

        $d0 := @parameter0: double;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $d0 = virtualinvoke $r1.<kotlin.random.Random: double nextDouble(double)>($d0);

        return $d0;
    }

    public double nextDouble(double, double)
    {
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;
        double $d0, $d1;

        r0 := @this: kotlin.random.Random$Default;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $d0 = virtualinvoke $r1.<kotlin.random.Random: double nextDouble(double,double)>($d0, $d1);

        return $d0;
    }

    public float nextFloat()
    {
        float $f0;
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $f0 = virtualinvoke $r1.<kotlin.random.Random: float nextFloat()>();

        return $f0;
    }

    public int nextInt()
    {
        int $i0;
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt()>();

        return $i0;
    }

    public int nextInt(int)
    {
        int $i0;
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0);

        return $i0;
    }

    public int nextInt(int, int)
    {
        kotlin.random.Random$Default r0;
        int $i0, $i1;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int,int)>($i0, $i1);

        return $i0;
    }

    public long nextLong()
    {
        long $l0;
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $l0 = virtualinvoke $r1.<kotlin.random.Random: long nextLong()>();

        return $l0;
    }

    public long nextLong(long)
    {
        long $l0;
        kotlin.random.Random$Default r0;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $l0 = virtualinvoke $r1.<kotlin.random.Random: long nextLong(long)>($l0);

        return $l0;
    }

    public long nextLong(long, long)
    {
        kotlin.random.Random$Default r0;
        long $l0, $l1;
        kotlin.random.Random $r1;

        r0 := @this: kotlin.random.Random$Default;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>();

        $l0 = virtualinvoke $r1.<kotlin.random.Random: long nextLong(long,long)>($l0, $l1);

        return $l0;
    }
}
