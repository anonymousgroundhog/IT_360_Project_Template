public class kotlinx.coroutines.sync.SemaphoreImpl extends java.lang.Object implements kotlinx.coroutines.sync.Semaphore
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater deqIdx$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater enqIdx$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater head$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater tail$FU;
    private volatile int _availablePermits;
    private volatile long deqIdx;
    private volatile long enqIdx;
    private volatile java.lang.Object head;
    private final kotlin.jvm.functions.Function1 onCancellationRelease;
    private final int permits;
    private volatile java.lang.Object tail;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", class "Ljava/lang/Object;", "head");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater head$FU> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", "deqIdx");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater deqIdx$FU> = $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", class "Ljava/lang/Object;", "tail");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater tail$FU> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", "enqIdx");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater enqIdx$FU> = $r1;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/SemaphoreImpl;", "_availablePermits");

        <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU> = $r2;

        return;
    }

    public void <init>(int, int)
    {
        kotlin.jvm.functions.Function1 r3;
        java.lang.IllegalArgumentException $r6;
        kotlinx.coroutines.sync.SemaphoreSegment r1;
        kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1 r2;
        int $i0, $i1;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0, z1;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits> = $i0;

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        $z0 = 1;

        if $i0 <= 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == 0 goto label6;

        if $i1 < 0 goto label3;

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        if $i1 > $i0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        r1 = new kotlinx.coroutines.sync.SemaphoreSegment;

        specialinvoke r1.<kotlinx.coroutines.sync.SemaphoreSegment: void <init>(long,kotlinx.coroutines.sync.SemaphoreSegment,int)>(0L, null, 2);

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object head> = r1;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object tail> = r1;

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        $i0 = $i0 - $i1;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: int _availablePermits> = $i0;

        r2 = new kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1;

        specialinvoke r2.<kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1: void <init>(kotlinx.coroutines.sync.SemaphoreImpl)>(r0);

        r3 = (kotlin.jvm.functions.Function1) r2;

        r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease> = r3;

        return;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The number of acquired permits should be in 0..");

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Semaphore should have at least 1 permit, but had ");

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;
    }

    public static final java.lang.Object access$acquireSlowPath(kotlinx.coroutines.sync.SemaphoreImpl, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.SemaphoreImpl $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object acquireSlowPath(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final boolean access$addAcquireToQueue(kotlinx.coroutines.sync.SemaphoreImpl, kotlinx.coroutines.Waiter)
    {
        kotlinx.coroutines.sync.SemaphoreImpl $r0;
        kotlinx.coroutines.Waiter $r1;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter1: kotlinx.coroutines.Waiter;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.sync.SemaphoreImpl: boolean addAcquireToQueue(kotlinx.coroutines.Waiter)>($r1);

        return $z0;
    }

    private final void acquire(java.lang.Object, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r2, $r3;
        int $i0;
        java.lang.Boolean $r5;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.Object $r1, $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

     label1:
        $i0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: int decPermits()>();

        if $i0 <= 0 goto label2;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        return;

     label2:
        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return;
    }

    static java.lang.Object acquire$suspendImpl(kotlinx.coroutines.sync.SemaphoreImpl, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.Unit r4;
        int $i0;
        kotlinx.coroutines.sync.SemaphoreImpl $r0;
        java.lang.Object $r2, $r3;

        $r0 := @parameter0: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $i0 = specialinvoke $r0.<kotlinx.coroutines.sync.SemaphoreImpl: int decPermits()>();

        if $i0 <= 0 goto label1;

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;

     label1:
        $r2 = specialinvoke $r0.<kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object acquireSlowPath(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r2 != $r3 goto label2;

        return $r2;

     label2:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    private final java.lang.Object acquireSlowPath(kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r8;
        kotlin.coroutines.Continuation $r1, $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r3;
        kotlinx.coroutines.Waiter $r4;
        kotlin.Unit r9;
        kotlinx.coroutines.CancellableContinuation $r5;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.Object $r6, $r7;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r2);

     label1:
        $r4 = (kotlinx.coroutines.Waiter) $r3;

        $z0 = staticinvoke <kotlinx.coroutines.sync.SemaphoreImpl: boolean access$addAcquireToQueue(kotlinx.coroutines.sync.SemaphoreImpl,kotlinx.coroutines.Waiter)>(r0, $r4);

     label2:
        if $z0 != 0 goto label4;

     label3:
        $r5 = (kotlinx.coroutines.CancellableContinuation) $r3;

        virtualinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: void acquire(kotlinx.coroutines.CancellableContinuation)>($r5);

     label4:
        $r6 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r7 goto label5;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label5:
        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r7 goto label6;

        return $r6;

     label6:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;

     label7:
        r8 := @caughtexception;

        virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    private final boolean addAcquireToQueue(kotlinx.coroutines.Waiter)
    {
        java.lang.IllegalStateException $r22;
        long $l2, l3, l4, l5;
        kotlinx.coroutines.sync.SemaphoreImpl$addAcquireToQueue$createNewSegment$1 r6;
        java.lang.AssertionError $r23;
        kotlinx.coroutines.internal.Segment r8, r11;
        kotlinx.coroutines.sync.SemaphoreSegment r4;
        java.util.concurrent.atomic.AtomicReferenceArray $r12;
        byte $b1;
        kotlinx.coroutines.selects.SelectInstance r18;
        kotlin.reflect.KFunction r7;
        int i0;
        java.lang.String $r20;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r13, $r14;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r5;
        kotlin.jvm.functions.Function1 r17;
        kotlin.jvm.functions.Function2 r9;
        kotlinx.coroutines.Waiter $r1;
        kotlin.Unit $r16;
        kotlinx.coroutines.CancellableContinuation r15;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.Object $r3, $r10;
        java.lang.StringBuilder $r19, $r21;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: kotlinx.coroutines.Waiter;

        r2 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater tail$FU>;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (kotlinx.coroutines.sync.SemaphoreSegment) $r3;

        r5 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater enqIdx$FU>;

        $l2 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        r6 = <kotlinx.coroutines.sync.SemaphoreImpl$addAcquireToQueue$createNewSegment$1: kotlinx.coroutines.sync.SemaphoreImpl$addAcquireToQueue$createNewSegment$1 INSTANCE>;

        r7 = (kotlin.reflect.KFunction) r6;

        r2 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater tail$FU>;

        i0 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        l3 = (long) i0;

        l4 = $l2 / l3;

     label01:
        r8 = (kotlinx.coroutines.internal.Segment) r4;

        r9 = (kotlin.jvm.functions.Function2) r7;

        $r3 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment,long,kotlin.jvm.functions.Function2)>(r8, l4, r9);

        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r3);

        if $z0 != 0 goto label10;

        r8 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r3);

     label02:
        $r10 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r11 = (kotlinx.coroutines.internal.Segment) $r10;

        l3 = r11.<kotlinx.coroutines.internal.Segment: long id>;

        l5 = r8.<kotlinx.coroutines.internal.Segment: long id>;

        $b1 = l3 cmp l5;

        i0 = (int) $b1;

        if i0 < 0 goto label03;

        $z0 = 1;

        goto label06;

     label03:
        $z0 = virtualinvoke r8.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label04;

        $z0 = 0;

        goto label06;

     label04:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, r11, r8);

        if $z0 == 0 goto label08;

        $z0 = virtualinvoke r11.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label05;

        virtualinvoke r11.<kotlinx.coroutines.internal.Segment: void remove()>();

     label05:
        $z0 = 1;

     label06:
        if $z0 == 0 goto label07;

        goto label10;

     label07:
        goto label01;

     label08:
        $z0 = virtualinvoke r8.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label09;

        virtualinvoke r8.<kotlinx.coroutines.internal.Segment: void remove()>();

     label09:
        goto label02;

     label10:
        r8 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r3);

        r4 = (kotlinx.coroutines.sync.SemaphoreSegment) r8;

        i0 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        l3 = (long) i0;

        $l2 = $l2 % l3;

        i0 = (int) $l2;

        $r12 = virtualinvoke r4.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray getAcquirers()>();

        $z0 = staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r12, i0, null, $r1);

        if $z0 == 0 goto label11;

        r8 = (kotlinx.coroutines.internal.Segment) r4;

        interfaceinvoke $r1.<kotlinx.coroutines.Waiter: void invokeOnCancellation(kotlinx.coroutines.internal.Segment,int)>(r8, i0);

        return 1;

     label11:
        $r13 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getPERMIT$p()>();

        $r14 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getTAKEN$p()>();

        $r12 = virtualinvoke r4.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray getAcquirers()>();

        $z0 = staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r12, i0, $r13, $r14);

        if $z0 == 0 goto label15;

        $z0 = $r1 instanceof kotlinx.coroutines.CancellableContinuation;

        if $z0 == 0 goto label12;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.CancellableContinuation<kotlin.Unit>");

        r15 = (kotlinx.coroutines.CancellableContinuation) $r1;

        r15 = (kotlinx.coroutines.CancellableContinuation) $r1;

        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r17 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease>;

        interfaceinvoke r15.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r16, r17);

        goto label13;

     label12:
        $z0 = $r1 instanceof kotlinx.coroutines.selects.SelectInstance;

        if $z0 == 0 goto label14;

        r18 = (kotlinx.coroutines.selects.SelectInstance) $r1;

        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        interfaceinvoke r18.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r16);

     label13:
        return 1;

     label14:
        $r22 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected: ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r22;

     label15:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label19;

        $r12 = virtualinvoke r4.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray getAcquirers()>();

        $r3 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i0);

        $r13 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getBROKEN$p()>();

        if $r3 != $r13 goto label16;

        $z0 = 1;

        goto label17;

     label16:
        $z0 = 0;

     label17:
        if $z0 == 0 goto label18;

        goto label19;

     label18:
        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label19:
        return 0;
    }

    private final void coerceAvailablePermitsAtMaximum()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1;
        int $i0, $i1;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

     label1:
        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        if $i1 <= $i0 goto label2;

        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        $z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i0);

        if $z0 == 0 goto label1;

     label2:
        return;
    }

    private final int decPermits()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1;
        int $i0, $i1;
        kotlinx.coroutines.sync.SemaphoreImpl r0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

     label1:
        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndDecrement(java.lang.Object)>(r0);

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        if $i1 > $i0 goto label1;

        return $i1;
    }

    private final boolean tryResumeAcquire(java.lang.Object)
    {
        java.lang.IllegalStateException r7;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.Unit $r4;
        kotlinx.coroutines.CancellableContinuation r3;
        kotlinx.coroutines.selects.SelectInstance r6;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.Object $r1, $r5;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        boolean z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: java.lang.Object;

        z0 = $r1 instanceof kotlinx.coroutines.CancellableContinuation;

        if z0 == 0 goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.CancellableContinuation<kotlin.Unit>");

        r3 = (kotlinx.coroutines.CancellableContinuation) $r1;

        r3 = (kotlinx.coroutines.CancellableContinuation) $r1;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r2 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease>;

        $r5 = interfaceinvoke r3.<kotlinx.coroutines.CancellableContinuation: java.lang.Object tryResume(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r4, null, $r2);

        if $r5 == null goto label1;

        r3 = (kotlinx.coroutines.CancellableContinuation) $r1;

        interfaceinvoke r3.<kotlinx.coroutines.CancellableContinuation: void completeResume(java.lang.Object)>($r5);

        return 1;

     label1:
        return 0;

     label2:
        z0 = $r1 instanceof kotlinx.coroutines.selects.SelectInstance;

        if z0 == 0 goto label3;

        r6 = (kotlinx.coroutines.selects.SelectInstance) $r1;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        z0 = interfaceinvoke r6.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect(java.lang.Object,java.lang.Object)>(r0, $r4);

        return z0;

     label3:
        r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw r7;
    }

    private final boolean tryResumeNextFromQueue()
    {
        long $l0, l1, l3, l4;
        kotlinx.coroutines.internal.Segment r7, r10;
        kotlinx.coroutines.sync.SemaphoreSegment r3;
        java.util.concurrent.atomic.AtomicReferenceArray $r12;
        byte b5;
        kotlin.reflect.KFunction r6;
        int $i2, $i6, $i7;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r11, $r13;
        kotlinx.coroutines.sync.SemaphoreImpl$tryResumeNextFromQueue$createNewSegment$1 r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r4;
        kotlin.jvm.functions.Function2 r8;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.Object $r2, $r9;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater head$FU>;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (kotlinx.coroutines.sync.SemaphoreSegment) $r2;

        r4 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicLongFieldUpdater deqIdx$FU>;

        $l0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        l1 = $l0;

        $i2 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        l3 = (long) $i2;

        $l0 = $l0 / l3;

        r5 = <kotlinx.coroutines.sync.SemaphoreImpl$tryResumeNextFromQueue$createNewSegment$1: kotlinx.coroutines.sync.SemaphoreImpl$tryResumeNextFromQueue$createNewSegment$1 INSTANCE>;

        r6 = (kotlin.reflect.KFunction) r5;

        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater head$FU>;

     label01:
        r7 = (kotlinx.coroutines.internal.Segment) r3;

        r8 = (kotlin.jvm.functions.Function2) r6;

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment,long,kotlin.jvm.functions.Function2)>(r7, $l0, r8);

        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r2);

        $i2 = 0;

        if $z0 != 0 goto label10;

        r7 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r2);

     label02:
        $r9 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r10 = (kotlinx.coroutines.internal.Segment) $r9;

        l3 = r10.<kotlinx.coroutines.internal.Segment: long id>;

        l4 = r7.<kotlinx.coroutines.internal.Segment: long id>;

        b5 = l3 cmp l4;

        $i6 = (int) b5;

        if $i6 < 0 goto label03;

        $z0 = 1;

        goto label06;

     label03:
        $z0 = virtualinvoke r7.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label04;

        $z0 = 0;

        goto label06;

     label04:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r0, r10, r7);

        if $z0 == 0 goto label08;

        $z0 = virtualinvoke r10.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label05;

        virtualinvoke r10.<kotlinx.coroutines.internal.Segment: void remove()>();

     label05:
        $z0 = 1;

     label06:
        if $z0 == 0 goto label07;

        goto label10;

     label07:
        goto label01;

     label08:
        $z0 = virtualinvoke r7.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label09;

        virtualinvoke r7.<kotlinx.coroutines.internal.Segment: void remove()>();

     label09:
        goto label02;

     label10:
        r7 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r2);

        r3 = (kotlinx.coroutines.sync.SemaphoreSegment) r7;

        virtualinvoke r3.<kotlinx.coroutines.sync.SemaphoreSegment: void cleanPrev()>();

        l3 = r3.<kotlinx.coroutines.sync.SemaphoreSegment: long id>;

        b5 = l3 cmp $l0;

        $i6 = (int) b5;

        if $i6 <= 0 goto label11;

        return 0;

     label11:
        $i6 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getSEGMENT_SIZE$p()>();

        $l0 = (long) $i6;

        $l0 = l1 % $l0;

        $i6 = (int) $l0;

        $r11 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getPERMIT$p()>();

        $r12 = virtualinvoke r3.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray getAcquirers()>();

        $r2 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i6, $r11);

        if $r2 != null goto label15;

        $i7 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: int access$getMAX_SPIN_CYCLES$p()>();

     label12:
        if $i2 >= $i7 goto label14;

        $r12 = virtualinvoke r3.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray getAcquirers()>();

        $r2 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i6);

        $r11 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getTAKEN$p()>();

        if $r2 != $r11 goto label13;

        return 1;

     label13:
        $i2 = $i2 + 1;

        goto label12;

     label14:
        $r11 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getPERMIT$p()>();

        $r13 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getBROKEN$p()>();

        $r12 = virtualinvoke r3.<kotlinx.coroutines.sync.SemaphoreSegment: java.util.concurrent.atomic.AtomicReferenceArray getAcquirers()>();

        $z0 = staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r12, $i6, $r11, $r13);

        $z0 = $z0 ^ 1;

        return $z0;

     label15:
        $r11 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol access$getCANCELLED$p()>();

        if $r2 != $r11 goto label16;

        return 0;

     label16:
        $z0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: boolean tryResumeAcquire(java.lang.Object)>($r2);

        return $z0;
    }

    public java.lang.Object acquire(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object acquire$suspendImpl(kotlinx.coroutines.sync.SemaphoreImpl,kotlin.coroutines.Continuation)>(r0, $r1);

        return $r2;
    }

    protected final void acquire(kotlinx.coroutines.CancellableContinuation)
    {
        kotlin.Unit $r3;
        kotlinx.coroutines.Waiter $r4;
        kotlinx.coroutines.CancellableContinuation $r1;
        int $i0;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        kotlin.jvm.functions.Function1 $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuation;

     label1:
        $i0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: int decPermits()>();

        if $i0 <= 0 goto label2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r2 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: kotlin.jvm.functions.Function1 onCancellationRelease>;

        interfaceinvoke $r1.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r3, $r2);

        return;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.Waiter");

        $r4 = (kotlinx.coroutines.Waiter) $r1;

        $z0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: boolean addAcquireToQueue(kotlinx.coroutines.Waiter)>($r4);

        if $z0 == 0 goto label1;

        return;
    }

    public int getAvailablePermits()
    {
        int $i0;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 0);

        return $i0;
    }

    protected final void onAcquireRegFunction(kotlinx.coroutines.selects.SelectInstance, java.lang.Object)
    {
        kotlin.Unit $r3;
        kotlinx.coroutines.Waiter $r4;
        kotlinx.coroutines.selects.SelectInstance $r1;
        int $i0;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 := @parameter1: java.lang.Object;

     label1:
        $i0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: int decPermits()>();

        if $i0 <= 0 goto label2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r3);

        return;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.Waiter");

        $r4 = (kotlinx.coroutines.Waiter) $r1;

        $z0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: boolean addAcquireToQueue(kotlinx.coroutines.Waiter)>($r4);

        if $z0 == 0 goto label1;

        return;
    }

    public void release()
    {
        java.lang.IllegalStateException $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1;
        int $i0, $i1;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

     label1:
        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndIncrement(java.lang.Object)>(r0);

        $i1 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        if $i0 >= $i1 goto label3;

        if $i0 < 0 goto label2;

        return;

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: boolean tryResumeNextFromQueue()>();

        if $z0 == 0 goto label1;

        return;

     label3:
        specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: void coerceAvailablePermitsAtMaximum()>();

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The number of released permits cannot be greater than ");

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    public boolean tryAcquire()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1;
        int $i0, $i1;
        kotlinx.coroutines.sync.SemaphoreImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.SemaphoreImpl;

     label1:
        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i0 = r0.<kotlinx.coroutines.sync.SemaphoreImpl: int permits>;

        if $i1 <= $i0 goto label2;

        specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: void coerceAvailablePermitsAtMaximum()>();

        goto label1;

     label2:
        if $i1 > 0 goto label3;

        return 0;

     label3:
        r1 = <kotlinx.coroutines.sync.SemaphoreImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _availablePermits$FU>;

        $i0 = $i1 + -1;

        $z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i0);

        if $z0 == 0 goto label1;

        return 1;
    }
}
