public abstract class androidx.work.impl.utils.CancelWorkRunnable extends java.lang.Object implements java.lang.Runnable
{
    private final androidx.work.impl.OperationImpl mOperation;

    public void <init>()
    {
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.OperationImpl $r1;

        r0 := @this: androidx.work.impl.utils.CancelWorkRunnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new androidx.work.impl.OperationImpl;

        specialinvoke $r1.<androidx.work.impl.OperationImpl: void <init>()>();

        r0.<androidx.work.impl.utils.CancelWorkRunnable: androidx.work.impl.OperationImpl mOperation> = $r1;

        return;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forAll(androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.utils.CancelWorkRunnable$4 $r1;
        androidx.work.impl.WorkManagerImpl $r0;

        $r0 := @parameter0: androidx.work.impl.WorkManagerImpl;

        $r1 = new androidx.work.impl.utils.CancelWorkRunnable$4;

        specialinvoke $r1.<androidx.work.impl.utils.CancelWorkRunnable$4: void <init>(androidx.work.impl.WorkManagerImpl)>($r0);

        return $r1;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forId(java.util.UUID, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.WorkManagerImpl $r1;
        androidx.work.impl.utils.CancelWorkRunnable$1 $r2;
        java.util.UUID $r0;

        $r0 := @parameter0: java.util.UUID;

        $r1 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r2 = new androidx.work.impl.utils.CancelWorkRunnable$1;

        specialinvoke $r2.<androidx.work.impl.utils.CancelWorkRunnable$1: void <init>(androidx.work.impl.WorkManagerImpl,java.util.UUID)>($r1, $r0);

        return $r2;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forName(java.lang.String, androidx.work.impl.WorkManagerImpl, boolean)
    {
        androidx.work.impl.utils.CancelWorkRunnable$3 $r2;
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $z0 := @parameter2: boolean;

        $r2 = new androidx.work.impl.utils.CancelWorkRunnable$3;

        specialinvoke $r2.<androidx.work.impl.utils.CancelWorkRunnable$3: void <init>(androidx.work.impl.WorkManagerImpl,java.lang.String,boolean)>($r1, $r0, $z0);

        return $r2;
    }

    public static androidx.work.impl.utils.CancelWorkRunnable forTag(java.lang.String, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.String $r0;
        androidx.work.impl.utils.CancelWorkRunnable$2 $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r2 = new androidx.work.impl.utils.CancelWorkRunnable$2;

        specialinvoke $r2.<androidx.work.impl.utils.CancelWorkRunnable$2: void <init>(androidx.work.impl.WorkManagerImpl,java.lang.String)>($r1, $r0);

        return $r2;
    }

    private void iterativelyCancelWorkAndDependents(androidx.work.impl.WorkDatabase, java.lang.String)
    {
        androidx.work.impl.model.WorkSpecDao $r4;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        java.lang.String[] $r9;
        androidx.work.impl.model.DependencyDao $r5;
        java.util.List $r10;
        androidx.work.impl.WorkDatabase $r1;
        androidx.work.WorkInfo$State $r7, $r8;
        java.lang.Object $r6;
        java.lang.String $r2;
        java.util.LinkedList r3;
        boolean $z0;

        r0 := @this: androidx.work.impl.utils.CancelWorkRunnable;

        $r1 := @parameter0: androidx.work.impl.WorkDatabase;

        $r2 := @parameter1: java.lang.String;

        $r4 = virtualinvoke $r1.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        $r5 = virtualinvoke $r1.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.DependencyDao dependencyDao()>();

        r3 = new java.util.LinkedList;

        specialinvoke r3.<java.util.LinkedList: void <init>()>();

        virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r2);

     label1:
        $z0 = virtualinvoke r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r6 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object remove()>();

        $r2 = (java.lang.String) $r6;

        $r7 = interfaceinvoke $r4.<androidx.work.impl.model.WorkSpecDao: androidx.work.WorkInfo$State getState(java.lang.String)>($r2);

        $r8 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State SUCCEEDED>;

        if $r7 == $r8 goto label2;

        $r8 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State FAILED>;

        if $r7 == $r8 goto label2;

        $r7 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State CANCELLED>;

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = $r2;

        interfaceinvoke $r4.<androidx.work.impl.model.WorkSpecDao: int setState(androidx.work.WorkInfo$State,java.lang.String[])>($r7, $r9);

     label2:
        $r10 = interfaceinvoke $r5.<androidx.work.impl.model.DependencyDao: java.util.List getDependentWorkIds(java.lang.String)>($r2);

        virtualinvoke r3.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r10);

        goto label1;

     label3:
        return;
    }

    void cancel(androidx.work.impl.WorkManagerImpl, java.lang.String)
    {
        java.util.Iterator $r6;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.Processor $r4;
        java.util.List $r5;
        androidx.work.impl.WorkDatabase $r3;
        androidx.work.impl.Scheduler r8;
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.Object $r7;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: androidx.work.impl.utils.CancelWorkRunnable;

        $r1 := @parameter0: androidx.work.impl.WorkManagerImpl;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        specialinvoke r0.<androidx.work.impl.utils.CancelWorkRunnable: void iterativelyCancelWorkAndDependents(androidx.work.impl.WorkDatabase,java.lang.String)>($r3, $r2);

        $r4 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r4.<androidx.work.impl.Processor: boolean stopAndCancelWork(java.lang.String)>($r2);

        $r5 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: java.util.List getSchedulers()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.work.impl.Scheduler) $r7;

        interfaceinvoke r8.<androidx.work.impl.Scheduler: void cancel(java.lang.String)>($r2);

        goto label1;

     label2:
        return;
    }

    public androidx.work.Operation getOperation()
    {
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.OperationImpl r1;

        r0 := @this: androidx.work.impl.utils.CancelWorkRunnable;

        r1 = r0.<androidx.work.impl.utils.CancelWorkRunnable: androidx.work.impl.OperationImpl mOperation>;

        return r1;
    }

    void reschedulePendingWorkers(androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.Configuration $r2;
        java.util.List $r4;
        androidx.work.impl.WorkDatabase $r3;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.WorkManagerImpl $r1;

        r0 := @this: androidx.work.impl.utils.CancelWorkRunnable;

        $r1 := @parameter0: androidx.work.impl.WorkManagerImpl;

        $r2 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        $r3 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r4 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: java.util.List getSchedulers()>();

        staticinvoke <androidx.work.impl.Schedulers: void schedule(androidx.work.Configuration,androidx.work.impl.WorkDatabase,java.util.List)>($r2, $r3, $r4);

        return;
    }

    public void run()
    {
        java.lang.Throwable r4;
        androidx.work.Operation$State$SUCCESS $r3;
        androidx.work.Operation$State$FAILURE $r1;
        androidx.work.impl.utils.CancelWorkRunnable r0;
        androidx.work.impl.OperationImpl r2;

        r0 := @this: androidx.work.impl.utils.CancelWorkRunnable;

     label1:
        virtualinvoke r0.<androidx.work.impl.utils.CancelWorkRunnable: void runInternal()>();

        r2 = r0.<androidx.work.impl.utils.CancelWorkRunnable: androidx.work.impl.OperationImpl mOperation>;

        $r3 = <androidx.work.Operation: androidx.work.Operation$State$SUCCESS SUCCESS>;

        virtualinvoke r2.<androidx.work.impl.OperationImpl: void setState(androidx.work.Operation$State)>($r3);

     label2:
        return;

     label3:
        r4 := @caughtexception;

        r2 = r0.<androidx.work.impl.utils.CancelWorkRunnable: androidx.work.impl.OperationImpl mOperation>;

        $r1 = new androidx.work.Operation$State$FAILURE;

        specialinvoke $r1.<androidx.work.Operation$State$FAILURE: void <init>(java.lang.Throwable)>(r4);

        virtualinvoke r2.<androidx.work.impl.OperationImpl: void setState(androidx.work.Operation$State)>($r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    abstract void runInternal();
}
