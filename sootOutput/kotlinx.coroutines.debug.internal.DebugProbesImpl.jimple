public final class kotlinx.coroutines.debug.internal.DebugProbesImpl extends java.lang.Object
{
    private static final java.lang.StackTraceElement ARTIFICIAL_FRAME;
    public static final kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE;
    private static final kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache;
    private static final kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap;
    private static final java.text.SimpleDateFormat dateFormat;
    private static final kotlin.jvm.functions.Function1 dynamicAttach;
    private static boolean enableCreationStackTraces;
    private static final kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper installations$kotlinx$VolatileWrapper;
    private static boolean sanitizeStackTraces;
    private static final kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper sequenceNumber$kotlinx$VolatileWrapper;
    private static java.lang.Thread weakRefCleanerThread;

    static void <clinit>()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl $r0;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r4;
        java.text.SimpleDateFormat $r3;
        kotlin.jvm.functions.Function1 $r5;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper $r7;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper $r6;
        java.lang.StackTraceElement $r2;
        _COROUTINE.ArtificialStackFrames $r1;

        $r0 = new kotlinx.coroutines.debug.internal.DebugProbesImpl;

        specialinvoke $r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void <init>()>();

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE> = $r0;

        $r1 = new _COROUTINE.ArtificialStackFrames;

        specialinvoke $r1.<_COROUTINE.ArtificialStackFrames: void <init>()>();

        $r2 = virtualinvoke $r1.<_COROUTINE.ArtificialStackFrames: java.lang.StackTraceElement coroutineCreation()>();

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.StackTraceElement ARTIFICIAL_FRAME> = $r2;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy/MM/dd HH:mm:ss");

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.text.SimpleDateFormat dateFormat> = $r3;

        $r4 = new kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        specialinvoke $r4.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void <init>(boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap> = $r4;

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean sanitizeStackTraces> = 1;

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean enableCreationStackTraces> = 1;

        $r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $r5 = specialinvoke $r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.jvm.functions.Function1 getDynamicAttach()>();

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.jvm.functions.Function1 dynamicAttach> = $r5;

        $r4 = new kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        specialinvoke $r4.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void <init>(boolean)>(1);

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache> = $r4;

        $r6 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper;

        specialinvoke $r6.<kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper installations$kotlinx$VolatileWrapper> = $r6;

        $r7 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper;

        specialinvoke $r7.<kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper sequenceNumber$kotlinx$VolatileWrapper> = $r7;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final kotlinx.coroutines.debug.internal.ConcurrentWeakMap access$getCallerInfoCache$p()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0;

        r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache>;

        return r0;
    }

    public static final boolean access$isFinished(kotlinx.coroutines.debug.internal.DebugProbesImpl, kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl $r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r1;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter1: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isFinished(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)>($r1);

        return $z0;
    }

    public static final void access$probeCoroutineCompleted(kotlinx.coroutines.debug.internal.DebugProbesImpl, kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl $r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r1;

        $r0 := @parameter0: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter1: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        specialinvoke $r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void probeCoroutineCompleted(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)>($r1);

        return;
    }

    private final void build(kotlinx.coroutines.Job, java.util.Map, java.lang.StringBuilder, java.lang.String)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.Iterator $r13;
        kotlinx.coroutines.Job $r1;
        kotlin.sequences.Sequence $r12;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r6;
        java.util.List $r9;
        java.util.Map $r2;
        java.lang.StringBuilder $r3, r7;
        java.lang.Object $r5;
        java.lang.StackTraceElement r10;
        java.lang.String $r4, $r8, $r11;
        boolean z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r2 := @parameter1: java.util.Map;

        $r3 := @parameter2: java.lang.StringBuilder;

        $r4 := @parameter3: java.lang.String;

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r6 = (kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) $r5;

        if r6 != null goto label2;

        z0 = $r1 instanceof kotlinx.coroutines.internal.ScopeCoroutine;

        if z0 != 0 goto label1;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.String getDebugString(kotlinx.coroutines.Job)>($r1);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $r4 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label1:
        goto label3;

     label2:
        $r9 = virtualinvoke r6.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.util.List lastObservedStackTrace()>();

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.util.List)>($r9);

        r10 = (java.lang.StackTraceElement) $r5;

        $r8 = virtualinvoke r6.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String getState()>();

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.String getDebugString(kotlinx.coroutines.Job)>($r1);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", continuation is ");

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at line ");

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $r4 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r12 = interfaceinvoke $r1.<kotlinx.coroutines.Job: kotlin.sequences.Sequence getChildren()>();

        $r13 = interfaceinvoke $r12.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label4:
        z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label5;

        $r5 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (kotlinx.coroutines.Job) $r5;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void build(kotlinx.coroutines.Job,java.util.Map,java.lang.StringBuilder,java.lang.String)>($r1, $r2, $r3, $r4);

        goto label4;

     label5:
        return;
    }

    private final kotlin.coroutines.Continuation createOwner(kotlin.coroutines.Continuation, kotlinx.coroutines.debug.internal.StackTraceFrame)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r8;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r3;
        kotlinx.coroutines.debug.internal.StackTraceFrame $r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;
        long $l0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper $r6;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r7;
        java.util.Map $r9;
        java.lang.Boolean $r10;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: kotlinx.coroutines.debug.internal.StackTraceFrame;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        r3 = new kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = staticinvoke <kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSequenceNumber$FU$p()>();

        $r6 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumber$kotlinx$VolatileWrapper sequenceNumber$kotlinx$VolatileWrapper>;

        $l0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>($r6);

        specialinvoke r3.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: void <init>(kotlin.coroutines.CoroutineContext,kotlinx.coroutines.debug.internal.StackTraceFrame,long)>($r4, $r2, $l0);

        r7 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        specialinvoke r7.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: void <init>(kotlin.coroutines.Continuation,kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)>($r1, r3);

        $r8 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap>;

        $r9 = (java.util.Map) $r8;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r10);

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label2;

        $r8 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap>;

        virtualinvoke $r8.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void clear()>();

     label2:
        $r1 = (kotlin.coroutines.Continuation) r7;

        return $r1;
    }

    private final java.util.List dumpCoroutinesInfoImpl(kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$3 $r7;
        java.lang.IllegalStateException $r10;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1 $r5;
        kotlin.sequences.Sequence $r4;
        java.util.Set $r2;
        kotlin.jvm.functions.Function1 $r8;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Iterable $r3;
        java.util.List $r9;
        java.lang.String $r11;
        java.util.Comparator $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.Set getCapturedCoroutines()>();

        $r3 = (java.lang.Iterable) $r2;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r3);

        $r5 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1;

        specialinvoke $r5.<kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1: void <init>()>();

        $r6 = (java.util.Comparator) $r5;

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence,java.util.Comparator)>($r4, $r6);

        $r7 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$3;

        specialinvoke $r7.<kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$3: void <init>(kotlin.jvm.functions.Function2)>($r1);

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence mapNotNull(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r4, $r8);

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r4);

        return $r9;

     label1:
        $r10 = new java.lang.IllegalStateException;

        $r11 = "Debug probes are not installed";

        $r11 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    private final void dumpCoroutinesSynchronized(java.io.PrintStream)
    {
        java.lang.IllegalStateException $r22;
        kotlin.coroutines.Continuation $r20;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$$inlined$sortedBy$1 $r12;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r2;
        java.text.SimpleDateFormat $r4;
        long $l0;
        java.lang.Iterable $r8;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r16;
        java.lang.Long $r5;
        java.lang.Thread $r18;
        java.lang.StackTraceElement $r21;
        java.lang.String $r6;
        boolean $z0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.io.PrintStream $r1;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$2 $r10;
        java.util.Iterator $r14;
        kotlin.sequences.Sequence $r9;
        java.util.Set $r7;
        kotlin.jvm.functions.Function1 $r11;
        java.util.List $r17, $r19;
        java.lang.StringBuilder $r3;
        java.lang.Object $r15;
        java.util.Comparator $r13;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.io.PrintStream;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label7;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Coroutines dump ");

        $r4 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.text.SimpleDateFormat dateFormat>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.String format(java.lang.Object)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r6);

        $r7 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.Set getCapturedCoroutines()>();

        $r8 = (java.lang.Iterable) $r7;

        $r9 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r8);

        $r10 = <kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$2: kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$2 INSTANCE>;

        $r11 = (kotlin.jvm.functions.Function1) $r10;

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r9, $r11);

        $r12 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$$inlined$sortedBy$1;

        specialinvoke $r12.<kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$$inlined$sortedBy$1: void <init>()>();

        $r13 = (java.util.Comparator) $r12;

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence,java.util.Comparator)>($r9, $r13);

        $r14 = interfaceinvoke $r9.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner) $r15;

        r2 = r16.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info>;

        $r17 = virtualinvoke r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.util.List lastObservedStackTrace()>();

        r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $r6 = virtualinvoke r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String getState()>();

        $r18 = r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.Thread lastObservedThread>;

        $r19 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.List enhanceStackTraceWithThreadDumpImpl(java.lang.String,java.lang.Thread,java.util.List)>($r6, $r18, $r17);

        $r6 = virtualinvoke r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String getState()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, "RUNNING");

        if $z0 == 0 goto label2;

        if $r19 != $r17 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String getState()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Last suspension stacktrace, not an actual stacktrace)");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r6 = virtualinvoke r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.String getState()>();

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\nCoroutine ");

        $r20 = r16.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.Continuation delegate>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", state: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r6);

        $z0 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tat ");

        $r21 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.StackTraceElement ARTIFICIAL_FRAME>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r6);

        r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $r17 = virtualinvoke r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.util.List getCreationStackTrace()>();

        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void printStackTrace(java.io.PrintStream,java.util.List)>($r1, $r17);

        goto label5;

     label4:
        r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void printStackTrace(java.io.PrintStream,java.util.List)>($r1, $r19);

     label5:
        goto label1;

     label6:
        return;

     label7:
        $r22 = new java.lang.IllegalStateException;

        $r6 = "Debug probes are not installed";

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r22;
    }

    private final java.util.List enhanceStackTraceWithThreadDumpImpl(java.lang.String, java.lang.Thread, java.util.List)
    {
        java.lang.Throwable $r7;
        kotlin.Result$Companion $r4;
        kotlin.Pair $r9;
        java.util.ArrayList $r12;
        java.lang.Thread $r2;
        int i0, i1, $i2, $i3;
        java.lang.StackTraceElement r8;
        java.lang.String $r1;
        java.lang.Number r10;
        boolean $z0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.Collection $r11;
        java.util.List $r3;
        java.lang.StackTraceElement[] $r5;
        java.lang.Object $r6;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Thread;

        $r3 := @parameter2: java.util.List;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, "RUNNING");

        if $z0 == 0 goto label18;

        if $r2 != null goto label01;

        return $r3;

     label01:
        $r4 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r5 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

        $r4 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r6 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r7);

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

     label04:
        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r6);

        if $z0 == 0 goto label05;

        $r6 = null;

     label05:
        $r5 = (java.lang.StackTraceElement[]) $r6;

        if $r5 != null goto label06;

        return $r3;

     label06:
        i0 = 0;

        i1 = lengthof $r5;

     label07:
        if i0 >= i1 goto label11;

        r8 = $r5[i0];

        $r1 = virtualinvoke r8.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, "kotlin.coroutines.jvm.internal.BaseContinuationImpl");

        if $z0 == 0 goto label08;

        $r1 = virtualinvoke r8.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, "resumeWith");

        if $z0 == 0 goto label08;

        $r1 = virtualinvoke r8.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, "ContinuationImpl.kt");

        if $z0 == 0 goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        if $z0 == 0 goto label10;

        goto label12;

     label10:
        i0 = i0 + 1;

        goto label07;

     label11:
        i0 = -1;

     label12:
        $r9 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.Pair findContinuationStartIndex(int,java.lang.StackTraceElement[],java.util.List)>(i0, $r5, $r3);

        $r6 = virtualinvoke $r9.<kotlin.Pair: java.lang.Object component1()>();

        r10 = (java.lang.Number) $r6;

        i1 = virtualinvoke r10.<java.lang.Number: int intValue()>();

        $r6 = virtualinvoke $r9.<kotlin.Pair: java.lang.Object component2()>();

        r10 = (java.lang.Number) $r6;

        $i2 = virtualinvoke r10.<java.lang.Number: int intValue()>();

        if i1 != -1 goto label13;

        return $r3;

     label13:
        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i3 = $i3 + i0;

        $i3 = $i3 - i1;

        $i3 = $i3 - 1;

        $i3 = $i3 - $i2;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i3);

        $i3 = 0;

        i0 = i0 - $i2;

     label14:
        if $i3 >= i0 goto label15;

        $r11 = (java.util.Collection) $r12;

        r8 = $r5[$i3];

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>(r8);

        $i3 = $i3 + 1;

        goto label14;

     label15:
        i0 = i1 + 1;

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label16:
        if i0 >= i1 goto label17;

        $r11 = (java.util.Collection) $r12;

        $r6 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        i0 = i0 + 1;

        goto label16;

     label17:
        $r3 = (java.util.List) $r12;

     label18:
        return $r3;

        catch java.lang.Throwable from label01 to label02 with label03;
    }

    private final kotlin.Pair findContinuationStartIndex(int, java.lang.StackTraceElement[], java.util.List)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlin.Pair $r5;
        java.lang.Integer $r3, $r4;
        java.util.List $r2;
        java.lang.StackTraceElement[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.StackTraceElement[];

        $r2 := @parameter2: java.util.List;

        $i1 = 0;

     label1:
        if $i1 >= 3 goto label3;

        r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        $i2 = $i0 + -1;

        $i2 = $i2 - $i1;

        $i2 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: int findIndexOfFrame(int,java.lang.StackTraceElement[],java.util.List)>($i2, $r1, $r2);

        if $i2 == -1 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $r5;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $r5;
    }

    private final int findIndexOfFrame(int, java.lang.StackTraceElement[], java.util.List)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.Iterator $r5;
        java.util.List $r2;
        java.lang.StackTraceElement[] $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.StackTraceElement r4, r6;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.StackTraceElement[];

        $r2 := @parameter2: java.util.List;

        $r3 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Object getOrNull(java.lang.Object[],int)>($r1, $i0);

        r4 = (java.lang.StackTraceElement) $r3;

        if r4 != null goto label1;

        return -1;

     label1:
        $i0 = 0;

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.StackTraceElement) $r3;

        $r7 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $r8 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r8 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r8 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        return $i0;

     label5:
        $i0 = $i0 + 1;

        goto label2;

     label6:
        return -1;
    }

    private final java.util.Set getCapturedCoroutines()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.Set $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r2 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.util.Set keySet()>();

        return $r1;
    }

    private final java.lang.String getDebugString(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.Job $r1;
        kotlinx.coroutines.JobSupport $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $z0 = $r1 instanceof kotlinx.coroutines.JobSupport;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.JobSupport) $r1;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.JobSupport: java.lang.String toDebugString()>();

        return $r3;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    private static void getDebugString$annotations(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r0;

        $r0 := @parameter0: kotlinx.coroutines.Job;

        return;
    }

    private final kotlin.jvm.functions.Function1 getDynamicAttach()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.Throwable $r8;
        java.lang.Object[] $r5;
        kotlin.Result$Companion $r1;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.reflect.Constructor r4;
        java.lang.reflect.Constructor[] $r3;
        java.lang.Class $r2;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

     label1:
        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlinx.coroutines.debug.internal.ByteBuddyDynamicAttach");

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        r4 = $r3[0];

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.Function1<kotlin.Boolean, kotlin.Unit>");

        $r6 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r6, 1);

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r6 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r8);

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

     label4:
        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

        $r6 = null;

     label5:
        $r7 = (kotlin.jvm.functions.Function1) $r6;

        return $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private final boolean isFinished(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.Job$Key $r4;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r8;
        kotlinx.coroutines.Job r7;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r2;
        kotlin.coroutines.CoroutineContext$Element $r6;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r1;
        kotlin.coroutines.CoroutineContext$Key $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        r2 = $r1.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info>;

        $r3 = virtualinvoke r2.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlin.coroutines.CoroutineContext getContext()>();

        if $r3 == null goto label3;

        $r4 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r5 = (kotlin.coroutines.CoroutineContext$Key) $r4;

        $r6 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r5);

        r7 = (kotlinx.coroutines.Job) $r6;

        if r7 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke r7.<kotlinx.coroutines.Job: boolean isCompleted()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r8 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap>;

        virtualinvoke $r8.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object remove(java.lang.Object)>($r1);

        return 1;

     label3:
        return 0;
    }

    private final boolean isInternalMethod(java.lang.StackTraceElement)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.StackTraceElement $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.lang.StackTraceElement;

        $r2 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r2, "kotlinx.coroutines", 0, 2, null);

        return $z0;
    }

    private final kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner owner(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r2;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r3 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        goto label2;

     label1:
        $r3 = null;

     label2:
        if $r3 == null goto label3;

        $r2 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner owner(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r3);

        return $r2;

     label3:
        return null;
    }

    private final kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner owner(kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r2;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        if $z0 == 0 goto label2;

        $r2 = (kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner) $r1;

        return $r2;

     label2:
        $r1 = interfaceinvoke $r1.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        if $r1 == null goto label3;

        goto label1;

     label3:
        return null;
    }

    private final void printStackTrace(java.io.PrintStream, java.util.List)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.io.PrintStream $r1;
        java.util.Iterator $r4;
        java.lang.Iterable $r3;
        java.util.List $r2;
        java.lang.Object $r5;
        java.lang.StackTraceElement r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.io.PrintStream;

        $r2 := @parameter1: java.util.List;

        $r3 = (java.lang.Iterable) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.StackTraceElement) $r5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tat ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r8);

        goto label1;

     label2:
        return;
    }

    private final void probeCoroutineCompleted(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r2;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r4;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r2 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap>;

        virtualinvoke $r2.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object remove(java.lang.Object)>($r1);

        r3 = $r1.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info>;

        $r4 = virtualinvoke r3.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getLastObservedFrame$kotlinx_coroutines_core()>();

        if $r4 == null goto label2;

        $r4 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame realCaller(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r4);

        if $r4 != null goto label1;

        return;

     label1:
        $r2 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache>;

        virtualinvoke $r2.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object remove(java.lang.Object)>($r4);

     label2:
        return;
    }

    private final kotlin.coroutines.jvm.internal.CoroutineStackFrame realCaller(kotlin.coroutines.jvm.internal.CoroutineStackFrame)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.StackTraceElement $r2;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

     label1:
        $r1 = interfaceinvoke $r1.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        if $r1 != null goto label2;

        return null;

     label2:
        $r2 = interfaceinvoke $r1.<kotlin.coroutines.jvm.internal.CoroutineStackFrame: java.lang.StackTraceElement getStackTraceElement()>();

        if $r2 == null goto label3;

        return $r1;

     label3:
        goto label1;
    }

    private final java.util.List sanitizeStackTrace(java.lang.Throwable)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.Throwable $r1;
        java.util.Collection r7;
        java.util.ArrayList $r5, $r8;
        java.util.List $r6;
        java.lang.StackTraceElement[] $r2;
        int i0, i1, i2, i3;
        java.lang.StackTraceElement r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = virtualinvoke $r1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof $r2;

        i1 = lengthof $r2;

        i2 = -1;

        i1 = i1 + -1;

        if i1 < 0 goto label03;

     label01:
        i3 = i1;

        i1 = i1 + -1;

        r3 = $r2[i3];

        $r4 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, "kotlin.coroutines.jvm.internal.DebugProbesKt");

        if $z0 == 0 goto label02;

        i2 = i3;

        goto label03;

     label02:
        if i1 >= 0 goto label01;

     label03:
        i2 = i2 + 1;

        $z0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean sanitizeStackTraces>;

        if $z0 != 0 goto label06;

        i0 = i0 - i2;

        $r8 = new java.util.ArrayList;

        $r5 = $r8;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i0);

        i1 = 0;

     label04:
        if i1 >= i0 goto label05;

        i3 = i1 + i2;

        r3 = $r2[i3];

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label04;

     label05:
        $r6 = (java.util.List) $r5;

        return $r6;

     label06:
        $r8 = new java.util.ArrayList;

        $r5 = $r8;

        i1 = i0 - i2;

        i1 = i1 + 1;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i1);

        i3 = i2;

     label07:
        if i3 >= i0 goto label14;

        r3 = $r2[i3];

        $z0 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInternalMethod(java.lang.StackTraceElement)>(r3);

        if $z0 == 0 goto label13;

        r7 = (java.util.Collection) $r5;

        r3 = $r2[i3];

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        i2 = i3 + 1;

     label08:
        if i2 >= i0 goto label09;

        r3 = $r2[i2];

        $z0 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInternalMethod(java.lang.StackTraceElement)>(r3);

        if $z0 == 0 goto label09;

        i2 = i2 + 1;

        goto label08;

     label09:
        i1 = i2 + -1;

     label10:
        if i1 <= i3 goto label11;

        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        if $r4 != null goto label11;

        i1 = i1 + -1;

        goto label10;

     label11:
        if i1 <= i3 goto label12;

        i3 = i2 + -1;

        if i1 >= i3 goto label12;

        r7 = (java.util.Collection) $r5;

        r3 = $r2[i1];

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r3);

     label12:
        r7 = (java.util.Collection) $r5;

        i1 = i2 + -1;

        r3 = $r2[i1];

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        i3 = i2;

        goto label07;

     label13:
        r7 = (java.util.Collection) $r5;

        r3 = $r2[i3];

        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        i3 = i3 + 1;

        goto label07;

     label14:
        $r6 = (java.util.List) $r5;

        return $r6;
    }

    private final void startWeakRefCleanerThread()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.Thread $r1;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r2 = <kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1: kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        $r1 = staticinvoke <kotlin.concurrent.ThreadsKt: java.lang.Thread thread$default(boolean,boolean,java.lang.ClassLoader,java.lang.String,int,kotlin.jvm.functions.Function0,int,java.lang.Object)>(0, 1, null, "Coroutines Debugger Cleaner", 0, $r3, 21, null);

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.Thread weakRefCleanerThread> = $r1;

        return;
    }

    private final void stopWeakRefCleanerThread()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.Thread r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        r1 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.Thread weakRefCleanerThread>;

        if r1 != null goto label1;

        return;

     label1:
        <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.Thread weakRefCleanerThread> = null;

        virtualinvoke r1.<java.lang.Thread: void interrupt()>();

        virtualinvoke r1.<java.lang.Thread: void join()>();

        return;
    }

    private final kotlinx.coroutines.debug.internal.StackTraceFrame toStackTraceFrame(java.util.List)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r7;
        java.util.ListIterator $r4;
        kotlinx.coroutines.debug.internal.StackTraceFrame $r2, r3;
        java.util.List $r1;
        int $i0;
        java.lang.Object $r5;
        java.lang.StackTraceElement r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.util.List;

        r3 = null;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object previous()>();

        r6 = (java.lang.StackTraceElement) $r5;

        $r2 = new kotlinx.coroutines.debug.internal.StackTraceFrame;

        $r7 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) r3;

        specialinvoke $r2.<kotlinx.coroutines.debug.internal.StackTraceFrame: void <init>(kotlin.coroutines.jvm.internal.CoroutineStackFrame,java.lang.StackTraceElement)>($r7, r6);

        r3 = $r2;

        goto label1;

     label2:
        $r7 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) r3;

        r6 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.StackTraceElement ARTIFICIAL_FRAME>;

        $r2 = new kotlinx.coroutines.debug.internal.StackTraceFrame;

        specialinvoke $r2.<kotlinx.coroutines.debug.internal.StackTraceFrame: void <init>(kotlin.coroutines.jvm.internal.CoroutineStackFrame,java.lang.StackTraceElement)>($r7, r6);

        return $r2;
    }

    private final java.lang.String toStringRepr(java.lang.Object)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <kotlinx.coroutines.debug.internal.DebugProbesImplKt: java.lang.String access$repr(java.lang.String)>($r2);

        return $r2;
    }

    private final void updateRunningState(kotlin.coroutines.jvm.internal.CoroutineStackFrame, java.lang.String)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlin.coroutines.Continuation r9;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r1, $r8;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap r3;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl r5, r7;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r6;
        java.util.Map $r10;
        java.lang.Object $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r3 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache>;

        $r4 = virtualinvoke r3.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object remove(java.lang.Object)>($r1);

        r5 = (kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) $r4;

        if r5 == null goto label2;

        $z0 = 0;

        goto label6;

     label2:
        $r6 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner owner(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r1);

        if $r6 == null goto label8;

        r7 = $r6.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info>;

        if r7 != null goto label3;

        return;

     label3:
        r5 = r7;

        $z0 = 1;

        $r8 = virtualinvoke r7.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getLastObservedFrame$kotlinx_coroutines_core()>();

        if $r8 == null goto label4;

        $r8 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame realCaller(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r8);

        goto label5;

     label4:
        $r8 = null;

     label5:
        if $r8 == null goto label6;

        r3 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache>;

        virtualinvoke r3.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.lang.Object remove(java.lang.Object)>($r8);

     label6:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlin.coroutines.Continuation<*>");

        r9 = (kotlin.coroutines.Continuation) $r1;

        virtualinvoke r5.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: void updateState$kotlinx_coroutines_core(java.lang.String,kotlin.coroutines.Continuation,boolean)>($r2, r9, $z0);

        $r1 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame realCaller(kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r1);

        if $r1 != null goto label7;

        return;

     label7:
        r3 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache>;

        $r10 = (java.util.Map) r3;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label8:
        return;
    }

    private final void updateState(kotlin.coroutines.Continuation, java.lang.String)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r5;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame r4;
        java.lang.String $r2;
        boolean $z0;
        kotlin.KotlinVersion r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, "RUNNING");

        if $z0 == 0 goto label5;

        r3 = <kotlin.KotlinVersion: kotlin.KotlinVersion CURRENT>;

        $z0 = virtualinvoke r3.<kotlin.KotlinVersion: boolean isAtLeast(int,int,int)>(1, 3, 30);

        if $z0 == 0 goto label5;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label2;

        r4 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        goto label3;

     label2:
        r4 = null;

     label3:
        if r4 != null goto label4;

        return;

     label4:
        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void updateRunningState(kotlin.coroutines.jvm.internal.CoroutineStackFrame,java.lang.String)>(r4, $r2);

        return;

     label5:
        $r5 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner owner(kotlin.coroutines.Continuation)>($r1);

        if $r5 != null goto label6;

        return;

     label6:
        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void updateState(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner,kotlin.coroutines.Continuation,java.lang.String)>($r5, $r1, $r2);

        return;
    }

    private final void updateState(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner, kotlin.coroutines.Continuation, java.lang.String)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = $r1.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info>;

        virtualinvoke $r4.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: void updateState$kotlinx_coroutines_core(java.lang.String,kotlin.coroutines.Continuation,boolean)>($r3, $r2, 1);

        return;
    }

    public final void dumpCoroutines(java.io.PrintStream)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.io.PrintStream $r1;
        java.lang.Throwable $r3;
        kotlin.Unit $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: java.io.PrintStream;

        entermonitor $r1;

     label1:
        r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void dumpCoroutinesSynchronized(java.io.PrintStream)>($r1);

        $r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor $r1;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.util.List dumpCoroutinesInfo()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.IllegalStateException $r9;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1 $r4;
        kotlin.sequences.Sequence $r3;
        java.util.Set $r1;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.Iterable $r2;
        java.util.List $r8;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfo$$inlined$dumpCoroutinesInfoImpl$1 $r6;
        java.lang.String $r10;
        java.util.Comparator $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.Set getCapturedCoroutines()>();

        $r2 = (java.lang.Iterable) $r1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r2);

        $r4 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1;

        specialinvoke $r4.<kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1: void <init>()>();

        $r5 = (java.util.Comparator) $r4;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence,java.util.Comparator)>($r3, $r5);

        $r6 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfo$$inlined$dumpCoroutinesInfoImpl$1;

        specialinvoke $r6.<kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfo$$inlined$dumpCoroutinesInfoImpl$1: void <init>()>();

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence mapNotNull(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r3, $r7);

        $r8 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r3);

        return $r8;

     label1:
        $r9 = new java.lang.IllegalStateException;

        $r10 = "Debug probes are not installed";

        $r10 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public final java.lang.Object[] dumpCoroutinesInfoAsJsonAndReferences()
    {
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r21;
        kotlinx.coroutines.CoroutineName r12;
        java.lang.Long $r13;
        java.lang.Thread $r22;
        boolean $z0;
        kotlinx.coroutines.CoroutineId$Key $r19;
        kotlinx.coroutines.CoroutineName$Key r9;
        java.util.Collection r24;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame[] r27;
        kotlinx.coroutines.CoroutineDispatcher r16;
        java.util.List $r4;
        java.lang.StringBuilder r18;
        kotlinx.coroutines.CoroutineDispatcher$Key r15;
        java.lang.Object[] $r26, $r28, $r30, r31;
        kotlin.coroutines.CoroutineContext$Element $r11;
        long $l1;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfo[] $r29;
        java.lang.Iterable r23;
        java.util.ArrayList r1, r2, r3;
        int $i0;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfo r7;
        java.lang.String $r14, $r17;
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.Iterator $r5;
        java.lang.Thread[] r25;
        kotlinx.coroutines.CoroutineId $r20;
        kotlin.coroutines.CoroutineContext $r8;
        kotlin.coroutines.CoroutineContext$Key r10;
        java.lang.Object $r6;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.List dumpCoroutinesInfo()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kotlinx.coroutines.debug.internal.DebugCoroutineInfo) $r6;

        $r8 = virtualinvoke r7.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: kotlin.coroutines.CoroutineContext getContext()>();

        r9 = <kotlinx.coroutines.CoroutineName: kotlinx.coroutines.CoroutineName$Key Key>;

        r10 = (kotlin.coroutines.CoroutineContext$Key) r9;

        $r11 = interfaceinvoke $r8.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r10);

        r12 = (kotlinx.coroutines.CoroutineName) $r11;

        $r13 = null;

        if r12 == null goto label2;

        $r14 = virtualinvoke r12.<kotlinx.coroutines.CoroutineName: java.lang.String getName()>();

        if $r14 == null goto label2;

        $r14 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.String toStringRepr(java.lang.Object)>($r14);

        goto label3;

     label2:
        $r14 = null;

     label3:
        r15 = <kotlinx.coroutines.CoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher$Key Key>;

        r10 = (kotlin.coroutines.CoroutineContext$Key) r15;

        $r11 = interfaceinvoke $r8.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r10);

        r16 = (kotlinx.coroutines.CoroutineDispatcher) $r11;

        if r16 == null goto label4;

        $r17 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.String toStringRepr(java.lang.Object)>(r16);

        goto label5;

     label4:
        $r17 = null;

     label5:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                {\n                    \"name\": ");

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                    \"id\": ");

        $r19 = <kotlinx.coroutines.CoroutineId: kotlinx.coroutines.CoroutineId$Key Key>;

        r10 = (kotlin.coroutines.CoroutineContext$Key) $r19;

        $r11 = interfaceinvoke $r8.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r10);

        $r20 = (kotlinx.coroutines.CoroutineId) $r11;

        if $r20 == null goto label6;

        $l1 = virtualinvoke $r20.<kotlinx.coroutines.CoroutineId: long getId()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label6:
        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                    \"dispatcher\": ");

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                    \"sequenceNumber\": ");

        $l1 = virtualinvoke r7.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: long getSequenceNumber()>();

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                    \"state\": \"");

        $r14 = virtualinvoke r7.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: java.lang.String getState()>();

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\n                } \n                ");

        $r14 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r14);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        $r21 = virtualinvoke r7.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: kotlin.coroutines.jvm.internal.CoroutineStackFrame getLastObservedFrame()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        $r22 = virtualinvoke r7.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: java.lang.Thread getLastObservedThread()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

        goto label1;

     label7:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        r23 = (java.lang.Iterable) r3;

        $r14 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r23, null, null, null, 0, null, null, 63, null);

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r18 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r14 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r24 = (java.util.Collection) r1;

        r25 = newarray (java.lang.Thread)[0];

        $r26 = interfaceinvoke r24.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r25);

        r24 = (java.util.Collection) r2;

        r27 = newarray (kotlin.coroutines.jvm.internal.CoroutineStackFrame)[0];

        $r28 = interfaceinvoke r24.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r27);

        r24 = (java.util.Collection) $r4;

        $r29 = newarray (kotlinx.coroutines.debug.internal.DebugCoroutineInfo)[0];

        $r30 = interfaceinvoke r24.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r29);

        r31 = newarray (java.lang.Object)[4];

        r31[0] = $r14;

        r31[1] = $r26;

        r31[2] = $r28;

        r31[3] = $r30;

        return r31;
    }

    public final java.util.List dumpDebuggerInfo()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.IllegalStateException $r9;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1 $r4;
        kotlin.sequences.Sequence $r3;
        java.util.Set $r1;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.Iterable $r2;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpDebuggerInfo$$inlined$dumpCoroutinesInfoImpl$1 $r6;
        java.util.List $r8;
        java.lang.String $r10;
        java.util.Comparator $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.Set getCapturedCoroutines()>();

        $r2 = (java.lang.Iterable) $r1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r2);

        $r4 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1;

        specialinvoke $r4.<kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$$inlined$sortedBy$1: void <init>()>();

        $r5 = (java.util.Comparator) $r4;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence,java.util.Comparator)>($r3, $r5);

        $r6 = new kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpDebuggerInfo$$inlined$dumpCoroutinesInfoImpl$1;

        specialinvoke $r6.<kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpDebuggerInfo$$inlined$dumpCoroutinesInfoImpl$1: void <init>()>();

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence mapNotNull(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r3, $r7);

        $r8 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r3);

        return $r8;

     label1:
        $r9 = new java.lang.IllegalStateException;

        $r10 = "Debug probes are not installed";

        $r10 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public final java.util.List enhanceStackTraceWithThreadDump(kotlinx.coroutines.debug.internal.DebugCoroutineInfo, java.util.List)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.List $r2;
        java.lang.Thread $r4;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfo $r1;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.DebugCoroutineInfo;

        $r2 := @parameter1: java.util.List;

        $r3 = virtualinvoke $r1.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: java.lang.String getState()>();

        $r4 = virtualinvoke $r1.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: java.lang.Thread getLastObservedThread()>();

        $r2 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.List enhanceStackTraceWithThreadDumpImpl(java.lang.String,java.lang.Thread,java.util.List)>($r3, $r4, $r2);

        return $r2;
    }

    public final java.lang.String enhanceStackTraceWithThreadDumpAsJson(kotlinx.coroutines.debug.internal.DebugCoroutineInfo)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.Iterator $r5;
        java.lang.Iterable r10;
        java.util.ArrayList r3;
        java.util.List $r2, r4;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfo $r1;
        int $i0;
        java.lang.Object $r6;
        java.lang.StackTraceElement r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.DebugCoroutineInfo;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.debug.internal.DebugCoroutineInfo: java.util.List lastObservedStackTrace()>();

        $r2 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.List enhanceStackTraceWithThreadDump(kotlinx.coroutines.debug.internal.DebugCoroutineInfo,java.util.List)>($r1, $r2);

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r3;

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.StackTraceElement) $r6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                {\n                    \"declaringClass\": \"");

        $r9 = virtualinvoke r7.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",\n                    \"methodName\": \"");

        $r9 = virtualinvoke r7.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",\n                    \"fileName\": ");

        $r9 = virtualinvoke r7.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        if $r9 == null goto label2;

        $r9 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.lang.String toStringRepr(java.lang.Object)>($r9);

        goto label3;

     label2:
        $r9 = null;

     label3:
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                    \"lineNumber\": ");

        $i0 = virtualinvoke r7.<java.lang.StackTraceElement: int getLineNumber()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                }\n                ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r9);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        r10 = (java.lang.Iterable) r4;

        $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r10, null, null, null, 0, null, null, 63, null);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public final boolean getEnableCreationStackTraces()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        z0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean enableCreationStackTraces>;

        return z0;
    }

    public final boolean getSanitizeStackTraces()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        z0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean sanitizeStackTraces>;

        return z0;
    }

    public final java.lang.String hierarchyToString(kotlinx.coroutines.Job)
    {
        java.lang.IllegalStateException $r21;
        kotlin.coroutines.Continuation $r9;
        kotlinx.coroutines.Job$Key $r11;
        kotlinx.coroutines.Job $r1, $r17;
        kotlin.coroutines.CoroutineContext$Element $r13;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl $r18;
        java.lang.Iterable $r3;
        java.util.ArrayList r4;
        java.util.LinkedHashMap $r15;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner r8;
        java.util.Map $r16;
        int $i0;
        java.lang.String $r20;
        boolean $z0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.Iterator $r6;
        java.util.Collection r5;
        java.util.Set $r2;
        kotlin.coroutines.CoroutineContext $r10;
        java.util.List r14;
        kotlin.coroutines.CoroutineContext$Key $r12;
        java.lang.Object $r7;
        java.lang.StringBuilder $r19;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label7;

        $r2 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.Set getCapturedCoroutines()>();

        $r3 = (java.lang.Iterable) $r2;

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r5 = (java.util.Collection) r4;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner) $r7;

        $r9 = r8.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.Continuation delegate>;

        $r10 = interfaceinvoke $r9.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r11 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r12 = (kotlin.coroutines.CoroutineContext$Key) $r11;

        $r13 = interfaceinvoke $r10.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r12);

        if $r13 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label1;

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label1;

     label4:
        r14 = (java.util.List) r5;

        $r3 = (java.lang.Iterable) r14;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0);

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 16);

        $r15 = new java.util.LinkedHashMap;

        specialinvoke $r15.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r16 = (java.util.Map) $r15;

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner) $r7;

        $r9 = r8.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlin.coroutines.Continuation delegate>;

        $r10 = interfaceinvoke $r9.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r17 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.Job getJob(kotlin.coroutines.CoroutineContext)>($r10);

        r8 = (kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner) $r7;

        $r18 = r8.<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl info>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18);

        goto label5;

     label6:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        r0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE>;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void build(kotlinx.coroutines.Job,java.util.Map,java.lang.StringBuilder,java.lang.String)>($r1, $r16, $r19, "");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r20, "StringBuilder().apply(builderAction).toString()");

        return $r20;

     label7:
        $r21 = new java.lang.IllegalStateException;

        $r20 = "Debug probes are not installed";

        $r20 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r21;
    }

    public final void install()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r4;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper $r2;
        kotlinx.coroutines.debug.internal.AgentInstallationType $r3;
        int $i0;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 = staticinvoke <kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper: java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$getInstallations$FU$p()>();

        $r2 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper installations$kotlinx$VolatileWrapper>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>($r2);

        if $i0 <= 1 goto label1;

        return;

     label1:
        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void startWeakRefCleanerThread()>();

        $r3 = <kotlinx.coroutines.debug.internal.AgentInstallationType: kotlinx.coroutines.debug.internal.AgentInstallationType INSTANCE>;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.debug.internal.AgentInstallationType: boolean isInstalledStatically$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.jvm.functions.Function1 dynamicAttach>;

        if $r4 == null goto label3;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

     label3:
        return;
    }

    public final boolean isInstalled$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        int $i0;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r2 = staticinvoke <kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper: java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$getInstallations$FU$p()>();

        $r1 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper installations$kotlinx$VolatileWrapper>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>($r1);

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final kotlin.coroutines.Continuation probeCoroutineCreated$kotlinx_coroutines_core(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.Throwable r4;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.debug.internal.StackTraceFrame $r6;
        java.lang.Exception r3;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner $r2;
        java.util.List $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner owner(kotlin.coroutines.Continuation)>($r1);

        if $r2 == null goto label2;

        return $r1;

     label2:
        $z0 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean enableCreationStackTraces>;

        if $z0 == 0 goto label3;

        r3 = new java.lang.Exception;

        specialinvoke r3.<java.lang.Exception: void <init>()>();

        r4 = (java.lang.Throwable) r3;

        $r5 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: java.util.List sanitizeStackTrace(java.lang.Throwable)>(r4);

        $r6 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.StackTraceFrame toStackTraceFrame(java.util.List)>($r5);

        goto label4;

     label3:
        $r6 = null;

     label4:
        $r1 = specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.coroutines.Continuation createOwner(kotlin.coroutines.Continuation,kotlinx.coroutines.debug.internal.StackTraceFrame)>($r1, $r6);

        return $r1;
    }

    public final void probeCoroutineResumed$kotlinx_coroutines_core(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void updateState(kotlin.coroutines.Continuation,java.lang.String)>($r1, "RUNNING");

        return;
    }

    public final void probeCoroutineSuspended$kotlinx_coroutines_core(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        kotlin.coroutines.Continuation $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void updateState(kotlin.coroutines.Continuation,java.lang.String)>($r1, "SUSPENDED");

        return;
    }

    public final void setEnableCreationStackTraces(boolean)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $z0 := @parameter0: boolean;

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean enableCreationStackTraces> = $z0;

        return;
    }

    public final void setSanitizeStackTraces(boolean)
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $z0 := @parameter0: boolean;

        <kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean sanitizeStackTraces> = $z0;

        return;
    }

    public final void uninstall()
    {
        kotlinx.coroutines.debug.internal.DebugProbesImpl r0;
        java.lang.IllegalStateException $r7;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r3;
        kotlin.jvm.functions.Function1 $r5;
        kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper $r2;
        kotlinx.coroutines.debug.internal.AgentInstallationType $r4;
        int $i0;
        java.lang.Boolean $r6;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugProbesImpl;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: boolean isInstalled$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label3;

        $r1 = staticinvoke <kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper: java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$getInstallations$FU$p()>();

        $r2 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.DebugProbesImpl$Installations$kotlinx$VolatileWrapper installations$kotlinx$VolatileWrapper>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>($r2);

        if $i0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<kotlinx.coroutines.debug.internal.DebugProbesImpl: void stopWeakRefCleanerThread()>();

        $r3 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap capturedCoroutinesMap>;

        virtualinvoke $r3.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void clear()>();

        $r3 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlinx.coroutines.debug.internal.ConcurrentWeakMap callerInfoCache>;

        virtualinvoke $r3.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: void clear()>();

        $r4 = <kotlinx.coroutines.debug.internal.AgentInstallationType: kotlinx.coroutines.debug.internal.AgentInstallationType INSTANCE>;

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.debug.internal.AgentInstallationType: boolean isInstalledStatically$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r5 = <kotlinx.coroutines.debug.internal.DebugProbesImpl: kotlin.jvm.functions.Function1 dynamicAttach>;

        if $r5 == null goto label4;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        return;

     label3:
        $r7 = new java.lang.IllegalStateException;

        $r8 = "Agent was not installed";

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        return;
    }
}
