public final class com.google.common.net.InetAddresses extends java.lang.Object
{
    private static final java.net.Inet4Address ANY4;
    private static final char IPV4_DELIMITER;
    private static final com.google.common.base.CharMatcher IPV4_DELIMITER_MATCHER;
    private static final int IPV4_PART_COUNT;
    private static final char IPV6_DELIMITER;
    private static final com.google.common.base.CharMatcher IPV6_DELIMITER_MATCHER;
    private static final int IPV6_PART_COUNT;
    private static final java.net.Inet4Address LOOPBACK4;

    static void <clinit>()
    {
        com.google.common.base.CharMatcher $r0;
        java.net.InetAddress $r1;
        java.net.Inet4Address $r2;

        <com.google.common.net.InetAddresses: int IPV6_PART_COUNT> = 8;

        <com.google.common.net.InetAddresses: char IPV6_DELIMITER> = 58;

        <com.google.common.net.InetAddresses: int IPV4_PART_COUNT> = 4;

        <com.google.common.net.InetAddresses: char IPV4_DELIMITER> = 46;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(46);

        <com.google.common.net.InetAddresses: com.google.common.base.CharMatcher IPV4_DELIMITER_MATCHER> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(58);

        <com.google.common.net.InetAddresses: com.google.common.base.CharMatcher IPV6_DELIMITER_MATCHER> = $r0;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>("127.0.0.1");

        $r2 = (java.net.Inet4Address) $r1;

        <com.google.common.net.InetAddresses: java.net.Inet4Address LOOPBACK4> = $r2;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>("0.0.0.0");

        $r2 = (java.net.Inet4Address) $r1;

        <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4> = $r2;

        return;
    }

    private void <init>()
    {
        com.google.common.net.InetAddresses r0;

        r0 := @this: com.google.common.net.InetAddresses;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.net.Inet4Address access$000()
    {
        java.net.Inet4Address r0;

        r0 = <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4>;

        return r0;
    }

    private static java.net.InetAddress bytesToInetAddress(byte[])
    {
        java.net.InetAddress $r2;
        byte[] $r0;
        java.lang.AssertionError $r1;
        java.net.UnknownHostException r3;

        $r0 := @parameter0: byte[];

     label1:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r0);

     label2:
        return $r2;

     label3:
        r3 := @caughtexception;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r1;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public static int coerceToInteger(java.net.InetAddress)
    {
        java.net.InetAddress $r0;
        byte[] $r2;
        com.google.common.io.ByteArrayDataInput $r3;
        int $i0;
        java.net.Inet4Address $r1;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)>($r0);

        $r2 = virtualinvoke $r1.<java.net.Inet4Address: byte[] getAddress()>();

        $r3 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[])>($r2);

        $i0 = interfaceinvoke $r3.<com.google.common.io.ByteArrayDataInput: int readInt()>();

        return $i0;
    }

    private static void compressLongestRunOfZeroes(int[])
    {
        int[] $r0;
        int i0, i1, i2, i3, i4;

        $r0 := @parameter0: int[];

        i0 = -1;

        i1 = -1;

        i2 = -1;

        i3 = 0;

     label1:
        i4 = lengthof $r0;

        i4 = i4 + 1;

        if i3 >= i4 goto label5;

        i4 = lengthof $r0;

        if i3 >= i4 goto label2;

        i4 = $r0[i3];

        if i4 != 0 goto label2;

        if i2 >= 0 goto label4;

        i2 = i3;

        goto label4;

     label2:
        if i2 < 0 goto label4;

        i4 = i3 - i2;

        if i4 <= i1 goto label3;

        i0 = i2;

        i1 = i4;

     label3:
        i2 = -1;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        if i1 < 2 goto label6;

        i1 = i0 + i1;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r0, i0, i1, -1);

     label6:
        return;
    }

    private static java.lang.String convertDottedQuadToHex(java.lang.String)
    {
        byte[] $r2;
        short s3;
        byte b2;
        int $i0, i1;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r0, $r1, $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(58);

        i1 = $i0 + 1;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $i0 = $i0 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r2 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV4(java.lang.String)>($r0);

        if $r2 != null goto label1;

        return null;

     label1:
        b2 = $r2[0];

        s3 = (short) b2;

        s3 = s3 & 255;

        $i0 = (int) s3;

        $i0 = $i0 << 8;

        b2 = $r2[1];

        s3 = (short) b2;

        s3 = s3 & 255;

        i1 = (int) s3;

        $i0 = $i0 | i1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        b2 = $r2[2];

        s3 = (short) b2;

        s3 = s3 & 255;

        $i0 = (int) s3;

        $i0 = $i0 << 8;

        b2 = $r2[3];

        s3 = (short) b2;

        s3 = s3 & 255;

        i1 = (int) s3;

        $i0 = $i0 | i1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + i1;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static java.net.InetAddress decrement(java.net.InetAddress)
    {
        java.net.InetAddress $r0;
        byte[] $r1;
        byte $b1;
        int i0, $i2;
        boolean $z0;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 = virtualinvoke $r0.<java.net.InetAddress: byte[] getAddress()>();

        i0 = lengthof $r1;

        i0 = i0 - 1;

     label1:
        if i0 < 0 goto label2;

        $b1 = $r1[i0];

        if $b1 != 0 goto label2;

        $r1[i0] = -1;

        i0 = i0 + -1;

        goto label1;

     label2:
        if i0 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Decrementing %s would wrap.", $r0);

        $b1 = $r1[i0];

        $i2 = (int) $b1;

        $i2 = $i2 - 1;

        $b1 = (byte) $i2;

        $r1[i0] = $b1;

        $r0 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress bytesToInetAddress(byte[])>($r1);

        return $r0;
    }

    public static java.net.InetAddress forString(java.lang.String)
    {
        java.net.InetAddress $r2;
        byte[] $r1;
        java.lang.Object[] $r3;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] ipStringToBytes(java.lang.String)>($r0);

        if $r1 == null goto label1;

        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress bytesToInetAddress(byte[])>($r1);

        return $r2;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r0;

        $r4 = staticinvoke <com.google.common.net.InetAddresses: java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String,java.lang.Object[])>("\'%s\' is not an IP string literal.", $r3);

        throw $r4;
    }

    public static java.net.InetAddress forUriString(java.lang.String)
    {
        java.net.InetAddress $r1;
        java.lang.Object[] $r2;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forUriStringNoThrow(java.lang.String)>($r0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r0;

        $r3 = staticinvoke <com.google.common.net.InetAddresses: java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String,java.lang.Object[])>("Not a valid URI IP literal: \'%s\'", $r2);

        throw $r3;
    }

    private static java.net.InetAddress forUriStringNoThrow(java.lang.String)
    {
        java.net.InetAddress $r2;
        byte[] $r1;
        byte b1;
        int $i0;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 - 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        b1 = 16;

        goto label2;

     label1:
        b1 = 4;

     label2:
        $r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] ipStringToBytes(java.lang.String)>($r0);

        if $r1 == null goto label4;

        $i0 = lengthof $r1;

        if $i0 == b1 goto label3;

        goto label4;

     label3:
        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress bytesToInetAddress(byte[])>($r1);

        return $r2;

     label4:
        return null;
    }

    private static transient java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        java.util.Locale $r3;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, $r0, $r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        return $r2;
    }

    private static java.net.InetAddress fromBigInteger(java.math.BigInteger, boolean)
    {
        byte[] r1, $r2;
        java.lang.Object[] $r4;
        java.lang.AssertionError $r8;
        java.lang.Integer $r3;
        java.net.InetAddress $r6;
        byte b2, $b5;
        int i0, $i1, i3, i4;
        java.math.BigInteger $r0;
        boolean $z0, z1;
        java.lang.IllegalArgumentException $r5;
        java.net.UnknownHostException r7;

        $r0 := @parameter0: java.math.BigInteger;

        $z0 := @parameter1: boolean;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i1 < 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "BigInteger must be greater than or equal to 0");

        if $z0 == 0 goto label03;

        b2 = 16;

        goto label04;

     label03:
        b2 = 4;

     label04:
        $r2 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        r1 = newarray (byte)[b2];

        $i1 = lengthof $r2;

        $i1 = $i1 - b2;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        i0 = lengthof $r2;

        i3 = i0 - $i1;

        i0 = b2 - i3;

        i4 = 0;

     label05:
        if i4 >= $i1 goto label07;

        $b5 = $r2[i4];

        if $b5 != 0 goto label06;

        i4 = i4 + 1;

        goto label05;

     label06:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r3;

        $r4[1] = $r0;

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String,java.lang.Object[])>("BigInteger cannot be converted to InetAddress because it has more than %d bytes: %s", $r4);

        throw $r5;

     label07:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, r1, i0, i3);

     label08:
        $r6 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label09:
        return $r6;

     label10:
        r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r7);

        throw $r8;

        catch java.net.UnknownHostException from label08 to label09 with label10;
    }

    public static java.net.Inet4Address fromIPv4BigInteger(java.math.BigInteger)
    {
        java.net.InetAddress $r1;
        java.math.BigInteger $r0;
        java.net.Inet4Address $r2;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress fromBigInteger(java.math.BigInteger,boolean)>($r0, 0);

        $r2 = (java.net.Inet4Address) $r1;

        return $r2;
    }

    public static java.net.Inet6Address fromIPv6BigInteger(java.math.BigInteger)
    {
        java.net.InetAddress $r1;
        java.net.Inet6Address $r2;
        java.math.BigInteger $r0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress fromBigInteger(java.math.BigInteger,boolean)>($r0, 1);

        $r2 = (java.net.Inet6Address) $r1;

        return $r2;
    }

    public static java.net.Inet4Address fromInteger(int)
    {
        int $i0;
        byte[] $r0;
        java.net.Inet4Address $r1;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <com.google.common.primitives.Ints: byte[] toByteArray(int)>($i0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r0);

        return $r1;
    }

    public static java.net.InetAddress fromLittleEndianByteArray(byte[]) throws java.net.UnknownHostException
    {
        java.net.InetAddress $r1;
        byte[] $r0, r2;
        byte $b2;
        int i0, $i1;

        $r0 := @parameter0: byte[];

        i0 = lengthof $r0;

        r2 = newarray (byte)[i0];

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 >= $i1 goto label2;

        $i1 = lengthof $r0;

        $i1 = $i1 - i0;

        $i1 = $i1 + -1;

        $b2 = $r0[$i1];

        r2[i0] = $b2;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r2);

        return $r1;
    }

    public static java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        byte[] $r2;
        java.lang.String $r1;
        java.net.Inet4Address $r3;
        boolean $z0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>($r0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>($r0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Address \'%s\' is not a 6to4 address.", $r1);

        $r2 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, 2, 6);

        $r3 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r2);

        return $r3;
    }

    public static java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)
    {
        byte[] $r2;
        com.google.common.hash.HashCode $r6;
        long l2;
        java.net.Inet4Address r1;
        java.nio.ByteBuffer $r4;
        java.net.InetAddress $r0;
        java.net.Inet6Address r3;
        byte $b1;
        int i0;
        com.google.common.hash.HashFunction $r5;
        boolean z0;

        $r0 := @parameter0: java.net.InetAddress;

        z0 = $r0 instanceof java.net.Inet4Address;

        if z0 == 0 goto label1;

        r1 = (java.net.Inet4Address) $r0;

        return r1;

     label1:
        $r2 = virtualinvoke $r0.<java.net.InetAddress: byte[] getAddress()>();

        z0 = 1;

        i0 = 0;

     label2:
        if i0 >= 15 goto label4;

        $b1 = $r2[i0];

        if $b1 == 0 goto label3;

        z0 = 0;

        goto label4;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        if z0 == 0 goto label5;

        $b1 = $r2[15];

        if $b1 != 1 goto label5;

        r1 = <com.google.common.net.InetAddresses: java.net.Inet4Address LOOPBACK4>;

        return r1;

     label5:
        if z0 == 0 goto label6;

        $b1 = $r2[15];

        if $b1 != 0 goto label6;

        r1 = <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4>;

        return r1;

     label6:
        r3 = (java.net.Inet6Address) $r0;

        z0 = staticinvoke <com.google.common.net.InetAddresses: boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)>(r3);

        if z0 == 0 goto label7;

        r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)>(r3);

        i0 = virtualinvoke r1.<java.net.Inet4Address: int hashCode()>();

        l2 = (long) i0;

        goto label8;

     label7:
        $r2 = virtualinvoke r3.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r2, 0, 8);

        l2 = virtualinvoke $r4.<java.nio.ByteBuffer: long getLong()>();

     label8:
        $r5 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction murmur3_32_fixed()>();

        $r6 = interfaceinvoke $r5.<com.google.common.hash.HashFunction: com.google.common.hash.HashCode hashLong(long)>(l2);

        i0 = virtualinvoke $r6.<com.google.common.hash.HashCode: int asInt()>();

        i0 = i0 | -536870912;

        if i0 != -1 goto label9;

        i0 = -2;

     label9:
        $r2 = staticinvoke <com.google.common.primitives.Ints: byte[] toByteArray(int)>(i0);

        r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r2);

        return r1;
    }

    public static java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        byte[] $r2;
        java.lang.String $r1;
        java.net.Inet4Address $r3;
        boolean $z0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>($r0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>($r0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Address \'%s\' is not IPv4-compatible.", $r1);

        $r2 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, 12, 16);

        $r3 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r2);

        return $r3;
    }

    public static java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        java.lang.Object[] $r4;
        com.google.common.net.InetAddresses$TeredoInfo $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r5;
        java.net.Inet4Address $r1;
        boolean $z0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>($r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)>($r0);

        return $r1;

     label1:
        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>($r0);

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)>($r0);

        return $r1;

     label2:
        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>($r0);

        if $z0 == 0 goto label3;

        $r2 = staticinvoke <com.google.common.net.InetAddresses: com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)>($r0);

        $r1 = virtualinvoke $r2.<com.google.common.net.InetAddresses$TeredoInfo: java.net.Inet4Address getClient()>();

        return $r1;

     label3:
        $r3 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>($r0);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r3;

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String,java.lang.Object[])>("\'%s\' has no embedded IPv4 address.", $r4);

        throw $r5;
    }

    private static java.net.Inet4Address getInet4Address(byte[])
    {
        java.net.InetAddress $r1;
        byte[] $r0;
        int $i0;
        java.net.Inet4Address $r2;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Byte array has invalid length for an IPv4 address: %s != 4.", $i0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress bytesToInetAddress(byte[])>($r0);

        $r2 = (java.net.Inet4Address) $r1;

        return $r2;
    }

    public static java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        byte[] $r2;
        java.lang.String $r1;
        java.net.Inet4Address $r3;
        boolean $z0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isIsatapAddress(java.net.Inet6Address)>($r0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>($r0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Address \'%s\' is not an ISATAP address.", $r1);

        $r2 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, 12, 16);

        $r3 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r2);

        return $r3;
    }

    public static com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)
    {
        byte[] $r2, $r3;
        com.google.common.net.InetAddresses$TeredoInfo $r7;
        short $s0, $s6;
        byte $b5;
        com.google.common.io.ByteArrayDataInput $r5;
        int i1, i2, i3, $i4;
        java.lang.String $r1;
        boolean $z0;
        java.net.Inet4Address $r4, $r6;
        java.net.Inet6Address $r0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>($r0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>($r0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Address \'%s\' is not a Teredo address.", $r1);

        $r2 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, 4, 8);

        $r4 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r3);

        $r5 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[],int)>($r2, 8);

        $s0 = interfaceinvoke $r5.<com.google.common.io.ByteArrayDataInput: short readShort()>();

        i1 = (int) $s0;

        i1 = i1 & 65535;

        $r5 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[],int)>($r2, 10);

        $s0 = interfaceinvoke $r5.<com.google.common.io.ByteArrayDataInput: short readShort()>();

        $s6 = (short) -1;

        $s0 = $s0 ^ $s6;

        i3 = (int) $s0;

        i2 = 65535 & i3;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, 12, 16);

        i3 = 0;

     label1:
        $i4 = lengthof $r2;

        if i3 >= $i4 goto label2;

        $b5 = $r2[i3];

        $b5 = $b5 ^ -1;

        $r2[i3] = $b5;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r2);

        $r7 = new com.google.common.net.InetAddresses$TeredoInfo;

        specialinvoke $r7.<com.google.common.net.InetAddresses$TeredoInfo: void <init>(java.net.Inet4Address,java.net.Inet4Address,int,int)>($r4, $r6, i2, i1);

        return $r7;
    }

    public static boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        boolean $z0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>($r0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>($r0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>($r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private static java.lang.String hextetsToIPv6String(int[])
    {
        int[] $r0;
        int i0, i1;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        boolean z0, z1;

        $r0 := @parameter0: int[];

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(39);

        z0 = 0;

        i0 = 0;

     label1:
        i1 = lengthof $r0;

        if i0 >= i1 goto label8;

        i1 = $r0[i0];

        if i1 < 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        if z1 == 0 goto label5;

        if z0 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label4:
        i1 = $r0[i0];

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        goto label7;

     label5:
        if i0 == 0 goto label6;

        if z0 == 0 goto label7;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

     label7:
        z0 = z1;

        i0 = i0 + 1;

        goto label1;

     label8:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.net.InetAddress increment(java.net.InetAddress)
    {
        java.net.InetAddress $r0;
        byte[] $r1;
        byte $b1;
        int i0, $i2;
        boolean $z0;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 = virtualinvoke $r0.<java.net.InetAddress: byte[] getAddress()>();

        i0 = lengthof $r1;

        i0 = i0 - 1;

     label1:
        $z0 = 0;

        if i0 < 0 goto label2;

        $b1 = $r1[i0];

        $i2 = (int) $b1;

        if $i2 != -1 goto label2;

        $r1[i0] = 0;

        i0 = i0 + -1;

        goto label1;

     label2:
        if i0 < 0 goto label3;

        $z0 = 1;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Incrementing %s would wrap.", $r0);

        $b1 = $r1[i0];

        $i2 = (int) $b1;

        $i2 = $i2 + 1;

        $b1 = (byte) $i2;

        $r1[i0] = $b1;

        $r0 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress bytesToInetAddress(byte[])>($r1);

        return $r0;
    }

    private static byte[] ipStringToBytes(java.lang.String)
    {
        byte[] $r2;
        char $c3;
        int i0, i1, $i2;
        java.lang.String $r0, r1;
        boolean z0, z1;

        $r0 := @parameter0: java.lang.String;

        r1 = $r0;

        z0 = 0;

        z1 = 0;

        i0 = -1;

        i1 = 0;

     label01:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i1 >= $i2 goto label07;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $i2 = (int) $c3;

        if $i2 != 46 goto label02;

        z1 = 1;

        goto label06;

     label02:
        $i2 = (int) $c3;

        if $i2 != 58 goto label04;

        if z1 == 0 goto label03;

        return null;

     label03:
        z0 = 1;

        goto label06;

     label04:
        $i2 = (int) $c3;

        if $i2 != 37 goto label05;

        i0 = i1;

        goto label07;

     label05:
        $i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, 16);

        if $i2 != -1 goto label06;

        return null;

     label06:
        i1 = i1 + 1;

        goto label01;

     label07:
        if z0 == 0 goto label10;

        if z1 == 0 goto label08;

        $r0 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String convertDottedQuadToHex(java.lang.String)>($r0);

        r1 = $r0;

        if $r0 != null goto label08;

        return null;

     label08:
        if i0 == -1 goto label09;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label09:
        $r2 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV6(java.lang.String)>(r1);

        return $r2;

     label10:
        if z1 == 0 goto label12;

        if i0 == -1 goto label11;

        return null;

     label11:
        $r2 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV4(java.lang.String)>($r0);

        return $r2;

     label12:
        return null;
    }

    public static boolean is6to4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        byte[] $r1;
        byte $b0;
        int $i1;

        $r0 := @parameter0: java.net.Inet6Address;

        $r1 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[0];

        $i1 = (int) $b0;

        if $i1 != 32 goto label1;

        $b0 = $r1[1];

        $i1 = (int) $b0;

        if $i1 != 2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isCompatIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        byte[] $r1;
        byte $b0;
        boolean $z0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = virtualinvoke $r0.<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[12];

        if $b0 != 0 goto label2;

        $b0 = $r1[13];

        if $b0 != 0 goto label2;

        $b0 = $r1[14];

        if $b0 != 0 goto label2;

        $b0 = $r1[15];

        if $b0 == 0 goto label3;

        $b0 = $r1[15];

        if $b0 != 1 goto label4;

        return 0;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isInetAddress(java.lang.String)
    {
        byte[] $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] ipStringToBytes(java.lang.String)>($r0);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isIsatapAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        byte[] $r1;
        byte $b0;
        int $i1;
        boolean $z0;

        $r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>($r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[8];

        $b0 = $b0 | 3;

        $i1 = (int) $b0;

        if $i1 == 3 goto label2;

        return 0;

     label2:
        $b0 = $r1[9];

        if $b0 != 0 goto label3;

        $b0 = $r1[10];

        $i1 = (int) $b0;

        if $i1 != 94 goto label3;

        $b0 = $r1[11];

        $i1 = (int) $b0;

        if $i1 != -2 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isMappedIPv4Address(java.lang.String)
    {
        byte[] $r1;
        byte $b1;
        int i0, $i2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] ipStringToBytes(java.lang.String)>($r0);

        if $r1 == null goto label7;

        i0 = lengthof $r1;

        if i0 != 16 goto label7;

        i0 = 0;

     label1:
        if i0 >= 10 goto label3;

        $b1 = $r1[i0];

        if $b1 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        i0 = 10;

     label4:
        if i0 >= 12 goto label6;

        $b1 = $r1[i0];

        $i2 = (int) $b1;

        if $i2 == -1 goto label5;

        return 0;

     label5:
        i0 = i0 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    public static boolean isMaximum(java.net.InetAddress)
    {
        java.net.InetAddress $r0;
        byte[] $r1;
        byte b0;
        int $i1, $i2, $i3;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 = virtualinvoke $r0.<java.net.InetAddress: byte[] getAddress()>();

        $i1 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        b0 = $r1[$i2];

        $i3 = (int) b0;

        if $i3 == -1 goto label2;

        return 0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isTeredoAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address $r0;
        byte[] $r1;
        byte $b0;
        int $i1;

        $r0 := @parameter0: java.net.Inet6Address;

        $r1 = virtualinvoke $r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[0];

        $i1 = (int) $b0;

        if $i1 != 32 goto label1;

        $b0 = $r1[1];

        if $b0 != 1 goto label1;

        $b0 = $r1[2];

        if $b0 != 0 goto label1;

        $b0 = $r1[3];

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isUriInetAddress(java.lang.String)
    {
        java.net.InetAddress $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forUriStringNoThrow(java.lang.String)>($r0);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private static short parseHextet(java.lang.String, int, int)
    {
        char $c3;
        java.lang.NumberFormatException r1;
        short s5;
        int $i0, $i1, i2, $i4;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i1 - $i0;

        if i2 <= 0 goto label3;

        if i2 > 4 goto label3;

        i2 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        i2 = i2 << 4;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, 16);

        i2 = i2 | $i4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        s5 = (short) i2;

        return s5;

     label3:
        r1 = new java.lang.NumberFormatException;

        specialinvoke r1.<java.lang.NumberFormatException: void <init>()>();

        throw r1;
    }

    private static byte parseOctet(java.lang.String, int, int)
    {
        char $c3;
        java.lang.NumberFormatException $r1;
        byte b5;
        int $i0, $i1, i2, $i4;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i1 - $i0;

        if i2 <= 0 goto label7;

        if i2 > 3 goto label7;

        if i2 <= 1 goto label2;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        i2 = (int) $c3;

        if i2 == 48 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label2:
        i2 = 0;

     label3:
        if $i0 >= $i1 goto label5;

        i2 = i2 * 10;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, 10);

        if $i4 < 0 goto label4;

        i2 = i2 + $i4;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label5:
        if i2 > 255 goto label6;

        b5 = (byte) i2;

        return b5;

     label6:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label7:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;
    }

    private static byte[] textToNumericFormatV4(java.lang.String)
    {
        byte[] r2;
        com.google.common.base.CharMatcher r1;
        java.lang.NumberFormatException r3;
        byte $b4;
        int $i0, i1, $i2, i3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        r1 = <com.google.common.net.InetAddresses: com.google.common.base.CharMatcher IPV4_DELIMITER_MATCHER>;

        $i0 = virtualinvoke r1.<com.google.common.base.CharMatcher: int countIn(java.lang.CharSequence)>($r0);

        $i0 = $i0 + 1;

        if $i0 == 4 goto label1;

        return null;

     label1:
        r2 = newarray (byte)[4];

        $i0 = 0;

        i1 = 0;

     label2:
        if i1 >= 4 goto label6;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(46, $i0);

        i3 = $i2;

        if $i2 != -1 goto label3;

        i3 = virtualinvoke $r0.<java.lang.String: int length()>();

     label3:
        $b4 = staticinvoke <com.google.common.net.InetAddresses: byte parseOctet(java.lang.String,int,int)>($r0, $i0, i3);

     label4:
        r2[i1] = $b4;

        $i0 = i3 + 1;

        i1 = i1 + 1;

        goto label2;

     label5:
        r3 := @caughtexception;

        return null;

     label6:
        return r2;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    private static byte[] textToNumericFormatV6(java.lang.String)
    {
        byte[] $r3;
        com.google.common.base.CharMatcher r1;
        char $c4;
        java.lang.NumberFormatException r4;
        java.nio.ByteBuffer $r2;
        short $s5;
        int $i0, i1, i2, $i3;
        java.lang.String $r0;
        boolean z0;

        $r0 := @parameter0: java.lang.String;

        r1 = <com.google.common.net.InetAddresses: com.google.common.base.CharMatcher IPV6_DELIMITER_MATCHER>;

        $i0 = virtualinvoke r1.<com.google.common.base.CharMatcher: int countIn(java.lang.CharSequence)>($r0);

        if $i0 < 2 goto label28;

        if $i0 <= 8 goto label01;

        return null;

     label01:
        i1 = $i0 + 1;

        i1 = 8 - i1;

        z0 = 0;

        i2 = 0;

     label02:
        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = $i3 - 1;

        if i2 >= $i3 goto label06;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c4;

        if $i3 != 58 goto label05;

        $i3 = i2 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        $i3 = (int) $c4;

        if $i3 != 58 goto label05;

        if z0 == 0 goto label03;

        return null;

     label03:
        z0 = 1;

        i1 = i1 + 1;

        if i2 != 0 goto label04;

        i1 = i1 + 1;

     label04:
        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = $i3 - 2;

        if i2 != $i3 goto label05;

        i1 = i1 + 1;

     label05:
        i2 = i2 + 1;

        goto label02;

     label06:
        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        i2 = (int) $c4;

        if i2 != 58 goto label07;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        i2 = (int) $c4;

        if i2 == 58 goto label07;

        return null;

     label07:
        i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        i2 = i2 - 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        i2 = (int) $c4;

        if i2 != 58 goto label08;

        i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        i2 = i2 - 2;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        i2 = (int) $c4;

        if i2 == 58 goto label08;

        return null;

     label08:
        if z0 == 0 goto label09;

        if i1 > 0 goto label09;

        return null;

     label09:
        if z0 != 0 goto label10;

        $i0 = $i0 + 1;

        if $i0 == 8 goto label10;

        return null;

     label10:
        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        $i0 = 0;

     label11:
        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

     label12:
        i2 = (int) $c4;

        if i2 != 58 goto label13;

        $i0 = 1;

     label13:
        i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label14:
        if $i0 >= i2 goto label26;

     label15:
        $i3 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(58, $i0);

     label16:
        i2 = $i3;

        if $i3 != -1 goto label18;

     label17:
        i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label18:
        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

     label19:
        $i3 = (int) $c4;

        if $i3 != 58 goto label24;

        $i0 = 0;

     label20:
        if $i0 >= i1 goto label23;

     label21:
        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

     label22:
        $i0 = $i0 + 1;

        goto label20;

     label23:
        goto label25;

     label24:
        $s5 = staticinvoke <com.google.common.net.InetAddresses: short parseHextet(java.lang.String,int,int)>($r0, $i0, i2);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s5);

     label25:
        $i0 = i2 + 1;

        goto label13;

     label26:
        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;

     label27:
        r4 := @caughtexception;

     label28:
        return null;

        catch java.lang.NumberFormatException from label11 to label12 with label27;
        catch java.lang.NumberFormatException from label13 to label14 with label27;
        catch java.lang.NumberFormatException from label15 to label16 with label27;
        catch java.lang.NumberFormatException from label17 to label18 with label27;
        catch java.lang.NumberFormatException from label18 to label19 with label27;
        catch java.lang.NumberFormatException from label21 to label22 with label27;
        catch java.lang.NumberFormatException from label24 to label25 with label27;
    }

    public static java.lang.String toAddrString(java.net.InetAddress)
    {
        byte[] $r2;
        java.net.InetAddress $r0;
        byte $b2, $b3;
        int[] r3;
        int i0, $i1;
        java.lang.String $r1;
        boolean z0;

        $r0 := @parameter0: java.net.InetAddress;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        z0 = $r0 instanceof java.net.Inet4Address;

        if z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r1;

     label1:
        z0 = $r0 instanceof java.net.Inet6Address;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        $r2 = virtualinvoke $r0.<java.net.InetAddress: byte[] getAddress()>();

        r3 = newarray (int)[8];

        i0 = 0;

     label2:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label3;

        $i1 = i0 * 2;

        $b2 = $r2[$i1];

        $i1 = i0 * 2;

        $i1 = $i1 + 1;

        $b3 = $r2[$i1];

        $i1 = staticinvoke <com.google.common.primitives.Ints: int fromBytes(byte,byte,byte,byte)>(0, 0, $b2, $b3);

        r3[i0] = $i1;

        i0 = i0 + 1;

        goto label2;

     label3:
        staticinvoke <com.google.common.net.InetAddresses: void compressLongestRunOfZeroes(int[])>(r3);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String hextetsToIPv6String(int[])>(r3);

        return $r1;
    }

    public static java.math.BigInteger toBigInteger(java.net.InetAddress)
    {
        java.net.InetAddress $r0;
        byte[] $r2;
        java.math.BigInteger $r1;

        $r0 := @parameter0: java.net.InetAddress;

        $r1 = new java.math.BigInteger;

        $r2 = virtualinvoke $r0.<java.net.InetAddress: byte[] getAddress()>();

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        return $r1;
    }

    public static java.lang.String toUriString(java.net.InetAddress)
    {
        java.net.InetAddress $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.net.InetAddress;

        $z0 = $r0 instanceof java.net.Inet6Address;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>($r0);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + 2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label1:
        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>($r0);

        return $r2;
    }
}
