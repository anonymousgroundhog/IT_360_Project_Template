public final class com.google.common.util.concurrent.MoreExecutors extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.util.concurrent.MoreExecutors r0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000(java.util.concurrent.ThreadPoolExecutor)
    {
        java.util.concurrent.ThreadPoolExecutor $r0;

        $r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        staticinvoke <com.google.common.util.concurrent.MoreExecutors: void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor)>($r0);

        return;
    }

    public static void addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        com.google.common.util.concurrent.MoreExecutors$Application $r2;
        long $l0;
        java.util.concurrent.ExecutorService $r0;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r2 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)>($r0, $l0, $r1);

        return;
    }

    public static java.util.concurrent.Executor directExecutor()
    {
        com.google.common.util.concurrent.DirectExecutor r0;

        r0 = <com.google.common.util.concurrent.DirectExecutor: com.google.common.util.concurrent.DirectExecutor INSTANCE>;

        return r0;
    }

    public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)
    {
        com.google.common.util.concurrent.MoreExecutors$Application $r2;
        java.util.concurrent.ThreadPoolExecutor $r0;
        java.util.concurrent.ExecutorService $r1;

        $r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $r2 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r1 = virtualinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r0);

        return $r1;
    }

    public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        com.google.common.util.concurrent.MoreExecutors$Application $r3;
        java.util.concurrent.ThreadPoolExecutor $r0;
        long $l0;
        java.util.concurrent.ExecutorService $r2;

        $r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r3.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r2 = virtualinvoke $r3.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)>($r0, $l0, $r1);

        return $r2;
    }

    public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        java.util.concurrent.ScheduledThreadPoolExecutor $r0;
        com.google.common.util.concurrent.MoreExecutors$Application $r2;

        $r0 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        $r2 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r1 = virtualinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)>($r0);

        return $r1;
    }

    public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        com.google.common.util.concurrent.MoreExecutors$Application $r3;
        java.util.concurrent.ScheduledExecutorService $r2;
        java.util.concurrent.ScheduledThreadPoolExecutor $r0;
        long $l0;

        $r0 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r3.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r2 = virtualinvoke $r3.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)>($r0, $l0, $r1);

        return $r2;
    }

    static java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService, java.util.Collection, boolean, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable r6;
        com.google.common.util.concurrent.ListenableFuture $r10;
        java.util.concurrent.TimeoutException $r17;
        long l0, $l1, $l4;
        java.util.concurrent.Callable r9;
        java.util.ArrayList $r4;
        java.util.concurrent.Future r12, r13;
        int $i2, i3;
        boolean z0, z1;
        java.util.Iterator $r7;
        java.util.Collection r1;
        java.lang.RuntimeException r15;
        java.util.concurrent.LinkedBlockingQueue $r5;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.ExecutionException r11, $r16;
        java.lang.Object $r8, $r14;
        com.google.common.util.concurrent.ListeningExecutorService r0, r3;

        r0 := @parameter0: com.google.common.util.concurrent.ListeningExecutorService;

        r1 := @parameter1: java.util.Collection;

        z0 := @parameter2: boolean;

        l0 := @parameter3: long;

        r2 := @parameter4: java.util.concurrent.TimeUnit;

        r3 = r0;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i2 <= 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z1);

        $r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i2);

        $r5 = staticinvoke <com.google.common.collect.Queues: java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue()>();

        l0 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        if z0 == 0 goto label06;

     label03:
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        goto label07;

     label05:
        r6 := @caughtexception;

        goto label38;

     label06:
        $l1 = 0L;

     label07:
        $r7 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.concurrent.Callable) $r8;

        $r10 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>(r0, r9, $r5);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

     label08:
        i3 = $i2 + -1;

        r11 = null;

        $i2 = 1;

     label09:
        $r8 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        r12 = (java.util.concurrent.Future) $r8;

     label10:
        if r12 != null goto label26;

        if i3 <= 0 goto label13;

        i3 = i3 + -1;

     label11:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.concurrent.Callable) $r8;

        $r10 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>(r3, r9, $r5);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

     label12:
        $i2 = $i2 + 1;

        goto label26;

     label13:
        if $i2 != 0 goto label18;

        if r11 != null goto label17;

     label14:
        $r16 = new java.util.concurrent.ExecutionException;

     label15:
        specialinvoke $r16.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(null);

     label16:
        r11 = $r16;

     label17:
        throw r11;

     label18:
        if z0 == 0 goto label25;

     label19:
        r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r8 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(l0, r2);

        r13 = (java.util.concurrent.Future) $r8;

     label20:
        r12 = r13;

        if r13 == null goto label23;

     label21:
        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

     label22:
        $l1 = $l4 - $l1;

        l0 = l0 - $l1;

        $l1 = $l4;

        goto label26;

     label23:
        $r17 = new java.util.concurrent.TimeoutException;

     label24:
        specialinvoke $r17.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r17;

     label25:
        $r8 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        r12 = (java.util.concurrent.Future) $r8;

     label26:
        if r12 == null goto label36;

        $i2 = $i2 + -1;

     label27:
        $r8 = interfaceinvoke r12.<java.util.concurrent.Future: java.lang.Object get()>();

     label28:
        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label29:
        z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label30;

        $r14 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.concurrent.Future) $r14;

        interfaceinvoke r12.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        goto label29;

     label30:
        return $r8;

     label31:
        r15 := @caughtexception;

     label32:
        $r16 = new java.util.concurrent.ExecutionException;

     label33:
        specialinvoke $r16.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(r15);

     label34:
        r11 = $r16;

        goto label36;

     label35:
        r11 := @caughtexception;

        goto label36;

     label36:
        r3 = r0;

        goto label09;

     label37:
        r6 := @caughtexception;

     label38:
        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label39:
        z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label40;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.concurrent.Future) $r8;

        interfaceinvoke r12.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        goto label39;

     label40:
        throw r6;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label37;
        catch java.lang.Throwable from label11 to label12 with label37;
        catch java.lang.Throwable from label14 to label15 with label37;
        catch java.lang.Throwable from label15 to label16 with label37;
        catch java.lang.Throwable from label17 to label18 with label37;
        catch java.lang.Throwable from label19 to label20 with label37;
        catch java.lang.Throwable from label21 to label22 with label37;
        catch java.lang.Throwable from label23 to label24 with label37;
        catch java.lang.Throwable from label24 to label26 with label37;
        catch java.util.concurrent.ExecutionException from label27 to label28 with label35;
        catch java.lang.RuntimeException from label27 to label28 with label31;
        catch java.lang.Throwable from label27 to label28 with label37;
        catch java.lang.Throwable from label32 to label33 with label37;
        catch java.lang.Throwable from label33 to label34 with label37;
    }

    private static boolean isAppEngineWithApiClasses()
    {
        java.lang.IllegalAccessException r7;
        java.lang.Object[] $r4;
        java.lang.NoSuchMethodException r6;
        java.lang.Class[] $r2;
        java.lang.reflect.InvocationTargetException r8;
        java.lang.Class $r1;
        java.lang.Object $r5;
        java.lang.ClassNotFoundException r9, r10;
        java.lang.String $r0;
        java.lang.reflect.Method $r3;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.google.appengine.runtime.environment");

        if $r0 != null goto label01;

        return 0;

     label01:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.appengine.api.utils.SystemProperty");

     label02:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.apphosting.api.ApiProxy");

     label03:
        $r2 = newarray (java.lang.Class)[0];

     label04:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCurrentEnvironment", $r2);

     label05:
        $r4 = newarray (java.lang.Object)[0];

     label06:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label07:
        if $r5 == null goto label13;

        return 1;

     label08:
        r6 := @caughtexception;

        return 0;

     label09:
        r7 := @caughtexception;

        return 0;

     label10:
        r8 := @caughtexception;

        return 0;

     label11:
        r9 := @caughtexception;

        return 0;

     label12:
        r10 := @caughtexception;

     label13:
        return 0;

        catch java.lang.ClassNotFoundException from label01 to label02 with label12;
        catch java.lang.ClassNotFoundException from label02 to label03 with label11;
        catch java.lang.ClassNotFoundException from label04 to label05 with label11;
        catch java.lang.ClassNotFoundException from label06 to label07 with label11;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label10;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label10;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label10;
        catch java.lang.IllegalAccessException from label02 to label03 with label09;
        catch java.lang.IllegalAccessException from label04 to label05 with label09;
        catch java.lang.IllegalAccessException from label06 to label07 with label09;
        catch java.lang.NoSuchMethodException from label02 to label03 with label08;
        catch java.lang.NoSuchMethodException from label04 to label05 with label08;
        catch java.lang.NoSuchMethodException from label06 to label07 with label08;
    }

    public static com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService $r3;
        com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator $r2;
        com.google.common.util.concurrent.MoreExecutors$ListeningDecorator $r4;
        java.util.concurrent.ExecutorService $r0;
        boolean $z0;
        com.google.common.util.concurrent.ListeningExecutorService $r1;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $z0 = $r0 instanceof com.google.common.util.concurrent.ListeningExecutorService;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.util.concurrent.ListeningExecutorService) $r0;

        return $r1;

     label1:
        $z0 = $r0 instanceof java.util.concurrent.ScheduledExecutorService;

        if $z0 == 0 goto label2;

        $r2 = new com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator;

        $r3 = (java.util.concurrent.ScheduledExecutorService) $r0;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>($r3);

        return $r2;

     label2:
        $r4 = new com.google.common.util.concurrent.MoreExecutors$ListeningDecorator;

        specialinvoke $r4.<com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void <init>(java.util.concurrent.ExecutorService)>($r0);

        return $r4;
    }

    public static com.google.common.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService $r0;
        com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator $r2;
        com.google.common.util.concurrent.ListeningScheduledExecutorService $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        $z0 = $r0 instanceof com.google.common.util.concurrent.ListeningScheduledExecutorService;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.util.concurrent.ListeningScheduledExecutorService) $r0;

        return $r1;

     label1:
        $r2 = new com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>($r0);

        return $r2;
    }

    public static com.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService()
    {
        com.google.common.util.concurrent.MoreExecutors$DirectExecutorService $r0;

        $r0 = new com.google.common.util.concurrent.MoreExecutors$DirectExecutorService;

        specialinvoke $r0.<com.google.common.util.concurrent.MoreExecutors$DirectExecutorService: void <init>(com.google.common.util.concurrent.MoreExecutors$1)>(null);

        return $r0;
    }

    public static java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.SequentialExecutor $r1;
        java.util.concurrent.Executor $r0;

        $r0 := @parameter0: java.util.concurrent.Executor;

        $r1 = new com.google.common.util.concurrent.SequentialExecutor;

        specialinvoke $r1.<com.google.common.util.concurrent.SequentialExecutor: void <init>(java.util.concurrent.Executor)>($r0);

        return $r1;
    }

    static java.lang.Thread newThread(java.lang.String, java.lang.Runnable)
    {
        java.lang.Thread $r4;
        java.lang.SecurityException $r2;
        java.lang.String $r0;
        java.util.concurrent.ThreadFactory $r3;
        java.lang.Runnable $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Runnable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ThreadFactory platformThreadFactory()>();

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r1);

     label1:
        virtualinvoke $r4.<java.lang.Thread: void setName(java.lang.String)>($r0);

     label2:
        return $r4;

     label3:
        $r2 := @caughtexception;

        return $r4;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static java.util.concurrent.ThreadFactory platformThreadFactory()
    {
        java.lang.Throwable $r7;
        java.lang.IllegalAccessException r11;
        java.lang.Object[] $r4;
        java.lang.NoSuchMethodException r9;
        java.lang.Class[] $r0;
        java.lang.RuntimeException $r8;
        java.lang.reflect.InvocationTargetException r6;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.ClassNotFoundException r10;
        java.util.concurrent.ThreadFactory $r1;
        java.lang.reflect.Method $r3;
        boolean $z0;

        $z0 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: boolean isAppEngineWithApiClasses()>();

        if $z0 != 0 goto label01;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        return $r1;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.appengine.api.ThreadManager");

     label02:
        $r0 = newarray (java.lang.Class)[0];

     label03:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("currentRequestThreadFactory", $r0);

     label04:
        $r4 = newarray (java.lang.Object)[0];

     label05:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label06:
        $r1 = (java.util.concurrent.ThreadFactory) $r5;

        return $r1;

     label07:
        r6 := @caughtexception;

        $r7 = virtualinvoke r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r8 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>($r7);

        throw $r8;

     label08:
        r9 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t invoke ThreadManager.currentRequestThreadFactory", r9);

        throw $r8;

     label09:
        r10 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t invoke ThreadManager.currentRequestThreadFactory", r10);

        throw $r8;

     label10:
        r11 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t invoke ThreadManager.currentRequestThreadFactory", r11);

        throw $r8;

        catch java.lang.IllegalAccessException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label03 to label04 with label10;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.ClassNotFoundException from label01 to label02 with label09;
        catch java.lang.ClassNotFoundException from label03 to label04 with label09;
        catch java.lang.ClassNotFoundException from label05 to label06 with label09;
        catch java.lang.NoSuchMethodException from label01 to label02 with label08;
        catch java.lang.NoSuchMethodException from label03 to label04 with label08;
        catch java.lang.NoSuchMethodException from label05 to label06 with label08;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label07;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label07;
    }

    static java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor, com.google.common.util.concurrent.AbstractFuture)
    {
        java.util.concurrent.Executor $r0, $r2;
        com.google.common.util.concurrent.MoreExecutors$5 $r3;
        com.google.common.util.concurrent.AbstractFuture r1;

        $r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        if $r0 != $r2 goto label1;

        return $r0;

     label1:
        $r3 = new com.google.common.util.concurrent.MoreExecutors$5;

        specialinvoke $r3.<com.google.common.util.concurrent.MoreExecutors$5: void <init>(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r0, r1);

        return $r3;
    }

    static java.util.concurrent.Executor renamingDecorator(java.util.concurrent.Executor, com.google.common.base.Supplier)
    {
        com.google.common.base.Supplier r1;
        com.google.common.util.concurrent.MoreExecutors$2 $r2;
        java.util.concurrent.Executor $r0;

        $r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.util.concurrent.MoreExecutors$2;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$2: void <init>(java.util.concurrent.Executor,com.google.common.base.Supplier)>($r0, r1);

        return $r2;
    }

    static java.util.concurrent.ExecutorService renamingDecorator(java.util.concurrent.ExecutorService, com.google.common.base.Supplier)
    {
        com.google.common.base.Supplier r1;
        com.google.common.util.concurrent.MoreExecutors$3 $r2;
        java.util.concurrent.ExecutorService $r0;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.util.concurrent.MoreExecutors$3;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$3: void <init>(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)>($r0, r1);

        return $r2;
    }

    static java.util.concurrent.ScheduledExecutorService renamingDecorator(java.util.concurrent.ScheduledExecutorService, com.google.common.base.Supplier)
    {
        java.util.concurrent.ScheduledExecutorService $r0;
        com.google.common.base.Supplier r1;
        com.google.common.util.concurrent.MoreExecutors$4 $r2;

        $r0 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.util.concurrent.MoreExecutors$4;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$4: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)>($r0, r1);

        return $r2;
    }

    public static boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException r2;
        java.lang.Thread $r3;
        long $l0;
        java.util.concurrent.ExecutorService $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $l0 = $l0 / 2L;

        interfaceinvoke $r0.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label1:
        $z0 = interfaceinvoke $r0.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label2:
        if $z0 != 0 goto label6;

     label3:
        interfaceinvoke $r0.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label4:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label5:
        interfaceinvoke $r0.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label6:
        goto label8;

     label7:
        r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        interfaceinvoke $r0.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label8:
        $z0 = interfaceinvoke $r0.<java.util.concurrent.ExecutorService: boolean isTerminated()>();

        return $z0;

        catch java.lang.InterruptedException from label1 to label2 with label7;
        catch java.lang.InterruptedException from label3 to label4 with label7;
        catch java.lang.InterruptedException from label5 to label6 with label7;
    }

    private static com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable, java.util.concurrent.BlockingQueue)
    {
        com.google.common.util.concurrent.MoreExecutors$1 $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;
        java.util.concurrent.Executor $r5;
        java.util.concurrent.Callable r1;
        java.util.concurrent.BlockingQueue r2;
        com.google.common.util.concurrent.ListeningExecutorService $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ListeningExecutorService;

        r1 := @parameter1: java.util.concurrent.Callable;

        r2 := @parameter2: java.util.concurrent.BlockingQueue;

        $r4 = interfaceinvoke $r0.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(r1);

        $r3 = new com.google.common.util.concurrent.MoreExecutors$1;

        specialinvoke $r3.<com.google.common.util.concurrent.MoreExecutors$1: void <init>(java.util.concurrent.BlockingQueue,com.google.common.util.concurrent.ListenableFuture)>(r2, $r4);

        $r5 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r4.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r3, $r5);

        return $r4;
    }

    private static void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r1;
        java.util.concurrent.ThreadFactory $r2;
        java.util.concurrent.ThreadPoolExecutor $r0;

        $r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new com.google.common.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1);

        $r2 = virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>();

        $r1 = virtualinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)>($r2);

        $r2 = virtualinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r2);

        return;
    }
}
