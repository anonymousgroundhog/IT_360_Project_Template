public class androidx.core.graphics.TypefaceCompatUtil extends java.lang.Object
{
    private static final java.lang.String CACHE_FILE_PREFIX;
    private static final java.lang.String TAG;

    private void <init>()
    {
        androidx.core.graphics.TypefaceCompatUtil r0;

        r0 := @this: androidx.core.graphics.TypefaceCompatUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.IOException $r1;
        java.io.Closeable $r0;

        $r0 := @parameter0: java.io.Closeable;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.nio.ByteBuffer copyToDirectBuffer(android.content.Context, android.content.res.Resources, int)
    {
        java.lang.Throwable $r4;
        android.content.Context $r0;
        int $i0;
        java.io.File $r2;
        java.nio.ByteBuffer $r3;
        android.content.res.Resources $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.content.res.Resources;

        $i0 := @parameter2: int;

        $r2 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>($r0);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>($r2, $r1, $i0);

     label2:
        if $z0 != 0 goto label3;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return null;

     label3:
        $r3 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(java.io.File)>($r2);

     label4:
        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return $r3;

     label5:
        $r4 := @caughtexception;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static boolean copyToFile(java.io.File, android.content.res.Resources, int)
    {
        java.lang.Throwable $r4;
        int $i0;
        java.io.File $r0;
        android.content.res.Resources $r1;
        java.io.InputStream r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: android.content.res.Resources;

        $i0 := @parameter2: int;

        r2 = null;

     label1:
        $r3 = virtualinvoke $r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>($i0);

     label2:
        r2 = $r3;

     label3:
        $z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>($r0, $r3);

     label4:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($r3);

        return $z0;

     label5:
        $r4 := @caughtexception;

        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static boolean copyToFile(java.io.File, java.io.InputStream)
    {
        java.lang.Throwable $r5;
        byte[] r4;
        android.os.StrictMode$ThreadPolicy $r3;
        java.io.FileOutputStream r2, $r9;
        java.io.IOException r6;
        java.io.File $r0;
        int $i0;
        java.lang.StringBuilder r7, $r10;
        java.lang.String $r8;
        java.io.InputStream $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.InputStream;

        r2 = null;

        $r3 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>();

     label01:
        $r9 = new java.io.FileOutputStream;

     label02:
        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r0, 0);

     label03:
        r2 = $r9;

        r4 = newarray (byte)[1024];

     label04:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>(r4);

     label05:
        if $i0 == -1 goto label08;

     label06:
        virtualinvoke $r9.<java.io.FileOutputStream: void write(byte[],int,int)>(r4, 0, $i0);

     label07:
        goto label04;

     label08:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($r9);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r3);

        return 1;

     label09:
        $r5 := @caughtexception;

        goto label14;

     label10:
        r6 := @caughtexception;

     label11:
        $r10 = new java.lang.StringBuilder;

     label12:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error copying resource contents to temp file: ");

        $r8 = virtualinvoke r6.<java.io.IOException: java.lang.String getMessage()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TypefaceCompatUtil", $r8);

     label13:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r2);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r3);

        return 0;

     label14:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r2);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r3);

        throw $r5;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public static java.io.File getTempFile(android.content.Context)
    {
        android.content.Context $r0;
        java.io.IOException $r6;
        java.io.File $r1, r4;
        int $i0;
        java.lang.StringBuilder r2;
        java.lang.String $r3, $r5;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.io.File getCacheDir()>();

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".font");

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i0 = staticinvoke <android.os.Process: int myTid()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = 0;

     label2:
        if $i0 >= 100 goto label8;

        r4 = new java.io.File;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

     label3:
        $z0 = virtualinvoke r4.<java.io.File: boolean createNewFile()>();

     label4:
        if $z0 == 0 goto label5;

        return r4;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        $i0 = $i0 + 1;

        goto label2;

     label8:
        return null;

        catch java.io.IOException from label3 to label4 with label6;
    }

    public static java.nio.ByteBuffer mmap(android.content.Context, android.os.CancellationSignal, android.net.Uri)
    {
        java.lang.Throwable r10, $r11, r12, r13;
        android.content.Context r0;
        android.os.ParcelFileDescriptor $r4;
        android.net.Uri r2;
        long $l0;
        java.nio.channels.FileChannel$MapMode $r8;
        android.content.ContentResolver $r3;
        android.os.CancellationSignal r1;
        java.io.IOException r14;
        java.io.FileInputStream r5;
        java.io.FileDescriptor $r6;
        java.nio.channels.FileChannel $r7;
        java.nio.MappedByteBuffer $r9;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.CancellationSignal;

        r2 := @parameter2: android.net.Uri;

        $r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        $r4 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil$Api19Impl: android.os.ParcelFileDescriptor openFileDescriptor(android.content.ContentResolver,android.net.Uri,java.lang.String,android.os.CancellationSignal)>($r3, r2, "r", r1);

     label02:
        if $r4 != null goto label05;

        if $r4 == null goto label24;

     label03:
        virtualinvoke $r4.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        return null;

     label05:
        r5 = new java.io.FileInputStream;

        $r6 = virtualinvoke $r4.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r5.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r6);

     label06:
        $r7 = virtualinvoke r5.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r7.<java.nio.channels.FileChannel: long size()>();

        $r8 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r9 = virtualinvoke $r7.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r8, 0L, $l0);

     label07:
        virtualinvoke r5.<java.io.FileInputStream: void close()>();

     label08:
        if $r4 == null goto label25;

     label09:
        virtualinvoke $r4.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        return $r9;

     label11:
        r10 := @caughtexception;

     label12:
        virtualinvoke r5.<java.io.FileInputStream: void close()>();

     label13:
        goto label16;

     label14:
        $r11 := @caughtexception;

     label15:
        virtualinvoke r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label16:
        throw r10;

     label17:
        r12 := @caughtexception;

        if $r4 == null goto label22;

     label18:
        virtualinvoke $r4.<android.os.ParcelFileDescriptor: void close()>();

     label19:
        goto label22;

     label20:
        r13 := @caughtexception;

     label21:
        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r13);

     label22:
        throw r12;

     label23:
        r14 := @caughtexception;

     label24:
        return null;

     label25:
        return $r9;

        catch java.io.IOException from label01 to label02 with label23;
        catch java.io.IOException from label03 to label04 with label23;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.io.IOException from label09 to label10 with label23;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.io.IOException from label21 to label23 with label23;
    }

    private static java.nio.ByteBuffer mmap(java.io.File)
    {
        java.lang.Throwable r5, $r6;
        long $l0;
        java.io.IOException r7;
        java.io.FileInputStream r1;
        java.nio.channels.FileChannel$MapMode $r3;
        java.io.File r0;
        java.nio.channels.FileChannel $r2;
        java.nio.MappedByteBuffer $r4;

        r0 := @parameter0: java.io.File;

        r1 = new java.io.FileInputStream;

     label01:
        specialinvoke r1.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

     label02:
        $r2 = virtualinvoke r1.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r2.<java.nio.channels.FileChannel: long size()>();

        $r3 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r4 = virtualinvoke $r2.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r3, 0L, $l0);

     label03:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label04:
        return $r4;

     label05:
        r5 := @caughtexception;

     label06:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

     label09:
        virtualinvoke r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label10:
        throw r5;

     label11:
        r7 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label11 with label11;
    }

    public static java.util.Map readFontInfoIntoByteBuffer(android.content.Context, androidx.core.provider.FontsContractCompat$FontInfo[], android.os.CancellationSignal)
    {
        android.content.Context $r0;
        androidx.core.provider.FontsContractCompat$FontInfo r4;
        android.os.CancellationSignal $r2;
        android.net.Uri $r5;
        java.util.HashMap r3;
        java.nio.ByteBuffer $r6;
        androidx.core.provider.FontsContractCompat$FontInfo[] $r1;
        java.util.Map $r7;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: androidx.core.provider.FontsContractCompat$FontInfo[];

        $r2 := @parameter2: android.os.CancellationSignal;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        r4 = $r1[$i1];

        $i2 = virtualinvoke r4.<androidx.core.provider.FontsContractCompat$FontInfo: int getResultCode()>();

        if $i2 == 0 goto label2;

        goto label4;

     label2:
        $r5 = virtualinvoke r4.<androidx.core.provider.FontsContractCompat$FontInfo: android.net.Uri getUri()>();

        $z0 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r6 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri)>($r0, $r2, $r5);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

     label4:
        $i1 = $i1 + 1;

        goto label1;

     label5:
        $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r3);

        return $r7;
    }

    public static void <clinit>()
    {
        <androidx.core.graphics.TypefaceCompatUtil: java.lang.String TAG> = "TypefaceCompatUtil";

        <androidx.core.graphics.TypefaceCompatUtil: java.lang.String CACHE_FILE_PREFIX> = ".font";

        return;
    }
}
