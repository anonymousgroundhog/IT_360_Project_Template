abstract class com.google.common.collect.AbstractMultimap extends java.lang.Object implements com.google.common.collect.Multimap
{
    private transient java.util.Map asMap;
    private transient java.util.Collection entries;
    private transient java.util.Set keySet;
    private transient com.google.common.collect.Multiset keys;
    private transient java.util.Collection values;

    void <init>()
    {
        com.google.common.collect.AbstractMultimap r0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Map asMap()
    {
        com.google.common.collect.AbstractMultimap r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 = r0.<com.google.common.collect.AbstractMultimap: java.util.Map asMap>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Map createAsMap()>();

        r0.<com.google.common.collect.AbstractMultimap: java.util.Map asMap> = r1;

     label1:
        return r1;
    }

    public boolean containsEntry(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractMultimap r0;
        java.util.Map $r3;
        java.util.Collection r4;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Map asMap()>();

        $r1 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.util.Collection) $r1;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Iterator $r4;
        com.google.common.collect.AbstractMultimap r0;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.lang.Object $r1, $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Map asMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.util.Collection) $r5;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    abstract java.util.Map createAsMap();

    abstract java.util.Collection createEntries();

    abstract java.util.Set createKeySet();

    abstract com.google.common.collect.Multiset createKeys();

    abstract java.util.Collection createValues();

    public java.util.Collection entries()
    {
        com.google.common.collect.AbstractMultimap r0;
        java.util.Collection r1;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 = r0.<com.google.common.collect.AbstractMultimap: java.util.Collection entries>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Collection createEntries()>();

        r0.<com.google.common.collect.AbstractMultimap: java.util.Collection entries> = r1;

     label1:
        return r1;
    }

    abstract java.util.Iterator entryIterator();

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractMultimap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.collect.Multimaps: boolean equalsImpl(com.google.common.collect.Multimap,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        com.google.common.collect.AbstractMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Map asMap()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.google.common.collect.AbstractMultimap r0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $i0 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set keySet()
    {
        java.util.Set r1;
        com.google.common.collect.AbstractMultimap r0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 = r0.<com.google.common.collect.AbstractMultimap: java.util.Set keySet>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Set createKeySet()>();

        r0.<com.google.common.collect.AbstractMultimap: java.util.Set keySet> = r1;

     label1:
        return r1;
    }

    public com.google.common.collect.Multiset keys()
    {
        com.google.common.collect.Multiset r1;
        com.google.common.collect.AbstractMultimap r0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 = r0.<com.google.common.collect.AbstractMultimap: com.google.common.collect.Multiset keys>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: com.google.common.collect.Multiset createKeys()>();

        r0.<com.google.common.collect.AbstractMultimap: com.google.common.collect.Multiset keys> = r1;

     label1:
        return r1;
    }

    public boolean put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractMultimap r0;
        java.util.Collection $r3;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Collection get(java.lang.Object)>(r1);

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean putAll(com.google.common.collect.Multimap)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        com.google.common.collect.AbstractMultimap r0;
        java.util.Collection $r2;
        com.google.common.collect.Multimap r1;
        java.lang.Object $r4, $r6;
        boolean z0, $z1;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 := @parameter0: com.google.common.collect.Multimap;

        z0 = 0;

        $r2 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Collection entries()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: boolean put(java.lang.Object,java.lang.Object)>($r4, $r6);

        z0 = z0 | $z1;

        goto label1;

     label2:
        return z0;
    }

    public boolean putAll(java.lang.Object, java.lang.Iterable)
    {
        java.util.Iterator $r5;
        com.google.common.collect.AbstractMultimap r0;
        java.util.Collection r3, $r4;
        java.lang.Object r1;
        java.lang.Iterable r2;
        boolean z0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        z0 = r2 instanceof java.util.Collection;

        if z0 == 0 goto label2;

        r3 = (java.util.Collection) r2;

        z0 = interfaceinvoke r3.<java.util.Collection: boolean isEmpty()>();

        if z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Collection get(java.lang.Object)>(r1);

        z0 = interfaceinvoke $r4.<java.util.Collection: boolean addAll(java.util.Collection)>(r3);

        if z0 == 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $r5 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if z0 == 0 goto label3;

        r3 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Collection get(java.lang.Object)>(r1);

        z0 = staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>(r3, $r5);

        if z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractMultimap r0;
        java.util.Map $r3;
        java.util.Collection r4;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Map asMap()>();

        $r1 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.util.Collection) $r1;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        com.google.common.collect.AbstractMultimap r0;
        java.util.Collection $r3;
        java.lang.Object r1;
        java.lang.Iterable r2;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r3 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Collection removeAll(java.lang.Object)>(r1);

        virtualinvoke r0.<com.google.common.collect.AbstractMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>(r1, r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.google.common.collect.AbstractMultimap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Map asMap()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    java.util.Iterator valueIterator()
    {
        java.util.Iterator $r2;
        com.google.common.collect.AbstractMultimap r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Collection entries()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.Iterator valueIterator(java.util.Iterator)>($r2);

        return $r2;
    }

    public java.util.Collection values()
    {
        com.google.common.collect.AbstractMultimap r0;
        java.util.Collection r1;

        r0 := @this: com.google.common.collect.AbstractMultimap;

        r1 = r0.<com.google.common.collect.AbstractMultimap: java.util.Collection values>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultimap: java.util.Collection createValues()>();

        r0.<com.google.common.collect.AbstractMultimap: java.util.Collection values> = r1;

     label1:
        return r1;
    }
}
