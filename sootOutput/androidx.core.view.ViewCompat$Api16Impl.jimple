class androidx.core.view.ViewCompat$Api16Impl extends java.lang.Object
{

    private void <init>()
    {
        androidx.core.view.ViewCompat$Api16Impl r0;

        r0 := @this: androidx.core.view.ViewCompat$Api16Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)
    {
        android.view.View $r0;
        android.view.accessibility.AccessibilityNodeProvider $r1;

        $r0 := @parameter0: android.view.View;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        return $r1;
    }

    static boolean getFitsSystemWindows(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean getFitsSystemWindows()>();

        return $z0;
    }

    static int getImportantForAccessibility(android.view.View)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getImportantForAccessibility()>();

        return $i0;
    }

    static int getMinimumHeight(android.view.View)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getMinimumHeight()>();

        return $i0;
    }

    static int getMinimumWidth(android.view.View)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getMinimumWidth()>();

        return $i0;
    }

    static android.view.ViewParent getParentForAccessibility(android.view.View)
    {
        android.view.View $r0;
        android.view.ViewParent $r1;

        $r0 := @parameter0: android.view.View;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParentForAccessibility()>();

        return $r1;
    }

    static int getWindowSystemUiVisibility(android.view.View)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getWindowSystemUiVisibility()>();

        return $i0;
    }

    static boolean hasOverlappingRendering(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean hasOverlappingRendering()>();

        return $z0;
    }

    static boolean hasTransientState(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean hasTransientState()>();

        return $z0;
    }

    static boolean performAccessibilityAction(android.view.View, int, android.os.Bundle)
    {
        android.os.Bundle $r1;
        int $i0;
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke $r0.<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>($i0, $r1);

        return $z0;
    }

    static void postInvalidateOnAnimation(android.view.View)
    {
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        virtualinvoke $r0.<android.view.View: void postInvalidateOnAnimation()>();

        return;
    }

    static void postInvalidateOnAnimation(android.view.View, int, int, int, int)
    {
        int $i0, $i1, $i2, $i3;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        virtualinvoke $r0.<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    static void postOnAnimation(android.view.View, java.lang.Runnable)
    {
        android.view.View $r0;
        java.lang.Runnable $r1;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: java.lang.Runnable;

        virtualinvoke $r0.<android.view.View: void postOnAnimation(java.lang.Runnable)>($r1);

        return;
    }

    static void postOnAnimationDelayed(android.view.View, java.lang.Runnable, long)
    {
        android.view.View $r0;
        long $l0;
        java.lang.Runnable $r1;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: java.lang.Runnable;

        $l0 := @parameter2: long;

        virtualinvoke $r0.<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>($r1, $l0);

        return;
    }

    static void removeOnGlobalLayoutListener(android.view.ViewTreeObserver, android.view.ViewTreeObserver$OnGlobalLayoutListener)
    {
        android.view.ViewTreeObserver $r0;
        android.view.ViewTreeObserver$OnGlobalLayoutListener $r1;

        $r0 := @parameter0: android.view.ViewTreeObserver;

        $r1 := @parameter1: android.view.ViewTreeObserver$OnGlobalLayoutListener;

        virtualinvoke $r0.<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>($r1);

        return;
    }

    static void requestFitSystemWindows(android.view.View)
    {
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        virtualinvoke $r0.<android.view.View: void requestFitSystemWindows()>();

        return;
    }

    static void setBackground(android.view.View, android.graphics.drawable.Drawable)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.graphics.drawable.Drawable;

        virtualinvoke $r0.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    static void setHasTransientState(android.view.View, boolean)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        virtualinvoke $r0.<android.view.View: void setHasTransientState(boolean)>($z0);

        return;
    }

    static void setImportantForAccessibility(android.view.View, int)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<android.view.View: void setImportantForAccessibility(int)>($i0);

        return;
    }
}
