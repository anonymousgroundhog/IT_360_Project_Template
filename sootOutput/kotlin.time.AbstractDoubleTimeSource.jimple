public abstract class kotlin.time.AbstractDoubleTimeSource extends java.lang.Object implements kotlin.time.TimeSource$WithComparableMarks
{
    private final kotlin.time.DurationUnit unit;

    public void <init>(kotlin.time.DurationUnit)
    {
        kotlin.time.AbstractDoubleTimeSource r0;
        kotlin.time.DurationUnit $r1;

        r0 := @this: kotlin.time.AbstractDoubleTimeSource;

        $r1 := @parameter0: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "unit");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.time.AbstractDoubleTimeSource: kotlin.time.DurationUnit unit> = $r1;

        return;
    }

    protected final kotlin.time.DurationUnit getUnit()
    {
        kotlin.time.AbstractDoubleTimeSource r0;
        kotlin.time.DurationUnit r1;

        r0 := @this: kotlin.time.AbstractDoubleTimeSource;

        r1 = r0.<kotlin.time.AbstractDoubleTimeSource: kotlin.time.DurationUnit unit>;

        return r1;
    }

    public kotlin.time.ComparableTimeMark markNow()
    {
        kotlin.time.Duration$Companion $r2;
        kotlin.time.ComparableTimeMark $r3;
        kotlin.time.AbstractDoubleTimeSource r0;
        kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark $r1;
        long $l0;
        double $d0;

        r0 := @this: kotlin.time.AbstractDoubleTimeSource;

        $r1 = new kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark;

        $d0 = virtualinvoke r0.<kotlin.time.AbstractDoubleTimeSource: double read()>();

        $r2 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        $l0 = virtualinvoke $r2.<kotlin.time.Duration$Companion: long getZERO-UwyO8pc()>();

        specialinvoke $r1.<kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark: void <init>(double,kotlin.time.AbstractDoubleTimeSource,long,kotlin.jvm.internal.DefaultConstructorMarker)>($d0, r0, $l0, null);

        $r3 = (kotlin.time.ComparableTimeMark) $r1;

        return $r3;
    }

    public volatile kotlin.time.TimeMark markNow()
    {
        kotlin.time.AbstractDoubleTimeSource r0;
        kotlin.time.TimeMark $r2;
        kotlin.time.ComparableTimeMark $r1;

        r0 := @this: kotlin.time.AbstractDoubleTimeSource;

        $r1 = virtualinvoke r0.<kotlin.time.AbstractDoubleTimeSource: kotlin.time.ComparableTimeMark markNow()>();

        $r2 = (kotlin.time.TimeMark) $r1;

        return $r2;
    }

    protected abstract double read();
}
