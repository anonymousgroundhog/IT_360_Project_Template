final class com.google.common.io.BaseEncoding$Alphabet extends java.lang.Object
{
    final int bitsPerChar;
    final int bytesPerChunk;
    private final char[] chars;
    final int charsPerChunk;
    private final byte[] decodabet;
    final int mask;
    private final java.lang.String name;
    private final boolean[] validPadding;

    void <init>(java.lang.String, char[])
    {
        byte[] r6;
        com.google.common.io.BaseEncoding$Alphabet r0;
        byte $b3;
        int i0, i1, $i4;
        java.lang.ArithmeticException r8, r11;
        java.lang.String $r1, r10;
        java.math.RoundingMode r5;
        boolean $z0, $z1;
        boolean[] r7;
        char c2;
        java.lang.IllegalArgumentException $r9, $r13;
        char[] $r2, r4;
        java.lang.Object $r3;
        java.lang.StringBuilder r12, $r14;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r3;

        r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name> = $r1;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r4 = (char[]) $r3;

        r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars> = r4;

        i0 = lengthof $r2;

        r5 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

     label01:
        i0 = staticinvoke <com.google.common.math.IntMath: int log2(int,java.math.RoundingMode)>(i0, r5);

     label02:
        r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar> = i0;

        i0 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        i0 = staticinvoke <java.lang.Integer: int lowestOneBit(int)>(i0);

        i0 = staticinvoke <java.lang.Math: int min(int,int)>(8, i0);

     label03:
        i1 = 8 / i0;

     label04:
        r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk> = i1;

        i1 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

     label05:
        i0 = i1 / i0;

     label06:
        r0.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk> = i0;

        i0 = lengthof $r2;

        i0 = i0 - 1;

        r0.<com.google.common.io.BaseEncoding$Alphabet: int mask> = i0;

        r6 = newarray (byte)[128];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r6, -1);

        i0 = 0;

     label07:
        i1 = lengthof $r2;

        if i0 >= i1 goto label11;

        c2 = $r2[i0];

        i1 = lengthof r6;

        $z0 = 0;

        $i4 = (int) c2;

        if $i4 >= i1 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,char)>($z1, "Non-ASCII character: %s", c2);

        i1 = (int) c2;

        $b3 = r6[i1];

        i1 = (int) $b3;

        if i1 != -1 goto label10;

        $z0 = 1;

     label10:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,char)>($z0, "Duplicate character: %s", c2);

        $b3 = (byte) i0;

        i1 = (int) c2;

        r6[i1] = $b3;

        i0 = i0 + 1;

        goto label07;

     label11:
        r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet> = r6;

        i0 = r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        r7 = newarray (boolean)[i0];

        i0 = 0;

     label12:
        i1 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        if i0 >= i1 goto label13;

        i1 = i0 * 8;

        $i4 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        r5 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        i1 = staticinvoke <com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>(i1, $i4, r5);

        r7[i1] = 1;

        i0 = i0 + 1;

        goto label12;

     label13:
        r0.<com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding> = r7;

        return;

     label14:
        r8 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        $r9 = $r13;

        r10 = new java.lang.String;

        specialinvoke r10.<java.lang.String: void <init>(char[])>($r2);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        r10 = "Illegal alphabet ";

        if i0 == 0 goto label15;

        $r1 = virtualinvoke r10.<java.lang.String: java.lang.String concat(java.lang.String)>($r1);

        goto label16;

     label15:
        r10 = new java.lang.String;

        $r1 = r10;

        specialinvoke r10.<java.lang.String: void <init>(java.lang.String)>("Illegal alphabet ");

     label16:
        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r8);

        throw $r9;

     label17:
        r11 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        i0 = lengthof $r2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(int)>(35);

        r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal alphabet length ");

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r1 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r11);

        throw $r13;

        catch java.lang.ArithmeticException from label01 to label02 with label17;
        catch java.lang.ArithmeticException from label03 to label04 with label14;
        catch java.lang.ArithmeticException from label05 to label06 with label14;
    }

    static char[] access$000(com.google.common.io.BaseEncoding$Alphabet)
    {
        char[] r1;
        com.google.common.io.BaseEncoding$Alphabet $r0;

        $r0 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        return r1;
    }

    private boolean hasLowerCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0, $i2;
        char[] $r1;
        char c1;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        c1 = $r1[$i2];

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isLowerCase(char)>(c1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean hasUpperCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0, $i2;
        char[] $r1;
        char c1;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        c1 = $r1[$i2];

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isUpperCase(char)>(c1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean canDecode(char)
    {
        byte[] $r1;
        byte $b1;
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i2;
        char $c0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c0 := @parameter0: char;

        $i2 = (int) $c0;

        if $i2 > 127 goto label1;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i2 = (int) $c0;

        $b1 = $r1[$i2];

        $i2 = (int) $b1;

        if $i2 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    int decode(char) throws com.google.common.io.BaseEncoding$DecodingException
    {
        byte[] r4;
        com.google.common.io.BaseEncoding$Alphabet r0;
        com.google.common.io.BaseEncoding$DecodingException $r2, $r6;
        char $c0;
        byte b2;
        int $i1;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String $r1, $r3;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c0 := @parameter0: char;

        $r1 = "Unrecognized character: 0x";

        $i1 = (int) $c0;

        if $i1 <= 127 goto label3;

        $r6 = new com.google.common.io.BaseEncoding$DecodingException;

        $r2 = $r6;

        $i1 = (int) $c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 == 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3);

        goto label2;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>("Unrecognized character: 0x");

        $r1 = $r3;

     label2:
        specialinvoke $r6.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label3:
        r4 = r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i1 = (int) $c0;

        b2 = r4[$i1];

        $i1 = (int) b2;

        if $i1 != -1 goto label8;

        $i1 = (int) $c0;

        if $i1 <= 32 goto label5;

        $i1 = (int) $c0;

        if $i1 != 127 goto label4;

        goto label5;

     label4:
        $r6 = new com.google.common.io.BaseEncoding$DecodingException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(25);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label5:
        $r6 = new com.google.common.io.BaseEncoding$DecodingException;

        $r2 = $r6;

        $i1 = (int) $c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 == 0 goto label6;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3);

        goto label7;

     label6:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>("Unrecognized character: 0x");

        $r1 = $r3;

     label7:
        specialinvoke $r6.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label8:
        $i1 = (int) b2;

        return $i1;
    }

    char encode(int)
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0;
        char[] $r1;
        char $c1;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c1 = $r1[$i0];

        return $c1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.io.BaseEncoding$Alphabet r0, r3;
        char[] $r2, $r4;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.io.BaseEncoding$Alphabet;

        if $z0 == 0 goto label1;

        r3 = (com.google.common.io.BaseEncoding$Alphabet) $r1;

        $r4 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $r2 = r3.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r4, $r2);

        return $z0;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        char[] $r1;
        com.google.common.io.BaseEncoding$Alphabet r0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(char[])>($r1);

        return $i0;
    }

    boolean isValidPaddingStartPosition(int)
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0, $i1;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding>;

        $i1 = r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        $i0 = $i0 % $i1;

        $z0 = $r1[$i0];

        return $z0;
    }

    com.google.common.io.BaseEncoding$Alphabet lowerCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0, r3;
        char $c2;
        int i0, $i1;
        char[] r1, $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasUpperCase()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasLowerCase()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot call lowerCase() on a mixed-case alphabet");

        r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        i0 = lengthof r1;

        r1 = newarray (char)[i0];

        i0 = 0;

     label2:
        $r2 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label3;

        $r2 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c2 = $r2[i0];

        $c2 = staticinvoke <com.google.common.base.Ascii: char toLowerCase(char)>($c2);

        r1[i0] = $c2;

        i0 = i0 + 1;

        goto label2;

     label3:
        r3 = new com.google.common.io.BaseEncoding$Alphabet;

        $r4 = r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>(".lowerCase()");

        specialinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r4, r1);

        return r3;
    }

    public boolean matches(char)
    {
        byte[] $r1;
        byte $b2;
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i1, $i3;
        char $c0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c0 := @parameter0: char;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i1 = lengthof $r1;

        $i3 = (int) $c0;

        if $i3 >= $i1 goto label1;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i1 = (int) $c0;

        $b2 = $r1[$i1];

        $i1 = (int) $b2;

        if $i1 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.String r1;
        com.google.common.io.BaseEncoding$Alphabet r0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        return r1;
    }

    com.google.common.io.BaseEncoding$Alphabet upperCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0, r3;
        char $c2;
        int i0, $i1;
        char[] r1, $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasLowerCase()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasUpperCase()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot call upperCase() on a mixed-case alphabet");

        r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        i0 = lengthof r1;

        r1 = newarray (char)[i0];

        i0 = 0;

     label2:
        $r2 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label3;

        $r2 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c2 = $r2[i0];

        $c2 = staticinvoke <com.google.common.base.Ascii: char toUpperCase(char)>($c2);

        r1[i0] = $c2;

        i0 = i0 + 1;

        goto label2;

     label3:
        r3 = new com.google.common.io.BaseEncoding$Alphabet;

        $r4 = r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>(".upperCase()");

        specialinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r4, r1);

        return r3;
    }
}
