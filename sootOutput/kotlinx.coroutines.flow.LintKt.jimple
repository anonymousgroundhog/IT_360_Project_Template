public final class kotlinx.coroutines.flow.LintKt extends java.lang.Object
{

    public static final void cancel(kotlinx.coroutines.flow.FlowCollector, java.util.concurrent.CancellationException)
    {
        kotlin.KotlinNothingValueException $r2;
        kotlinx.coroutines.flow.FlowCollector $r0;
        java.util.concurrent.CancellationException $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: java.util.concurrent.CancellationException;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Void noImpl()>();

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;
    }

    public static void cancel$default(kotlinx.coroutines.flow.FlowCollector, java.util.concurrent.CancellationException, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;
        java.util.concurrent.CancellationException $r2;
        int $i0;
        java.lang.Object $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: java.util.concurrent.CancellationException;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = null;

     label1:
        staticinvoke <kotlinx.coroutines.flow.LintKt: void cancel(kotlinx.coroutines.flow.FlowCollector,java.util.concurrent.CancellationException)>($r0, $r2);

        return;
    }

    public static final kotlinx.coroutines.flow.Flow cancellable(kotlinx.coroutines.flow.SharedFlow)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlin.KotlinNothingValueException $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Void noImpl()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    private static final kotlinx.coroutines.flow.Flow 'catch'(kotlinx.coroutines.flow.SharedFlow, kotlin.jvm.functions.Function3)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlinx.coroutines.flow.Flow $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.catch>");

        $r2 = (kotlinx.coroutines.flow.Flow) $r0;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow 'catch'(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3)>($r2, $r1);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow conflate(kotlinx.coroutines.flow.StateFlow)
    {
        kotlin.KotlinNothingValueException $r1;
        kotlinx.coroutines.flow.StateFlow $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.StateFlow;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Void noImpl()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    private static final java.lang.Object count(kotlinx.coroutines.flow.SharedFlow, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r3;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.count>");

        $r3 = (kotlinx.coroutines.flow.Flow) $r0;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object count(kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r3, $r1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow distinctUntilChanged(kotlinx.coroutines.flow.StateFlow)
    {
        kotlin.KotlinNothingValueException $r1;
        kotlinx.coroutines.flow.StateFlow $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.StateFlow;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Void noImpl()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public static final kotlinx.coroutines.flow.Flow flowOn(kotlinx.coroutines.flow.SharedFlow, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlin.KotlinNothingValueException $r2;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Void noImpl()>();

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;
    }

    public static final kotlin.coroutines.CoroutineContext getCoroutineContext(kotlinx.coroutines.flow.FlowCollector)
    {
        kotlin.KotlinNothingValueException $r1;
        kotlinx.coroutines.flow.FlowCollector $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Void noImpl()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public static void getCoroutineContext$annotations(kotlinx.coroutines.flow.FlowCollector)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        return;
    }

    public static final boolean isActive(kotlinx.coroutines.flow.FlowCollector)
    {
        kotlin.KotlinNothingValueException $r1;
        kotlinx.coroutines.flow.FlowCollector $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Void noImpl()>();

        $r1 = new kotlin.KotlinNothingValueException;

        specialinvoke $r1.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r1;
    }

    public static void isActive$annotations(kotlinx.coroutines.flow.FlowCollector)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        return;
    }

    private static final kotlinx.coroutines.flow.Flow retry(kotlinx.coroutines.flow.SharedFlow, long, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r2;
        long $l0;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $l0 := @parameter1: long;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.retry>");

        $r2 = (kotlinx.coroutines.flow.Flow) $r0;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow retry(kotlinx.coroutines.flow.Flow,long,kotlin.jvm.functions.Function2)>($r2, $l0, $r1);

        return $r2;
    }

    static kotlinx.coroutines.flow.Flow retry$default(kotlinx.coroutines.flow.SharedFlow, long, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        long $l0;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r1;
        kotlinx.coroutines.flow.LintKt$retry$1 $r4;
        int $i1, $i2;
        java.lang.Object $r3;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $l0 := @parameter1: long;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        $i1 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $l0 = 9223372036854775807L;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $r4 = new kotlinx.coroutines.flow.LintKt$retry$1;

        specialinvoke $r4.<kotlinx.coroutines.flow.LintKt$retry$1: void <init>(kotlin.coroutines.Continuation)>(null);

        $r2 = (kotlin.jvm.functions.Function2) $r4;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.retry>");

        $r1 = (kotlinx.coroutines.flow.Flow) $r0;

        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow retry(kotlinx.coroutines.flow.Flow,long,kotlin.jvm.functions.Function2)>($r1, $l0, $r2);

        return $r1;
    }

    private static final kotlinx.coroutines.flow.Flow retryWhen(kotlinx.coroutines.flow.SharedFlow, kotlin.jvm.functions.Function4)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r2;
        kotlin.jvm.functions.Function4 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: kotlin.jvm.functions.Function4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.retryWhen>");

        $r2 = (kotlinx.coroutines.flow.Flow) $r0;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow retryWhen(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function4)>($r2, $r1);

        return $r2;
    }

    private static final java.lang.Object toList(kotlinx.coroutines.flow.SharedFlow, java.util.List, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r3;
        java.lang.IllegalStateException $r4;
        java.util.List $r1;
        kotlin.coroutines.Continuation $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: java.util.List;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.toList>");

        $r3 = (kotlinx.coroutines.flow.Flow) $r0;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object toList(kotlinx.coroutines.flow.Flow,java.util.List,kotlin.coroutines.Continuation)>($r3, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this code is supposed to be unreachable");

        throw $r4;
    }

    private static final java.lang.Object toList(kotlinx.coroutines.flow.SharedFlow, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r3;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.toList>");

        $r3 = (kotlinx.coroutines.flow.Flow) $r0;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object toList$default(kotlinx.coroutines.flow.Flow,java.util.List,kotlin.coroutines.Continuation,int,java.lang.Object)>($r3, null, $r1, 1, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        return $r2;
    }

    private static final java.lang.Object toSet(kotlinx.coroutines.flow.SharedFlow, java.util.Set, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r3;
        java.lang.IllegalStateException $r4;
        kotlin.coroutines.Continuation $r2;
        java.util.Set $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: java.util.Set;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.toSet>");

        $r3 = (kotlinx.coroutines.flow.Flow) $r0;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object toSet(kotlinx.coroutines.flow.Flow,java.util.Set,kotlin.coroutines.Continuation)>($r3, $r1, $r2);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this code is supposed to be unreachable");

        throw $r4;
    }

    private static final java.lang.Object toSet(kotlinx.coroutines.flow.SharedFlow, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlow $r0;
        kotlinx.coroutines.flow.Flow $r3;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlinx.coroutines.flow.Flow<T of kotlinx.coroutines.flow.LintKt.toSet>");

        $r3 = (kotlinx.coroutines.flow.Flow) $r0;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object toSet$default(kotlinx.coroutines.flow.Flow,java.util.Set,kotlin.coroutines.Continuation,int,java.lang.Object)>($r3, null, $r1, 1, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        return $r2;
    }
}
