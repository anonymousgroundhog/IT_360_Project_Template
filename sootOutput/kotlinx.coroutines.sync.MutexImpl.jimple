public class kotlinx.coroutines.sync.MutexImpl extends kotlinx.coroutines.sync.SemaphoreImpl implements kotlinx.coroutines.sync.Mutex
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU;
    private final kotlin.jvm.functions.Function3 onSelectCancellationUnlockConstructor;
    private volatile java.lang.Object owner;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/sync/MutexImpl;", class "Ljava/lang/Object;", "owner");

        <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU> = $r0;

        return;
    }

    public void <init>(boolean)
    {
        kotlinx.coroutines.internal.Symbol $r1;
        kotlinx.coroutines.sync.MutexImpl$onSelectCancellationUnlockConstructor$1 $r3;
        kotlin.jvm.functions.Function3 $r2;
        int $i0;
        kotlinx.coroutines.sync.MutexImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $z0 := @parameter0: boolean;

        $i0 = (int) $z0;

        specialinvoke r0.<kotlinx.coroutines.sync.SemaphoreImpl: void <init>(int,int)>(1, $i0);

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

     label2:
        r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object owner> = $r1;

        $r3 = new kotlinx.coroutines.sync.MutexImpl$onSelectCancellationUnlockConstructor$1;

        specialinvoke $r3.<kotlinx.coroutines.sync.MutexImpl$onSelectCancellationUnlockConstructor$1: void <init>(kotlinx.coroutines.sync.MutexImpl)>(r0);

        $r2 = (kotlin.jvm.functions.Function3) $r3;

        r0.<kotlinx.coroutines.sync.MutexImpl: kotlin.jvm.functions.Function3 onSelectCancellationUnlockConstructor> = $r2;

        return;
    }

    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;

        r0 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU>;

        return r0;
    }

    public static final java.lang.Object access$lockSuspend(kotlinx.coroutines.sync.MutexImpl, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.MutexImpl $r0;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;

        $r0 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object lockSuspend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        return $r1;
    }

    public static void getOnLock$annotations()
    {
        return;
    }

    static java.lang.Object lock$suspendImpl(kotlinx.coroutines.sync.MutexImpl, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit r4;
        kotlinx.coroutines.sync.MutexImpl $r0;
        java.lang.Object $r1, $r3;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.sync.MutexImpl: boolean tryLock(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;

     label1:
        $r1 = specialinvoke $r0.<kotlinx.coroutines.sync.MutexImpl: java.lang.Object lockSuspend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r3 goto label2;

        return $r1;

     label2:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    private final java.lang.Object lockSuspend(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r8;
        kotlin.coroutines.Continuation $r2, $r4;
        kotlinx.coroutines.CancellableContinuationImpl $r5;
        kotlin.Unit r9;
        kotlinx.coroutines.CancellableContinuation $r6;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r3;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r7;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r5 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r4);

     label1:
        r3 = new kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        specialinvoke r3.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: void <init>(kotlinx.coroutines.sync.MutexImpl,kotlinx.coroutines.CancellableContinuationImpl,java.lang.Object)>(r0, $r5, $r1);

        $r6 = (kotlinx.coroutines.CancellableContinuation) r3;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: void acquire(kotlinx.coroutines.CancellableContinuation)>($r6);

     label2:
        $r1 = virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r7 goto label3;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label3:
        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r7 goto label4;

        return $r1;

     label4:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;

     label5:
        r8 := @caughtexception;

        virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw r8;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    private final int tryLockImpl(java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.AssertionError $r5;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean tryAcquire()>();

        $z1 = 1;

        if $z0 == 0 goto label6;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r3 != $r4 goto label2;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 == 0 goto label4;

        goto label5;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r1);

        return 0;

     label6:
        if $r1 == null goto label8;

        $z1 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 == 0 goto label7;

        return 2;

     label7:
        $z1 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean isLocked()>();

        if $z1 == 0 goto label1;

     label8:
        return 1;
    }

    public kotlinx.coroutines.selects.SelectClause2 getOnLock()
    {
        kotlinx.coroutines.sync.MutexImpl$onLock$2 $r5;
        kotlinx.coroutines.sync.MutexImpl$onLock$1 $r2;
        kotlin.jvm.functions.Function3 $r4, $r6, $r7;
        kotlinx.coroutines.selects.SelectClause2Impl $r1;
        kotlinx.coroutines.selects.SelectClause2 $r8;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 = new kotlinx.coroutines.selects.SelectClause2Impl;

        $r2 = <kotlinx.coroutines.sync.MutexImpl$onLock$1: kotlinx.coroutines.sync.MutexImpl$onLock$1 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'select\')] kotlinx.coroutines.selects.SelectInstance<*>, @[ParameterName(name = \'param\')] kotlin.Any?, kotlin.Unit>{ kotlinx.coroutines.selects.SelectKt.RegistrationFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r2, 3);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r5 = <kotlinx.coroutines.sync.MutexImpl$onLock$2: kotlinx.coroutines.sync.MutexImpl$onLock$2 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'param\')] kotlin.Any?, @[ParameterName(name = \'clauseResult\')] kotlin.Any?, kotlin.Any?>{ kotlinx.coroutines.selects.SelectKt.ProcessResultFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r5, 3);

        $r6 = (kotlin.jvm.functions.Function3) $r3;

        $r7 = r0.<kotlinx.coroutines.sync.MutexImpl: kotlin.jvm.functions.Function3 onSelectCancellationUnlockConstructor>;

        specialinvoke $r1.<kotlinx.coroutines.selects.SelectClause2Impl: void <init>(java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3)>(r0, $r4, $r6, $r7);

        $r8 = (kotlinx.coroutines.selects.SelectClause2) $r1;

        return $r8;
    }

    public boolean holdsLock(java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean isLocked()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU>;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r3 == $r4 goto label1;

        if $r3 != $r1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean isLocked()
    {
        int $i0;
        kotlinx.coroutines.sync.MutexImpl r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: int getAvailablePermits()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object lock(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.lang.Object lock$suspendImpl(kotlinx.coroutines.sync.MutexImpl,java.lang.Object,kotlin.coroutines.Continuation)>(r0, $r1, $r2);

        return $r1;
    }

    protected java.lang.Object onLockProcessResult(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.IllegalStateException $r4;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r2;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getON_LOCK_ALREADY_LOCKED_BY_OWNER$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This mutex is already locked by the specified owner: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }

    protected void onLockRegFunction(kotlinx.coroutines.selects.SelectInstance, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        kotlinx.coroutines.selects.SelectInstanceInternal $r5;
        kotlinx.coroutines.selects.SelectInstance $r1;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r2;
        kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 := @parameter1: java.lang.Object;

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean holdsLock(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getON_LOCK_ALREADY_LOCKED_BY_OWNER$p()>();

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r3);

        return;

     label1:
        $r4 = new kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.selects.SelectInstanceInternal<*>");

        $r5 = (kotlinx.coroutines.selects.SelectInstanceInternal) $r1;

        specialinvoke $r4.<kotlinx.coroutines.sync.MutexImpl$SelectInstanceWithOwner: void <init>(kotlinx.coroutines.sync.MutexImpl,kotlinx.coroutines.selects.SelectInstanceInternal,java.lang.Object)>(r0, $r5, $r2);

        $r1 = (kotlinx.coroutines.selects.SelectInstance) $r4;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: void onAcquireRegFunction(kotlinx.coroutines.selects.SelectInstance,java.lang.Object)>($r1, $r2);

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mutex@");

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[isLocked=");

        $z0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean isLocked()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",owner=");

        $r3 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public boolean tryLock(java.lang.Object)
    {
        java.lang.IllegalStateException $r2;
        int $i0;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r4;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

        $i0 = specialinvoke r0.<kotlinx.coroutines.sync.MutexImpl: int tryLockImpl(java.lang.Object)>($r1);

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "unexpected";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This mutex is already locked by the specified owner: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return 0;

     label4:
        return 1;
    }

    public void unlock(java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        java.lang.IllegalStateException $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        kotlinx.coroutines.sync.MutexImpl r0;
        java.lang.Object $r1, $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl;

        $r1 := @parameter0: java.lang.Object;

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: boolean isLocked()>();

        if $z0 == 0 goto label6;

        r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU>;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r3 == $r4 goto label1;

        if $r3 == $r1 goto label3;

        if $r1 != null goto label2;

        goto label3;

     label2:
        $z0 = 0;

        goto label4;

     label3:
        $z0 = 1;

     label4:
        if $z0 == 0 goto label5;

        r2 = <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater owner$FU>;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, $r3, $r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl: void release()>();

        return;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This mutex is locked by ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is expected");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r7;

     label6:
        $r7 = new java.lang.IllegalStateException;

        $r6 = "This mutex is not locked";

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r7;
    }
}
