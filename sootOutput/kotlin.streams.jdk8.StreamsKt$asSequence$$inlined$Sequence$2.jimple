public final class kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2 extends java.lang.Object implements kotlin.sequences.Sequence
{
    final java.util.stream.IntStream $this_asSequence$inlined;

    public void <init>(java.util.stream.IntStream)
    {
        kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2 r0;
        java.util.stream.IntStream $r1;

        r0 := @this: kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2;

        $r1 := @parameter0: java.util.stream.IntStream;

        r0.<kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2: java.util.stream.IntStream $this_asSequence$inlined> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2 r0;
        java.util.stream.IntStream $r2;
        java.util.PrimitiveIterator$OfInt $r1;
        java.util.Iterator $r3;

        r0 := @this: kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2;

        $r2 = r0.<kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2: java.util.stream.IntStream $this_asSequence$inlined>;

        $r1 = interfaceinvoke $r2.<java.util.stream.IntStream: java.util.PrimitiveIterator$OfInt iterator()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "iterator()");

        $r3 = (java.util.Iterator) $r1;

        return $r3;
    }
}
