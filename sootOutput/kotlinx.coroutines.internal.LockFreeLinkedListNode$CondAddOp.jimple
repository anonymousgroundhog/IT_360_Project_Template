public abstract class kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp extends kotlinx.coroutines.internal.AtomicOp
{
    public final kotlinx.coroutines.internal.LockFreeLinkedListNode newNode;
    public kotlinx.coroutines.internal.LockFreeLinkedListNode oldNext;

    public void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        specialinvoke r0.<kotlinx.coroutines.internal.AtomicOp: void <init>()>();

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode newNode> = $r1;

        return;
    }

    public volatile void complete(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void complete(kotlinx.coroutines.internal.LockFreeLinkedListNode,java.lang.Object)>($r3, $r2);

        return;
    }

    public void complete(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp r0;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1, r3;
        boolean z0, $z1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label3;

        r3 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode newNode>;

        goto label4;

     label3:
        r3 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode oldNext>;

     label4:
        if r3 == null goto label5;

        $r4 = staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$get_next$FU$p()>();

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r1, r0, r3);

        if $z1 == 0 goto label5;

        if z0 == 0 goto label5;

        r3 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode newNode>;

        $r1 = r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode oldNext>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListNode: void access$finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>(r3, $r1);

     label5:
        return;
    }
}
