public class androidx.work.impl.model.WorkTypeConverters extends java.lang.Object
{

    private void <init>()
    {
        androidx.work.impl.model.WorkTypeConverters r0;

        r0 := @this: androidx.work.impl.model.WorkTypeConverters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int backoffPolicyToInt(androidx.work.BackoffPolicy)
    {
        androidx.work.BackoffPolicy $r0;
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: androidx.work.BackoffPolicy;

        $r1 = <androidx.work.impl.model.WorkTypeConverters$1: int[] $SwitchMap$androidx$work$BackoffPolicy>;

        $i0 = virtualinvoke $r0.<androidx.work.BackoffPolicy: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to int");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])
    {
        java.lang.Throwable r6;
        byte[] $r0;
        java.io.ObjectInputStream r1, $r13;
        android.net.Uri $r3;
        java.io.ByteArrayInputStream $r12;
        int $i0;
        java.lang.String $r2;
        boolean $z0;
        java.io.IOException r4, r5, r7, r8, r9, r10;
        androidx.work.ContentUriTriggers $r11;

        $r0 := @parameter0: byte[];

        $r11 = new androidx.work.ContentUriTriggers;

        specialinvoke $r11.<androidx.work.ContentUriTriggers: void <init>()>();

        if $r0 != null goto label01;

        return $r11;

     label01:
        $r12 = new java.io.ByteArrayInputStream;

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        r1 = null;

     label02:
        $r13 = new java.io.ObjectInputStream;

     label03:
        specialinvoke $r13.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r12);

     label04:
        r1 = $r13;

     label05:
        $i0 = virtualinvoke $r13.<java.io.ObjectInputStream: int readInt()>();

     label06:
        if $i0 <= 0 goto label09;

     label07:
        $r2 = virtualinvoke $r13.<java.io.ObjectInputStream: java.lang.String readUTF()>();

        $r3 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r2);

        $z0 = virtualinvoke $r13.<java.io.ObjectInputStream: boolean readBoolean()>();

        virtualinvoke $r11.<androidx.work.ContentUriTriggers: void add(android.net.Uri,boolean)>($r3, $z0);

     label08:
        $i0 = $i0 + -1;

        goto label06;

     label09:
        virtualinvoke $r13.<java.io.ObjectInputStream: void close()>();

     label10:
        goto label12;

     label11:
        r4 := @caughtexception;

        virtualinvoke r4.<java.io.IOException: void printStackTrace()>();

     label12:
        virtualinvoke $r12.<java.io.ByteArrayInputStream: void close()>();

     label13:
        return $r11;

     label14:
        r5 := @caughtexception;

        virtualinvoke r5.<java.io.IOException: void printStackTrace()>();

        return $r11;

     label15:
        r6 := @caughtexception;

        goto label24;

     label16:
        r7 := @caughtexception;

     label17:
        virtualinvoke r7.<java.io.IOException: void printStackTrace()>();

     label18:
        if r1 == null goto label22;

     label19:
        virtualinvoke r1.<java.io.ObjectInputStream: void close()>();

     label20:
        goto label22;

     label21:
        r8 := @caughtexception;

        virtualinvoke r8.<java.io.IOException: void printStackTrace()>();

     label22:
        virtualinvoke $r12.<java.io.ByteArrayInputStream: void close()>();

     label23:
        goto label13;

     label24:
        if r1 == null goto label28;

     label25:
        virtualinvoke r1.<java.io.ObjectInputStream: void close()>();

     label26:
        goto label28;

     label27:
        r9 := @caughtexception;

        virtualinvoke r9.<java.io.IOException: void printStackTrace()>();

     label28:
        virtualinvoke $r12.<java.io.ByteArrayInputStream: void close()>();

     label29:
        goto label31;

     label30:
        r10 := @caughtexception;

        virtualinvoke r10.<java.io.IOException: void printStackTrace()>();

     label31:
        throw r6;

        catch java.io.IOException from label03 to label04 with label16;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.io.IOException from label07 to label08 with label16;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label15;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label22 to label23 with label14;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.io.IOException from label28 to label29 with label30;
    }

    public static byte[] contentUriTriggersToByteArray(androidx.work.ContentUriTriggers)
    {
        java.lang.Throwable r12;
        byte[] $r15;
        java.io.ByteArrayOutputStream r1;
        android.net.Uri $r8;
        int $i0;
        java.io.ObjectOutputStream r2, r3;
        java.lang.String $r9;
        boolean $z0;
        androidx.work.ContentUriTriggers$Trigger r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.io.IOException r10, r11, r13, r14, r16, r17;
        androidx.work.ContentUriTriggers $r0;
        java.lang.Object $r6;

        $r0 := @parameter0: androidx.work.ContentUriTriggers;

        $i0 = virtualinvoke $r0.<androidx.work.ContentUriTriggers: int size()>();

        if $i0 != 0 goto label01;

        return null;

     label01:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = null;

     label02:
        r3 = new java.io.ObjectOutputStream;

     label03:
        specialinvoke r3.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r1);

     label04:
        r2 = r3;

     label05:
        $i0 = virtualinvoke $r0.<androidx.work.ContentUriTriggers: int size()>();

        virtualinvoke r3.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r4 = virtualinvoke $r0.<androidx.work.ContentUriTriggers: java.util.Set getTriggers()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 == 0 goto label12;

     label08:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label09:
        r7 = (androidx.work.ContentUriTriggers$Trigger) $r6;

     label10:
        $r8 = virtualinvoke r7.<androidx.work.ContentUriTriggers$Trigger: android.net.Uri getUri()>();

        $r9 = virtualinvoke $r8.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke r3.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r9);

        $z0 = virtualinvoke r7.<androidx.work.ContentUriTriggers$Trigger: boolean shouldTriggerForDescendants()>();

        virtualinvoke r3.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z0);

     label11:
        goto label06;

     label12:
        virtualinvoke r3.<java.io.ObjectOutputStream: void close()>();

     label13:
        goto label15;

     label14:
        r10 := @caughtexception;

        virtualinvoke r10.<java.io.IOException: void printStackTrace()>();

     label15:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>();

     label16:
        goto label27;

     label17:
        r11 := @caughtexception;

        virtualinvoke r11.<java.io.IOException: void printStackTrace()>();

        goto label27;

     label18:
        r12 := @caughtexception;

        goto label28;

     label19:
        r13 := @caughtexception;

     label20:
        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

     label21:
        if r2 == null goto label25;

     label22:
        virtualinvoke r2.<java.io.ObjectOutputStream: void close()>();

     label23:
        goto label25;

     label24:
        r14 := @caughtexception;

        virtualinvoke r14.<java.io.IOException: void printStackTrace()>();

     label25:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>();

     label26:
        goto label16;

     label27:
        $r15 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r15;

     label28:
        if r2 == null goto label32;

     label29:
        virtualinvoke r2.<java.io.ObjectOutputStream: void close()>();

     label30:
        goto label32;

     label31:
        r16 := @caughtexception;

        virtualinvoke r16.<java.io.IOException: void printStackTrace()>();

     label32:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>();

     label33:
        goto label35;

     label34:
        r17 := @caughtexception;

        virtualinvoke r17.<java.io.IOException: void printStackTrace()>();

     label35:
        throw r12;

        catch java.io.IOException from label03 to label04 with label19;
        catch java.io.IOException from label05 to label07 with label19;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.lang.Throwable from label02 to label04 with label18;
        catch java.lang.Throwable from label05 to label07 with label18;
        catch java.lang.Throwable from label08 to label11 with label18;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.io.IOException from label25 to label26 with label17;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.io.IOException from label32 to label33 with label34;
    }

    public static androidx.work.BackoffPolicy intToBackoffPolicy(int)
    {
        androidx.work.BackoffPolicy r3;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to BackoffPolicy");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        r3 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy LINEAR>;

        return r3;

     label3:
        r3 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy EXPONENTIAL>;

        return r3;
    }

    public static androidx.work.NetworkType intToNetworkType(int)
    {
        androidx.work.NetworkType r3;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label6;
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label1;
        };

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 30 goto label7;

        if $i0 != 5 goto label7;

        r3 = <androidx.work.NetworkType: androidx.work.NetworkType TEMPORARILY_UNMETERED>;

        return r3;

     label2:
        r3 = <androidx.work.NetworkType: androidx.work.NetworkType METERED>;

        return r3;

     label3:
        r3 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_ROAMING>;

        return r3;

     label4:
        r3 = <androidx.work.NetworkType: androidx.work.NetworkType UNMETERED>;

        return r3;

     label5:
        r3 = <androidx.work.NetworkType: androidx.work.NetworkType CONNECTED>;

        return r3;

     label6:
        r3 = <androidx.work.NetworkType: androidx.work.NetworkType NOT_REQUIRED>;

        return r3;

     label7:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to NetworkType");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)
    {
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        androidx.work.OutOfQuotaPolicy r3;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to OutOfQuotaPolicy");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        r3 = <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy DROP_WORK_REQUEST>;

        return r3;

     label3:
        r3 = <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy RUN_AS_NON_EXPEDITED_WORK_REQUEST>;

        return r3;
    }

    public static androidx.work.WorkInfo$State intToState(int)
    {
        androidx.work.WorkInfo$State r3;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label7;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to State");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        r3 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State CANCELLED>;

        return r3;

     label3:
        r3 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State BLOCKED>;

        return r3;

     label4:
        r3 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State FAILED>;

        return r3;

     label5:
        r3 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State SUCCEEDED>;

        return r3;

     label6:
        r3 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State RUNNING>;

        return r3;

     label7:
        r3 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State ENQUEUED>;

        return r3;
    }

    public static int networkTypeToInt(androidx.work.NetworkType)
    {
        androidx.work.NetworkType $r0, $r2;
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: androidx.work.NetworkType;

        $r1 = <androidx.work.impl.model.WorkTypeConverters$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $i0 = virtualinvoke $r0.<androidx.work.NetworkType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label7;

        $r2 = <androidx.work.NetworkType: androidx.work.NetworkType TEMPORARILY_UNMETERED>;

        if $r0 != $r2 goto label7;

        return 5;

     label2:
        return 4;

     label3:
        return 3;

     label4:
        return 2;

     label5:
        return 1;

     label6:
        return 0;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to int");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public static int outOfQuotaPolicyToInt(androidx.work.OutOfQuotaPolicy)
    {
        int[] $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        androidx.work.OutOfQuotaPolicy $r0;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: androidx.work.OutOfQuotaPolicy;

        $r1 = <androidx.work.impl.model.WorkTypeConverters$1: int[] $SwitchMap$androidx$work$OutOfQuotaPolicy>;

        $i0 = virtualinvoke $r0.<androidx.work.OutOfQuotaPolicy: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to int");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static int stateToInt(androidx.work.WorkInfo$State)
    {
        int[] $r1;
        androidx.work.WorkInfo$State $r0;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: androidx.work.WorkInfo$State;

        $r1 = <androidx.work.impl.model.WorkTypeConverters$1: int[] $SwitchMap$androidx$work$WorkInfo$State>;

        $i0 = virtualinvoke $r0.<androidx.work.WorkInfo$State: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to int");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return 5;

     label3:
        return 4;

     label4:
        return 3;

     label5:
        return 2;

     label6:
        return 1;

     label7:
        return 0;
    }
}
