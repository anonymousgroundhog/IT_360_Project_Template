final class kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner extends java.lang.Object implements kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.Waiter
{
    public final kotlinx.coroutines.CancellableContinuationImpl cont;
    public final java.lang.Object owner;
    final kotlinx.coroutines.sync.MutexImpl this$0;

    public void <init>(kotlinx.coroutines.sync.MutexImpl, kotlinx.coroutines.CancellableContinuationImpl, java.lang.Object)
    {
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        kotlinx.coroutines.sync.MutexImpl $r1;
        java.lang.Object $r3;
        kotlinx.coroutines.CancellableContinuationImpl $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r2 := @parameter1: kotlinx.coroutines.CancellableContinuationImpl;

        $r3 := @parameter2: java.lang.Object;

        r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont> = $r2;

        r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object owner> = $r3;

        return;
    }

    public boolean cancel(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: boolean cancel(java.lang.Throwable)>($r1);

        return $z0;
    }

    public void completeResume(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: void completeResume(java.lang.Object)>($r1);

        return;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        return $r1;
    }

    public void initCancellability()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        return;
    }

    public void invokeOnCancellation(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r1);

        return;
    }

    public void invokeOnCancellation(kotlinx.coroutines.internal.Segment, int)
    {
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        int $i0;
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        kotlinx.coroutines.internal.Segment $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.internal.Segment;

        $i0 := @parameter1: int;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: void invokeOnCancellation(kotlinx.coroutines.internal.Segment,int)>($r1, $i0);

        return;
    }

    public boolean isActive()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: boolean isActive()>();

        return $z0;
    }

    public boolean isCancelled()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: boolean isCancelled()>();

        return $z0;
    }

    public boolean isCompleted()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: boolean isCompleted()>();

        return $z0;
    }

    public volatile void resume(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.Unit $r3;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = (kotlin.Unit) $r1;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: void resume(kotlin.Unit,kotlin.jvm.functions.Function1)>($r3, $r2);

        return;
    }

    public void resume(kotlin.Unit, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.AssertionError $r7;
        kotlinx.coroutines.CancellableContinuationImpl $r8;
        kotlin.Unit $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        kotlinx.coroutines.sync.MutexImpl $r3;
        java.lang.Object $r5;
        boolean $z0;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$resume$2 $r9;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlin.Unit;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r5 != $r6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $r5 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object owner>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r8 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r9 = new kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$resume$2;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        specialinvoke $r9.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$resume$2: void <init>(kotlinx.coroutines.sync.MutexImpl,kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner)>($r3, r0);

        $r2 = (kotlin.jvm.functions.Function1) $r9;

        virtualinvoke $r8.<kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r1, $r2);

        return;
    }

    public volatile void resumeUndispatched(kotlinx.coroutines.CoroutineDispatcher, java.lang.Object)
    {
        kotlin.Unit $r3;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        java.lang.Object $r2;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.Unit) $r2;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: void resumeUndispatched(kotlinx.coroutines.CoroutineDispatcher,kotlin.Unit)>($r1, $r3);

        return;
    }

    public void resumeUndispatched(kotlinx.coroutines.CoroutineDispatcher, kotlin.Unit)
    {
        kotlin.Unit $r2;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        kotlinx.coroutines.CancellableContinuationImpl $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter1: kotlin.Unit;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: void resumeUndispatched(kotlinx.coroutines.CoroutineDispatcher,java.lang.Object)>($r1, $r2);

        return;
    }

    public void resumeUndispatchedWithException(kotlinx.coroutines.CoroutineDispatcher, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        kotlinx.coroutines.CancellableContinuationImpl $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: void resumeUndispatchedWithException(kotlinx.coroutines.CoroutineDispatcher,java.lang.Throwable)>($r1, $r2);

        return;
    }

    public void resumeWith(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl $r2;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        virtualinvoke $r2.<kotlinx.coroutines.CancellableContinuationImpl: void resumeWith(java.lang.Object)>($r1);

        return;
    }

    public volatile java.lang.Object tryResume(java.lang.Object, java.lang.Object)
    {
        kotlin.Unit $r3;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        java.lang.Object $r1, $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.Unit) $r1;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object tryResume(kotlin.Unit,java.lang.Object)>($r3, $r2);

        return $r1;
    }

    public volatile java.lang.Object tryResume(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.Unit $r4;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        java.lang.Object $r1, $r2;
        kotlin.jvm.functions.Function1 $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $r4 = (kotlin.Unit) $r1;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object tryResume(kotlin.Unit,java.lang.Object,kotlin.jvm.functions.Function1)>($r4, $r2, $r3);

        return $r1;
    }

    public java.lang.Object tryResume(kotlin.Unit, java.lang.Object)
    {
        kotlin.Unit $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        java.lang.Object $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlin.Unit;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r2 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object tryResume(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r2;
    }

    public java.lang.Object tryResume(kotlin.Unit, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1 $r10;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.AssertionError r8;
        kotlinx.coroutines.CancellableContinuationImpl r9;
        kotlin.Unit $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        java.lang.Object $r2, $r6;
        kotlinx.coroutines.sync.MutexImpl r4;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: kotlin.Unit;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        r4 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z1 = 1;

        if $z0 == 0 goto label4;

        $r5 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r4);

        $r7 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r6 != $r7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        r8 = new java.lang.AssertionError;

        specialinvoke r8.<java.lang.AssertionError: void <init>()>();

        throw r8;

     label4:
        r9 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r10 = new kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1;

        r4 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        specialinvoke $r10.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: void <init>(kotlinx.coroutines.sync.MutexImpl,kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner)>(r4, r0);

        $r3 = (kotlin.jvm.functions.Function1) $r10;

        $r2 = virtualinvoke r9.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object tryResume(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r1, $r2, $r3);

        if $r2 == null goto label9;

        r4 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label8;

        $r5 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r4);

        $r7 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r6 != $r7 goto label5;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label7;

        goto label8;

     label7:
        r8 = new java.lang.AssertionError;

        specialinvoke r8.<java.lang.AssertionError: void <init>()>();

        throw r8;

     label8:
        $r5 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        r4 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.sync.MutexImpl this$0>;

        $r6 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object owner>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r4, $r6);

     label9:
        return $r2;
    }

    public java.lang.Object tryResumeWithException(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner r0;
        java.lang.Object $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r3;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        $r1 := @parameter0: java.lang.Throwable;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r2 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object tryResumeWithException(java.lang.Throwable)>($r1);

        return $r2;
    }
}
