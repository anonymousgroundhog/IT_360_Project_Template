public final class kotlin.ranges.IntRange extends kotlin.ranges.IntProgression implements kotlin.ranges.ClosedRange, kotlin.ranges.OpenEndRange
{
    public static final kotlin.ranges.IntRange$Companion Companion;
    private static final kotlin.ranges.IntRange EMPTY;

    static void <clinit>()
    {
        kotlin.ranges.IntRange$Companion $r0;
        kotlin.ranges.IntRange $r1;

        $r0 = new kotlin.ranges.IntRange$Companion;

        specialinvoke $r0.<kotlin.ranges.IntRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.ranges.IntRange: kotlin.ranges.IntRange$Companion Companion> = $r0;

        $r1 = new kotlin.ranges.IntRange;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, 0);

        <kotlin.ranges.IntRange: kotlin.ranges.IntRange EMPTY> = $r1;

        return;
    }

    public void <init>(int, int)
    {
        int $i0, $i1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<kotlin.ranges.IntProgression: void <init>(int,int,int)>($i0, $i1, 1);

        return;
    }

    public static final kotlin.ranges.IntRange access$getEMPTY$cp()
    {
        kotlin.ranges.IntRange r0;

        r0 = <kotlin.ranges.IntRange: kotlin.ranges.IntRange EMPTY>;

        return r0;
    }

    public static void getEndExclusive$annotations()
    {
        return;
    }

    public boolean contains(int)
    {
        int $i0, $i1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<kotlin.ranges.IntRange: int getFirst()>();

        if $i1 > $i0 goto label1;

        $i1 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        if $i0 > $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean contains(java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable $r1;
        java.lang.Number $r2;
        kotlin.ranges.IntRange r0;
        boolean $z0;

        r0 := @this: kotlin.ranges.IntRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Number) $r1;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        $z0 = virtualinvoke r0.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object $r1;
        kotlin.ranges.IntRange r0, $r2;
        boolean $z0;

        r0 := @this: kotlin.ranges.IntRange;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.IntRange;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.IntRange) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getFirst()>();

        $r2 = (kotlin.ranges.IntRange) $r1;

        $i1 = virtualinvoke $r2.<kotlin.ranges.IntRange: int getFirst()>();

        if $i0 != $i1 goto label3;

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        r0 = (kotlin.ranges.IntRange) $r1;

        $i1 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        if $i0 != $i1 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public volatile java.lang.Comparable getEndExclusive()
    {
        java.lang.Comparable $r2;
        java.lang.Integer $r1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.IntRange: java.lang.Integer getEndExclusive()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Integer getEndExclusive()
    {
        java.lang.IllegalStateException $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.Integer $r1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        if $i0 == 2147483647 goto label1;

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        $i0 = $i0 + 1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Cannot return the exclusive upper bound of a range that includes MAX_VALUE.";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public volatile java.lang.Comparable getEndInclusive()
    {
        java.lang.Comparable $r2;
        java.lang.Integer $r1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Integer getEndInclusive()
    {
        int $i0;
        java.lang.Integer $r1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public volatile java.lang.Comparable getStart()
    {
        java.lang.Comparable $r2;
        java.lang.Integer $r1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Integer getStart()
    {
        int $i0;
        java.lang.Integer $r1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getFirst()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public int hashCode()
    {
        int $i0, $i1;
        kotlin.ranges.IntRange r0;
        boolean $z0;

        r0 := @this: kotlin.ranges.IntRange;

        $z0 = virtualinvoke r0.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getFirst()>();

        $i0 = $i0 * 31;

        $i1 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0, $i1;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getFirst()>();

        $i1 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        kotlin.ranges.IntRange r0;

        r0 := @this: kotlin.ranges.IntRange;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getFirst()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $i0 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
