public class androidx.core.math.MathUtils extends java.lang.Object
{

    private void <init>()
    {
        androidx.core.math.MathUtils r0;

        r0 := @this: androidx.core.math.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int addExact(int, int)
    {
        int $i0, $i1, i2;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i0 + $i1;

        $i0 = $i0 ^ i2;

        $i1 = $i1 ^ i2;

        $i0 = $i0 & $i1;

        if $i0 < 0 goto label1;

        return i2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;
    }

    public static long addExact(long, long)
    {
        byte $b3;
        int $i4;
        long $l0, $l1, l2;
        java.lang.ArithmeticException $r0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 + $l1;

        $l0 = $l0 ^ l2;

        $l1 = $l1 ^ l2;

        $l0 = $l0 & $l1;

        $b3 = $l0 cmp 0L;

        $i4 = (int) $b3;

        if $i4 < 0 goto label1;

        return l2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;
    }

    public static double clamp(double, double, double)
    {
        byte $b0;
        int $i1;
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return $d1;

     label1:
        $b0 = $d0 cmpl $d2;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        return $d2;

     label2:
        return $d0;
    }

    public static float clamp(float, float, float)
    {
        byte $b0;
        int $i1;
        float $f0, $f1, $f2;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return $f1;

     label1:
        $b0 = $f0 cmpl $f2;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        return $f2;

     label2:
        return $f0;
    }

    public static int clamp(int, int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i0 >= $i1 goto label1;

        return $i1;

     label1:
        if $i0 <= $i2 goto label2;

        return $i2;

     label2:
        return $i0;
    }

    public static long clamp(long, long, long)
    {
        byte $b3;
        int $i4;
        long $l0, $l1, $l2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $b3 = $l0 cmp $l1;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label1;

        return $l1;

     label1:
        $b3 = $l0 cmp $l2;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label2;

        return $l2;

     label2:
        return $l0;
    }

    public static int decrementExact(int)
    {
        int $i0;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        if $i0 == -2147483648 goto label1;

        $i0 = $i0 + -1;

        return $i0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;
    }

    public static long decrementExact(long)
    {
        long $l0;
        java.lang.ArithmeticException $r0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label1;

        $l0 = $l0 - 1L;

        return $l0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;
    }

    public static int incrementExact(int)
    {
        int $i0;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        if $i0 == 2147483647 goto label1;

        $i0 = $i0 + 1;

        return $i0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;
    }

    public static long incrementExact(long)
    {
        long $l0;
        java.lang.ArithmeticException $r0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 == 0 goto label1;

        $l0 = 1L + $l0;

        return $l0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;
    }

    public static int multiplyExact(int, int)
    {
        byte $b2;
        int $i0, $i1;
        long l3, $l4;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        l3 = (long) $i0;

        $l4 = (long) $i1;

        l3 = l3 * $l4;

        $i0 = (int) l3;

        $l4 = (long) $i0;

        $b2 = $l4 cmp l3;

        if $b2 != 0 goto label1;

        $i0 = (int) l3;

        return $i0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;
    }

    public static long multiplyExact(long, long)
    {
        byte $b3;
        long $l0, $l1, l2, $l4, $l5;
        java.lang.ArithmeticException $r0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 * $l1;

        $l4 = staticinvoke <java.lang.Math: long abs(long)>($l0);

        $l5 = staticinvoke <java.lang.Math: long abs(long)>($l1);

        $l4 = $l4 | $l5;

        $l4 = $l4 >>> 31;

        $b3 = $l4 cmp 0L;

        if $b3 == 0 goto label3;

        $b3 = $l1 cmp 0L;

        if $b3 == 0 goto label1;

        $l4 = l2 / $l1;

        $b3 = $l4 cmp $l0;

        if $b3 != 0 goto label2;

     label1:
        $b3 = $l0 cmp -9223372036854775808L;

        if $b3 != 0 goto label3;

        $b3 = $l1 cmp -1L;

        if $b3 == 0 goto label2;

        return l2;

     label2:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;

     label3:
        return l2;
    }

    public static int negateExact(int)
    {
        int $i0;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        if $i0 == -2147483648 goto label1;

        $i0 = neg $i0;

        return $i0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;
    }

    public static long negateExact(long)
    {
        long $l0;
        java.lang.ArithmeticException $r0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label1;

        $l0 = neg $l0;

        return $l0;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;
    }

    public static int subtractExact(int, int)
    {
        int $i0, $i1, i2;
        java.lang.ArithmeticException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        i2 = $i0 - $i1;

        $i1 = $i0 ^ $i1;

        $i0 = $i0 ^ i2;

        $i0 = $i1 & $i0;

        if $i0 < 0 goto label1;

        return i2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;
    }

    public static long subtractExact(long, long)
    {
        byte $b3;
        int $i4;
        long $l0, $l1, l2;
        java.lang.ArithmeticException $r0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 - $l1;

        $l1 = $l0 ^ $l1;

        $l0 = $l0 ^ l2;

        $l0 = $l1 & $l0;

        $b3 = $l0 cmp 0L;

        $i4 = (int) $b3;

        if $i4 < 0 goto label1;

        return l2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r0;
    }

    public static int toIntExact(long)
    {
        byte $b1;
        int $i2;
        long $l0, $l3;
        java.lang.ArithmeticException $r0;

        $l0 := @parameter0: long;

        $i2 = (int) $l0;

        $l3 = (long) $i2;

        $b1 = $l3 cmp $l0;

        if $b1 != 0 goto label1;

        $i2 = (int) $l0;

        return $i2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("integer overflow");

        throw $r0;
    }
}
