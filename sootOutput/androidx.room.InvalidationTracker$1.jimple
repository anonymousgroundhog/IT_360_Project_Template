class androidx.room.InvalidationTracker$1 extends java.lang.Object implements java.lang.Runnable
{
    final androidx.room.InvalidationTracker this$0;

    void <init>(androidx.room.InvalidationTracker)
    {
        androidx.room.InvalidationTracker$1 r0;
        androidx.room.InvalidationTracker $r1;

        r0 := @this: androidx.room.InvalidationTracker$1;

        $r1 := @parameter0: androidx.room.InvalidationTracker;

        r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.util.Set checkUpdatedTable()
    {
        androidx.room.InvalidationTracker$1 r0;
        androidx.room.InvalidationTracker r2;
        java.lang.Throwable r8;
        androidx.room.RoomDatabase r3;
        java.lang.Integer $r6;
        java.util.HashSet r1;
        int $i0;
        androidx.sqlite.db.SupportSQLiteStatement r7;
        androidx.sqlite.db.SimpleSQLiteQuery r4;
        android.database.Cursor $r5;
        boolean $z0;

        r0 := @this: androidx.room.InvalidationTracker$1;

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        r2 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r3 = r2.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase mDatabase>;

        r4 = new androidx.sqlite.db.SimpleSQLiteQuery;

        specialinvoke r4.<androidx.sqlite.db.SimpleSQLiteQuery: void <init>(java.lang.String)>("SELECT * FROM room_table_modification_log WHERE invalidated = 1;");

        $r5 = virtualinvoke r3.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery)>(r4);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $i0 = interfaceinvoke $r5.<android.database.Cursor: int getInt(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

     label4:
        goto label1;

     label5:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        $z0 = virtualinvoke r1.<java.util.HashSet: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        r2 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r7 = r2.<androidx.room.InvalidationTracker: androidx.sqlite.db.SupportSQLiteStatement mCleanupStatement>;

        interfaceinvoke r7.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        return r1;

     label6:
        r8 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw r8;

     label7:
        return r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public void run()
    {
        androidx.room.InvalidationTracker$1 r0;
        androidx.room.InvalidationTracker r1;
        java.lang.Throwable $r9, r10, $r18;
        androidx.arch.core.internal.SafeIterableMap r12, $r13;
        java.util.concurrent.atomic.AtomicBoolean r5;
        androidx.sqlite.db.SupportSQLiteDatabase $r7;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r6;
        boolean $z0;
        java.util.Map$Entry r16;
        androidx.room.RoomDatabase r2;
        java.util.Iterator $r14;
        java.util.Set r4, $r8;
        java.lang.RuntimeException r11;
        java.util.concurrent.locks.Lock $r3;
        androidx.room.InvalidationTracker$ObserverWrapper $r17;
        java.lang.Object $r15;

        r0 := @this: androidx.room.InvalidationTracker$1;

        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r2 = r1.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase mDatabase>;

        $r3 = virtualinvoke r2.<androidx.room.RoomDatabase: java.util.concurrent.locks.Lock getCloseLock()>();

        r4 = null;

     label01:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label02:
        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

     label03:
        $z0 = virtualinvoke r1.<androidx.room.InvalidationTracker: boolean ensureInitialization()>();

     label04:
        if $z0 != 0 goto label05;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label05:
        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r5 = r1.<androidx.room.InvalidationTracker: java.util.concurrent.atomic.AtomicBoolean mPendingRefresh>;

     label06:
        $z0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

     label07:
        if $z0 != 0 goto label08;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label08:
        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r2 = r1.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase mDatabase>;

     label09:
        $z0 = virtualinvoke r2.<androidx.room.RoomDatabase: boolean inTransaction()>();

     label10:
        if $z0 == 0 goto label11;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label11:
        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r2 = r1.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase mDatabase>;

        $z0 = r2.<androidx.room.RoomDatabase: boolean mWriteAheadLoggingEnabled>;

     label12:
        if $z0 == 0 goto label22;

     label13:
        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r2 = r1.<androidx.room.InvalidationTracker: androidx.room.RoomDatabase mDatabase>;

     label14:
        $r6 = virtualinvoke r2.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteOpenHelper getOpenHelper()>();

        $r7 = interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteDatabase: void beginTransaction()>();

     label15:
        $r8 = specialinvoke r0.<androidx.room.InvalidationTracker$1: java.util.Set checkUpdatedTable()>();

     label16:
        r4 = $r8;

     label17:
        interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteDatabase: void setTransactionSuccessful()>();

     label18:
        interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

     label19:
        goto label24;

     label20:
        $r9 := @caughtexception;

     label21:
        interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteDatabase: void endTransaction()>();

        throw $r9;

     label22:
        $r8 = specialinvoke r0.<androidx.room.InvalidationTracker$1: java.util.Set checkUpdatedTable()>();

     label23:
        r4 = $r8;

     label24:
        goto label29;

     label25:
        r10 := @caughtexception;

        goto label36;

     label26:
        r11 := @caughtexception;

        goto label28;

     label27:
        r11 := @caughtexception;

     label28:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ROOM", "Cannot run invalidation tracker. Is the db closed?", r11);

     label29:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        if r4 == null goto label37;

        $z0 = interfaceinvoke r4.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label37;

        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        r12 = r1.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap mObserverMap>;

        entermonitor r12;

     label30:
        r1 = r0.<androidx.room.InvalidationTracker$1: androidx.room.InvalidationTracker this$0>;

        $r13 = r1.<androidx.room.InvalidationTracker: androidx.arch.core.internal.SafeIterableMap mObserverMap>;

        $r14 = virtualinvoke $r13.<androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()>();

     label31:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label32;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r15;

        $r15 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (androidx.room.InvalidationTracker$ObserverWrapper) $r15;

        virtualinvoke $r17.<androidx.room.InvalidationTracker$ObserverWrapper: void notifyByTableInvalidStatus(java.util.Set)>(r4);

        goto label31;

     label32:
        exitmonitor r12;

     label33:
        return;

     label34:
        $r18 := @caughtexception;

        exitmonitor r12;

     label35:
        throw $r18;

     label36:
        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r10;

     label37:
        return;

        catch java.lang.IllegalStateException from label01 to label02 with label27;
        catch java.lang.IllegalStateException from label03 to label04 with label27;
        catch android.database.sqlite.SQLiteException from label01 to label02 with label26;
        catch android.database.sqlite.SQLiteException from label03 to label04 with label26;
        catch java.lang.Throwable from label01 to label04 with label25;
        catch java.lang.IllegalStateException from label06 to label07 with label27;
        catch android.database.sqlite.SQLiteException from label06 to label07 with label26;
        catch java.lang.Throwable from label05 to label07 with label25;
        catch java.lang.IllegalStateException from label09 to label10 with label27;
        catch android.database.sqlite.SQLiteException from label09 to label10 with label26;
        catch java.lang.Throwable from label08 to label10 with label25;
        catch java.lang.IllegalStateException from label14 to label15 with label27;
        catch android.database.sqlite.SQLiteException from label14 to label15 with label26;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label15 with label25;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.IllegalStateException from label18 to label19 with label27;
        catch java.lang.IllegalStateException from label21 to label23 with label27;
        catch android.database.sqlite.SQLiteException from label18 to label19 with label26;
        catch android.database.sqlite.SQLiteException from label21 to label23 with label26;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label21 to label23 with label25;
        catch java.lang.Throwable from label28 to label29 with label25;
        catch java.lang.Throwable from label30 to label33 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
    }
}
