public final class kotlinx.coroutines.flow.internal.SafeCollector extends kotlin.coroutines.jvm.internal.ContinuationImpl implements kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.jvm.internal.CoroutineStackFrame
{
    public final kotlin.coroutines.CoroutineContext collectContext;
    public final int collectContextSize;
    public final kotlinx.coroutines.flow.FlowCollector collector;
    private kotlin.coroutines.Continuation completion;
    private kotlin.coroutines.CoroutineContext lastEmissionContext;

    public void <init>(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.flow.internal.NoOpContinuation $r3;
        kotlin.jvm.functions.Function2 $r9;
        kotlin.coroutines.CoroutineContext $r2, $r6;
        java.lang.Integer $r7;
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlin.coroutines.EmptyCoroutineContext $r5;
        int $i0;
        java.lang.Object $r10;
        java.lang.Number $r11;
        kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1 $r8;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r3 = <kotlinx.coroutines.flow.internal.NoOpContinuation: kotlinx.coroutines.flow.internal.NoOpContinuation INSTANCE>;

        $r4 = (kotlin.coroutines.Continuation) $r3;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r6 = (kotlin.coroutines.CoroutineContext) $r5;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>($r4, $r6);

        r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlinx.coroutines.flow.FlowCollector collector> = $r1;

        r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext collectContext> = $r2;

        $r2 = r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext collectContext>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8 = <kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1: kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1 INSTANCE>;

        $r9 = (kotlin.jvm.functions.Function2) $r8;

        $r10 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>($r7, $r9);

        $r11 = (java.lang.Number) $r10;

        $i0 = virtualinvoke $r11.<java.lang.Number: int intValue()>();

        r0.<kotlinx.coroutines.flow.internal.SafeCollector: int collectContextSize> = $i0;

        return;
    }

    private final void checkContext(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext, java.lang.Object)
    {
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        java.lang.Object $r3;
        kotlin.coroutines.CoroutineContext $r1, $r2;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r3 := @parameter2: java.lang.Object;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.flow.internal.DownstreamExceptionContext) $r2;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.SafeCollector: void exceptionTransparencyViolated(kotlinx.coroutines.flow.internal.DownstreamExceptionContext,java.lang.Object)>($r4, $r3);

     label1:
        staticinvoke <kotlinx.coroutines.flow.internal.SafeCollector_commonKt: void checkContext(kotlinx.coroutines.flow.internal.SafeCollector,kotlin.coroutines.CoroutineContext)>(r0, $r1);

        return;
    }

    private final java.lang.Object emit(kotlin.coroutines.Continuation, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.jvm.functions.Function3 $r5;
        kotlin.coroutines.CoroutineContext r3, $r4;
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        kotlinx.coroutines.flow.FlowCollector $r6;
        java.lang.Object $r2, $r7;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: java.lang.Object;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlin.coroutines.CoroutineContext)>($r4);

        r3 = r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext lastEmissionContext>;

        if r3 == $r4 goto label1;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.SafeCollector: void checkContext(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext,java.lang.Object)>($r4, r3, $r2);

        r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext lastEmissionContext> = $r4;

     label1:
        r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.Continuation completion> = $r1;

        $r5 = staticinvoke <kotlinx.coroutines.flow.internal.SafeCollectorKt: kotlin.jvm.functions.Function3 access$getEmitFun$p()>();

        $r6 = r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlinx.coroutines.flow.FlowCollector<kotlin.Any?>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "null cannot be cast to non-null type kotlin.coroutines.Continuation<kotlin.Unit>");

        $r1 = (kotlin.coroutines.Continuation) r0;

        $r2 = interfaceinvoke $r5.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r2, $r1);

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r7);

        if $z0 != 0 goto label2;

        r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.Continuation completion> = null;

     label2:
        return $r2;
    }

    private final void exceptionTransparencyViolated(kotlinx.coroutines.flow.internal.DownstreamExceptionContext, java.lang.Object)
    {
        java.lang.Throwable $r5;
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        java.lang.IllegalStateException $r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r6;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext $r1;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 := @parameter0: kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n            Flow exception transparency is violated:\n                Previous \'emit\' call has thrown exception ");

        $r5 = $r1.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: java.lang.Throwable e>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but then emission attempt of value \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has been detected.\n                Emissions from \'catch\' blocks are prohibited in order to avoid unspecified behaviour, \'Flow.catch\' operator can be used instead.\n                For a more detailed explanation, please refer to Flow documentation.\n            ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r6);

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r4;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext $r5;
        kotlin.coroutines.CoroutineContext $r6;
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        kotlin.Unit r7;
        java.lang.Object $r1, $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.flow.internal.SafeCollector: java.lang.Object emit(kotlin.coroutines.Continuation,java.lang.Object)>($r2, $r1);

     label2:
        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r3 goto label3;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label3:
        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r3 goto label4;

        return $r1;

     label4:
        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r7;

     label5:
        r4 := @caughtexception;

        $r5 = new kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r6 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r5.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: void <init>(java.lang.Throwable,kotlin.coroutines.CoroutineContext)>(r4, $r6);

        $r6 = (kotlin.coroutines.CoroutineContext) $r5;

        r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext lastEmissionContext> = $r6;

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 = r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.Continuation completion>;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r2;

     label1:
        return null;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.EmptyCoroutineContext $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 = r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext lastEmissionContext>;

        if $r1 != null goto label1;

        $r2 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r1 = (kotlin.coroutines.CoroutineContext) $r2;

     label1:
        return $r1;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlinx.coroutines.flow.internal.SafeCollector r0;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        return null;
    }

    public java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.Throwable $r2;
        kotlinx.coroutines.flow.internal.SafeCollector r0;
        kotlin.coroutines.Continuation r5;
        java.lang.Object $r1;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext $r3;
        kotlin.coroutines.CoroutineContext $r4;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        $r3 = new kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r3.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: void <init>(java.lang.Throwable,kotlin.coroutines.CoroutineContext)>($r2, $r4);

        $r4 = (kotlin.coroutines.CoroutineContext) $r3;

        r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext lastEmissionContext> = $r4;

     label1:
        r5 = r0.<kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.Continuation completion>;

        if r5 == null goto label2;

        interfaceinvoke r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

     label2:
        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r1;
    }

    public void releaseIntercepted()
    {
        kotlinx.coroutines.flow.internal.SafeCollector r0;

        r0 := @this: kotlinx.coroutines.flow.internal.SafeCollector;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()>();

        return;
    }
}
