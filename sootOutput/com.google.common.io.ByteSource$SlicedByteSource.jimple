final class com.google.common.io.ByteSource$SlicedByteSource extends com.google.common.io.ByteSource
{
    final long length;
    final long offset;
    final com.google.common.io.ByteSource this$0;

    void <init>(com.google.common.io.ByteSource, long, long)
    {
        com.google.common.io.ByteSource$SlicedByteSource r0;
        long $l0, $l1;
        byte $b2;
        int $i3;
        com.google.common.io.ByteSource $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        $r1 := @parameter0: com.google.common.io.ByteSource;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        r0.<com.google.common.io.ByteSource$SlicedByteSource: com.google.common.io.ByteSource this$0> = $r1;

        specialinvoke r0.<com.google.common.io.ByteSource: void <init>()>();

        $z0 = 1;

        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z1, "offset (%s) may not be negative", $l0);

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "length (%s) may not be negative", $l1);

        r0.<com.google.common.io.ByteSource$SlicedByteSource: long offset> = $l0;

        r0.<com.google.common.io.ByteSource$SlicedByteSource: long length> = $l1;

        return;
    }

    private java.io.InputStream sliceStream(java.io.InputStream) throws java.io.IOException
    {
        java.lang.Throwable r3, $r6;
        byte[] $r2;
        com.google.common.io.ByteSource$SlicedByteSource r0;
        long l0, $l2;
        java.lang.RuntimeException $r5;
        byte $b1;
        java.io.ByteArrayInputStream $r7;
        com.google.common.io.Closer $r4;
        int $i3;
        java.io.InputStream r1;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        r1 := @parameter0: java.io.InputStream;

        l0 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long offset>;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label6;

     label1:
        l0 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long offset>;

        l0 = staticinvoke <com.google.common.io.ByteStreams: long skipUpTo(java.io.InputStream,long)>(r1, l0);

     label2:
        $l2 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long offset>;

        $b1 = l0 cmp $l2;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label6;

        virtualinvoke r1.<java.io.InputStream: void close()>();

        $r7 = new java.io.ByteArrayInputStream;

        $r2 = newarray (byte)[0];

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        return $r7;

     label3:
        r3 := @caughtexception;

        $r4 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

        virtualinvoke $r4.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>(r1);

     label4:
        $r5 = virtualinvoke $r4.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>(r3);

        throw $r5;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r4.<com.google.common.io.Closer: void close()>();

        throw $r6;

     label6:
        l0 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long length>;

        r1 = staticinvoke <com.google.common.io.ByteStreams: java.io.InputStream limit(java.io.InputStream,long)>(r1, l0);

        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public boolean isEmpty() throws java.io.IOException
    {
        com.google.common.io.ByteSource$SlicedByteSource r0;
        byte $b0;
        long $l1;
        boolean $z0;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        $l1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long length>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label2;

        $z0 = specialinvoke r0.<com.google.common.io.ByteSource: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.io.InputStream openBufferedStream() throws java.io.IOException
    {
        com.google.common.io.ByteSource$SlicedByteSource r0;
        com.google.common.io.ByteSource $r1;
        java.io.InputStream $r2;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        $r1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: com.google.common.io.ByteSource this$0>;

        $r2 = virtualinvoke $r1.<com.google.common.io.ByteSource: java.io.InputStream openBufferedStream()>();

        $r2 = specialinvoke r0.<com.google.common.io.ByteSource$SlicedByteSource: java.io.InputStream sliceStream(java.io.InputStream)>($r2);

        return $r2;
    }

    public java.io.InputStream openStream() throws java.io.IOException
    {
        com.google.common.io.ByteSource$SlicedByteSource r0;
        com.google.common.io.ByteSource $r1;
        java.io.InputStream $r2;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        $r1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: com.google.common.io.ByteSource this$0>;

        $r2 = virtualinvoke $r1.<com.google.common.io.ByteSource: java.io.InputStream openStream()>();

        $r2 = specialinvoke r0.<com.google.common.io.ByteSource$SlicedByteSource: java.io.InputStream sliceStream(java.io.InputStream)>($r2);

        return $r2;
    }

    public com.google.common.base.Optional sizeIfKnown()
    {
        com.google.common.io.ByteSource$SlicedByteSource r0;
        long $l0, l1, $l2;
        java.lang.Long r4;
        com.google.common.base.Optional $r2;
        java.lang.Object $r3;
        com.google.common.io.ByteSource r1;
        boolean $z0;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        r1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: com.google.common.io.ByteSource this$0>;

        $r2 = virtualinvoke r1.<com.google.common.io.ByteSource: com.google.common.base.Optional sizeIfKnown()>();

        $z0 = virtualinvoke $r2.<com.google.common.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<com.google.common.base.Optional: java.lang.Object get()>();

        r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        l1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long offset>;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l0);

        l1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long length>;

        $l0 = $l0 - $l2;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l0);

        r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>(r4);

        return $r2;

     label1:
        $r2 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();

        return $r2;
    }

    public com.google.common.io.ByteSource slice(long, long)
    {
        com.google.common.io.ByteSource$SlicedByteSource r0;
        long $l0, $l1, l3, $l4;
        byte $b2;
        int $i5;
        com.google.common.io.ByteSource $r1;
        boolean z0, $z1;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        z0 = 1;

        $b2 = $l0 cmp 0L;

        $i5 = (int) $b2;

        if $i5 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z1, "offset (%s) may not be negative", $l0);

        $b2 = $l1 cmp 0L;

        $i5 = (int) $b2;

        if $i5 < 0 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>(z0, "length (%s) may not be negative", $l1);

        l3 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long length>;

        l3 = l3 - $l0;

        $b2 = l3 cmp 0L;

        $i5 = (int) $b2;

        if $i5 > 0 goto label5;

        $r1 = staticinvoke <com.google.common.io.ByteSource: com.google.common.io.ByteSource empty()>();

        return $r1;

     label5:
        $r1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: com.google.common.io.ByteSource this$0>;

        $l4 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long offset>;

        $l0 = $l4 + $l0;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, l3);

        $r1 = virtualinvoke $r1.<com.google.common.io.ByteSource: com.google.common.io.ByteSource slice(long,long)>($l0, $l1);

        return $r1;
    }

    public java.lang.String toString()
    {
        com.google.common.io.ByteSource$SlicedByteSource r0;
        long $l0, $l1;
        int $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r4;
        com.google.common.io.ByteSource $r2;

        r0 := @this: com.google.common.io.ByteSource$SlicedByteSource;

        $r2 = r0.<com.google.common.io.ByteSource$SlicedByteSource: com.google.common.io.ByteSource this$0>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $l1 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long offset>;

        $l0 = r0.<com.google.common.io.ByteSource$SlicedByteSource: long length>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = $i2 + 50;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".slice(");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
