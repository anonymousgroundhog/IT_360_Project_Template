final class kotlin.ranges.ULongProgressionIterator extends java.lang.Object implements java.util.Iterator, kotlin.jvm.internal.markers.KMappedMarker
{
    private final long finalElement;
    private boolean hasNext;
    private long next;
    private final long step;

    private void <init>(long, long, long)
    {
        byte $b3;
        kotlin.ranges.ULongProgressionIterator r0;
        int $i4;
        long $l0, $l1, $l2;
        boolean $z0;

        r0 := @this: kotlin.ranges.ULongProgressionIterator;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.ranges.ULongProgressionIterator: long finalElement> = $l1;

        $z0 = 1;

        $b3 = $l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label1;

        $i4 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport4: int m(long,long)>($l0, $l1);

        if $i4 > 0 goto label3;

        goto label2;

     label1:
        $i4 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport4: int m(long,long)>($l0, $l1);

        if $i4 < 0 goto label3;

     label2:
        goto label4;

     label3:
        $z0 = 0;

     label4:
        r0.<kotlin.ranges.ULongProgressionIterator: boolean hasNext> = $z0;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l2);

        r0.<kotlin.ranges.ULongProgressionIterator: long step> = $l1;

        $z0 = r0.<kotlin.ranges.ULongProgressionIterator: boolean hasNext>;

        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $l0 = r0.<kotlin.ranges.ULongProgressionIterator: long finalElement>;

     label6:
        r0.<kotlin.ranges.ULongProgressionIterator: long next> = $l0;

        return;
    }

    public void <init>(long, long, long, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.ranges.ULongProgressionIterator r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        long $l0, $l1, $l2;

        r0 := @this: kotlin.ranges.ULongProgressionIterator;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.ranges.ULongProgressionIterator: void <init>(long,long,long)>($l0, $l1, $l2);

        return;
    }

    public boolean hasNext()
    {
        kotlin.ranges.ULongProgressionIterator r0;
        boolean z0;

        r0 := @this: kotlin.ranges.ULongProgressionIterator;

        z0 = r0.<kotlin.ranges.ULongProgressionIterator: boolean hasNext>;

        return z0;
    }

    public volatile java.lang.Object next()
    {
        long $l0;
        kotlin.ranges.ULongProgressionIterator r0;
        kotlin.ULong $r1;

        r0 := @this: kotlin.ranges.ULongProgressionIterator;

        $l0 = virtualinvoke r0.<kotlin.ranges.ULongProgressionIterator: long next-s-VKNKU()>();

        $r1 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        return $r1;
    }

    public long next-s-VKNKU()
    {
        byte $b2;
        kotlin.ranges.ULongProgressionIterator r0;
        long l0, $l1, $l3;
        java.util.NoSuchElementException $r1;
        boolean $z0;

        r0 := @this: kotlin.ranges.ULongProgressionIterator;

        l0 = r0.<kotlin.ranges.ULongProgressionIterator: long next>;

        $l1 = r0.<kotlin.ranges.ULongProgressionIterator: long finalElement>;

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label2;

        $z0 = r0.<kotlin.ranges.ULongProgressionIterator: boolean hasNext>;

        if $z0 == 0 goto label1;

        r0.<kotlin.ranges.ULongProgressionIterator: boolean hasNext> = 0;

        return l0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label2:
        $l1 = r0.<kotlin.ranges.ULongProgressionIterator: long next>;

        $l3 = r0.<kotlin.ranges.ULongProgressionIterator: long step>;

        $l1 = $l1 + $l3;

        $l1 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l1);

        r0.<kotlin.ranges.ULongProgressionIterator: long next> = $l1;

        return l0;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.ranges.ULongProgressionIterator r0;

        r0 := @this: kotlin.ranges.ULongProgressionIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }
}
