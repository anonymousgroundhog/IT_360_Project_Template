public final class kotlin.sequences.TransformingSequence$iterator$1 extends java.lang.Object implements java.util.Iterator, kotlin.jvm.internal.markers.KMappedMarker
{
    private final java.util.Iterator iterator;
    final kotlin.sequences.TransformingSequence this$0;

    void <init>(kotlin.sequences.TransformingSequence)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r2;
        kotlin.sequences.TransformingSequence$iterator$1 r0;
        kotlin.sequences.TransformingSequence $r1;

        r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.TransformingSequence;

        r0.<kotlin.sequences.TransformingSequence$iterator$1: kotlin.sequences.TransformingSequence this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator> = $r3;

        return;
    }

    public final java.util.Iterator getIterator()
    {
        java.util.Iterator r1;
        kotlin.sequences.TransformingSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        r1 = r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator>;

        return r1;
    }

    public boolean hasNext()
    {
        java.util.Iterator $r1;
        kotlin.sequences.TransformingSequence$iterator$1 r0;
        boolean $z0;

        r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 = r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.Iterator $r3;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r4;
        kotlin.sequences.TransformingSequence$iterator$1 r0;
        kotlin.sequences.TransformingSequence $r1;

        r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 = r0.<kotlin.sequences.TransformingSequence$iterator$1: kotlin.sequences.TransformingSequence this$0>;

        $r2 = staticinvoke <kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence)>($r1);

        $r3 = r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        return $r4;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.sequences.TransformingSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }
}
