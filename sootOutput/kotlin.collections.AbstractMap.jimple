public abstract class kotlin.collections.AbstractMap extends java.lang.Object implements java.util.Map, kotlin.jvm.internal.markers.KMappedMarker
{
    public static final kotlin.collections.AbstractMap$Companion Companion;
    private volatile java.util.Set _keys;
    private volatile java.util.Collection _values;

    static void <clinit>()
    {
        kotlin.collections.AbstractMap$Companion $r0;

        $r0 = new kotlin.collections.AbstractMap$Companion;

        specialinvoke $r0.<kotlin.collections.AbstractMap$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.collections.AbstractMap: kotlin.collections.AbstractMap$Companion Companion> = $r0;

        return;
    }

    protected void <init>()
    {
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.lang.String access$toString(kotlin.collections.AbstractMap, java.util.Map$Entry)
    {
        java.util.Map$Entry $r1;
        kotlin.collections.AbstractMap $r0;
        java.lang.String $r2;

        $r0 := @parameter0: kotlin.collections.AbstractMap;

        $r1 := @parameter1: java.util.Map$Entry;

        $r2 = specialinvoke $r0.<kotlin.collections.AbstractMap: java.lang.String toString(java.util.Map$Entry)>($r1);

        return $r2;
    }

    private final java.util.Map$Entry implFindEntry(java.lang.Object)
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r4;
        java.util.Set $r2;
        java.lang.Iterable $r3;
        java.lang.Object $r1, $r5, r6;
        kotlin.collections.AbstractMap r0;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Set entrySet()>();

        $r3 = (java.lang.Iterable) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = $r5;

        r7 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r1);

        if $z0 == 0 goto label1;

        goto label3;

     label2:
        r6 = null;

     label3:
        r7 = (java.util.Map$Entry) r6;

        return r7;
    }

    private final java.lang.String toString(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.collections.AbstractMap r0;
        java.lang.String $r2;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return "(this Map)";

     label1:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        return $r2;
    }

    private final java.lang.String toString(java.util.Map$Entry)
    {
        java.util.Map$Entry $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        kotlin.collections.AbstractMap r0;
        java.lang.String $r4;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.util.Map$Entry;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = specialinvoke r0.<kotlin.collections.AbstractMap: java.lang.String toString(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r4 = specialinvoke r0.<kotlin.collections.AbstractMap: java.lang.String toString(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final boolean containsEntry$kotlin_stdlib(java.util.Map$Entry)
    {
        java.util.Map$Entry $r1;
        java.util.Map r4;
        java.lang.Object $r2, $r3, $r5;
        kotlin.collections.AbstractMap r0;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.util.Map$Entry;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.util.Map) r0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r4, "null cannot be cast to non-null type kotlin.collections.Map<K of kotlin.collections.MapsKt__MapsKt.get, V of kotlin.collections.MapsKt__MapsKt.get>");

        $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r5);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        if $r5 != null goto label3;

        r4 = (java.util.Map) r0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r4, "null cannot be cast to non-null type kotlin.collections.Map<K of kotlin.collections.MapsKt__MapsKt.containsKey, *>");

        $z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<kotlin.collections.AbstractMap: java.util.Map$Entry implFindEntry(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        java.util.Collection $r4;
        java.util.Set $r2;
        java.lang.Iterable $r3;
        java.lang.Object $r1, $r6;
        kotlin.collections.AbstractMap r0;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Set entrySet()>();

        $r3 = (java.lang.Iterable) $r2;

        $z0 = $r3 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r4 = (java.util.Collection) $r3;

        $z0 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r1);

        if $z0 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public final volatile java.util.Set entrySet()
    {
        java.util.Set $r1;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Set getEntries()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r6;
        java.util.Collection $r5;
        java.util.Set $r3;
        java.lang.Iterable $r4;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        kotlin.collections.AbstractMap r0;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.util.Map;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r0.<kotlin.collections.AbstractMap: int size()>();

        $r2 = (java.util.Map) $r1;

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r2 = (java.util.Map) $r1;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = (java.lang.Iterable) $r3;

        $z0 = $r4 instanceof java.util.Collection;

        if $z0 == 0 goto label4;

        $r5 = (java.util.Collection) $r4;

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $r6 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r1 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r1;

        $z0 = virtualinvoke r0.<kotlin.collections.AbstractMap: boolean containsEntry$kotlin_stdlib(java.util.Map$Entry)>(r7);

        if $z0 != 0 goto label5;

        return 0;

     label6:
        return 1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<kotlin.collections.AbstractMap: java.util.Map$Entry implFindEntry(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        $r1 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r1;

     label1:
        return null;
    }

    public abstract java.util.Set getEntries();

    public java.util.Set getKeys()
    {
        java.util.Set $r1;
        kotlin.collections.AbstractMap r0;
        kotlin.collections.AbstractMap$keys$1 $r2;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = r0.<kotlin.collections.AbstractMap: java.util.Set _keys>;

        if $r1 != null goto label1;

        $r2 = new kotlin.collections.AbstractMap$keys$1;

        specialinvoke $r2.<kotlin.collections.AbstractMap$keys$1: void <init>(kotlin.collections.AbstractMap)>(r0);

        $r1 = (java.util.Set) $r2;

        r0.<kotlin.collections.AbstractMap: java.util.Set _keys> = $r1;

     label1:
        $r1 = r0.<kotlin.collections.AbstractMap: java.util.Set _keys>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public int getSize()
    {
        int $i0;
        java.util.Set $r1;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public java.util.Collection getValues()
    {
        kotlin.collections.AbstractMap r0;
        kotlin.collections.AbstractMap$values$1 $r2;
        java.util.Collection $r1;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = r0.<kotlin.collections.AbstractMap: java.util.Collection _values>;

        if $r1 != null goto label1;

        $r2 = new kotlin.collections.AbstractMap$values$1;

        specialinvoke $r2.<kotlin.collections.AbstractMap$values$1: void <init>(kotlin.collections.AbstractMap)>(r0);

        $r1 = (java.util.Collection) $r2;

        r0.<kotlin.collections.AbstractMap: java.util.Collection _values> = $r1;

     label1:
        $r1 = r0.<kotlin.collections.AbstractMap: java.util.Collection _values>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public int hashCode()
    {
        int $i0;
        java.util.Set $r1;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Set entrySet()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractMap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final volatile java.util.Set keySet()
    {
        java.util.Set $r1;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Set getKeys()>();

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        java.lang.Object $r1, $r2;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public void putAll(java.util.Map)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.collections.AbstractMap r0;
        java.util.Map $r1;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        int $i0;
        kotlin.collections.AbstractMap r0;

        r0 := @this: kotlin.collections.AbstractMap;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractMap: int getSize()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.CharSequence $r3, $r4, $r5;
        java.util.Set $r1;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.Iterable $r2;
        kotlin.collections.AbstractMap$toString$1 $r6;
        kotlin.collections.AbstractMap r0;
        java.lang.String $r8;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Set entrySet()>();

        $r2 = (java.lang.Iterable) $r1;

        $r3 = (java.lang.CharSequence) ", ";

        $r4 = (java.lang.CharSequence) "{";

        $r5 = (java.lang.CharSequence) "}";

        $r6 = new kotlin.collections.AbstractMap$toString$1;

        specialinvoke $r6.<kotlin.collections.AbstractMap$toString$1: void <init>(kotlin.collections.AbstractMap)>(r0);

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, $r3, $r4, $r5, 0, null, $r7, 24, null);

        return $r8;
    }

    public final volatile java.util.Collection values()
    {
        kotlin.collections.AbstractMap r0;
        java.util.Collection $r1;

        r0 := @this: kotlin.collections.AbstractMap;

        $r1 = virtualinvoke r0.<kotlin.collections.AbstractMap: java.util.Collection getValues()>();

        return $r1;
    }
}
