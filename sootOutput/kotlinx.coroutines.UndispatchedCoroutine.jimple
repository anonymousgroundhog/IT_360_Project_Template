public final class kotlinx.coroutines.UndispatchedCoroutine extends kotlinx.coroutines.internal.ScopeCoroutine
{
    private volatile boolean threadLocalIsSet;
    private final java.lang.ThreadLocal threadStateToRecover;

    public void <init>(kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.ContinuationInterceptor$Key $r8;
        kotlin.coroutines.Continuation $r2;
        java.lang.ThreadLocal r7;
        kotlin.coroutines.CoroutineContext$Element $r5;
        kotlin.coroutines.CoroutineContext $r1, r6;
        kotlinx.coroutines.UndispatchedMarker r3;
        kotlin.coroutines.CoroutineContext$Key r4;
        java.lang.Object $r9;
        kotlinx.coroutines.UndispatchedCoroutine r0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.UndispatchedCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r3 = <kotlinx.coroutines.UndispatchedMarker: kotlinx.coroutines.UndispatchedMarker INSTANCE>;

        r4 = (kotlin.coroutines.CoroutineContext$Key) r3;

        $r5 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r4);

        if $r5 != null goto label1;

        r3 = <kotlinx.coroutines.UndispatchedMarker: kotlinx.coroutines.UndispatchedMarker INSTANCE>;

        r6 = (kotlin.coroutines.CoroutineContext) r3;

        r6 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>(r6);

        goto label2;

     label1:
        r6 = $r1;

     label2:
        specialinvoke r0.<kotlinx.coroutines.internal.ScopeCoroutine: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.Continuation)>(r6, $r2);

        r7 = new java.lang.ThreadLocal;

        specialinvoke r7.<java.lang.ThreadLocal: void <init>()>();

        r0.<kotlinx.coroutines.UndispatchedCoroutine: java.lang.ThreadLocal threadStateToRecover> = r7;

        r6 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r8 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        r4 = (kotlin.coroutines.CoroutineContext$Key) $r8;

        $r5 = interfaceinvoke r6.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r4);

        z0 = $r5 instanceof kotlinx.coroutines.CoroutineDispatcher;

        if z0 != 0 goto label3;

        $r9 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, null);

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, $r9);

        virtualinvoke r0.<kotlinx.coroutines.UndispatchedCoroutine: void saveThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r1, $r9);

     label3:
        return;
    }

    protected void afterResume(java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol r7;
        java.lang.Throwable $r10;
        java.lang.ThreadLocal r2;
        kotlin.coroutines.Continuation r6;
        kotlin.Pair r4;
        kotlin.coroutines.CoroutineContext r5;
        kotlin.Unit $r9;
        java.lang.Object $r1, $r3;
        kotlinx.coroutines.UndispatchedCoroutine r0, $r8;
        boolean z0;

        r0 := @this: kotlinx.coroutines.UndispatchedCoroutine;

        $r1 := @parameter0: java.lang.Object;

        z0 = r0.<kotlinx.coroutines.UndispatchedCoroutine: boolean threadLocalIsSet>;

        if z0 == 0 goto label02;

        r2 = r0.<kotlinx.coroutines.UndispatchedCoroutine: java.lang.ThreadLocal threadStateToRecover>;

        $r3 = virtualinvoke r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (kotlin.Pair) $r3;

        if r4 == null goto label01;

        $r3 = virtualinvoke r4.<kotlin.Pair: java.lang.Object component1()>();

        r5 = (kotlin.coroutines.CoroutineContext) $r3;

        $r3 = virtualinvoke r4.<kotlin.Pair: java.lang.Object component2()>();

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>(r5, $r3);

     label01:
        r2 = r0.<kotlinx.coroutines.UndispatchedCoroutine: java.lang.ThreadLocal threadStateToRecover>;

        virtualinvoke r2.<java.lang.ThreadLocal: void remove()>();

     label02:
        r6 = r0.<kotlinx.coroutines.UndispatchedCoroutine: kotlin.coroutines.Continuation uCont>;

        $r1 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object recoverResult(java.lang.Object,kotlin.coroutines.Continuation)>($r1, r6);

        r6 = r0.<kotlinx.coroutines.UndispatchedCoroutine: kotlin.coroutines.Continuation uCont>;

        r5 = interfaceinvoke r6.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>(r5, null);

        r7 = <kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS>;

        if $r3 == r7 goto label03;

        $r8 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)>(r6, r5, $r3);

        goto label04;

     label03:
        $r8 = null;

     label04:
        r6 = r0.<kotlinx.coroutines.UndispatchedCoroutine: kotlin.coroutines.Continuation uCont>;

        interfaceinvoke r6.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label05:
        if $r8 == null goto label06;

        z0 = virtualinvoke $r8.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if z0 == 0 goto label07;

     label06:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>(r5, $r3);

     label07:
        return;

     label08:
        $r10 := @caughtexception;

        if $r8 == null goto label09;

        z0 = virtualinvoke $r8.<kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()>();

        if z0 == 0 goto label10;

     label09:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>(r5, $r3);

     label10:
        throw $r10;

        catch java.lang.Throwable from label04 to label05 with label08;
    }

    public final boolean clearThreadContext()
    {
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.UndispatchedCoroutine r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.UndispatchedCoroutine;

        $z0 = r0.<kotlinx.coroutines.UndispatchedCoroutine: boolean threadLocalIsSet>;

        if $z0 == 0 goto label1;

        $r1 = r0.<kotlinx.coroutines.UndispatchedCoroutine: java.lang.ThreadLocal threadStateToRecover>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = r0.<kotlinx.coroutines.UndispatchedCoroutine: java.lang.ThreadLocal threadStateToRecover>;

        virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public final void saveThreadContext(kotlin.coroutines.CoroutineContext, java.lang.Object)
    {
        java.lang.ThreadLocal $r4;
        kotlin.Pair $r3;
        java.lang.Object $r2;
        kotlinx.coroutines.UndispatchedCoroutine r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlinx.coroutines.UndispatchedCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Object;

        r0.<kotlinx.coroutines.UndispatchedCoroutine: boolean threadLocalIsSet> = 1;

        $r4 = r0.<kotlinx.coroutines.UndispatchedCoroutine: java.lang.ThreadLocal threadStateToRecover>;

        $r3 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r1, $r2);

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>($r3);

        return;
    }
}
