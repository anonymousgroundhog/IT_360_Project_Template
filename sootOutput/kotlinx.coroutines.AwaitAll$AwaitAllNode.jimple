final class kotlinx.coroutines.AwaitAll$AwaitAllNode extends kotlinx.coroutines.JobNode
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _disposer$FU;
    private volatile java.lang.Object _disposer;
    private final kotlinx.coroutines.CancellableContinuation continuation;
    public kotlinx.coroutines.DisposableHandle handle;
    final kotlinx.coroutines.AwaitAll this$0;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/AwaitAll$AwaitAllNode;", class "Ljava/lang/Object;", "_disposer");

        <kotlinx.coroutines.AwaitAll$AwaitAllNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _disposer$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.AwaitAll, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.AwaitAll$AwaitAllNode r0;
        kotlinx.coroutines.CancellableContinuation $r2;
        kotlinx.coroutines.AwaitAll $r1;

        r0 := @this: kotlinx.coroutines.AwaitAll$AwaitAllNode;

        $r1 := @parameter0: kotlinx.coroutines.AwaitAll;

        $r2 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.AwaitAll this$0> = $r1;

        specialinvoke r0.<kotlinx.coroutines.JobNode: void <init>()>();

        r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.CancellableContinuation continuation> = $r2;

        return;
    }

    public final kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel getDisposer()
    {
        kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel $r3;
        kotlinx.coroutines.AwaitAll$AwaitAllNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.AwaitAll$AwaitAllNode;

        $r2 = <kotlinx.coroutines.AwaitAll$AwaitAllNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _disposer$FU>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel) $r1;

        return $r3;
    }

    public final kotlinx.coroutines.DisposableHandle getHandle()
    {
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.AwaitAll$AwaitAllNode r0;

        r0 := @this: kotlinx.coroutines.AwaitAll$AwaitAllNode;

        $r1 = r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.DisposableHandle handle>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("handle");

        return null;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        java.lang.Throwable $r2;
        kotlin.Unit r3;
        kotlinx.coroutines.AwaitAll$AwaitAllNode r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.AwaitAll$AwaitAllNode;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: void invoke(java.lang.Throwable)>($r2);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public void invoke(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r6;
        kotlin.coroutines.Continuation r8;
        kotlinx.coroutines.AwaitAll$AwaitAllNode r0;
        kotlinx.coroutines.Deferred r2;
        kotlin.Result$Companion $r13;
        java.util.ArrayList r10;
        kotlinx.coroutines.Deferred[] $r9;
        int $i0, $i1;
        kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel $r5;
        java.util.Collection r11;
        java.util.List r12;
        kotlinx.coroutines.CancellableContinuation r3;
        java.lang.Object $r4;
        kotlinx.coroutines.AwaitAll $r7;

        r0 := @this: kotlinx.coroutines.AwaitAll$AwaitAllNode;

        $r1 := @parameter0: java.lang.Throwable;

        if $r1 == null goto label1;

        r3 = r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.CancellableContinuation continuation>;

        $r4 = interfaceinvoke r3.<kotlinx.coroutines.CancellableContinuation: java.lang.Object tryResumeWithException(java.lang.Throwable)>($r1);

        if $r4 == null goto label4;

        r3 = r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.CancellableContinuation continuation>;

        interfaceinvoke r3.<kotlinx.coroutines.CancellableContinuation: void completeResume(java.lang.Object)>($r4);

        $r5 = virtualinvoke r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel getDisposer()>();

        if $r5 == null goto label4;

        virtualinvoke $r5.<kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel: void disposeAll()>();

        return;

     label1:
        $r6 = staticinvoke <kotlinx.coroutines.AwaitAll: java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$getNotCompletedCount$FU$p()>();

        $r7 = r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.AwaitAll this$0>;

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>($r7);

        if $i0 != 0 goto label4;

        r3 = r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.CancellableContinuation continuation>;

        r8 = (kotlin.coroutines.Continuation) r3;

        $r7 = r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.AwaitAll this$0>;

        $r9 = staticinvoke <kotlinx.coroutines.AwaitAll: kotlinx.coroutines.Deferred[] access$getDeferreds$p(kotlinx.coroutines.AwaitAll)>($r7);

        r10 = new java.util.ArrayList;

        $i0 = lengthof $r9;

        specialinvoke r10.<java.util.ArrayList: void <init>(int)>($i0);

        r11 = (java.util.Collection) r10;

        $i0 = lengthof $r9;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        r2 = $r9[$i1];

        $r4 = interfaceinvoke r2.<kotlinx.coroutines.Deferred: java.lang.Object getCompleted()>();

        interfaceinvoke r11.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        r12 = (java.util.List) r11;

        $r13 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r4 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>(r12);

        interfaceinvoke r8.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r4);

     label4:
        return;
    }

    public final void setDisposer(kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel)
    {
        kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel $r1;
        kotlinx.coroutines.AwaitAll$AwaitAllNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;

        r0 := @this: kotlinx.coroutines.AwaitAll$AwaitAllNode;

        $r1 := @parameter0: kotlinx.coroutines.AwaitAll$DisposeHandlersOnCancel;

        $r2 = <kotlinx.coroutines.AwaitAll$AwaitAllNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _disposer$FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r1);

        return;
    }

    public final void setHandle(kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.AwaitAll$AwaitAllNode r0;

        r0 := @this: kotlinx.coroutines.AwaitAll$AwaitAllNode;

        $r1 := @parameter0: kotlinx.coroutines.DisposableHandle;

        r0.<kotlinx.coroutines.AwaitAll$AwaitAllNode: kotlinx.coroutines.DisposableHandle handle> = $r1;

        return;
    }
}
