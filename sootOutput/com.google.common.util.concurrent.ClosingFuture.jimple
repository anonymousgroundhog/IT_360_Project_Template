public final class com.google.common.util.concurrent.ClosingFuture extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    private final com.google.common.util.concurrent.ClosingFuture$CloseableList closeables;
    private final com.google.common.util.concurrent.FluentFuture future;
    private final java.util.concurrent.atomic.AtomicReference state;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/common/util/concurrent/ClosingFuture;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger> = $r2;

        return;
    }

    private void <init>(com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable r1;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ClosingFuture$State $r5;
        java.util.concurrent.atomic.AtomicReference r4;
        com.google.common.util.concurrent.ClosingFuture$CloseableList r6;
        com.google.common.util.concurrent.ClosingFuture$3 r7;
        com.google.common.util.concurrent.TrustedListenableFutureTask $r3;
        com.google.common.util.concurrent.ClosingFuture r0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = new java.util.concurrent.atomic.AtomicReference;

        $r5 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State OPEN>;

        specialinvoke r4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r5);

        r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state> = r4;

        r6 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke r6.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>(com.google.common.util.concurrent.ClosingFuture$1)>(null);

        r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables> = r6;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r7 = new com.google.common.util.concurrent.ClosingFuture$3;

        specialinvoke r7.<com.google.common.util.concurrent.ClosingFuture$3: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable)>(r0, r1);

        $r3 = staticinvoke <com.google.common.util.concurrent.TrustedListenableFutureTask: com.google.common.util.concurrent.TrustedListenableFutureTask create(com.google.common.util.concurrent.AsyncCallable)>(r7);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future> = $r3;

        return;
    }

    private void <init>(com.google.common.util.concurrent.ClosingFuture$ClosingCallable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ClosingFuture$State $r5;
        com.google.common.util.concurrent.ClosingFuture$ClosingCallable r1;
        java.util.concurrent.atomic.AtomicReference r4;
        com.google.common.util.concurrent.ClosingFuture$CloseableList r6;
        com.google.common.util.concurrent.TrustedListenableFutureTask $r3;
        com.google.common.util.concurrent.ClosingFuture$2 r7;
        com.google.common.util.concurrent.ClosingFuture r0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$ClosingCallable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = new java.util.concurrent.atomic.AtomicReference;

        $r5 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State OPEN>;

        specialinvoke r4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r5);

        r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state> = r4;

        r6 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke r6.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>(com.google.common.util.concurrent.ClosingFuture$1)>(null);

        r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables> = r6;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r7 = new com.google.common.util.concurrent.ClosingFuture$2;

        specialinvoke r7.<com.google.common.util.concurrent.ClosingFuture$2: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$ClosingCallable)>(r0, r1);

        $r3 = staticinvoke <com.google.common.util.concurrent.TrustedListenableFutureTask: com.google.common.util.concurrent.TrustedListenableFutureTask create(java.util.concurrent.Callable)>(r7);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future> = $r3;

        return;
    }

    private void <init>(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r5;
        com.google.common.util.concurrent.ListenableFuture r1;
        com.google.common.util.concurrent.ClosingFuture$State $r4;
        com.google.common.util.concurrent.ClosingFuture r0;
        java.util.concurrent.atomic.AtomicReference $r3;
        com.google.common.util.concurrent.FluentFuture $r2;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        $r4 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State OPEN>;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r4);

        r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state> = $r3;

        $r5 = new com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke $r5.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void <init>(com.google.common.util.concurrent.ClosingFuture$1)>(null);

        r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables> = $r5;

        $r2 = staticinvoke <com.google.common.util.concurrent.FluentFuture: com.google.common.util.concurrent.FluentFuture 'from'(com.google.common.util.concurrent.ListenableFuture)>(r1);

        r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future> = $r2;

        return;
    }

    void <init>(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.ClosingFuture$1)
    {
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.ClosingFuture$1 $r2;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$1;

        specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>($r1);

        return;
    }

    static com.google.common.util.concurrent.FluentFuture access$000(com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture $r0;
        com.google.common.util.concurrent.FluentFuture r1;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 = $r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        return r1;
    }

    static void access$100(com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        specialinvoke $r0.<com.google.common.util.concurrent.ClosingFuture: void close()>();

        return;
    }

    static void access$1000(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture$CloseableList)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r1;
        com.google.common.util.concurrent.ClosingFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        specialinvoke $r0.<com.google.common.util.concurrent.ClosingFuture: void becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList)>($r1);

        return;
    }

    static void access$1100(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture$State, com.google.common.util.concurrent.ClosingFuture$State)
    {
        com.google.common.util.concurrent.ClosingFuture$State $r1, $r2;
        com.google.common.util.concurrent.ClosingFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture$State;

        $r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture$State;

        specialinvoke $r0.<com.google.common.util.concurrent.ClosingFuture: void checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)>($r1, $r2);

        return;
    }

    static void access$1200(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer, com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture $r1;
        com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer;

        $r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture;

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)>($r0, $r1);

        return;
    }

    static com.google.common.util.concurrent.ClosingFuture$CloseableList access$200(com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList r1;
        com.google.common.util.concurrent.ClosingFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 = $r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        return r1;
    }

    static java.util.logging.Logger access$3200()
    {
        java.util.logging.Logger r0;

        r0 = <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger>;

        return r0;
    }

    static void access$3300(java.io.Closeable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r1;
        java.io.Closeable $r0;

        $r0 := @parameter0: java.io.Closeable;

        $r1 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void closeQuietly(java.io.Closeable,java.util.concurrent.Executor)>($r0, $r1);

        return;
    }

    private void becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r1, $r5;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ClosingFuture$State $r3, $r4;
        com.google.common.util.concurrent.ClosingFuture r0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$CloseableList;

        $r3 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State OPEN>;

        $r4 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State SUBSUMED>;

        specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: void checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)>($r3, $r4);

        $r5 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void add(java.io.Closeable,java.util.concurrent.Executor)>($r5, $r2);

        return;
    }

    private com.google.common.util.concurrent.ClosingFuture catchingAsyncMoreGeneric(java.lang.Class, com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r3;
        com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction r2;
        java.lang.Class r1;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ClosingFuture$8 r4;
        com.google.common.util.concurrent.FluentFuture $r5;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction;

        $r3 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r4 = new com.google.common.util.concurrent.ClosingFuture$8;

        specialinvoke r4.<com.google.common.util.concurrent.ClosingFuture$8: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction)>(r0, r2);

        $r5 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r5 = virtualinvoke $r5.<com.google.common.util.concurrent.FluentFuture: com.google.common.util.concurrent.FluentFuture catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>(r1, r4, $r3);

        r0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture derive(com.google.common.util.concurrent.FluentFuture)>($r5);

        return r0;
    }

    private com.google.common.util.concurrent.ClosingFuture catchingMoreGeneric(java.lang.Class, com.google.common.util.concurrent.ClosingFuture$ClosingFunction, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r3;
        java.lang.Class r1;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ClosingFuture$7 r4;
        com.google.common.util.concurrent.ClosingFuture$ClosingFunction r2;
        com.google.common.util.concurrent.FluentFuture $r5;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$ClosingFunction;

        $r3 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r4 = new com.google.common.util.concurrent.ClosingFuture$7;

        specialinvoke r4.<com.google.common.util.concurrent.ClosingFuture$7: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$ClosingFunction)>(r0, r2);

        $r5 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r5 = virtualinvoke $r5.<com.google.common.util.concurrent.FluentFuture: com.google.common.util.concurrent.FluentFuture catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>(r1, r4, $r3);

        r0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture derive(com.google.common.util.concurrent.FluentFuture)>($r5);

        return r0;
    }

    private void checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State, com.google.common.util.concurrent.ClosingFuture$State)
    {
        com.google.common.util.concurrent.ClosingFuture$State $r1, $r2;
        com.google.common.util.concurrent.ClosingFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$State;

        $r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$State;

        $z0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)>($r1, $r2);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Expected state to be %s, but it was %s", $r1, $r2);

        return;
    }

    private void close()
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r3;
        com.google.common.util.concurrent.ClosingFuture r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r2 = <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r1, "closing {0}", r0);

        $r3 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        virtualinvoke $r3.<com.google.common.util.concurrent.ClosingFuture$CloseableList: void close()>();

        return;
    }

    private static void closeQuietly(java.io.Closeable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ClosingFuture$11 r2;
        java.lang.Object[] $r6;
        java.util.concurrent.Executor $r1;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;
        java.util.concurrent.RejectedExecutionException r3;
        java.io.Closeable $r0;
        java.lang.String $r7;
        boolean $z0;

        $r0 := @parameter0: java.io.Closeable;

        $r1 := @parameter1: java.util.concurrent.Executor;

        if $r0 != null goto label1;

        return;

     label1:
        r2 = new com.google.common.util.concurrent.ClosingFuture$11;

     label2:
        specialinvoke r2.<com.google.common.util.concurrent.ClosingFuture$11: void <init>(java.io.Closeable)>($r0);

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r2);

     label3:
        return;

     label4:
        r3 := @caughtexception;

        $r4 = <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger>;

        $r5 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke $r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r5);

        if $z0 == 0 goto label5;

        $r4 = <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger>;

        $r5 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("while submitting close to %s; will close inline", $r6);

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r5, $r7, r3);

     label5:
        $r1 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <com.google.common.util.concurrent.ClosingFuture: void closeQuietly(java.io.Closeable,java.util.concurrent.Executor)>($r0, $r1);

        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    private boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State, com.google.common.util.concurrent.ClosingFuture$State)
    {
        com.google.common.util.concurrent.ClosingFuture$State $r1, $r2;
        com.google.common.util.concurrent.ClosingFuture r0;
        java.util.concurrent.atomic.AtomicReference $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$State;

        $r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$State;

        $r3 = r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state>;

        $z0 = staticinvoke <com.google.android.gms.common.api.internal.zap$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReference,java.lang.Object,java.lang.Object)>($r3, $r1, $r2);

        return $z0;
    }

    private com.google.common.util.concurrent.ClosingFuture derive(com.google.common.util.concurrent.FluentFuture)
    {
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r3;
        com.google.common.util.concurrent.ClosingFuture r0, r2;
        com.google.common.util.concurrent.FluentFuture r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.FluentFuture;

        r2 = new com.google.common.util.concurrent.ClosingFuture;

        specialinvoke r2.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>(r1);

        $r3 = r2.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: void becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList)>($r3);

        return r2;
    }

    public static com.google.common.util.concurrent.ClosingFuture eventuallyClosing(com.google.common.util.concurrent.ListenableFuture, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture r0, $r3;
        java.util.concurrent.Executor $r1;
        com.google.common.util.concurrent.ClosingFuture$1 $r4;
        com.google.common.util.concurrent.ClosingFuture r2;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r1 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r2 = new com.google.common.util.concurrent.ClosingFuture;

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>(r0);

        specialinvoke r2.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>($r3);

        $r4 = new com.google.common.util.concurrent.ClosingFuture$1;

        specialinvoke $r4.<com.google.common.util.concurrent.ClosingFuture$1: void <init>(com.google.common.util.concurrent.ClosingFuture,java.util.concurrent.Executor)>(r2, $r1);

        $r1 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>(r0, $r4, $r1);

        return r2;
    }

    public static com.google.common.util.concurrent.ClosingFuture 'from'(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.ListenableFuture r0;
        com.google.common.util.concurrent.ClosingFuture $r1;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r1 = new com.google.common.util.concurrent.ClosingFuture;

        specialinvoke $r1.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>(r0);

        return $r1;
    }

    private static void provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer, com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture r1;
        com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer r0;
        com.google.common.util.concurrent.ClosingFuture$ValueAndCloser $r2;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer;

        r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture;

        $r2 = new com.google.common.util.concurrent.ClosingFuture$ValueAndCloser;

        specialinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$ValueAndCloser: void <init>(com.google.common.util.concurrent.ClosingFuture)>(r1);

        interfaceinvoke r0.<com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer: void accept(com.google.common.util.concurrent.ClosingFuture$ValueAndCloser)>($r2);

        return;
    }

    public static com.google.common.util.concurrent.ClosingFuture submit(com.google.common.util.concurrent.ClosingFuture$ClosingCallable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ClosingFuture$ClosingCallable r0;
        com.google.common.util.concurrent.ClosingFuture $r2;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$ClosingCallable;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r2 = new com.google.common.util.concurrent.ClosingFuture;

        specialinvoke $r2.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ClosingFuture$ClosingCallable,java.util.concurrent.Executor)>(r0, $r1);

        return $r2;
    }

    public static com.google.common.util.concurrent.ClosingFuture submitAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable r0;
        com.google.common.util.concurrent.ClosingFuture $r2;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r2 = new com.google.common.util.concurrent.ClosingFuture;

        specialinvoke $r2.<com.google.common.util.concurrent.ClosingFuture: void <init>(com.google.common.util.concurrent.ClosingFuture$AsyncClosingCallable,java.util.concurrent.Executor)>(r0, $r1);

        return $r2;
    }

    public static transient com.google.common.util.concurrent.ClosingFuture$Combiner whenAllComplete(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture[])
    {
        java.util.List $r2;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ClosingFuture$Combiner $r3;
        com.google.common.util.concurrent.ClosingFuture[] r1;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture[];

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.List asList(java.lang.Object,java.lang.Object[])>(r0, r1);

        $r3 = staticinvoke <com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$Combiner whenAllComplete(java.lang.Iterable)>($r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ClosingFuture$Combiner whenAllComplete(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.util.concurrent.ClosingFuture$Combiner $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = new com.google.common.util.concurrent.ClosingFuture$Combiner;

        specialinvoke $r1.<com.google.common.util.concurrent.ClosingFuture$Combiner: void <init>(boolean,java.lang.Iterable,com.google.common.util.concurrent.ClosingFuture$1)>(0, r0, null);

        return $r1;
    }

    public static com.google.common.util.concurrent.ClosingFuture$Combiner2 whenAllSucceed(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture$Combiner2 $r2;
        com.google.common.util.concurrent.ClosingFuture r0, r1;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture;

        $r2 = new com.google.common.util.concurrent.ClosingFuture$Combiner2;

        specialinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$Combiner2: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1)>(r0, r1, null);

        return $r2;
    }

    public static com.google.common.util.concurrent.ClosingFuture$Combiner3 whenAllSucceed(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture$Combiner3 $r3;
        com.google.common.util.concurrent.ClosingFuture r0, r1, r2;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture;

        r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture;

        $r3 = new com.google.common.util.concurrent.ClosingFuture$Combiner3;

        specialinvoke $r3.<com.google.common.util.concurrent.ClosingFuture$Combiner3: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1)>(r0, r1, r2, null);

        return $r3;
    }

    public static com.google.common.util.concurrent.ClosingFuture$Combiner4 whenAllSucceed(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture$Combiner4 $r4;
        com.google.common.util.concurrent.ClosingFuture r0, r1, r2, r3;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture;

        r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture;

        r3 := @parameter3: com.google.common.util.concurrent.ClosingFuture;

        $r4 = new com.google.common.util.concurrent.ClosingFuture$Combiner4;

        specialinvoke $r4.<com.google.common.util.concurrent.ClosingFuture$Combiner4: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1)>(r0, r1, r2, r3, null);

        return $r4;
    }

    public static com.google.common.util.concurrent.ClosingFuture$Combiner5 whenAllSucceed(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture)
    {
        com.google.common.util.concurrent.ClosingFuture$Combiner5 $r5;
        com.google.common.util.concurrent.ClosingFuture r0, r1, r2, r3, r4;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture;

        r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture;

        r3 := @parameter3: com.google.common.util.concurrent.ClosingFuture;

        r4 := @parameter4: com.google.common.util.concurrent.ClosingFuture;

        $r5 = new com.google.common.util.concurrent.ClosingFuture$Combiner5;

        specialinvoke $r5.<com.google.common.util.concurrent.ClosingFuture$Combiner5: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$1)>(r0, r1, r2, r3, r4, null);

        return $r5;
    }

    public static transient com.google.common.util.concurrent.ClosingFuture$Combiner whenAllSucceed(com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture, com.google.common.util.concurrent.ClosingFuture[])
    {
        com.google.common.util.concurrent.ClosingFuture$Combiner $r9;
        com.google.common.util.concurrent.ClosingFuture[] r6, $r7;
        com.google.common.collect.FluentIterable $r8;
        com.google.common.util.concurrent.ClosingFuture r0, r1, r2, r3, r4, r5;

        r0 := @parameter0: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter1: com.google.common.util.concurrent.ClosingFuture;

        r2 := @parameter2: com.google.common.util.concurrent.ClosingFuture;

        r3 := @parameter3: com.google.common.util.concurrent.ClosingFuture;

        r4 := @parameter4: com.google.common.util.concurrent.ClosingFuture;

        r5 := @parameter5: com.google.common.util.concurrent.ClosingFuture;

        r6 := @parameter6: com.google.common.util.concurrent.ClosingFuture[];

        $r7 = newarray (com.google.common.util.concurrent.ClosingFuture)[5];

        $r7[0] = r1;

        $r7[1] = r2;

        $r7[2] = r3;

        $r7[3] = r4;

        $r7[4] = r5;

        $r8 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable of(java.lang.Object,java.lang.Object[])>(r0, $r7);

        $r8 = virtualinvoke $r8.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable append(java.lang.Object[])>(r6);

        $r9 = staticinvoke <com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$Combiner whenAllSucceed(java.lang.Iterable)>($r8);

        return $r9;
    }

    public static com.google.common.util.concurrent.ClosingFuture$Combiner whenAllSucceed(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.util.concurrent.ClosingFuture$Combiner $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = new com.google.common.util.concurrent.ClosingFuture$Combiner;

        specialinvoke $r1.<com.google.common.util.concurrent.ClosingFuture$Combiner: void <init>(boolean,java.lang.Iterable,com.google.common.util.concurrent.ClosingFuture$1)>(1, r0, null);

        return $r1;
    }

    public static com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction withoutCloser(com.google.common.util.concurrent.AsyncFunction)
    {
        com.google.common.util.concurrent.AsyncFunction r0;
        com.google.common.util.concurrent.ClosingFuture$6 $r1;

        r0 := @parameter0: com.google.common.util.concurrent.AsyncFunction;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.util.concurrent.ClosingFuture$6;

        specialinvoke $r1.<com.google.common.util.concurrent.ClosingFuture$6: void <init>(com.google.common.util.concurrent.AsyncFunction)>(r0);

        return $r1;
    }

    public boolean cancel(boolean)
    {
        com.google.common.util.concurrent.ClosingFuture r0;
        java.util.logging.Logger r2;
        boolean $z0;
        java.util.logging.Level $r1;
        com.google.common.util.concurrent.FluentFuture r3;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $z0 := @parameter0: boolean;

        r2 = <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r1, "cancelling {0}", r0);

        r3 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $z0 = virtualinvoke r3.<com.google.common.util.concurrent.FluentFuture: boolean cancel(boolean)>($z0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: void close()>();

     label1:
        return $z0;
    }

    public com.google.common.util.concurrent.ClosingFuture catching(java.lang.Class, com.google.common.util.concurrent.ClosingFuture$ClosingFunction, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r3;
        java.lang.Class r1;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ClosingFuture$ClosingFunction r2;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$ClosingFunction;

        $r3 := @parameter2: java.util.concurrent.Executor;

        r0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)>(r1, r2, $r3);

        return r0;
    }

    public com.google.common.util.concurrent.ClosingFuture catchingAsync(java.lang.Class, com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r3;
        com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction r2;
        java.lang.Class r1;
        com.google.common.util.concurrent.ClosingFuture r0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction;

        $r3 := @parameter2: java.util.concurrent.Executor;

        r0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)>(r1, r2, $r3);

        return r0;
    }

    protected void finalize()
    {
        com.google.common.util.concurrent.ClosingFuture$State $r3, $r4;
        java.util.logging.Logger $r5;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.util.logging.Level $r6;
        java.lang.Object $r2;
        com.google.common.util.concurrent.ClosingFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 = r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (com.google.common.util.concurrent.ClosingFuture$State) $r2;

        $r4 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State OPEN>;

        $z0 = virtualinvoke $r3.<com.google.common.util.concurrent.ClosingFuture$State: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r6, "Uh oh! An open ClosingFuture has leaked and will close: {0}", r0);

        virtualinvoke r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture finishToFuture()>();

     label1:
        return;
    }

    public com.google.common.util.concurrent.FluentFuture finishToFuture()
    {
        java.lang.IllegalStateException $r12;
        java.util.concurrent.Executor $r7;
        com.google.common.util.concurrent.ClosingFuture$State $r1, $r2;
        java.lang.AssertionError $r11;
        java.util.logging.Logger $r3;
        java.util.concurrent.atomic.AtomicReference $r9;
        java.util.logging.Level $r4;
        int[] $r8;
        int $i0;
        java.lang.Object $r10;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ClosingFuture$9 $r6;
        boolean $z0;
        com.google.common.util.concurrent.FluentFuture $r5;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State OPEN>;

        $r2 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State WILL_CLOSE>;

        $z0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = <com.google.common.util.concurrent.ClosingFuture: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r4, "will close {0}", r0);

        $r5 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r6 = new com.google.common.util.concurrent.ClosingFuture$9;

        specialinvoke $r6.<com.google.common.util.concurrent.ClosingFuture$9: void <init>(com.google.common.util.concurrent.ClosingFuture)>(r0);

        $r7 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r5.<com.google.common.util.concurrent.FluentFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r6, $r7);

        goto label7;

     label1:
        $r8 = <com.google.common.util.concurrent.ClosingFuture$12: int[] $SwitchMap$com$google$common$util$concurrent$ClosingFuture$State>;

        $r9 = r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r1 = (com.google.common.util.concurrent.ClosingFuture$State) $r10;

        $i0 = virtualinvoke $r1.<com.google.common.util.concurrent.ClosingFuture$State: int ordinal()>();

        $i0 = $r8[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label3;
            default: goto label2;
        };

     label2:
        goto label7;

     label3:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label4:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call finishToFuture() twice");

        throw $r12;

     label5:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call finishToFuture() after calling finishToValueAndCloser()");

        throw $r12;

     label6:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call finishToFuture() after deriving another step");

        throw $r12;

     label7:
        $r5 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        return $r5;
    }

    public void finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer, java.util.concurrent.Executor)
    {
        java.lang.IllegalStateException $r9;
        com.google.common.util.concurrent.ClosingFuture$10 $r11;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ClosingFuture$State $r3, $r4;
        java.lang.AssertionError $r8;
        java.util.concurrent.atomic.AtomicReference $r6;
        int[] $r5;
        int $i0;
        java.lang.Object $r7;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer r1;
        boolean $z0;
        com.google.common.util.concurrent.FluentFuture $r10;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State OPEN>;

        $r4 = <com.google.common.util.concurrent.ClosingFuture$State: com.google.common.util.concurrent.ClosingFuture$State WILL_CREATE_VALUE_AND_CLOSER>;

        $z0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: boolean compareAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)>($r3, $r4);

        if $z0 != 0 goto label5;

        $r5 = <com.google.common.util.concurrent.ClosingFuture$12: int[] $SwitchMap$com$google$common$util$concurrent$ClosingFuture$State>;

        $r6 = r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (com.google.common.util.concurrent.ClosingFuture$State) $r7;

        $i0 = virtualinvoke $r3.<com.google.common.util.concurrent.ClosingFuture$State: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r8 = new java.lang.AssertionError;

        $r6 = r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state>;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r8;

     label2:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call finishToValueAndCloser() after calling finishToFuture()");

        throw $r9;

     label3:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call finishToValueAndCloser() twice");

        throw $r9;

     label4:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call finishToValueAndCloser() after deriving another step");

        throw $r9;

     label5:
        $r10 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r11 = new com.google.common.util.concurrent.ClosingFuture$10;

        specialinvoke $r11.<com.google.common.util.concurrent.ClosingFuture$10: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer)>(r0, r1);

        virtualinvoke $r10.<com.google.common.util.concurrent.FluentFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r11, $r2);

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture statusFuture()
    {
        com.google.common.base.Function $r2;
        com.google.common.util.concurrent.ListenableFuture $r4;
        java.util.concurrent.Executor $r3;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.FluentFuture $r1;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r2 = staticinvoke <com.google.common.base.Functions: com.google.common.base.Function constant(java.lang.Object)>(null);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        $r1 = virtualinvoke $r1.<com.google.common.util.concurrent.FluentFuture: com.google.common.util.concurrent.FluentFuture transform(com.google.common.base.Function,java.util.concurrent.Executor)>($r2, $r3);

        $r4 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r1);

        return $r4;
    }

    public java.lang.String toString()
    {
        com.google.common.base.MoreObjects$ToStringHelper $r1;
        java.lang.Object $r3;
        java.lang.String $r5;
        com.google.common.util.concurrent.ClosingFuture r0;
        java.util.concurrent.atomic.AtomicReference $r2;
        com.google.common.util.concurrent.FluentFuture $r4;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r1 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)>(r0);

        $r2 = r0.<com.google.common.util.concurrent.ClosingFuture: java.util.concurrent.atomic.AtomicReference state>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("state", $r3);

        $r4 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper addValue(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: java.lang.String toString()>();

        return $r5;
    }

    public com.google.common.util.concurrent.ClosingFuture transform(com.google.common.util.concurrent.ClosingFuture$ClosingFunction, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ClosingFuture$4 r3;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.ClosingFuture$ClosingFunction r1;
        com.google.common.util.concurrent.FluentFuture $r4;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$ClosingFunction;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r3 = new com.google.common.util.concurrent.ClosingFuture$4;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$4: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$ClosingFunction)>(r0, r1);

        $r4 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r4 = virtualinvoke $r4.<com.google.common.util.concurrent.FluentFuture: com.google.common.util.concurrent.FluentFuture transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>(r3, $r2);

        r0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture derive(com.google.common.util.concurrent.FluentFuture)>($r4);

        return r0;
    }

    public com.google.common.util.concurrent.ClosingFuture transformAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction r1;
        com.google.common.util.concurrent.ClosingFuture$5 r3;
        com.google.common.util.concurrent.ClosingFuture r0;
        com.google.common.util.concurrent.FluentFuture $r4;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r3 = new com.google.common.util.concurrent.ClosingFuture$5;

        specialinvoke r3.<com.google.common.util.concurrent.ClosingFuture$5: void <init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction)>(r0, r1);

        $r4 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.FluentFuture future>;

        $r4 = virtualinvoke $r4.<com.google.common.util.concurrent.FluentFuture: com.google.common.util.concurrent.FluentFuture transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>(r3, $r2);

        r0 = specialinvoke r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture derive(com.google.common.util.concurrent.FluentFuture)>($r4);

        return r0;
    }

    java.util.concurrent.CountDownLatch whenClosedCountDown()
    {
        java.util.concurrent.CountDownLatch $r1;
        com.google.common.util.concurrent.ClosingFuture$CloseableList $r2;
        com.google.common.util.concurrent.ClosingFuture r0;

        r0 := @this: com.google.common.util.concurrent.ClosingFuture;

        $r2 = r0.<com.google.common.util.concurrent.ClosingFuture: com.google.common.util.concurrent.ClosingFuture$CloseableList closeables>;

        $r1 = virtualinvoke $r2.<com.google.common.util.concurrent.ClosingFuture$CloseableList: java.util.concurrent.CountDownLatch whenClosedCountDown()>();

        return $r1;
    }
}
