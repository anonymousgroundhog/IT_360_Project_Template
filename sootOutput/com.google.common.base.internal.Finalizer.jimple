public class com.google.common.base.internal.Finalizer extends java.lang.Object implements java.lang.Runnable
{
    private static final java.lang.String FINALIZABLE_REFERENCE;
    private static final java.lang.reflect.Constructor bigThreadConstructor;
    private static final java.lang.reflect.Field inheritableThreadLocals;
    private static final java.util.logging.Logger logger;
    private final java.lang.ref.WeakReference finalizableReferenceClassReference;
    private final java.lang.ref.PhantomReference frqReference;
    private final java.lang.ref.ReferenceQueue queue;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        java.lang.reflect.Field $r4;
        java.lang.reflect.Constructor $r3;

        <com.google.common.base.internal.Finalizer: java.lang.String FINALIZABLE_REFERENCE> = "com.google.common.base.FinalizableReference";

        $r0 = class "Lcom/google/common/base/internal/Finalizer;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.base.internal.Finalizer: java.util.logging.Logger logger> = $r2;

        $r3 = staticinvoke <com.google.common.base.internal.Finalizer: java.lang.reflect.Constructor getBigThreadConstructor()>();

        <com.google.common.base.internal.Finalizer: java.lang.reflect.Constructor bigThreadConstructor> = $r3;

        $r3 = <com.google.common.base.internal.Finalizer: java.lang.reflect.Constructor bigThreadConstructor>;

        if $r3 != null goto label1;

        $r4 = staticinvoke <com.google.common.base.internal.Finalizer: java.lang.reflect.Field getInheritableThreadLocalsField()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        <com.google.common.base.internal.Finalizer: java.lang.reflect.Field inheritableThreadLocals> = $r4;

        return;
    }

    private void <init>(java.lang.Class, java.lang.ref.ReferenceQueue, java.lang.ref.PhantomReference)
    {
        java.lang.ref.PhantomReference r3;
        com.google.common.base.internal.Finalizer r0;
        java.lang.Class r1;
        java.lang.ref.WeakReference $r4;
        java.lang.ref.ReferenceQueue r2;

        r0 := @this: com.google.common.base.internal.Finalizer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.ref.ReferenceQueue;

        r3 := @parameter2: java.lang.ref.PhantomReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue> = r2;

        $r4 = new java.lang.ref.WeakReference;

        specialinvoke $r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        r0.<com.google.common.base.internal.Finalizer: java.lang.ref.WeakReference finalizableReferenceClassReference> = $r4;

        r0.<com.google.common.base.internal.Finalizer: java.lang.ref.PhantomReference frqReference> = r3;

        return;
    }

    private boolean cleanUp(java.lang.ref.Reference)
    {
        java.lang.ref.PhantomReference r5;
        java.lang.Throwable r7;
        java.lang.Object[] r6;
        java.util.logging.Logger $r1;
        java.lang.ref.ReferenceQueue r8;
        java.util.logging.Level $r2;
        java.lang.ref.Reference r3, $r9;
        com.google.common.base.internal.Finalizer r0;
        java.lang.reflect.Method $r4;

        r0 := @this: com.google.common.base.internal.Finalizer;

        r3 := @parameter0: java.lang.ref.Reference;

        $r4 = specialinvoke r0.<com.google.common.base.internal.Finalizer: java.lang.reflect.Method getFinalizeReferentMethod()>();

        if $r4 != null goto label1;

        return 0;

     label1:
        virtualinvoke r3.<java.lang.ref.Reference: void clear()>();

        r5 = r0.<com.google.common.base.internal.Finalizer: java.lang.ref.PhantomReference frqReference>;

        if r3 != r5 goto label2;

        return 0;

     label2:
        r6 = newarray (java.lang.Object)[0];

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, r6);

     label3:
        goto label5;

     label4:
        r7 := @caughtexception;

        $r1 = <com.google.common.base.internal.Finalizer: java.util.logging.Logger logger>;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, "Error cleaning up after reference.", r7);

     label5:
        r8 = r0.<com.google.common.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue>;

        $r9 = virtualinvoke r8.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        r3 = $r9;

        if $r9 != null goto label1;

        return 1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static java.lang.reflect.Constructor getBigThreadConstructor()
    {
        java.lang.Throwable r4;
        java.lang.Class[] $r2;
        java.lang.Class r1, $r3;
        java.lang.reflect.Constructor $r0;

        r1 = class "Ljava/lang/Thread;";

     label1:
        $r2 = newarray (java.lang.Class)[5];

        $r2[0] = class "Ljava/lang/ThreadGroup;";

        $r2[1] = class "Ljava/lang/Runnable;";

        $r2[2] = class "Ljava/lang/String;";

        $r3 = <java.lang.Long: java.lang.Class TYPE>;

        $r2[3] = $r3;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r2[4] = $r3;

        $r0 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

     label2:
        return $r0;

     label3:
        r4 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private java.lang.reflect.Method getFinalizeReferentMethod()
    {
        java.lang.NoSuchMethodException r6;
        java.lang.Class[] $r4;
        java.lang.AssertionError $r7;
        com.google.common.base.internal.Finalizer r0;
        java.lang.Object $r2;
        java.lang.Class r3;
        java.lang.ref.WeakReference r1;
        java.lang.reflect.Method $r5;

        r0 := @this: com.google.common.base.internal.Finalizer;

        r1 = r0.<com.google.common.base.internal.Finalizer: java.lang.ref.WeakReference finalizableReferenceClassReference>;

        $r2 = virtualinvoke r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r3 = (java.lang.Class) $r2;

        if r3 != null goto label1;

        return null;

     label1:
        $r4 = newarray (java.lang.Class)[0];

     label2:
        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("finalizeReferent", $r4);

     label3:
        return $r5;

     label4:
        r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r6);

        throw $r7;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    private static java.lang.reflect.Field getInheritableThreadLocalsField()
    {
        java.lang.Throwable r3;
        java.lang.Class r2;
        java.lang.reflect.Field $r1;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r0;

        r2 = class "Ljava/lang/Thread;";

     label1:
        $r1 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("inheritableThreadLocals");

        virtualinvoke $r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        return $r1;

     label3:
        r3 := @caughtexception;

        $r4 = <com.google.common.base.internal.Finalizer: java.util.logging.Logger logger>;

        $r0 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r0, "Couldn\'t access Thread.inheritableThreadLocals. Reference finalizer threads will inherit thread local values.");

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void startFinalizer(java.lang.Class, java.lang.ref.ReferenceQueue, java.lang.ref.PhantomReference)
    {
        java.lang.Throwable r13, r16;
        java.lang.Object[] $r8;
        java.lang.reflect.Constructor r7;
        java.lang.ref.ReferenceQueue r1;
        java.util.logging.Level $r3;
        java.lang.Long $r9;
        java.lang.Thread r6, $r12;
        com.google.common.base.internal.Finalizer r5;
        java.lang.Boolean $r10;
        java.lang.String $r4;
        boolean $z0;
        java.lang.ref.PhantomReference r2;
        java.util.logging.Logger r14;
        java.lang.reflect.Field r15;
        java.lang.IllegalArgumentException r17;
        java.lang.Class r0;
        java.lang.Object $r11;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.ref.ReferenceQueue;

        r2 := @parameter2: java.lang.ref.PhantomReference;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("com.google.common.base.FinalizableReference");

        if $z0 == 0 goto label12;

        r5 = new com.google.common.base.internal.Finalizer;

        specialinvoke r5.<com.google.common.base.internal.Finalizer: void <init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)>(r0, r1, r2);

        r0 = class "Lcom/google/common/base/internal/Finalizer;";

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r6 = null;

        r7 = <com.google.common.base.internal.Finalizer: java.lang.reflect.Constructor bigThreadConstructor>;

        if r7 == null goto label04;

     label01:
        r7 = <com.google.common.base.internal.Finalizer: java.lang.reflect.Constructor bigThreadConstructor>;

        $r8 = newarray (java.lang.Object)[5];

        $r8[0] = null;

        $r8[1] = r5;

        $r8[2] = $r4;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r8[3] = $r9;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8[4] = $r10;

        $r11 = virtualinvoke r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        $r12 = (java.lang.Thread) $r11;

     label02:
        r6 = $r12;

        goto label04;

     label03:
        r13 := @caughtexception;

        r14 = <com.google.common.base.internal.Finalizer: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, "Failed to create a thread without inherited thread-local values", r13);

     label04:
        if r6 != null goto label05;

        r6 = new java.lang.Thread;

        specialinvoke r6.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>(null, r5, $r4);

     label05:
        virtualinvoke r6.<java.lang.Thread: void setDaemon(boolean)>(1);

     label06:
        r15 = <com.google.common.base.internal.Finalizer: java.lang.reflect.Field inheritableThreadLocals>;

     label07:
        if r15 == null goto label09;

     label08:
        r15 = <com.google.common.base.internal.Finalizer: java.lang.reflect.Field inheritableThreadLocals>;

        virtualinvoke r15.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r6, null);

     label09:
        goto label11;

     label10:
        r16 := @caughtexception;

        r14 = <com.google.common.base.internal.Finalizer: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, "Failed to clear thread local values inherited by reference finalizer thread.", r16);

     label11:
        virtualinvoke r6.<java.lang.Thread: void start()>();

        return;

     label12:
        r17 = new java.lang.IllegalArgumentException;

        specialinvoke r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected com.google.common.base.FinalizableReference.");

        throw r17;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void run()
    {
        java.lang.ref.Reference $r2;
        java.lang.InterruptedException $r3;
        com.google.common.base.internal.Finalizer r0;
        java.lang.ref.ReferenceQueue $r1;
        boolean $z0;

        r0 := @this: com.google.common.base.internal.Finalizer;

     label1:
        $r1 = r0.<com.google.common.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue>;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>();

        $z0 = specialinvoke r0.<com.google.common.base.internal.Finalizer: boolean cleanUp(java.lang.ref.Reference)>($r2);

     label3:
        if $z0 != 0 goto label1;

        return;

     label4:
        $r3 := @caughtexception;

        goto label1;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }
}
