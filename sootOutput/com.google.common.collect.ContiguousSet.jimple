public abstract class com.google.common.collect.ContiguousSet extends com.google.common.collect.ImmutableSortedSet
{
    final com.google.common.collect.DiscreteDomain domain;

    void <init>(com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.ContiguousSet r0;
        com.google.common.collect.Ordering $r2;
        com.google.common.collect.DiscreteDomain r1;

        r0 := @this: com.google.common.collect.ContiguousSet;

        r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        $r2 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke r0.<com.google.common.collect.ImmutableSortedSet: void <init>(java.util.Comparator)>($r2);

        r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.DiscreteDomain domain> = r1;

        return;
    }

    public static com.google.common.collect.ImmutableSortedSet$Builder builder()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public static com.google.common.collect.ContiguousSet closed(int, int)
    {
        com.google.common.collect.ContiguousSet $r4;
        com.google.common.collect.DiscreteDomain $r3;
        int $i0, $i1;
        com.google.common.collect.Range $r2;
        java.lang.Integer $r0, $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        $r3 = staticinvoke <com.google.common.collect.DiscreteDomain: com.google.common.collect.DiscreteDomain integers()>();

        $r4 = staticinvoke <com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.collect.ContiguousSet closed(long, long)
    {
        com.google.common.collect.ContiguousSet $r4;
        java.lang.Long $r0, $r1;
        com.google.common.collect.DiscreteDomain $r3;
        com.google.common.collect.Range $r2;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        $r3 = staticinvoke <com.google.common.collect.DiscreteDomain: com.google.common.collect.DiscreteDomain longs()>();

        $r4 = staticinvoke <com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.collect.ContiguousSet closedOpen(int, int)
    {
        com.google.common.collect.ContiguousSet $r4;
        com.google.common.collect.DiscreteDomain $r3;
        int $i0, $i1;
        com.google.common.collect.Range $r2;
        java.lang.Integer $r0, $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range closedOpen(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        $r3 = staticinvoke <com.google.common.collect.DiscreteDomain: com.google.common.collect.DiscreteDomain integers()>();

        $r4 = staticinvoke <com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.collect.ContiguousSet closedOpen(long, long)
    {
        com.google.common.collect.ContiguousSet $r4;
        java.lang.Long $r0, $r1;
        com.google.common.collect.DiscreteDomain $r3;
        com.google.common.collect.Range $r2;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r2 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range closedOpen(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        $r3 = staticinvoke <com.google.common.collect.DiscreteDomain: com.google.common.collect.DiscreteDomain longs()>();

        $r4 = staticinvoke <com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.collect.ContiguousSet create(com.google.common.collect.Range, com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut r5;
        com.google.common.collect.RegularContiguousSet r9;
        com.google.common.collect.Range r0, r2, $r4;
        java.lang.IllegalArgumentException r11;
        com.google.common.collect.DiscreteDomain r1;
        int $i0;
        java.lang.Comparable $r3, $r7;
        java.lang.Object $r6;
        com.google.common.collect.EmptyContiguousSet r8;
        java.util.NoSuchElementException r10;
        boolean $z0;

        r0 := @parameter0: com.google.common.collect.Range;

        r1 := @parameter1: com.google.common.collect.DiscreteDomain;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = r0;

     label01:
        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean hasLowerBound()>();

     label02:
        if $z0 != 0 goto label04;

     label03:
        $r3 = virtualinvoke r1.<com.google.common.collect.DiscreteDomain: java.lang.Comparable minValue()>();

        r2 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range atLeast(java.lang.Comparable)>($r3);

        r2 = virtualinvoke r0.<com.google.common.collect.Range: com.google.common.collect.Range intersection(com.google.common.collect.Range)>(r2);

     label04:
        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean hasUpperBound()>();

     label05:
        if $z0 != 0 goto label07;

     label06:
        $r3 = virtualinvoke r1.<com.google.common.collect.DiscreteDomain: java.lang.Comparable maxValue()>();

        $r4 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range atMost(java.lang.Comparable)>($r3);

        r2 = virtualinvoke r2.<com.google.common.collect.Range: com.google.common.collect.Range intersection(com.google.common.collect.Range)>($r4);

     label07:
        $z0 = virtualinvoke r2.<com.google.common.collect.Range: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        $z0 = 1;

        goto label10;

     label08:
        r5 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r3 = virtualinvoke r5.<com.google.common.collect.Cut: java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain)>(r1);

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r3 = (java.lang.Comparable) $r6;

        r5 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r7 = virtualinvoke r5.<com.google.common.collect.Cut: java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain)>(r1);

        $r6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        $r7 = (java.lang.Comparable) $r6;

        $i0 = staticinvoke <com.google.common.collect.Range: int compareOrThrow(java.lang.Comparable,java.lang.Comparable)>($r3, $r7);

        if $i0 <= 0 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        if $z0 == 0 goto label11;

        r8 = new com.google.common.collect.EmptyContiguousSet;

        specialinvoke r8.<com.google.common.collect.EmptyContiguousSet: void <init>(com.google.common.collect.DiscreteDomain)>(r1);

        return r8;

     label11:
        r9 = new com.google.common.collect.RegularContiguousSet;

        specialinvoke r9.<com.google.common.collect.RegularContiguousSet: void <init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)>(r2, r1);

        return r9;

     label12:
        r10 := @caughtexception;

        r11 = new java.lang.IllegalArgumentException;

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r10);

        throw r11;

        catch java.util.NoSuchElementException from label01 to label02 with label12;
        catch java.util.NoSuchElementException from label03 to label04 with label12;
        catch java.util.NoSuchElementException from label04 to label05 with label12;
        catch java.util.NoSuchElementException from label06 to label07 with label12;
    }

    com.google.common.collect.ImmutableSortedSet createDescendingSet()
    {
        com.google.common.collect.DescendingImmutableSortedSet $r1;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 = new com.google.common.collect.DescendingImmutableSortedSet;

        specialinvoke $r1.<com.google.common.collect.DescendingImmutableSortedSet: void <init>(com.google.common.collect.ImmutableSortedSet)>(r0);

        return $r1;
    }

    public com.google.common.collect.ContiguousSet headSet(java.lang.Comparable)
    {
        java.lang.Comparable r1;
        java.lang.Object $r2;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean)>(r1, 0);

        return r0;
    }

    public com.google.common.collect.ContiguousSet headSet(java.lang.Comparable, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Comparable r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        $z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean)>(r1, $z0);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet headSet(java.lang.Comparable)>($r2);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet headSet(java.lang.Comparable,boolean)>($r2, $z0);

        return r0;
    }

    public volatile java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet headSet(java.lang.Comparable,boolean)>($r2, $z0);

        return r0;
    }

    public volatile java.util.SortedSet headSet(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet headSet(java.lang.Comparable)>($r2);

        return r0;
    }

    abstract com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable, boolean);

    volatile com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean)>($r2, $z0);

        return r0;
    }

    public abstract com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet);

    public abstract com.google.common.collect.Range range();

    public abstract com.google.common.collect.Range range(com.google.common.collect.BoundType, com.google.common.collect.BoundType);

    public com.google.common.collect.ContiguousSet subSet(java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.ContiguousSet r0;
        int $i0;
        java.lang.Comparable r1, r2;
        java.util.Comparator $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r3 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: java.util.Comparator comparator()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>(r1, 1, r2, 0);

        return r0;
    }

    public com.google.common.collect.ContiguousSet subSet(java.lang.Comparable, boolean, java.lang.Comparable, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        int $i0;
        java.lang.Comparable r1, r2;
        java.util.Comparator $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.common.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        $z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Comparable;

        $z1 := @parameter3: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r3 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: java.util.Comparator comparator()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i0 > 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2);

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>(r1, $z0, r2, $z1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1, $r2;
        java.lang.Comparable $r3, $r4;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Comparable) $r1;

        $r4 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,java.lang.Comparable)>($r3, $r4);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1, $r2;
        java.lang.Comparable $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        $r3 = (java.lang.Comparable) $r1;

        $r4 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>($r3, $z0, $r4, $z1);

        return r0;
    }

    public volatile java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1, $r2;
        java.lang.Comparable $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        $r3 = (java.lang.Comparable) $r1;

        $r4 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>($r3, $z0, $r4, $z1);

        return r0;
    }

    public volatile java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1, $r2;
        java.lang.Comparable $r3, $r4;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Comparable) $r1;

        $r4 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,java.lang.Comparable)>($r3, $r4);

        return r0;
    }

    abstract com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable, boolean, java.lang.Comparable, boolean);

    volatile com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1, $r2;
        java.lang.Comparable $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        $r3 = (java.lang.Comparable) $r1;

        $r4 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)>($r3, $z0, $r4, $z1);

        return r0;
    }

    public com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable)
    {
        java.lang.Comparable r1;
        java.lang.Object $r2;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean)>(r1, 1);

        return r0;
    }

    public com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Comparable r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        r1 := @parameter0: java.lang.Comparable;

        $z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.lang.Comparable) $r2;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean)>(r1, $z0);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable)>($r2);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable,boolean)>($r2, $z0);

        return r0;
    }

    public volatile java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable,boolean)>($r2, $z0);

        return r0;
    }

    public volatile java.util.SortedSet tailSet(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable)>($r2);

        return r0;
    }

    abstract com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable, boolean);

    volatile com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object, boolean)
    {
        com.google.common.collect.ContiguousSet r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 = (java.lang.Comparable) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean)>($r2, $z0);

        return r0;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.Range $r1;
        java.lang.String $r2;
        com.google.common.collect.ContiguousSet r0;

        r0 := @this: com.google.common.collect.ContiguousSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ContiguousSet: com.google.common.collect.Range range()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.Range: java.lang.String toString()>();

        return $r2;
    }
}
