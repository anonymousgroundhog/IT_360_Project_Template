public class kotlinx.coroutines.internal.LockFreeLinkedListHead extends kotlinx.coroutines.internal.LockFreeLinkedListNode
{

    public void <init>()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void <init>()>();

        return;
    }

    public final void forEach(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: java.lang.Object getNext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }");

        r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r2;

     label1:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, r0);

        if $z0 != 0 goto label3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "T");

        $z0 = r3 instanceof kotlinx.coroutines.internal.LockFreeLinkedListNode;

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

     label2:
        r3 = virtualinvoke r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>();

        goto label1;

     label3:
        return;
    }

    public final boolean isEmpty()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: java.lang.Object getNext()>();

        if $r1 != r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isRemoved()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        return 0;
    }

    protected kotlinx.coroutines.internal.LockFreeLinkedListNode nextIfRemoved()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        return null;
    }

    public final java.lang.Void remove()
    {
        java.lang.IllegalStateException $r1;
        java.lang.String $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        $r1 = new java.lang.IllegalStateException;

        $r2 = "head cannot be removed";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public volatile boolean remove()
    {
        java.lang.Void $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;
        java.lang.Boolean $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: java.lang.Void remove()>();

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public final void validate$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListHead r0;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r1, r3, $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListHead;

        r1 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) r0;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: java.lang.Object getNext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }");

        r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r2;

     label1:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, r0);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()>();

        virtualinvoke r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void validateNode$kotlinx_coroutines_core(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>(r1, $r4);

        r1 = r3;

        r3 = $r4;

        goto label1;

     label2:
        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: java.lang.Object getNext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }");

        r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r2;

        virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListHead: void validateNode$kotlinx_coroutines_core(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>(r1, r3);

        return;
    }
}
