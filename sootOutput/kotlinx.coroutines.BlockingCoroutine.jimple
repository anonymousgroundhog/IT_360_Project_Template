final class kotlinx.coroutines.BlockingCoroutine extends kotlinx.coroutines.AbstractCoroutine
{
    private final java.lang.Thread blockedThread;
    private final kotlinx.coroutines.EventLoop eventLoop;

    public void <init>(kotlin.coroutines.CoroutineContext, java.lang.Thread, kotlinx.coroutines.EventLoop)
    {
        java.lang.Thread $r2;
        kotlinx.coroutines.BlockingCoroutine r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.EventLoop $r3;

        r0 := @this: kotlinx.coroutines.BlockingCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Thread;

        $r3 := @parameter2: kotlinx.coroutines.EventLoop;

        specialinvoke r0.<kotlinx.coroutines.AbstractCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean,boolean)>($r1, 1, 1);

        r0.<kotlinx.coroutines.BlockingCoroutine: java.lang.Thread blockedThread> = $r2;

        r0.<kotlinx.coroutines.BlockingCoroutine: kotlinx.coroutines.EventLoop eventLoop> = $r3;

        return;
    }

    protected void afterCompletion(java.lang.Object)
    {
        kotlin.Unit $r5;
        java.lang.Thread $r2, $r3;
        kotlinx.coroutines.BlockingCoroutine r0;
        java.lang.Object $r1;
        kotlinx.coroutines.AbstractTimeSource $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.BlockingCoroutine;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = r0.<kotlinx.coroutines.BlockingCoroutine: java.lang.Thread blockedThread>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label3;

        $r2 = r0.<kotlinx.coroutines.BlockingCoroutine: java.lang.Thread blockedThread>;

        $r4 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r4 == null goto label1;

        virtualinvoke $r4.<kotlinx.coroutines.AbstractTimeSource: void unpark(java.lang.Thread)>($r2);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label2;

     label1:
        $r5 = null;

     label2:
        if $r5 != null goto label3;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r2);

     label3:
        return;
    }

    protected boolean isScopedCoroutine()
    {
        kotlinx.coroutines.BlockingCoroutine r0;

        r0 := @this: kotlinx.coroutines.BlockingCoroutine;

        return 1;
    }

    public final java.lang.Object joinBlocking()
    {
        java.lang.Throwable $r6, r8;
        kotlinx.coroutines.CompletedExceptionally $r3;
        kotlinx.coroutines.BlockingCoroutine r0;
        long $l0;
        kotlin.Unit r4;
        java.lang.InterruptedException r7;
        java.lang.Object $r5;
        kotlinx.coroutines.AbstractTimeSource $r1;
        kotlinx.coroutines.EventLoop r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.BlockingCoroutine;

        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r1 == null goto label01;

        virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: void registerTimeLoopThread()>();

     label01:
        r2 = r0.<kotlinx.coroutines.BlockingCoroutine: kotlinx.coroutines.EventLoop eventLoop>;

     label02:
        $r3 = null;

        if r2 == null goto label04;

     label03:
        staticinvoke <kotlinx.coroutines.EventLoop: void incrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object)>(r2, 0, 1, null);

     label04:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

     label05:
        if $z0 != 0 goto label28;

     label06:
        r2 = r0.<kotlinx.coroutines.BlockingCoroutine: kotlinx.coroutines.EventLoop eventLoop>;

     label07:
        if r2 == null goto label10;

     label08:
        $l0 = virtualinvoke r2.<kotlinx.coroutines.EventLoop: long processNextEvent()>();

     label09:
        goto label11;

     label10:
        $l0 = 9223372036854775807L;

     label11:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.BlockingCoroutine: boolean isCompleted()>();

     label12:
        if $z0 != 0 goto label21;

     label13:
        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

     label14:
        if $r1 == null goto label17;

     label15:
        virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: void parkNanos(java.lang.Object,long)>(r0, $l0);

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label16:
        goto label18;

     label17:
        r4 = null;

     label18:
        if r4 != null goto label04;

     label19:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, $l0);

     label20:
        goto label04;

     label21:
        r2 = r0.<kotlinx.coroutines.BlockingCoroutine: kotlinx.coroutines.EventLoop eventLoop>;

     label22:
        if r2 == null goto label24;

     label23:
        staticinvoke <kotlinx.coroutines.EventLoop: void decrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object)>(r2, 0, 1, null);

     label24:
        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r1 == null goto label25;

        virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label25:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.BlockingCoroutine: java.lang.Object getState$kotlinx_coroutines_core()>();

        $r5 = staticinvoke <kotlinx.coroutines.JobSupportKt: java.lang.Object unboxState(java.lang.Object)>($r5);

        $z0 = $r5 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label26;

        $r3 = (kotlinx.coroutines.CompletedExceptionally) $r5;

     label26:
        if $r3 != null goto label27;

        return $r5;

     label27:
        $r6 = $r3.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        throw $r6;

     label28:
        r7 = new java.lang.InterruptedException;

        specialinvoke r7.<java.lang.InterruptedException: void <init>()>();

        $r6 = (java.lang.Throwable) r7;

        virtualinvoke r0.<kotlinx.coroutines.BlockingCoroutine: boolean cancelCoroutine(java.lang.Throwable)>($r6);

        $r6 = (java.lang.Throwable) r7;

        throw $r6;

     label29:
        $r6 := @caughtexception;

     label30:
        r2 = r0.<kotlinx.coroutines.BlockingCoroutine: kotlinx.coroutines.EventLoop eventLoop>;

     label31:
        if r2 == null goto label33;

     label32:
        staticinvoke <kotlinx.coroutines.EventLoop: void decrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object)>(r2, 0, 1, null);

     label33:
        throw $r6;

     label34:
        r8 := @caughtexception;

        $r1 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r1 == null goto label35;

        virtualinvoke $r1.<kotlinx.coroutines.AbstractTimeSource: void unregisterTimeLoopThread()>();

     label35:
        throw r8;

        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label03 to label04 with label34;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label08 to label09 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label21 to label22 with label34;
        catch java.lang.Throwable from label23 to label24 with label34;
        catch java.lang.Throwable from label28 to label29 with label29;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label32 to label34 with label34;
    }
}
