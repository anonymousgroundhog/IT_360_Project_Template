final class com.google.common.io.BaseEncoding$Base16Encoding extends com.google.common.io.BaseEncoding$StandardBaseEncoding
{
    final char[] encoding;

    private void <init>(com.google.common.io.BaseEncoding$Alphabet)
    {
        com.google.common.io.BaseEncoding$Base16Encoding r0;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        char $c2;
        int i0, $i1, $i3;
        char[] r2;
        boolean z0;

        r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        specialinvoke r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r1, null);

        r2 = newarray (char)[512];

        r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding> = r2;

        r2 = staticinvoke <com.google.common.io.BaseEncoding$Alphabet: char[] access$000(com.google.common.io.BaseEncoding$Alphabet)>($r1);

        i0 = lengthof r2;

        if i0 != 16 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        i0 = 0;

     label3:
        if i0 >= 256 goto label4;

        r2 = r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        $i1 = i0 >>> 4;

        $c2 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i1);

        r2[i0] = $c2;

        r2 = r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        $i1 = i0 | 256;

        $i3 = i0 & 15;

        $c2 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i3);

        r2[$i1] = $c2;

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        com.google.common.io.BaseEncoding$Base16Encoding r0;
        com.google.common.io.BaseEncoding$Alphabet $r3;
        char[] $r4;
        java.lang.String $r1, $r2;

        r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new com.google.common.io.BaseEncoding$Alphabet;

        $r4 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r1, $r4);

        specialinvoke r0.<com.google.common.io.BaseEncoding$Base16Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet)>($r3);

        return;
    }

    int decodeTo(byte[], java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException
    {
        byte[] $r1;
        com.google.common.io.BaseEncoding$Base16Encoding r0;
        java.lang.CharSequence $r2;
        com.google.common.io.BaseEncoding$Alphabet r3;
        com.google.common.io.BaseEncoding$DecodingException r4;
        char $c3;
        byte $b5;
        int $i0, i1, $i2, $i4;
        java.lang.StringBuilder r5;
        java.lang.String $r6;

        r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i0 = $i0 % 2;

        if $i0 == 1 goto label3;

        $i0 = 0;

        i1 = 0;

     label1:
        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if i1 >= $i2 goto label2;

        r3 = r0.<com.google.common.io.BaseEncoding$Base16Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>(i1);

        $i2 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        $i2 = $i2 << 4;

        r3 = r0.<com.google.common.io.BaseEncoding$Base16Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i4 = i1 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i4);

        $i4 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        $i2 = $i2 | $i4;

        $b5 = (byte) $i2;

        $r1[$i0] = $b5;

        i1 = i1 + 2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i0;

     label3:
        r4 = new com.google.common.io.BaseEncoding$DecodingException;

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>(int)>(32);

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid input length ");

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r6);

        throw r4;
    }

    void encodeTo(java.lang.Appendable, byte[], int, int) throws java.io.IOException
    {
        byte[] $r2;
        com.google.common.io.BaseEncoding$Base16Encoding r0;
        java.lang.Appendable $r1;
        char $c6;
        short $s2;
        byte b5;
        int $i0, $i1, i3, i4;
        char[] $r3;

        r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        i3 = $i0 + $i1;

        i4 = lengthof $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, i3, i4);

        i3 = 0;

     label1:
        if i3 >= $i1 goto label2;

        i4 = $i0 + i3;

        b5 = $r2[i4];

        $s2 = (short) b5;

        $s2 = $s2 & 255;

        $r3 = r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        i4 = (int) $s2;

        $c6 = $r3[i4];

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c6);

        $r3 = r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        $s2 = $s2 | 256;

        i4 = (int) $s2;

        $c6 = $r3[i4];

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c6);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base16Encoding r0;
        java.lang.Character $r2;
        com.google.common.io.BaseEncoding$Alphabet $r1;

        r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r2 := @parameter1: java.lang.Character;

        r0 = new com.google.common.io.BaseEncoding$Base16Encoding;

        specialinvoke r0.<com.google.common.io.BaseEncoding$Base16Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet)>($r1);

        return r0;
    }
}
