final class com.google.common.math.MathPreconditions extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.math.MathPreconditions r0;

        r0 := @this: com.google.common.math.MathPreconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void checkInRangeForRoundingInputs(boolean, double, java.math.RoundingMode)
    {
        int $i0;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r4;
        java.lang.String $r2, $r3;
        boolean $z0;
        double $d0;
        java.math.RoundingMode $r0;

        $z0 := @parameter0: boolean;

        $d0 := @parameter1: double;

        $r0 := @parameter2: java.math.RoundingMode;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.ArithmeticException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + 83;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rounded value is out of range for input ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and rounding mode ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    static void checkNoOverflow(boolean, java.lang.String, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r2;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.ArithmeticException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = $i2 + 36;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("overflow: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    static void checkNoOverflow(boolean, java.lang.String, long, long)
    {
        long $l0, $l1;
        int $i2;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r2;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $l1 := @parameter3: long;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.ArithmeticException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = $i2 + 54;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("overflow: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    static double checkNonNegative(java.lang.String, double)
    {
        java.lang.IllegalArgumentException $r4;
        byte $b0;
        int $i1;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r0, $r1;
        double $d0;

        $r0 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $b0 = $d0 cmpl 0.0;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        return $d0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i1 + 40;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;
    }

    static int checkNonNegative(java.lang.String, int)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r2;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + 27;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    static long checkNonNegative(java.lang.String, long)
    {
        long $l0;
        java.lang.IllegalArgumentException $r4;
        byte $b1;
        int $i2;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        return $l0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i2 + 36;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;
    }

    static java.math.BigInteger checkNonNegative(java.lang.String, java.math.BigInteger)
    {
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        java.math.BigInteger $r1;
        java.lang.StringBuilder $r5;
        java.lang.String $r0, $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 < 0 goto label1;

        return $r1;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 16;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }

    static int checkPositive(java.lang.String, int)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r2;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 <= 0 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + 26;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    static long checkPositive(java.lang.String, long)
    {
        long $l0;
        java.lang.IllegalArgumentException $r4;
        byte $b1;
        int $i2;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        return $l0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i2 + 35;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;
    }

    static java.math.BigInteger checkPositive(java.lang.String, java.math.BigInteger)
    {
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        java.math.BigInteger $r1;
        java.lang.StringBuilder $r5;
        java.lang.String $r0, $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 <= 0 goto label1;

        return $r1;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 15;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }

    static void checkRoundingUnnecessary(boolean)
    {
        java.lang.ArithmeticException $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("mode was UNNECESSARY, but rounding was necessary");

        throw $r0;
    }
}
