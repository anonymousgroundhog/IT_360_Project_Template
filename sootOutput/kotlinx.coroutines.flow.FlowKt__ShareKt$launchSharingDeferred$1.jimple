final class kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final kotlinx.coroutines.CompletableDeferred $result;
    final kotlinx.coroutines.flow.Flow $upstream;
    private java.lang.Object L$0;
    int label;

    void <init>(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CompletableDeferred, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r1;
        kotlinx.coroutines.CompletableDeferred $r2;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 r0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: kotlinx.coroutines.CompletableDeferred;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlinx.coroutines.flow.Flow $upstream> = $r1;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlinx.coroutines.CompletableDeferred $result> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r3;
        kotlinx.coroutines.CompletableDeferred $r4;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r1;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 r0, $r5;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1;

        $r3 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r4 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlinx.coroutines.CompletableDeferred $result>;

        specialinvoke $r5.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: void <init>(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.CompletableDeferred,kotlin.coroutines.Continuation)>($r3, $r4, $r2);

        $r5.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r5;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r4;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 r0;
        kotlinx.coroutines.CoroutineScope $r3;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 r0;
        kotlinx.coroutines.CoroutineScope $r1;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.Throwable r5, r12;
        kotlinx.coroutines.CompletableDeferred $r9;
        java.lang.IllegalStateException $r4;
        kotlin.coroutines.Continuation $r11;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 r0;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1 $r8;
        kotlinx.coroutines.CoroutineScope $r6;
        kotlinx.coroutines.flow.Flow $r7;
        kotlin.Unit r13;
        kotlinx.coroutines.flow.FlowCollector $r10;
        int i0;
        java.lang.Object $r2, $r3;
        kotlin.jvm.internal.Ref$ObjectRef r1;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: int label>;

        lookupswitch(i0)
        {
            case 0: goto label05;
            case 1: goto label02;
            default: goto label01;
        };

     label01:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r4;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label03:
        goto label08;

     label04:
        r5 := @caughtexception;

        goto label10;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r2 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: java.lang.Object L$0>;

        $r6 = (kotlinx.coroutines.CoroutineScope) $r2;

     label06:
        r1 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke r1.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        $r7 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r8 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1;

        $r9 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlinx.coroutines.CompletableDeferred $result>;

        specialinvoke $r8.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1: void <init>(kotlin.jvm.internal.Ref$ObjectRef,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.CompletableDeferred)>(r1, $r6, $r9);

        $r10 = (kotlinx.coroutines.flow.FlowCollector) $r8;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: int label> = 1;

        $r2 = interfaceinvoke $r7.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r10, $r11);

     label07:
        if $r2 != $r3 goto label08;

        return $r3;

     label08:
        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r13;

     label09:
        r12 := @caughtexception;

        r5 = r12;

     label10:
        $r9 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1: kotlinx.coroutines.CompletableDeferred $result>;

        interfaceinvoke $r9.<kotlinx.coroutines.CompletableDeferred: boolean completeExceptionally(java.lang.Throwable)>(r5);

        throw r5;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label09;
    }
}
