class kotlin.io.path.PathsKt__PathRecursiveFunctionsKt extends kotlin.io.path.PathsKt__PathReadWriteKt
{

    public void <init>()
    {
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt r0;

        r0 := @this: kotlin.io.path.PathsKt__PathRecursiveFunctionsKt;

        specialinvoke r0.<kotlin.io.path.PathsKt__PathReadWriteKt: void <init>()>();

        return;
    }

    public static final java.nio.file.FileVisitResult access$copyToRecursively$copy(kotlin.jvm.functions.Function3, java.nio.file.Path, java.nio.file.Path, kotlin.jvm.functions.Function3, java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.FileVisitResult $r6;
        kotlin.jvm.functions.Function3 $r0, $r3;
        java.nio.file.attribute.BasicFileAttributes $r5;
        java.nio.file.Path $r1, $r2, $r4;

        $r0 := @parameter0: kotlin.jvm.functions.Function3;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.Path;

        $r3 := @parameter3: kotlin.jvm.functions.Function3;

        $r4 := @parameter4: java.nio.file.Path;

        $r5 := @parameter5: java.nio.file.attribute.BasicFileAttributes;

        $r6 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.nio.file.FileVisitResult copyToRecursively$copy$PathsKt__PathRecursiveFunctionsKt(kotlin.jvm.functions.Function3,java.nio.file.Path,java.nio.file.Path,kotlin.jvm.functions.Function3,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r0, $r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

    public static final java.nio.file.FileVisitResult access$copyToRecursively$error(kotlin.jvm.functions.Function3, java.nio.file.Path, java.nio.file.Path, java.nio.file.Path, java.lang.Exception)
    {
        java.nio.file.FileVisitResult $r5;
        kotlin.jvm.functions.Function3 $r0;
        java.nio.file.Path $r1, $r2, $r3;
        java.lang.Exception $r4;

        $r0 := @parameter0: kotlin.jvm.functions.Function3;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.Path;

        $r3 := @parameter3: java.nio.file.Path;

        $r4 := @parameter4: java.lang.Exception;

        $r5 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.nio.file.FileVisitResult copyToRecursively$error$PathsKt__PathRecursiveFunctionsKt(kotlin.jvm.functions.Function3,java.nio.file.Path,java.nio.file.Path,java.nio.file.Path,java.lang.Exception)>($r0, $r1, $r2, $r3, $r4);

        return $r5;
    }

    private static final void collectIfThrows$PathsKt__PathRecursiveFunctionsKt(kotlin.io.path.ExceptionsCollector, kotlin.jvm.functions.Function0)
    {
        kotlin.io.path.ExceptionsCollector $r0;
        kotlin.jvm.functions.Function0 $r1;
        java.lang.Exception r2;

        $r0 := @parameter0: kotlin.io.path.ExceptionsCollector;

        $r1 := @parameter1: kotlin.jvm.functions.Function0;

     label1:
        interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        return;

     label3:
        r2 := @caughtexception;

        virtualinvoke $r0.<kotlin.io.path.ExceptionsCollector: void collect(java.lang.Exception)>(r2);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static final java.nio.file.Path copyToRecursively(java.nio.file.Path, java.nio.file.Path, kotlin.jvm.functions.Function3, boolean, kotlin.jvm.functions.Function3)
    {
        java.nio.file.NoSuchFileException r16;
        java.lang.Object[] $r6;
        kotlin.io.path.LinkFollowing r4;
        int i0;
        java.lang.String $r12, $r13;
        java.nio.file.Path $r0, $r1, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.nio.file.LinkOption[] $r5;
        kotlin.jvm.functions.Function3 $r2, $r3;
        java.nio.file.FileSystemException $r11;
        kotlin.jvm.functions.Function1 $r15;
        java.nio.file.FileSystem $r7, $r8;
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$5 r14;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        $z0 := @parameter3: boolean;

        $r3 := @parameter4: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "onError");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "copyAction");

        r4 = <kotlin.io.path.LinkFollowing: kotlin.io.path.LinkFollowing INSTANCE>;

        $r5 = virtualinvoke r4.<kotlin.io.path.LinkFollowing: java.nio.file.LinkOption[] toLinkOptions(boolean)>($z0);

        i0 = lengthof $r5;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, i0);

        $r5 = (java.nio.file.LinkOption[]) $r6;

        i0 = lengthof $r5;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, i0);

        $r5 = (java.nio.file.LinkOption[]) $r6;

        $z1 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r5);

        if $z1 == 0 goto label10;

        $z1 = 0;

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, 0);

        $r5 = (java.nio.file.LinkOption[]) $r6;

        $z2 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r5);

        if $z2 == 0 goto label09;

        if $z0 != 0 goto label01;

        $z2 = staticinvoke <java.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)>($r0);

        if $z2 != 0 goto label09;

     label01:
        $r5 = newarray (java.nio.file.LinkOption)[0];

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, 0);

        $r5 = (java.nio.file.LinkOption[]) $r6;

        $z2 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r1, $r5);

        if $z2 == 0 goto label02;

        $z2 = staticinvoke <java.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)>($r1);

        if $z2 != 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        if $z2 == 0 goto label04;

        $z3 = staticinvoke <java.nio.file.Files: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>($r0, $r1);

        if $z3 != 0 goto label09;

     label04:
        $r7 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();

        $r8 = interfaceinvoke $r1.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z3 != 0 goto label05;

        goto label07;

     label05:
        if $z2 == 0 goto label06;

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $r9 = interfaceinvoke $r1.<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>($r5);

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $r10 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>($r5);

        $z1 = interfaceinvoke $r9.<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>($r10);

        goto label07;

     label06:
        $r9 = interfaceinvoke $r1.<java.nio.file.Path: java.nio.file.Path getParent()>();

        if $r9 == null goto label07;

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, 0);

        $r5 = (java.nio.file.LinkOption[]) $r6;

        $z2 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r9, $r5);

        if $z2 == 0 goto label07;

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $r9 = interfaceinvoke $r9.<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>($r5);

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $r10 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>($r5);

        $z2 = interfaceinvoke $r9.<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>($r10);

        if $z2 == 0 goto label07;

        $z1 = 1;

     label07:
        if $z1 != 0 goto label08;

        goto label09;

     label08:
        $r11 = new java.nio.file.FileSystemException;

        $r12 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $r13 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.nio.file.FileSystemException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r12, $r13, "Recursively copying a directory into its subdirectory is prohibited.");

        throw $r11;

     label09:
        r14 = new kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$5;

        specialinvoke r14.<kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$5: void <init>(kotlin.jvm.functions.Function3,java.nio.file.Path,java.nio.file.Path,kotlin.jvm.functions.Function3)>($r3, $r0, $r1, $r2);

        $r15 = (kotlin.jvm.functions.Function1) r14;

        staticinvoke <kotlin.io.path.PathsKt: void visitFileTree$default(java.nio.file.Path,int,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r0, 0, $z0, $r15, 1, null);

        return $r1;

     label10:
        r16 = new java.nio.file.NoSuchFileException;

        $r12 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $r13 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r16.<java.nio.file.NoSuchFileException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r12, $r13, "The source file doesn\'t exist.");

        throw r16;
    }

    public static final java.nio.file.Path copyToRecursively(java.nio.file.Path, java.nio.file.Path, kotlin.jvm.functions.Function3, boolean, boolean)
    {
        kotlin.jvm.functions.Function3 $r2, $r4;
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2 $r3;
        java.nio.file.Path $r0, $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "onError");

        if $z1 == 0 goto label1;

        $r3 = new kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2;

        specialinvoke $r3.<kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$2: void <init>(boolean)>($z0);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r0 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path copyToRecursively(java.nio.file.Path,java.nio.file.Path,kotlin.jvm.functions.Function3,boolean,kotlin.jvm.functions.Function3)>($r0, $r1, $r2, $z0, $r4);

        return $r0;

     label1:
        $r0 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path copyToRecursively$default(java.nio.file.Path,java.nio.file.Path,kotlin.jvm.functions.Function3,boolean,kotlin.jvm.functions.Function3,int,java.lang.Object)>($r0, $r1, $r2, $z0, null, 8, null);

        return $r0;
    }

    private static final java.nio.file.FileVisitResult copyToRecursively$copy$PathsKt__PathRecursiveFunctionsKt(kotlin.jvm.functions.Function3, java.nio.file.Path, java.nio.file.Path, kotlin.jvm.functions.Function3, java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        kotlin.io.path.CopyActionResult r9;
        kotlin.jvm.functions.Function3 $r0, $r3;
        java.nio.file.attribute.BasicFileAttributes $r5;
        java.lang.Exception r11;
        java.nio.file.FileVisitResult $r10;
        kotlin.io.path.DefaultCopyActionContext r6;
        java.lang.Object $r8;
        java.nio.file.Path $r1, $r2, $r4, $r7;

        $r0 := @parameter0: kotlin.jvm.functions.Function3;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.Path;

        $r3 := @parameter3: kotlin.jvm.functions.Function3;

        $r4 := @parameter4: java.nio.file.Path;

        $r5 := @parameter5: java.nio.file.attribute.BasicFileAttributes;

        r6 = <kotlin.io.path.DefaultCopyActionContext: kotlin.io.path.DefaultCopyActionContext INSTANCE>;

     label1:
        $r7 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.nio.file.Path copyToRecursively$destination$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path,java.nio.file.Path,java.nio.file.Path)>($r1, $r2, $r4);

        $r8 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r6, $r4, $r7);

        r9 = (kotlin.io.path.CopyActionResult) $r8;

        $r10 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.nio.file.FileVisitResult toFileVisitResult$PathsKt__PathRecursiveFunctionsKt(kotlin.io.path.CopyActionResult)>(r9);

     label2:
        return $r10;

     label3:
        r11 := @caughtexception;

        $r10 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.nio.file.FileVisitResult copyToRecursively$error$PathsKt__PathRecursiveFunctionsKt(kotlin.jvm.functions.Function3,java.nio.file.Path,java.nio.file.Path,java.nio.file.Path,java.lang.Exception)>($r3, $r1, $r2, $r4, r11);

        return $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.nio.file.Path copyToRecursively$default(java.nio.file.Path, java.nio.file.Path, kotlin.jvm.functions.Function3, boolean, kotlin.jvm.functions.Function3, int, java.lang.Object)
    {
        kotlin.jvm.functions.Function3 $r2, $r3;
        int $i0, $i1;
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$3 $r5;
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$4 $r6;
        java.lang.Object $r4;
        java.nio.file.Path $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: java.nio.file.Path;

        $r0 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        $z0 := @parameter3: boolean;

        $r3 := @parameter4: kotlin.jvm.functions.Function3;

        $i0 := @parameter5: int;

        $r4 := @parameter6: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r5 = <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$3: kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$3 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function3) $r5;

     label1:
        $i0 = $i0 & 8;

        if $i0 == 0 goto label2;

        $r6 = new kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$4;

        specialinvoke $r6.<kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$4: void <init>(boolean)>($z0);

        $r3 = (kotlin.jvm.functions.Function3) $r6;

     label2:
        $r1 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path copyToRecursively(java.nio.file.Path,java.nio.file.Path,kotlin.jvm.functions.Function3,boolean,kotlin.jvm.functions.Function3)>($r1, $r0, $r2, $z0, $r3);

        return $r1;
    }

    public static java.nio.file.Path copyToRecursively$default(java.nio.file.Path, java.nio.file.Path, kotlin.jvm.functions.Function3, boolean, boolean, int, java.lang.Object)
    {
        kotlin.jvm.functions.Function3 $r3;
        int $i0;
        java.lang.Object $r1;
        kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$1 $r4;
        java.nio.file.Path $r0, $r2;
        boolean $z0, $z1;

        $r2 := @parameter0: java.nio.file.Path;

        $r0 := @parameter1: java.nio.file.Path;

        $r3 := @parameter2: kotlin.jvm.functions.Function3;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $i0 := @parameter5: int;

        $r1 := @parameter6: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r4 = <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$1: kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$copyToRecursively$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function3) $r4;

     label1:
        $r2 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path copyToRecursively(java.nio.file.Path,java.nio.file.Path,kotlin.jvm.functions.Function3,boolean,boolean)>($r2, $r0, $r3, $z0, $z1);

        return $r2;
    }

    private static final java.nio.file.Path copyToRecursively$destination$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path, java.nio.file.Path, java.nio.file.Path)
    {
        java.lang.String $r3;
        java.nio.file.Path $r0, $r1, $r2;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.Path;

        $r0 = staticinvoke <kotlin.io.path.PathsKt: java.nio.file.Path relativeTo(java.nio.file.Path,java.nio.file.Path)>($r2, $r0);

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $r0 = interfaceinvoke $r1.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>($r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "target.resolve(relativePath.pathString)");

        return $r0;
    }

    private static final java.nio.file.FileVisitResult copyToRecursively$error$PathsKt__PathRecursiveFunctionsKt(kotlin.jvm.functions.Function3, java.nio.file.Path, java.nio.file.Path, java.nio.file.Path, java.lang.Exception)
    {
        kotlin.jvm.functions.Function3 $r0;
        java.lang.Exception $r4;
        kotlin.io.path.OnErrorResult $r6;
        java.nio.file.FileVisitResult $r7;
        java.lang.Object $r5;
        java.nio.file.Path $r1, $r2, $r3;

        $r0 := @parameter0: kotlin.jvm.functions.Function3;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.Path;

        $r3 := @parameter3: java.nio.file.Path;

        $r4 := @parameter4: java.lang.Exception;

        $r1 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.nio.file.Path copyToRecursively$destination$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path,java.nio.file.Path,java.nio.file.Path)>($r1, $r2, $r3);

        $r5 = interfaceinvoke $r0.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r1, $r4);

        $r6 = (kotlin.io.path.OnErrorResult) $r5;

        $r7 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.nio.file.FileVisitResult toFileVisitResult$PathsKt__PathRecursiveFunctionsKt(kotlin.io.path.OnErrorResult)>($r6);

        return $r7;
    }

    public static final void deleteRecursively(java.nio.file.Path)
    {
        java.lang.Throwable $r8, $r9;
        java.util.Iterator $r5;
        java.util.Collection $r2;
        java.nio.file.FileSystemException $r3;
        java.lang.Iterable $r4;
        java.lang.Exception r7;
        java.util.List $r1;
        java.lang.Object $r6;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: java.util.List deleteRecursivelyImpl$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path)>($r0);

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label3;

        $r3 = new java.nio.file.FileSystemException;

        specialinvoke $r3.<java.nio.file.FileSystemException: void <init>(java.lang.String)>("Failed to delete one or more files. See suppressed exceptions for details.");

        $r4 = (java.lang.Iterable) $r1;

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Exception) $r6;

        $r8 = (java.lang.Throwable) $r3;

        $r9 = (java.lang.Throwable) r7;

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>($r8, $r9);

        goto label1;

     label2:
        $r8 = (java.lang.Throwable) $r3;

        throw $r8;

     label3:
        return;
    }

    private static final java.util.List deleteRecursivelyImpl$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path)
    {
        java.lang.Throwable r4, $r8, r9;
        kotlin.io.path.ExceptionsCollector r1;
        java.nio.file.DirectoryStream $r3;
        kotlin.Unit r7;
        java.util.List $r10;
        java.nio.file.SecureDirectoryStream $r6;
        java.io.Closeable $r5;
        java.nio.file.Path $r0, $r2;
        boolean z0, $z1;

        $r0 := @parameter0: java.nio.file.Path;

        r1 = new kotlin.io.path.ExceptionsCollector;

        specialinvoke r1.<kotlin.io.path.ExceptionsCollector: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        z0 = 1;

        $r2 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getParent()>();

        if $r2 == null goto label13;

     label01:
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>($r2);

     label02:
        goto label04;

     label03:
        r4 := @caughtexception;

        $r3 = null;

     label04:
        if $r3 == null goto label13;

        $r5 = (java.io.Closeable) $r3;

     label05:
        $r3 = (java.nio.file.DirectoryStream) $r5;

        $z1 = $r3 instanceof java.nio.file.SecureDirectoryStream;

     label06:
        if $z1 == 0 goto label08;

        z0 = 0;

     label07:
        virtualinvoke r1.<kotlin.io.path.ExceptionsCollector: void setPath(java.nio.file.Path)>($r2);

        $r6 = (java.nio.file.SecureDirectoryStream) $r3;

        $r2 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this.fileName");

        staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: void handleEntry$PathsKt__PathRecursiveFunctionsKt(java.nio.file.SecureDirectoryStream,java.nio.file.Path,kotlin.io.path.ExceptionsCollector)>($r6, $r2, r1);

     label08:
        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, null);

        goto label13;

     label10:
        $r8 := @caughtexception;

     label11:
        throw $r8;

     label12:
        r9 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, $r8);

        throw r9;

     label13:
        if z0 == 0 goto label14;

        staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: void insecureHandleEntry$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path,kotlin.io.path.ExceptionsCollector)>($r0, r1);

     label14:
        $r10 = virtualinvoke r1.<kotlin.io.path.ExceptionsCollector: java.util.List getCollectedExceptions()>();

        return $r10;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    private static final void enterDirectory$PathsKt__PathRecursiveFunctionsKt(java.nio.file.SecureDirectoryStream, java.nio.file.Path, kotlin.io.path.ExceptionsCollector)
    {
        java.lang.Throwable $r11, $r12;
        java.nio.file.NoSuchFileException $r6;
        java.nio.file.LinkOption[] $r3;
        java.util.Iterator $r8;
        kotlin.io.path.ExceptionsCollector r2;
        java.lang.Exception $r5;
        java.nio.file.LinkOption $r4;
        kotlin.Unit $r10;
        java.nio.file.SecureDirectoryStream $r0;
        java.io.Closeable $r7;
        java.lang.Object $r9;
        java.nio.file.Path r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.SecureDirectoryStream;

        r1 := @parameter1: java.nio.file.Path;

        r2 := @parameter2: kotlin.io.path.ExceptionsCollector;

        $r3 = newarray (java.nio.file.LinkOption)[1];

        $r4 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

     label01:
        $r3[0] = $r4;

     label02:
        $r0 = interfaceinvoke $r0.<java.nio.file.SecureDirectoryStream: java.nio.file.SecureDirectoryStream newDirectoryStream(java.lang.Object,java.nio.file.LinkOption[])>(r1, $r3);

     label03:
        goto label06;

     label04:
        $r5 := @caughtexception;

        goto label19;

     label05:
        $r6 := @caughtexception;

        $r0 = null;

     label06:
        if $r0 == null goto label20;

        $r7 = (java.io.Closeable) $r0;

     label07:
        $r0 = (java.nio.file.SecureDirectoryStream) $r7;

        $r8 = interfaceinvoke $r0.<java.nio.file.SecureDirectoryStream: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label09:
        if $z0 == 0 goto label12;

     label10:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.nio.file.Path) $r9;

        r1 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "entry.fileName");

        staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: void handleEntry$PathsKt__PathRecursiveFunctionsKt(java.nio.file.SecureDirectoryStream,java.nio.file.Path,kotlin.io.path.ExceptionsCollector)>($r0, r1, r2);

     label11:
        goto label08;

     label12:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label13:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r7, null);

     label14:
        goto label20;

     label15:
        $r11 := @caughtexception;

     label16:
        throw $r11;

     label17:
        $r12 := @caughtexception;

     label18:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r7, $r11);

        throw $r12;

     label19:
        virtualinvoke r2.<kotlin.io.path.ExceptionsCollector: void collect(java.lang.Exception)>($r5);

        goto label20;

     label20:
        return;

        catch java.nio.file.NoSuchFileException from label02 to label03 with label05;
        catch java.lang.Exception from label01 to label03 with label04;
        catch java.lang.Throwable from label07 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Exception from label13 to label14 with label04;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Exception from label18 to label19 with label04;
    }

    private static final void handleEntry$PathsKt__PathRecursiveFunctionsKt(java.nio.file.SecureDirectoryStream, java.nio.file.Path, kotlin.io.path.ExceptionsCollector)
    {
        java.nio.file.NoSuchFileException $r6, $r7;
        java.nio.file.LinkOption[] r3;
        kotlin.io.path.ExceptionsCollector $r2;
        java.lang.Exception $r8;
        java.nio.file.LinkOption $r4;
        kotlin.Unit $r5;
        java.nio.file.SecureDirectoryStream $r0;
        int $i0, $i1;
        java.nio.file.Path $r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.SecureDirectoryStream;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: kotlin.io.path.ExceptionsCollector;

        virtualinvoke $r2.<kotlin.io.path.ExceptionsCollector: void enterEntry(java.nio.file.Path)>($r1);

        r3 = newarray (java.nio.file.LinkOption)[1];

        $r4 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

     label01:
        r3[0] = $r4;

        $z0 = staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: boolean isDirectory$PathsKt__PathRecursiveFunctionsKt(java.nio.file.SecureDirectoryStream,java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1, r3);

     label02:
        if $z0 == 0 goto label08;

     label03:
        $i0 = virtualinvoke $r2.<kotlin.io.path.ExceptionsCollector: int getTotalExceptions()>();

        staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: void enterDirectory$PathsKt__PathRecursiveFunctionsKt(java.nio.file.SecureDirectoryStream,java.nio.file.Path,kotlin.io.path.ExceptionsCollector)>($r0, $r1, $r2);

        $i1 = virtualinvoke $r2.<kotlin.io.path.ExceptionsCollector: int getTotalExceptions()>();

     label04:
        if $i0 != $i1 goto label11;

     label05:
        interfaceinvoke $r0.<java.nio.file.SecureDirectoryStream: void deleteDirectory(java.lang.Object)>($r1);

     label06:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label11;

     label07:
        $r6 := @caughtexception;

        goto label11;

     label08:
        interfaceinvoke $r0.<java.nio.file.SecureDirectoryStream: void deleteFile(java.lang.Object)>($r1);

     label09:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label11;

     label10:
        $r7 := @caughtexception;

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

        virtualinvoke $r2.<kotlin.io.path.ExceptionsCollector: void collect(java.lang.Exception)>($r8);

     label13:
        virtualinvoke $r2.<kotlin.io.path.ExceptionsCollector: void exitEntry(java.nio.file.Path)>($r1);

        return;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.nio.file.NoSuchFileException from label05 to label06 with label07;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.nio.file.NoSuchFileException from label08 to label09 with label10;
        catch java.lang.Exception from label08 to label09 with label12;
    }

    private static final void insecureEnterDirectory$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path, kotlin.io.path.ExceptionsCollector)
    {
        java.lang.Throwable $r9, $r10;
        java.nio.file.NoSuchFileException $r4;
        java.util.Iterator $r6;
        kotlin.io.path.ExceptionsCollector r1;
        java.lang.Exception $r3;
        java.nio.file.DirectoryStream $r2;
        kotlin.Unit $r8;
        java.io.Closeable $r5;
        java.lang.Object $r7;
        java.nio.file.Path r0;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: kotlin.io.path.ExceptionsCollector;

     label01:
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>(r0);

     label02:
        goto label05;

     label03:
        $r3 := @caughtexception;

        goto label18;

     label04:
        $r4 := @caughtexception;

        $r2 = null;

     label05:
        if $r2 == null goto label19;

        $r5 = (java.io.Closeable) $r2;

     label06:
        $r2 = (java.nio.file.DirectoryStream) $r5;

        $r6 = interfaceinvoke $r2.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label08:
        if $z0 == 0 goto label11;

     label09:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r0 = (java.nio.file.Path) $r7;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r0, "entry");

        staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: void insecureHandleEntry$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path,kotlin.io.path.ExceptionsCollector)>(r0, r1);

     label10:
        goto label07;

     label11:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label12:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, null);

     label13:
        goto label19;

     label14:
        $r9 := @caughtexception;

     label15:
        throw $r9;

     label16:
        $r10 := @caughtexception;

     label17:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, $r9);

        throw $r10;

     label18:
        virtualinvoke r1.<kotlin.io.path.ExceptionsCollector: void collect(java.lang.Exception)>($r3);

        goto label19;

     label19:
        return;

        catch java.nio.file.NoSuchFileException from label01 to label02 with label04;
        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Exception from label12 to label13 with label03;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Exception from label17 to label18 with label03;
    }

    private static final void insecureHandleEntry$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path, kotlin.io.path.ExceptionsCollector)
    {
        java.lang.Object[] $r4;
        java.nio.file.LinkOption[] $r3;
        kotlin.io.path.ExceptionsCollector $r1;
        java.lang.Exception $r5;
        java.nio.file.LinkOption $r2;
        int $i0, $i1;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: kotlin.io.path.ExceptionsCollector;

        $r3 = newarray (java.nio.file.LinkOption)[1];

        $r2 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

     label01:
        $r3[0] = $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, 1);

        $r3 = (java.nio.file.LinkOption[]) $r4;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r3);

     label02:
        if $z0 == 0 goto label07;

     label03:
        $i0 = virtualinvoke $r1.<kotlin.io.path.ExceptionsCollector: int getTotalExceptions()>();

        staticinvoke <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt: void insecureEnterDirectory$PathsKt__PathRecursiveFunctionsKt(java.nio.file.Path,kotlin.io.path.ExceptionsCollector)>($r0, $r1);

        $i1 = virtualinvoke $r1.<kotlin.io.path.ExceptionsCollector: int getTotalExceptions()>();

     label04:
        if $i0 != $i1 goto label08;

     label05:
        staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>($r0);

     label06:
        goto label08;

     label07:
        staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>($r0);

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        virtualinvoke $r1.<kotlin.io.path.ExceptionsCollector: void collect(java.lang.Exception)>($r5);

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    private static final transient boolean isDirectory$PathsKt__PathRecursiveFunctionsKt(java.nio.file.SecureDirectoryStream, java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.nio.file.NoSuchFileException $r8;
        java.lang.Object[] $r3;
        java.nio.file.LinkOption[] $r2;
        java.nio.file.attribute.FileAttributeView $r4;
        java.nio.file.attribute.BasicFileAttributes $r6;
        java.nio.file.SecureDirectoryStream $r0;
        java.nio.file.attribute.BasicFileAttributeView $r5;
        int $i0;
        java.lang.Boolean $r7;
        java.nio.file.Path $r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.SecureDirectoryStream;

        $r1 := @parameter1: java.nio.file.Path;

        $r2 := @parameter2: java.nio.file.LinkOption[];

        $i0 = lengthof $r2;

     label1:
        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

     label2:
        $r2 = (java.nio.file.LinkOption[]) $r3;

     label3:
        $r4 = interfaceinvoke $r0.<java.nio.file.SecureDirectoryStream: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.lang.Object,java.lang.Class,java.nio.file.LinkOption[])>($r1, class "Ljava/nio/file/attribute/BasicFileAttributeView;", $r2);

     label4:
        $r5 = (java.nio.file.attribute.BasicFileAttributeView) $r4;

     label5:
        $r6 = interfaceinvoke $r5.<java.nio.file.attribute.BasicFileAttributeView: java.nio.file.attribute.BasicFileAttributes readAttributes()>();

        $z0 = interfaceinvoke $r6.<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        $r7 = null;

     label8:
        if $r7 == null goto label9;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label9:
        return 0;

        catch java.nio.file.NoSuchFileException from label1 to label2 with label7;
        catch java.nio.file.NoSuchFileException from label3 to label4 with label7;
        catch java.nio.file.NoSuchFileException from label5 to label6 with label7;
    }

    private static final java.nio.file.FileVisitResult toFileVisitResult$PathsKt__PathRecursiveFunctionsKt(kotlin.io.path.CopyActionResult)
    {
        java.nio.file.FileVisitResult r3;
        kotlin.io.path.CopyActionResult $r0;
        kotlin.NoWhenBranchMatchedException $r2;
        int[] $r1;
        int $i0;

        $r0 := @parameter0: kotlin.io.path.CopyActionResult;

        $r1 = <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r0.<kotlin.io.path.CopyActionResult: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r2.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r2;

     label2:
        r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult SKIP_SUBTREE>;

        return r3;

     label3:
        r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;

        return r3;

     label4:
        r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

        return r3;
    }

    private static final java.nio.file.FileVisitResult toFileVisitResult$PathsKt__PathRecursiveFunctionsKt(kotlin.io.path.OnErrorResult)
    {
        java.nio.file.FileVisitResult r3;
        kotlin.NoWhenBranchMatchedException $r2;
        int[] $r1;
        int $i0;
        kotlin.io.path.OnErrorResult $r0;

        $r0 := @parameter0: kotlin.io.path.OnErrorResult;

        $r1 = <kotlin.io.path.PathsKt__PathRecursiveFunctionsKt$WhenMappings: int[] $EnumSwitchMapping$1>;

        $i0 = virtualinvoke $r0.<kotlin.io.path.OnErrorResult: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r2.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r2;

     label2:
        r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult SKIP_SUBTREE>;

        return r3;

     label3:
        r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;

        return r3;
    }

    private static final java.lang.Object tryIgnoreNoSuchFileException$PathsKt__PathRecursiveFunctionsKt(kotlin.jvm.functions.Function0)
    {
        java.lang.Object $r1;
        java.nio.file.NoSuchFileException r2;
        kotlin.jvm.functions.Function0 $r0;

        $r0 := @parameter0: kotlin.jvm.functions.Function0;

     label1:
        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        return null;

        catch java.nio.file.NoSuchFileException from label1 to label2 with label3;
    }
}
