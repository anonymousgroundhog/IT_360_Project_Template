class kotlin.sequences.SequencesKt__SequenceBuilderKt extends java.lang.Object
{
    private static final int State_Done;
    private static final int State_Failed;
    private static final int State_ManyNotReady;
    private static final int State_ManyReady;
    private static final int State_NotReady;
    private static final int State_Ready;

    public void <init>()
    {
        kotlin.sequences.SequencesKt__SequenceBuilderKt r0;

        r0 := @this: kotlin.sequences.SequencesKt__SequenceBuilderKt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.util.Iterator iterator(kotlin.jvm.functions.Function2)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.sequences.SequenceBuilderIterator r2;
        java.util.Iterator $r3;
        kotlin.jvm.functions.Function2 $r0;

        $r0 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "block");

        r2 = new kotlin.sequences.SequenceBuilderIterator;

        specialinvoke r2.<kotlin.sequences.SequenceBuilderIterator: void <init>()>();

        $r1 = (kotlin.coroutines.Continuation) r2;

        $r1 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r0, r2, $r1);

        virtualinvoke r2.<kotlin.sequences.SequenceBuilderIterator: void setNextStep(kotlin.coroutines.Continuation)>($r1);

        $r3 = (java.util.Iterator) r2;

        return $r3;
    }

    public static final kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.SequencesKt__SequenceBuilderKt$sequence$$inlined$Sequence$1 $r1;
        kotlin.jvm.functions.Function2 $r0;
        kotlin.sequences.Sequence $r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "block");

        $r1 = new kotlin.sequences.SequencesKt__SequenceBuilderKt$sequence$$inlined$Sequence$1;

        specialinvoke $r1.<kotlin.sequences.SequencesKt__SequenceBuilderKt$sequence$$inlined$Sequence$1: void <init>(kotlin.jvm.functions.Function2)>($r0);

        $r2 = (kotlin.sequences.Sequence) $r1;

        return $r2;
    }

    public static void <clinit>()
    {
        <kotlin.sequences.SequencesKt__SequenceBuilderKt: int State_Ready> = 3;

        <kotlin.sequences.SequencesKt__SequenceBuilderKt: int State_NotReady> = 0;

        <kotlin.sequences.SequencesKt__SequenceBuilderKt: int State_ManyReady> = 2;

        <kotlin.sequences.SequencesKt__SequenceBuilderKt: int State_ManyNotReady> = 1;

        <kotlin.sequences.SequencesKt__SequenceBuilderKt: int State_Failed> = 5;

        <kotlin.sequences.SequencesKt__SequenceBuilderKt: int State_Done> = 4;

        return;
    }
}
