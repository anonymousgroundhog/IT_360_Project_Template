public final class kotlin.collections.builders.SetBuilder extends kotlin.collections.AbstractMutableSet implements java.util.Set, java.io.Serializable, kotlin.jvm.internal.markers.KMutableSet
{
    private final kotlin.collections.builders.MapBuilder backing;

    public void <init>()
    {
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = new kotlin.collections.builders.MapBuilder;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilder: void <init>()>();

        specialinvoke r0.<kotlin.collections.builders.SetBuilder: void <init>(kotlin.collections.builders.MapBuilder)>($r1);

        return;
    }

    public void <init>(int)
    {
        int $i0;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $i0 := @parameter0: int;

        $r1 = new kotlin.collections.builders.MapBuilder;

        specialinvoke $r1.<kotlin.collections.builders.MapBuilder: void <init>(int)>($i0);

        specialinvoke r0.<kotlin.collections.builders.SetBuilder: void <init>(kotlin.collections.builders.MapBuilder)>($r1);

        return;
    }

    public void <init>(kotlin.collections.builders.MapBuilder)
    {
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: kotlin.collections.builders.MapBuilder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "backing");

        specialinvoke r0.<kotlin.collections.AbstractMutableSet: void <init>()>();

        r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing> = $r1;

        return;
    }

    private final java.lang.Object writeReplace()
    {
        kotlin.collections.builders.SerializedCollection $r2;
        java.util.Collection $r3;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;
        java.io.NotSerializableException $r4;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: boolean isReadOnly$kotlin_stdlib()>();

        if $z0 == 0 goto label1;

        $r2 = new kotlin.collections.builders.SerializedCollection;

        $r3 = (java.util.Collection) r0;

        specialinvoke $r2.<kotlin.collections.builders.SerializedCollection: void <init>(java.util.Collection,int)>($r3, 1);

        return $r2;

     label1:
        $r4 = new java.io.NotSerializableException;

        specialinvoke $r4.<java.io.NotSerializableException: void <init>(java.lang.String)>("The set cannot be serialized while it is being built.");

        throw $r4;
    }

    public boolean add(java.lang.Object)
    {
        int $i0;
        kotlin.collections.builders.SetBuilder r0;
        java.lang.Object $r1;
        kotlin.collections.builders.MapBuilder $r2;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: int addKey$kotlin_stdlib(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection $r1;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r2;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke r0.<kotlin.collections.AbstractMutableSet: boolean addAll(java.util.Collection)>($r1);

        return $z0;
    }

    public final java.util.Set build()
    {
        java.util.Set $r2;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: java.util.Map build()>();

        $r2 = (java.util.Set) r0;

        return $r2;
    }

    public void clear()
    {
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        kotlin.collections.builders.SetBuilder r0;
        java.lang.Object $r1;
        kotlin.collections.builders.MapBuilder $r2;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public int getSize()
    {
        int $i0;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r1;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $z0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r3;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r2;
        kotlin.collections.builders.MapBuilder$KeysItr $r1;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r2 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $r1 = virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: kotlin.collections.builders.MapBuilder$KeysItr keysIterator$kotlin_stdlib()>();

        $r3 = (java.util.Iterator) $r1;

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        int $i0;
        kotlin.collections.builders.SetBuilder r0;
        java.lang.Object $r1;
        kotlin.collections.builders.MapBuilder $r2;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        $i0 = virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: int removeKey$kotlin_stdlib(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collection $r1;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r2;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke r0.<kotlin.collections.AbstractMutableSet: boolean removeAll(java.util.Collection)>($r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collection $r1;
        kotlin.collections.builders.SetBuilder r0;
        kotlin.collections.builders.MapBuilder $r2;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.SetBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = r0.<kotlin.collections.builders.SetBuilder: kotlin.collections.builders.MapBuilder backing>;

        virtualinvoke $r2.<kotlin.collections.builders.MapBuilder: void checkIsMutable$kotlin_stdlib()>();

        $z0 = specialinvoke r0.<kotlin.collections.AbstractMutableSet: boolean retainAll(java.util.Collection)>($r1);

        return $z0;
    }
}
