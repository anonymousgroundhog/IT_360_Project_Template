public final class androidx.work.OverwritingInputMerger extends androidx.work.InputMerger
{

    public void <init>()
    {
        androidx.work.OverwritingInputMerger r0;

        r0 := @this: androidx.work.OverwritingInputMerger;

        specialinvoke r0.<androidx.work.InputMerger: void <init>()>();

        return;
    }

    public androidx.work.Data merge(java.util.List)
    {
        androidx.work.OverwritingInputMerger r0;
        java.util.Iterator $r4;
        java.util.HashMap r3;
        java.util.List r1;
        androidx.work.Data$Builder r2;
        java.util.Map $r7;
        java.lang.Object $r5;
        androidx.work.Data r6;
        boolean $z0;

        r0 := @this: androidx.work.OverwritingInputMerger;

        r1 := @parameter0: java.util.List;

        r2 = new androidx.work.Data$Builder;

        specialinvoke r2.<androidx.work.Data$Builder: void <init>()>();

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.work.Data) $r5;

        $r7 = virtualinvoke r6.<androidx.work.Data: java.util.Map getKeyValueMap()>();

        interfaceinvoke r3.<java.util.Map: void putAll(java.util.Map)>($r7);

        goto label1;

     label2:
        virtualinvoke r2.<androidx.work.Data$Builder: androidx.work.Data$Builder putAll(java.util.Map)>(r3);

        r6 = virtualinvoke r2.<androidx.work.Data$Builder: androidx.work.Data build()>();

        return r6;
    }
}
