public final class com.google.common.io.ByteStreams extends java.lang.Object
{
    private static final int BUFFER_SIZE;
    private static final int MAX_ARRAY_LEN;
    private static final java.io.OutputStream NULL_OUTPUT_STREAM;
    private static final int TO_BYTE_ARRAY_DEQUE_SIZE;
    private static final int ZERO_COPY_CHUNK_SIZE;

    static void <clinit>()
    {
        com.google.common.io.ByteStreams$1 $r0;

        <com.google.common.io.ByteStreams: int ZERO_COPY_CHUNK_SIZE> = 524288;

        <com.google.common.io.ByteStreams: int TO_BYTE_ARRAY_DEQUE_SIZE> = 20;

        <com.google.common.io.ByteStreams: int MAX_ARRAY_LEN> = 2147483639;

        <com.google.common.io.ByteStreams: int BUFFER_SIZE> = 8192;

        $r0 = new com.google.common.io.ByteStreams$1;

        specialinvoke $r0.<com.google.common.io.ByteStreams$1: void <init>()>();

        <com.google.common.io.ByteStreams: java.io.OutputStream NULL_OUTPUT_STREAM> = $r0;

        return;
    }

    private void <init>()
    {
        com.google.common.io.ByteStreams r0;

        r0 := @this: com.google.common.io.ByteStreams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] combineBuffers(java.util.Queue, int)
    {
        byte[] r1, r3;
        int $i0, i1, i2, $i3;
        java.lang.Object $r2;
        java.util.Queue r0;
        boolean $z0;

        r0 := @parameter0: java.util.Queue;

        $i0 := @parameter1: int;

        $z0 = interfaceinvoke r0.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r1 = newarray (byte)[0];

        return r1;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Queue: java.lang.Object remove()>();

        r1 = (byte[]) $r2;

        i2 = lengthof r1;

        if i2 != $i0 goto label2;

        return r1;

     label2:
        i2 = lengthof r1;

        i2 = $i0 - i2;

        r1 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, $i0);

     label3:
        if i2 <= 0 goto label4;

        $r2 = interfaceinvoke r0.<java.util.Queue: java.lang.Object remove()>();

        r3 = (byte[]) $r2;

        i1 = lengthof r3;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i1);

        i1 = $i0 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r1, i1, $i3);

        i2 = i2 - $i3;

        goto label3;

     label4:
        return r1;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        int $i1;
        long l0, $l2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.io.ByteStreams: byte[] createBuffer()>();

        l0 = 0L;

     label1:
        $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2);

        if $i1 != -1 goto label2;

        return l0;

     label2:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i1);

        $l2 = (long) $i1;

        l0 = l0 + $l2;

        goto label1;
    }

    public static long copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r3;
        java.nio.channels.ReadableByteChannel $r0;
        long $l0, l1, $l2;
        java.nio.ByteBuffer $r4;
        byte $b3;
        int $i4;
        java.nio.channels.WritableByteChannel $r1;
        java.nio.channels.FileChannel r2;
        boolean z0;

        $r0 := @parameter0: java.nio.channels.ReadableByteChannel;

        $r1 := @parameter1: java.nio.channels.WritableByteChannel;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        z0 = $r0 instanceof java.nio.channels.FileChannel;

        if z0 == 0 goto label2;

        r2 = (java.nio.channels.FileChannel) $r0;

        $l0 = virtualinvoke r2.<java.nio.channels.FileChannel: long position()>();

        l1 = $l0;

     label1:
        $l2 = virtualinvoke r2.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(l1, 524288L, $r1);

        l1 = l1 + $l2;

        virtualinvoke r2.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(l1);

        $b3 = $l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 > 0 goto label1;

        $l2 = virtualinvoke r2.<java.nio.channels.FileChannel: long size()>();

        $b3 = l1 cmp $l2;

        $i4 = (int) $b3;

        if $i4 < 0 goto label1;

        $l0 = l1 - $l0;

        return $l0;

     label2:
        $r3 = staticinvoke <com.google.common.io.ByteStreams: byte[] createBuffer()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        $l0 = 0L;

     label3:
        $i4 = interfaceinvoke $r0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>($r4);

        if $i4 == -1 goto label6;

        staticinvoke <com.google.common.io.Java8Compatibility: void flip(java.nio.Buffer)>($r4);

     label4:
        z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if z0 == 0 goto label5;

        $i4 = interfaceinvoke $r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r4);

        l1 = (long) $i4;

        $l0 = $l0 + l1;

        goto label4;

     label5:
        staticinvoke <com.google.common.io.Java8Compatibility: void clear(java.nio.Buffer)>($r4);

        goto label3;

     label6:
        return $l0;
    }

    static byte[] createBuffer()
    {
        byte[] $r0;

        $r0 = newarray (byte)[8192];

        return $r0;
    }

    public static long exhaust(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r1;
        byte $b0;
        int $i2;
        long l1, $l3;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        l1 = 0L;

        $r1 = staticinvoke <com.google.common.io.ByteStreams: byte[] createBuffer()>();

     label1:
        $i2 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

        $l3 = (long) $i2;

        $b0 = $l3 cmp -1L;

        if $b0 == 0 goto label2;

        l1 = l1 + $l3;

        goto label1;

     label2:
        return l1;
    }

    public static java.io.InputStream limit(java.io.InputStream, long)
    {
        long $l0;
        com.google.common.io.ByteStreams$LimitedInputStream $r1;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        $r1 = new com.google.common.io.ByteStreams$LimitedInputStream;

        specialinvoke $r1.<com.google.common.io.ByteStreams$LimitedInputStream: void <init>(java.io.InputStream,long)>($r0, $l0);

        return $r1;
    }

    public static com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)
    {
        com.google.common.io.ByteStreams$ByteArrayDataInputStream $r1;
        java.lang.Object $r2;
        java.io.ByteArrayInputStream $r0;

        $r0 := @parameter0: java.io.ByteArrayInputStream;

        $r1 = new com.google.common.io.ByteStreams$ByteArrayDataInputStream;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r0 = (java.io.ByteArrayInputStream) $r2;

        specialinvoke $r1.<com.google.common.io.ByteStreams$ByteArrayDataInputStream: void <init>(java.io.ByteArrayInputStream)>($r0);

        return $r1;
    }

    public static com.google.common.io.ByteArrayDataInput newDataInput(byte[])
    {
        com.google.common.io.ByteArrayDataInput $r1;
        byte[] $r0;
        java.io.ByteArrayInputStream $r2;

        $r0 := @parameter0: byte[];

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r1 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)>($r2);

        return $r1;
    }

    public static com.google.common.io.ByteArrayDataInput newDataInput(byte[], int)
    {
        byte[] $r0;
        java.io.ByteArrayInputStream $r2;
        int $i0, $i1;
        com.google.common.io.ByteArrayDataInput $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i0, $i1);

        $r2 = new java.io.ByteArrayInputStream;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r0, $i0, $i1);

        $r1 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)>($r2);

        return $r1;
    }

    public static com.google.common.io.ByteArrayDataOutput newDataOutput()
    {
        java.io.ByteArrayOutputStream $r1;
        com.google.common.io.ByteArrayDataOutput $r0;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r0 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)>($r1);

        return $r0;
    }

    public static com.google.common.io.ByteArrayDataOutput newDataOutput(int)
    {
        java.lang.Object[] $r4;
        java.io.ByteArrayOutputStream $r0;
        int $i0;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r2;
        java.lang.Integer $r3;
        com.google.common.io.ByteArrayDataOutput $r1;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        $r1 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)>($r0);

        return $r1;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r3;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid size: %s", $r4);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    public static com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)
    {
        java.lang.Object $r2;
        java.io.ByteArrayOutputStream $r0;
        com.google.common.io.ByteStreams$ByteArrayDataOutputStream $r1;

        $r0 := @parameter0: java.io.ByteArrayOutputStream;

        $r1 = new com.google.common.io.ByteStreams$ByteArrayDataOutputStream;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r0 = (java.io.ByteArrayOutputStream) $r2;

        specialinvoke $r1.<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void <init>(java.io.ByteArrayOutputStream)>($r0);

        return $r1;
    }

    public static java.io.OutputStream nullOutputStream()
    {
        java.io.OutputStream r0;

        r0 = <com.google.common.io.ByteStreams: java.io.OutputStream NULL_OUTPUT_STREAM>;

        return r0;
    }

    public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        byte[] $r1;
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.Object[] $r3;
        java.lang.Integer $r2;
        int $i0, $i1, i2, i3, $i4;
        java.lang.String $r4;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        if $i1 < 0 goto label4;

        i2 = $i0 + $i1;

        i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, i2, i3);

        i2 = 0;

     label1:
        if i2 >= $i1 goto label3;

        i3 = $i0 + i2;

        $i4 = $i1 - i2;

        i3 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, i3, $i4);

        if i3 != -1 goto label2;

        return i2;

     label2:
        i2 = i2 + i3;

        goto label1;

     label3:
        return i2;

     label4:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r2;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("len (%s) cannot be negative", $r3);

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r5;
    }

    public static java.lang.Object readBytes(java.io.InputStream, com.google.common.io.ByteProcessor) throws java.io.IOException
    {
        byte[] $r2;
        com.google.common.io.ByteProcessor r1;
        int $i0;
        java.lang.Object $r3;
        java.io.InputStream $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: com.google.common.io.ByteProcessor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = staticinvoke <com.google.common.io.ByteStreams: byte[] createBuffer()>();

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2);

        if $i0 == -1 goto label2;

        $z0 = interfaceinvoke r1.<com.google.common.io.ByteProcessor: boolean processBytes(byte[],int,int)>($r2, 0, $i0);

        if $z0 != 0 goto label1;

     label2:
        $r3 = interfaceinvoke r1.<com.google.common.io.ByteProcessor: java.lang.Object getResult()>();

        return $r3;
    }

    public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] $r1;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r1;

        staticinvoke <com.google.common.io.ByteStreams: void readFully(java.io.InputStream,byte[],int,int)>($r0, $r1, 0, $i0);

        return;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        byte[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.io.EOFException $r2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>($r0, $r1, $i0, $i1);

        if $i0 != $i1 goto label1;

        return;

     label1:
        $r2 = new java.io.EOFException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(81);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reached end of stream after reading ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes; ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes expected");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    public static void skipFully(java.io.InputStream, long) throws java.io.IOException
    {
        long $l0, $l1;
        java.io.EOFException $r4;
        byte $b2;
        int $i3;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        $l1 = staticinvoke <com.google.common.io.ByteStreams: long skipUpTo(java.io.InputStream,long)>($r0, $l0);

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        return;

     label1:
        $r4 = new java.io.EOFException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(100);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reached end of stream after skipping ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes; ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes expected");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.EOFException: void <init>(java.lang.String)>($r2);

        throw $r4;
    }

    private static long skipSafely(java.io.InputStream, long) throws java.io.IOException
    {
        int $i1;
        long $l0, $l2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int available()>();

        if $i1 != 0 goto label1;

        return 0L;

     label1:
        $l2 = (long) $i1;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l0);

        $l0 = virtualinvoke $r0.<java.io.InputStream: long skip(long)>($l0);

        return $l0;
    }

    static long skipUpTo(java.io.InputStream, long) throws java.io.IOException
    {
        byte[] r1;
        long $l0, l2, l4, $l5, l6;
        byte b3;
        int i1;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        l2 = 0L;

        r1 = null;

     label1:
        b3 = l2 cmp $l0;

        i1 = (int) b3;

        if i1 >= 0 goto label4;

        l4 = $l0 - l2;

        $l5 = staticinvoke <com.google.common.io.ByteStreams: long skipSafely(java.io.InputStream,long)>($r0, l4);

        l6 = $l5;

        b3 = $l5 cmp 0L;

        if b3 != 0 goto label3;

        l6 = staticinvoke <java.lang.Math: long min(long,long)>(l4, 8192L);

        i1 = (int) l6;

        if r1 != null goto label2;

        r1 = newarray (byte)[i1];

     label2:
        i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, i1);

        l4 = (long) i1;

        l6 = l4;

        b3 = l4 cmp -1L;

        if b3 != 0 goto label3;

        return l2;

     label3:
        l2 = l2 + l6;

        goto label1;

     label4:
        return l2;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r1;
        java.util.ArrayDeque $r2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>(int)>(20);

        $r1 = staticinvoke <com.google.common.io.ByteStreams: byte[] toByteArrayInternal(java.io.InputStream,java.util.Queue,int)>($r0, $r2, 0);

        return $r1;
    }

    static byte[] toByteArray(java.io.InputStream, long) throws java.io.IOException
    {
        byte[] $r1, r2;
        long $l0;
        byte b1;
        int i2, i3, $i4;
        java.lang.StringBuilder r3, $r6;
        java.lang.String $r4;
        java.util.ArrayDeque $r5;
        java.lang.OutOfMemoryError $r7;
        java.io.InputStream $r0;
        boolean z0;

        $r0 := @parameter0: java.io.InputStream;

        $l0 := @parameter1: long;

        b1 = $l0 cmp 0L;

        i2 = (int) b1;

        if i2 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>(z0, "expectedSize (%s) must be non-negative", $l0);

        b1 = $l0 cmp 2147483639L;

        i2 = (int) b1;

        if i2 > 0 goto label7;

        i2 = (int) $l0;

        r2 = newarray (byte)[i2];

        i2 = (int) $l0;

     label3:
        if i2 <= 0 goto label5;

        i3 = (int) $l0;

        i3 = i3 - i2;

        $i4 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r2, i3, i2);

        if $i4 != -1 goto label4;

        $r1 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r2, i3);

        return $r1;

     label4:
        i2 = i2 - $i4;

        goto label3;

     label5:
        i2 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if i2 != -1 goto label6;

        return r2;

     label6:
        $r5 = new java.util.ArrayDeque;

        specialinvoke $r5.<java.util.ArrayDeque: void <init>(int)>(22);

        interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>(r2);

        b1 = (byte) i2;

        $r1 = newarray (byte)[1];

        $r1[0] = b1;

        interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        i2 = lengthof r2;

        i2 = i2 + 1;

        $r1 = staticinvoke <com.google.common.io.ByteStreams: byte[] toByteArrayInternal(java.io.InputStream,java.util.Queue,int)>($r0, $r5, i2);

        return $r1;

     label7:
        $r7 = new java.lang.OutOfMemoryError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(62);

        r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes is too large to fit in a byte array");

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($r4);

        throw $r7;
    }

    private static byte[] toByteArrayInternal(java.io.InputStream, java.util.Queue, int) throws java.io.IOException
    {
        byte[] r2;
        byte $b4;
        int $i0, $i1, i2, i3;
        java.util.Queue r1;
        java.lang.OutOfMemoryError $r3;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.util.Queue;

        $i0 := @parameter2: int;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        $i1 = $i1 * 2;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(128, $i1);

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(8192, $i1);

     label1:
        if $i0 >= 2147483639 goto label7;

        i2 = 2147483639 - $i0;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i2);

        r2 = newarray (byte)[i2];

        interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r2);

        i2 = 0;

     label2:
        i3 = lengthof r2;

        if i2 >= i3 goto label4;

        i3 = lengthof r2;

        i3 = i3 - i2;

        i3 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r2, i2, i3);

        if i3 != -1 goto label3;

        r2 = staticinvoke <com.google.common.io.ByteStreams: byte[] combineBuffers(java.util.Queue,int)>(r1, $i0);

        return r2;

     label3:
        i2 = i2 + i3;

        $i0 = $i0 + i3;

        goto label2;

     label4:
        if $i1 >= 4096 goto label5;

        $b4 = 4;

        goto label6;

     label5:
        $b4 = 2;

     label6:
        $i1 = staticinvoke <com.google.common.math.IntMath: int saturatedMultiply(int,int)>($i1, $b4);

        goto label1;

     label7:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $i0 != -1 goto label8;

        r2 = staticinvoke <com.google.common.io.ByteStreams: byte[] combineBuffers(java.util.Queue,int)>(r1, 2147483639);

        return r2;

     label8:
        $r3 = new java.lang.OutOfMemoryError;

        specialinvoke $r3.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("input is too large to fit in a byte array");

        throw $r3;
    }
}
