public class androidx.work.impl.constraints.controllers.NetworkConnectedController extends androidx.work.impl.constraints.controllers.ConstraintController
{

    public void <init>(android.content.Context, androidx.work.impl.utils.taskexecutor.TaskExecutor)
    {
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r2;
        android.content.Context $r1;
        androidx.work.impl.constraints.trackers.Trackers $r3;
        androidx.work.impl.constraints.trackers.NetworkStateTracker $r4;
        androidx.work.impl.constraints.controllers.NetworkConnectedController r0;

        r0 := @this: androidx.work.impl.constraints.controllers.NetworkConnectedController;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: androidx.work.impl.utils.taskexecutor.TaskExecutor;

        $r3 = staticinvoke <androidx.work.impl.constraints.trackers.Trackers: androidx.work.impl.constraints.trackers.Trackers getInstance(android.content.Context,androidx.work.impl.utils.taskexecutor.TaskExecutor)>($r1, $r2);

        $r4 = virtualinvoke $r3.<androidx.work.impl.constraints.trackers.Trackers: androidx.work.impl.constraints.trackers.NetworkStateTracker getNetworkStateTracker()>();

        specialinvoke r0.<androidx.work.impl.constraints.controllers.ConstraintController: void <init>(androidx.work.impl.constraints.trackers.ConstraintTracker)>($r4);

        return;
    }

    boolean hasConstraint(androidx.work.impl.model.WorkSpec)
    {
        androidx.work.NetworkType $r2, $r3;
        androidx.work.Constraints $r4;
        androidx.work.impl.constraints.controllers.NetworkConnectedController r0;
        androidx.work.impl.model.WorkSpec $r1;

        r0 := @this: androidx.work.impl.constraints.controllers.NetworkConnectedController;

        $r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        $r4 = $r1.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints>;

        $r3 = virtualinvoke $r4.<androidx.work.Constraints: androidx.work.NetworkType getRequiredNetworkType()>();

        $r2 = <androidx.work.NetworkType: androidx.work.NetworkType CONNECTED>;

        if $r3 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean isConstrained(androidx.work.impl.constraints.NetworkState)
    {
        androidx.work.impl.constraints.NetworkState $r1;
        int $i0;
        androidx.work.impl.constraints.controllers.NetworkConnectedController r0;
        boolean $z0;

        r0 := @this: androidx.work.impl.constraints.controllers.NetworkConnectedController;

        $r1 := @parameter0: androidx.work.impl.constraints.NetworkState;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label2;

        $z0 = virtualinvoke $r1.<androidx.work.impl.constraints.NetworkState: boolean isConnected()>();

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r1.<androidx.work.impl.constraints.NetworkState: boolean isValidated()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke $r1.<androidx.work.impl.constraints.NetworkState: boolean isConnected()>();

        $z0 = $z0 ^ 1;

        return $z0;

     label3:
        return 1;
    }

    volatile boolean isConstrained(java.lang.Object)
    {
        androidx.work.impl.constraints.NetworkState $r2;
        java.lang.Object $r1;
        androidx.work.impl.constraints.controllers.NetworkConnectedController r0;
        boolean $z0;

        r0 := @this: androidx.work.impl.constraints.controllers.NetworkConnectedController;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.impl.constraints.NetworkState) $r1;

        $z0 = virtualinvoke r0.<androidx.work.impl.constraints.controllers.NetworkConnectedController: boolean isConstrained(androidx.work.impl.constraints.NetworkState)>($r2);

        return $z0;
    }
}
