public class kotlinx.coroutines.internal.LockFreeLinkedListNode extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _removedRef$FU;
    private volatile java.lang.Object _next;
    private volatile java.lang.Object _prev;
    private volatile java.lang.Object _removedRef;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeLinkedListNode;", class "Ljava/lang/Object;", "_next");

        <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeLinkedListNode;", class "Ljava/lang/Object;", "_prev");

        <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LockFreeLinkedListNode;", class "Ljava/lang/Object;", "_removedRef");

        <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _removedRef$FU> = $r0;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next> = r0;

        r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev> = r0;

        return;
    }

    public static final void access$finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r0, $r1;

        $r0 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        specialinvoke $r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1);

        return;
    }

    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$get_next$FU$p()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;

        r0 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        return r0;
    }

    private final kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.OpDescriptor)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        kotlinx.coroutines.internal.Removed $r8;
        kotlinx.coroutines.internal.OpDescriptor $r1, $r7;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, r4, r5, r6, $r9;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.OpDescriptor;

     label01:
        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

        r5 = r4;

        r6 = null;

     label02:
        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r5);

        if $r3 != r0 goto label05;

        if r4 != r5 goto label03;

        return r5;

     label03:
        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, r4, r5);

        if $z0 != 0 goto label04;

        goto label01;

     label04:
        return r5;

     label05:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean isRemoved()>();

        if $z0 == 0 goto label06;

        return null;

     label06:
        if $r3 != $r1 goto label07;

        return r5;

     label07:
        $z0 = $r3 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 == 0 goto label08;

        $r7 = (kotlinx.coroutines.internal.OpDescriptor) $r3;

        virtualinvoke $r7.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r5);

        goto label01;

     label08:
        $z0 = $r3 instanceof kotlinx.coroutines.internal.Removed;

        if $z0 == 0 goto label11;

        if r6 == null goto label10;

        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $r8 = (kotlinx.coroutines.internal.Removed) $r3;

        $r9 = $r8.<kotlinx.coroutines.internal.Removed: kotlinx.coroutines.internal.LockFreeLinkedListNode ref>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r6, r5, $r9);

        if $z0 != 0 goto label09;

        goto label01;

     label09:
        r5 = r6;

        r6 = null;

        goto label02;

     label10:
        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r5);

        r5 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

        goto label02;

     label11:
        r6 = r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }");

        r5 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

        goto label02;
    }

    private final kotlinx.coroutines.internal.LockFreeLinkedListNode findPrevNonRemoved(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

     label1:
        $z0 = virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean isRemoved()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

        goto label1;
    }

    private final void finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2, $r5;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1, r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

     label1:
        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>();

        if $r3 == $r1 goto label2;

        return;

     label2:
        $r5 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r1, r4, r0);

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean isRemoved()>();

        if $z0 == 0 goto label4;

        specialinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.OpDescriptor)>(null);

        return;

     label3:
        goto label1;

     label4:
        return;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final kotlinx.coroutines.internal.Removed removed()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Removed $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _removedRef$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (kotlinx.coroutines.internal.Removed) $r2;

        if $r3 != null goto label1;

        $r3 = new kotlinx.coroutines.internal.Removed;

        specialinvoke $r3.<kotlinx.coroutines.internal.Removed: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>(r0);

        $r1 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _removedRef$FU>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>(r0, $r3);

     label1:
        return $r3;
    }

    public final void addLast(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1, $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

     label1:
        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1, r0);

        if $z0 == 0 goto label1;

        return;
    }

    public final boolean addLastIf(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlin.jvm.functions.Function0)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1 $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp $r4;
        int $i0;
        kotlin.jvm.functions.Function0 $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1, $r5;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        $r3 = new kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1;

        specialinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlin.jvm.functions.Function0)>($r1, $r2);

        $r4 = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) $r3;

     label1:
        $r5 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $i0 = virtualinvoke $r5.<kotlinx.coroutines.internal.LockFreeLinkedListNode: int tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)>($r1, r0, $r4);

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label3;
            default: goto label2;
        };

     label2:
        goto label1;

     label3:
        return 0;

     label4:
        return 1;
    }

    public final boolean addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1, $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, r0);

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, r0, $r2, $r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r2);

        return 1;
    }

    public final boolean addOneIfEmpty(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, r0);

        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, r0);

     label1:
        $r3 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>();

        if $r3 == r0 goto label2;

        return 0;

     label2:
        r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, r0, $r1);

        if $z0 == 0 goto label1;

        specialinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode)>(r0);

        return 1;
    }

    public final java.lang.Object getNext()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;
        boolean $z0;
        kotlinx.coroutines.internal.OpDescriptor $r3;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        r1 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

     label1:
        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $z0 = $r2 instanceof kotlinx.coroutines.internal.OpDescriptor;

        if $z0 != 0 goto label2;

        return $r2;

     label2:
        $r3 = (kotlinx.coroutines.internal.OpDescriptor) $r2;

        virtualinvoke $r3.<kotlinx.coroutines.internal.OpDescriptor: java.lang.Object perform(java.lang.Object)>(r0);

        goto label1;
    }

    public final kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>();

        r0 = staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)>($r1);

        return r0;
    }

    public final kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.OpDescriptor)>(null);

        if $r1 != null goto label1;

        $r2 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r1 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r3;

        r0 = specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode findPrevNonRemoved(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1);

        return r0;

     label1:
        return $r1;
    }

    public boolean isRemoved()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>();

        $z0 = $r1 instanceof kotlinx.coroutines.internal.Removed;

        return $z0;
    }

    public final kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp makeCondAddOp(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlin.jvm.functions.Function0)
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1 $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp $r4;
        kotlin.jvm.functions.Function0 $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        $r3 = new kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1;

        specialinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlin.jvm.functions.Function0)>($r1, $r2);

        $r4 = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) $r3;

        return $r4;
    }

    protected kotlinx.coroutines.internal.LockFreeLinkedListNode nextIfRemoved()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Removed $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>();

        $z0 = $r1 instanceof kotlinx.coroutines.internal.Removed;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.internal.Removed) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 == null goto label3;

        r0 = $r2.<kotlinx.coroutines.internal.Removed: kotlinx.coroutines.internal.LockFreeLinkedListNode ref>;

        return r0;

     label3:
        return null;
    }

    public boolean remove()
    {
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        r0 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode removeOrNext()>();

        if r0 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final kotlinx.coroutines.internal.LockFreeLinkedListNode removeOrNext()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Removed r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, r3;
        boolean z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

     label1:
        $r1 = virtualinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()>();

        z0 = $r1 instanceof kotlinx.coroutines.internal.Removed;

        if z0 == 0 goto label2;

        r2 = (kotlinx.coroutines.internal.Removed) $r1;

        r0 = r2.<kotlinx.coroutines.internal.Removed: kotlinx.coroutines.internal.LockFreeLinkedListNode ref>;

        return r0;

     label2:
        if $r1 != r0 goto label3;

        r0 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        return r0;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }");

        r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        r2 = specialinvoke r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed removed()>();

        $r4 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r1, r2);

        if z0 == 0 goto label1;

        r0 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        specialinvoke r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.OpDescriptor)>(null);

        return null;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$toString$1 $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = new kotlinx.coroutines.internal.LockFreeLinkedListNode$toString$1;

        specialinvoke $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode$toString$1: void <init>(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r3 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public final int tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp $r3;
        java.lang.Object $r5;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1, $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r3 := @parameter2: kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp;

        $r4 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, r0);

        $r4 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode oldNext> = $r2;

        $r4 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r2, $r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: java.lang.Object perform(java.lang.Object)>(r0);

        if $r5 != null goto label2;

        return 1;

     label2:
        return 2;
    }

    public final void validateNode$kotlinx_coroutines_core(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        java.lang.AssertionError $r5;
        java.lang.Object $r4;
        kotlinx.coroutines.internal.LockFreeLinkedListNode r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z1 = 1;

        if $z0 == 0 goto label4;

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r1 != $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label8;

        $r3 = <kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r2 != $r4 goto label5;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label7;

        return;

     label7:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label8:
        return;
    }
}
