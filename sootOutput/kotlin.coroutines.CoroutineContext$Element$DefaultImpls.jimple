public final class kotlin.coroutines.CoroutineContext$Element$DefaultImpls extends java.lang.Object
{

    public static java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlin.coroutines.CoroutineContext$Element $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r1 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r0);

        return $r1;
    }

    public static kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CoroutineContext$Element $r0;
        kotlin.coroutines.CoroutineContext$Key $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        $r2 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type E of kotlin.coroutines.CoroutineContext.Element.get");

        return $r0;

     label1:
        return null;
    }

    public static kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.EmptyCoroutineContext $r3;
        kotlin.coroutines.CoroutineContext$Element $r0;
        kotlin.coroutines.CoroutineContext$Key $r1, $r2;
        kotlin.coroutines.CoroutineContext $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        $r2 = interfaceinvoke $r0.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        $r3 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r3;

        return $r4;

     label1:
        $r4 = (kotlin.coroutines.CoroutineContext) $r0;

        return $r4;
    }

    public static kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element, kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r1, $r2;
        kotlin.coroutines.CoroutineContext$Element $r0;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext$Element;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        $r2 = (kotlin.coroutines.CoroutineContext) $r0;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)>($r2, $r1);

        return $r1;
    }
}
