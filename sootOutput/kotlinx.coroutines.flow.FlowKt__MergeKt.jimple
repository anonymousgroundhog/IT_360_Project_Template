final class kotlinx.coroutines.flow.FlowKt__MergeKt extends java.lang.Object
{
    private static final int DEFAULT_CONCURRENCY;

    static void <clinit>()
    {
        int $i0;

        $i0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int systemProp(java.lang.String,int,int,int)>("kotlinx.coroutines.flow.defaultConcurrency", 16, 1, 2147483647);

        <kotlinx.coroutines.flow.FlowKt__MergeKt: int DEFAULT_CONCURRENCY> = $i0;

        return;
    }

    public static final kotlinx.coroutines.flow.Flow flatMapConcat(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapConcat$$inlined$map$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapConcat$$inlined$map$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapConcat$$inlined$map$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flattenConcat(kotlinx.coroutines.flow.Flow)>($r0);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow flatMapLatest(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapLatest$1 $r2;
        kotlin.jvm.functions.Function3 $r3;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapLatest$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapLatest$1: void <init>(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r1, null);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow transformLatest(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3)>($r0, $r3);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow flatMapMerge(kotlinx.coroutines.flow.Flow, int, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        int $i0;
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1 $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flattenMerge(kotlinx.coroutines.flow.Flow,int)>($r0, $i0);

        return $r0;
    }

    public static kotlinx.coroutines.flow.Flow flatMapMerge$default(kotlinx.coroutines.flow.Flow, int, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.Flow $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r0;

        $r2 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $r0 := @parameter2: kotlin.jvm.functions.Function2;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = <kotlinx.coroutines.flow.FlowKt__MergeKt: int DEFAULT_CONCURRENCY>;

     label1:
        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flatMapMerge(kotlinx.coroutines.flow.Flow,int,kotlin.jvm.functions.Function2)>($r2, $i0, $r0);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow flattenConcat(kotlinx.coroutines.flow.Flow)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__MergeKt$flattenConcat$$inlined$unsafeFlow$1 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 = new kotlinx.coroutines.flow.FlowKt__MergeKt$flattenConcat$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__MergeKt$flattenConcat$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.flow.Flow)>($r0);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow flattenMerge(kotlinx.coroutines.flow.Flow, int)
    {
        kotlinx.coroutines.flow.Flow $r0;
        int $i0;
        kotlinx.coroutines.flow.internal.ChannelFlowMerge $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        if $i0 != 1 goto label3;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flattenConcat(kotlinx.coroutines.flow.Flow)>($r0);

        return $r0;

     label3:
        $r1 = new kotlinx.coroutines.flow.internal.ChannelFlowMerge;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelFlowMerge: void <init>(kotlinx.coroutines.flow.Flow,int,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, $i0, null, 0, null, 28, null);

        $r0 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r0;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected positive concurrency level, but had ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static kotlinx.coroutines.flow.Flow flattenMerge$default(kotlinx.coroutines.flow.Flow, int, int, java.lang.Object)
    {
        kotlinx.coroutines.flow.Flow $r1;
        int $i0, $i1;
        java.lang.Object $r0;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = <kotlinx.coroutines.flow.FlowKt__MergeKt: int DEFAULT_CONCURRENCY>;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flattenMerge(kotlinx.coroutines.flow.Flow,int)>($r1, $i0);

        return $r1;
    }

    public static final int getDEFAULT_CONCURRENCY()
    {
        int i0;

        i0 = <kotlinx.coroutines.flow.FlowKt__MergeKt: int DEFAULT_CONCURRENCY>;

        return i0;
    }

    public static void getDEFAULT_CONCURRENCY$annotations()
    {
        return;
    }

    public static void getDEFAULT_CONCURRENCY_PROPERTY_NAME$annotations()
    {
        return;
    }

    public static final kotlinx.coroutines.flow.Flow mapLatest(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.FlowKt__MergeKt$mapLatest$1 $r2;
        kotlin.jvm.functions.Function3 $r3;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = new kotlinx.coroutines.flow.FlowKt__MergeKt$mapLatest$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.FlowKt__MergeKt$mapLatest$1: void <init>(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r1, null);

        $r3 = (kotlin.jvm.functions.Function3) $r2;

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow transformLatest(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function3)>($r0, $r3);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.Flow merge(java.lang.Iterable)
    {
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = new kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge: void <init>(java.lang.Iterable,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, null, 0, null, 14, null);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

    public static final transient kotlinx.coroutines.flow.Flow merge(kotlinx.coroutines.flow.Flow[])
    {
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.Flow[] $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow[];

        $r1 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Iterable asIterable(java.lang.Object[])>($r0);

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow merge(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow transformLatest(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        $r2 = new kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest;

        specialinvoke $r2.<kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest: void <init>(kotlin.jvm.functions.Function3,kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, $r0, null, 0, null, 28, null);

        $r0 = (kotlinx.coroutines.flow.Flow) $r2;

        return $r0;
    }
}
