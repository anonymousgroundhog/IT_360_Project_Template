public final class com.google.common.collect.HashBiMap extends java.util.AbstractMap implements com.google.common.collect.BiMap, java.io.Serializable
{
    private static final int ABSENT;
    private static final int ENDPOINT;
    private transient java.util.Set entrySet;
    private transient int firstInInsertionOrder;
    private transient int[] hashTableKToV;
    private transient int[] hashTableVToK;
    private transient com.google.common.collect.BiMap inverse;
    private transient java.util.Set keySet;
    transient java.lang.Object[] keys;
    private transient int lastInInsertionOrder;
    transient int modCount;
    private transient int[] nextInBucketKToV;
    private transient int[] nextInBucketVToK;
    private transient int[] nextInInsertionOrder;
    private transient int[] prevInInsertionOrder;
    transient int size;
    private transient java.util.Set valueSet;
    transient java.lang.Object[] values;

    private void <init>(int)
    {
        int $i0;
        com.google.common.collect.HashBiMap r0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void init(int)>($i0);

        return;
    }

    static int access$000(com.google.common.collect.HashBiMap)
    {
        int i0;
        com.google.common.collect.HashBiMap $r0;

        $r0 := @parameter0: com.google.common.collect.HashBiMap;

        i0 = $r0.<com.google.common.collect.HashBiMap: int firstInInsertionOrder>;

        return i0;
    }

    static int[] access$100(com.google.common.collect.HashBiMap)
    {
        com.google.common.collect.HashBiMap $r0;
        int[] r1;

        $r0 := @parameter0: com.google.common.collect.HashBiMap;

        r1 = $r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        return r1;
    }

    static void access$200(com.google.common.collect.HashBiMap, int, java.lang.Object, boolean)
    {
        com.google.common.collect.HashBiMap $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.HashBiMap;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        $z0 := @parameter3: boolean;

        specialinvoke $r0.<com.google.common.collect.HashBiMap: void replaceValueInEntry(int,java.lang.Object,boolean)>($i0, $r1, $z0);

        return;
    }

    static com.google.common.collect.BiMap access$302(com.google.common.collect.HashBiMap, com.google.common.collect.BiMap)
    {
        com.google.common.collect.BiMap $r1;
        com.google.common.collect.HashBiMap $r0;

        $r0 := @parameter0: com.google.common.collect.HashBiMap;

        $r1 := @parameter1: com.google.common.collect.BiMap;

        $r0.<com.google.common.collect.HashBiMap: com.google.common.collect.BiMap inverse> = $r1;

        return $r1;
    }

    static void access$400(com.google.common.collect.HashBiMap, int, java.lang.Object, boolean)
    {
        com.google.common.collect.HashBiMap $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.HashBiMap;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        $z0 := @parameter3: boolean;

        specialinvoke $r0.<com.google.common.collect.HashBiMap: void replaceKeyInEntry(int,java.lang.Object,boolean)>($i0, $r1, $z0);

        return;
    }

    private int bucket(int)
    {
        com.google.common.collect.HashBiMap r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

        $i0 = $i1 & $i0;

        return $i0;
    }

    public static com.google.common.collect.HashBiMap create()
    {
        com.google.common.collect.HashBiMap $r0;

        $r0 = staticinvoke <com.google.common.collect.HashBiMap: com.google.common.collect.HashBiMap create(int)>(16);

        return $r0;
    }

    public static com.google.common.collect.HashBiMap create(int)
    {
        int $i0;
        com.google.common.collect.HashBiMap $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.collect.HashBiMap;

        specialinvoke $r0.<com.google.common.collect.HashBiMap: void <init>(int)>($i0);

        return $r0;
    }

    public static com.google.common.collect.HashBiMap create(java.util.Map)
    {
        int $i0;
        com.google.common.collect.HashBiMap $r1;
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $r1 = staticinvoke <com.google.common.collect.HashBiMap: com.google.common.collect.HashBiMap create(int)>($i0);

        virtualinvoke $r1.<com.google.common.collect.HashBiMap: void putAll(java.util.Map)>(r0);

        return $r1;
    }

    private static int[] createFilledWithAbsent(int)
    {
        int $i0;
        int[] r0;

        $i0 := @parameter0: int;

        r0 = newarray (int)[$i0];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, -1);

        return r0;
    }

    private void deleteFromTableKToV(int, int)
    {
        java.lang.Object[] r3;
        java.lang.AssertionError $r9;
        com.google.common.collect.HashBiMap r0;
        int[] r1, r2;
        int $i0, $i1, i2;
        java.lang.Object r4;
        java.lang.StringBuilder $r7, $r8;
        java.lang.String $r5, $r6;
        boolean z0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        $i1 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>($i1);

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        i2 = r1[$i1];

        if i2 != $i0 goto label3;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        r2 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i2 = r2[$i0];

        r1[$i1] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r1[$i0] = -1;

        return;

     label3:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        $i1 = r1[$i1];

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i2 = r1[$i1];

     label4:
        if i2 == -1 goto label6;

        if i2 != $i0 goto label5;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r2 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i2 = r2[$i0];

        r1[$i1] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r1[$i0] = -1;

        return;

     label5:
        $i1 = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i2 = r1[i2];

        goto label4;

     label6:
        $r9 = new java.lang.AssertionError;

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        r4 = r3[$i0];

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 32;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected to find entry with key ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r9;
    }

    private void deleteFromTableVToK(int, int)
    {
        java.lang.Object[] r3;
        java.lang.AssertionError $r9;
        com.google.common.collect.HashBiMap r0;
        int[] r1, r2;
        int $i0, $i1, i2;
        java.lang.Object r4;
        java.lang.StringBuilder $r7, $r8;
        java.lang.String $r5, $r6;
        boolean z0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        $i1 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>($i1);

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        i2 = r1[$i1];

        if i2 != $i0 goto label3;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        r2 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        i2 = r2[$i0];

        r1[$i1] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r1[$i0] = -1;

        return;

     label3:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        $i1 = r1[$i1];

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        i2 = r1[$i1];

     label4:
        if i2 == -1 goto label6;

        if i2 != $i0 goto label5;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r2 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        i2 = r2[$i0];

        r1[$i1] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r1[$i0] = -1;

        return;

     label5:
        $i1 = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        i2 = r1[i2];

        goto label4;

     label6:
        $r9 = new java.lang.AssertionError;

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        r4 = r3[$i0];

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 34;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected to find entry with value ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r9;
    }

    private void ensureCapacity(int)
    {
        java.lang.Object[] r2;
        com.google.common.collect.HashBiMap r0;
        int[] r1, r4;
        int $i0, i1, i2;
        java.lang.Object r3;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i1 = lengthof r1;

        if i1 >= $i0 goto label1;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i1 = lengthof r1;

        i1 = staticinvoke <com.google.common.collect.ImmutableCollection$Builder: int expandedCapacity(int,int)>(i1, $i0);

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i1);

        r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys> = r2;

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i1);

        r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values> = r2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r1 = staticinvoke <com.google.common.collect.HashBiMap: int[] expandAndFillWithAbsent(int[],int)>(r1, i1);

        r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV> = r1;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r1 = staticinvoke <com.google.common.collect.HashBiMap: int[] expandAndFillWithAbsent(int[],int)>(r1, i1);

        r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK> = r1;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        r1 = staticinvoke <com.google.common.collect.HashBiMap: int[] expandAndFillWithAbsent(int[],int)>(r1, i1);

        r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder> = r1;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        r1 = staticinvoke <com.google.common.collect.HashBiMap: int[] expandAndFillWithAbsent(int[],int)>(r1, i1);

        r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder> = r1;

     label1:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        i1 = lengthof r1;

        if i1 >= $i0 goto label3;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int closedTableSize(int,double)>($i0, 1.0);

        r1 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i0);

        r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV> = r1;

        r1 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i0);

        r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK> = r1;

        $i0 = 0;

     label2:
        i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        if $i0 >= i1 goto label3;

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        r3 = r2[$i0];

        i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r3);

        i1 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>(i1);

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r4 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        i2 = r4[i1];

        r1[$i0] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        r1[i1] = $i0;

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        r3 = r2[$i0];

        i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r3);

        i1 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>(i1);

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r4 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        i2 = r4[i1];

        r1[$i0] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        r1[i1] = $i0;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }

    private static int[] expandAndFillWithAbsent(int[], int)
    {
        int $i0, i1;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        i1 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i0);

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r0, i1, $i0, -1);

        return $r0;
    }

    private void insertIntoTableKToV(int, int)
    {
        com.google.common.collect.HashBiMap r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        $i1 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>($i1);

        $r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        $i2 = $r2[$i1];

        $r1[$i0] = $i2;

        $r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        $r1[$i1] = $i0;

        return;
    }

    private void insertIntoTableVToK(int, int)
    {
        com.google.common.collect.HashBiMap r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        $i1 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>($i1);

        $r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        $i2 = $r2[$i1];

        $r1[$i0] = $i2;

        $r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        $r1[$i1] = $i0;

        return;
    }

    private void moveEntryToIndex(int, int)
    {
        java.lang.Object[] r2;
        com.google.common.collect.HashBiMap r0;
        int[] r1, r5;
        int $i0, $i1, i2, i3;
        java.lang.Object r3, r4;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != $i1 goto label1;

        return;

     label1:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        i2 = r1[$i0];

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        i3 = r1[$i0];

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>(i2, $i1);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i1, i3);

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        r3 = r2[$i0];

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        r4 = r2[$i0];

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        r2[$i1] = r3;

        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        r2[$i1] = r4;

        i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r3);

        i2 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>(i2);

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        i3 = r1[i2];

        if i3 != $i0 goto label2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        r1[i2] = $i1;

        goto label4;

     label2:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        i2 = r1[i2];

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i3 = r1[i2];

     label3:
        if i3 != $i0 goto label9;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r1[i2] = $i1;

     label4:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r5 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i2 = r5[$i0];

        r1[$i1] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        r1[$i0] = -1;

        i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r4);

        i2 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>(i2);

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        i3 = r1[i2];

        if i3 != $i0 goto label5;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        r1[i2] = $i1;

        goto label7;

     label5:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        i2 = r1[i2];

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        i3 = r1[i2];

     label6:
        if i3 != $i0 goto label8;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r1[i2] = $i1;

     label7:
        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r5 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        i2 = r5[$i0];

        r1[$i1] = i2;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        r1[$i0] = -1;

        return;

     label8:
        i2 = i3;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        i3 = r1[i3];

        goto label6;

     label9:
        i2 = i3;

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        i3 = r1[i3];

        goto label3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream $r1;
        int $i0;
        com.google.common.collect.HashBiMap r0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = staticinvoke <com.google.common.collect.Serialization: int readCount(java.io.ObjectInputStream)>($r1);

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void init(int)>(16);

        staticinvoke <com.google.common.collect.Serialization: void populateMap(java.util.Map,java.io.ObjectInputStream,int)>(r0, $r1, $i0);

        return;
    }

    private void removeEntry(int, int, int)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r2;
        int[] r1;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void deleteFromTableKToV(int,int)>($i0, $i1);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void deleteFromTableVToK(int,int)>($i0, $i2);

        r1 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        $i1 = r1[$i0];

        r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        $i2 = r1[$i0];

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i1, $i2);

        $i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i1 = $i1 - 1;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void moveEntryToIndex(int,int)>($i1, $i0);

        $r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i0 = $i0 - 1;

        $r2[$i0] = null;

        $r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i0 = $i0 - 1;

        $r2[$i0] = null;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i0 = $i0 - 1;

        r0.<com.google.common.collect.HashBiMap: int size> = $i0;

        $i0 = r0.<com.google.common.collect.HashBiMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.HashBiMap: int modCount> = $i0;

        return;
    }

    private void replaceKeyInEntry(int, java.lang.Object, boolean)
    {
        java.lang.Object[] $r6;
        int[] r3;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r4, $r5;
        boolean $z0, z1;
        java.lang.IllegalArgumentException $r9;
        com.google.common.collect.HashBiMap r0;
        java.lang.Object r1, $r7;
        java.lang.StringBuilder $r2, $r8;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        if $i0 == -1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z1);

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        $i2 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByKey(java.lang.Object,int)>(r1, $i1);

        i3 = r0.<com.google.common.collect.HashBiMap: int lastInInsertionOrder>;

        i4 = -2;

        if $i2 == -1 goto label4;

        if $z0 == 0 goto label3;

        r3 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        i3 = r3[$i2];

        r3 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        i4 = r3[$i2];

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void removeEntryKeyHashKnown(int,int)>($i2, $i1);

        $i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        if $i0 != $i1 goto label4;

        $i0 = $i2;

        goto label4;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 28;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key already present in map: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r9;

     label4:
        if i3 != $i0 goto label5;

        r3 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        i3 = r3[$i0];

        goto label6;

     label5:
        $i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        if i3 != $i1 goto label6;

        i3 = $i2;

     label6:
        if i4 != $i0 goto label7;

        r3 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        i4 = r3[$i0];

        goto label8;

     label7:
        $i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        if i4 != $i1 goto label8;

        i4 = $i2;

     label8:
        r3 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        $i2 = r3[$i0];

        r3 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        $i1 = r3[$i0];

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i2, $i1);

        $r6 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $r7 = $r6[$i0];

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r7);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void deleteFromTableKToV(int,int)>($i0, $i2);

        $r6 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $r6[$i0] = r1;

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void insertIntoTableKToV(int,int)>($i0, $i2);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>(i3, $i0);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i0, i4);

        return;
    }

    private void replaceValueInEntry(int, java.lang.Object, boolean)
    {
        java.lang.Object[] $r5;
        java.lang.IllegalArgumentException $r8;
        com.google.common.collect.HashBiMap r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1, $r6;
        java.lang.StringBuilder $r2, $r7;
        java.lang.String $r3, $r4;
        boolean $z0, z1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        if $i0 == -1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z1);

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        $i2 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByValue(java.lang.Object,int)>(r1, $i1);

        if $i2 == -1 goto label4;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void removeEntryValueHashKnown(int,int)>($i2, $i1);

        $i3 = r0.<com.google.common.collect.HashBiMap: int size>;

        if $i0 != $i3 goto label4;

        $i0 = $i2;

        goto label4;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 30;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value already present in map: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r8;

     label4:
        $r5 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $r6 = $r5[$i0];

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r6);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void deleteFromTableVToK(int,int)>($i0, $i2);

        $r5 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $r5[$i0] = r1;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void insertIntoTableVToK(int,int)>($i0, $i1);

        return;
    }

    private void setSucceeds(int, int)
    {
        com.google.common.collect.HashBiMap r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != -2 goto label1;

        r0.<com.google.common.collect.HashBiMap: int firstInInsertionOrder> = $i1;

        goto label2;

     label1:
        $r1 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        $r1[$i0] = $i1;

     label2:
        if $i1 != -2 goto label3;

        r0.<com.google.common.collect.HashBiMap: int lastInInsertionOrder> = $i0;

        return;

     label3:
        $r1 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        $r1[$i1] = $i0;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.common.collect.HashBiMap r0;
        java.io.ObjectOutputStream $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        staticinvoke <com.google.common.collect.Serialization: void writeMap(java.util.Map,java.io.ObjectOutputStream)>(r0, $r1);

        return;
    }

    public void clear()
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r1;
        int[] $r2;
        int $i0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r1, 0, $i0, null);

        $r1 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r1, 0, $i0, null);

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r2, -1);

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r2, -1);

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r2, 0, $i0, -1);

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r2, 0, $i0, -1);

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r2, 0, $i0, -1);

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r2, 0, $i0, -1);

        r0.<com.google.common.collect.HashBiMap: int size> = 0;

        r0.<com.google.common.collect.HashBiMap: int firstInInsertionOrder> = -2;

        r0.<com.google.common.collect.HashBiMap: int lastInInsertionOrder> = -2;

        $i0 = r0.<com.google.common.collect.HashBiMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.HashBiMap: int modCount> = $i0;

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        int $i0;
        com.google.common.collect.HashBiMap r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByKey(java.lang.Object)>($r1);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        int $i0;
        com.google.common.collect.HashBiMap r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByValue(java.lang.Object)>($r1);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set entrySet()
    {
        java.util.Set r1;
        com.google.common.collect.HashBiMap r0;
        com.google.common.collect.HashBiMap$EntrySet $r2;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 = r0.<com.google.common.collect.HashBiMap: java.util.Set entrySet>;

        if r1 != null goto label1;

        $r2 = new com.google.common.collect.HashBiMap$EntrySet;

        specialinvoke $r2.<com.google.common.collect.HashBiMap$EntrySet: void <init>(com.google.common.collect.HashBiMap)>(r0);

        r0.<com.google.common.collect.HashBiMap: java.util.Set entrySet> = $r2;

        return $r2;

     label1:
        return r1;
    }

    int findEntry(java.lang.Object, int, int[], int[], java.lang.Object[])
    {
        java.lang.Object[] $r4;
        com.google.common.collect.HashBiMap r0;
        int[] $r2, $r3;
        int $i0;
        java.lang.Object $r1, $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r2 := @parameter2: int[];

        $r3 := @parameter3: int[];

        $r4 := @parameter4: java.lang.Object[];

        $i0 = specialinvoke r0.<com.google.common.collect.HashBiMap: int bucket(int)>($i0);

        $i0 = $r2[$i0];

     label1:
        if $i0 == -1 goto label3;

        $r5 = $r4[$i0];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r1);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $r3[$i0];

        goto label1;

     label3:
        return -1;
    }

    int findEntryByKey(java.lang.Object)
    {
        int $i0;
        com.google.common.collect.HashBiMap r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r1);

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByKey(java.lang.Object,int)>($r1, $i0);

        return $i0;
    }

    int findEntryByKey(java.lang.Object, int)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r4;
        int[] $r2, $r3;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV>;

        $r3 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV>;

        $r4 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntry(java.lang.Object,int,int[],int[],java.lang.Object[])>($r1, $i0, $r2, $r3, $r4);

        return $i0;
    }

    int findEntryByValue(java.lang.Object)
    {
        int $i0;
        com.google.common.collect.HashBiMap r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r1);

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByValue(java.lang.Object,int)>($r1, $i0);

        return $i0;
    }

    int findEntryByValue(java.lang.Object, int)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r4;
        int[] $r2, $r3;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r2 = r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK>;

        $r3 = r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK>;

        $r4 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntry(java.lang.Object,int,int[],int[],java.lang.Object[])>($r1, $i0, $r2, $r3, $r4);

        return $i0;
    }

    public java.lang.Object forcePut(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object r1, r2;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r1 = virtualinvoke r0.<com.google.common.collect.HashBiMap: java.lang.Object put(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 1);

        return r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByKey(java.lang.Object)>($r1);

        if $i0 != -1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $r1 = $r2[$i0];

        return $r1;
    }

    java.lang.Object getInverse(java.lang.Object)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByValue(java.lang.Object)>($r1);

        if $i0 != -1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $r1 = $r2[$i0];

        return $r1;
    }

    void init(int)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r1;
        int[] $r2;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "expectedSize");

        $i1 = staticinvoke <com.google.common.collect.Hashing: int closedTableSize(int,double)>($i0, 1.0);

        r0.<com.google.common.collect.HashBiMap: int size> = 0;

        $r1 = newarray (java.lang.Object)[$i0];

        r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys> = $r1;

        $r1 = newarray (java.lang.Object)[$i0];

        r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values> = $r1;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i1);

        r0.<com.google.common.collect.HashBiMap: int[] hashTableKToV> = $r2;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i1);

        r0.<com.google.common.collect.HashBiMap: int[] hashTableVToK> = $r2;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i0);

        r0.<com.google.common.collect.HashBiMap: int[] nextInBucketKToV> = $r2;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i0);

        r0.<com.google.common.collect.HashBiMap: int[] nextInBucketVToK> = $r2;

        r0.<com.google.common.collect.HashBiMap: int firstInInsertionOrder> = -2;

        r0.<com.google.common.collect.HashBiMap: int lastInInsertionOrder> = -2;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i0);

        r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder> = $r2;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: int[] createFilledWithAbsent(int)>($i0);

        r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder> = $r2;

        return;
    }

    public com.google.common.collect.BiMap inverse()
    {
        com.google.common.collect.BiMap r1;
        com.google.common.collect.HashBiMap r0;
        com.google.common.collect.HashBiMap$Inverse $r2;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 = r0.<com.google.common.collect.HashBiMap: com.google.common.collect.BiMap inverse>;

        if r1 != null goto label1;

        $r2 = new com.google.common.collect.HashBiMap$Inverse;

        specialinvoke $r2.<com.google.common.collect.HashBiMap$Inverse: void <init>(com.google.common.collect.HashBiMap)>(r0);

        r0.<com.google.common.collect.HashBiMap: com.google.common.collect.BiMap inverse> = $r2;

        return $r2;

     label1:
        return r1;
    }

    public java.util.Set keySet()
    {
        com.google.common.collect.HashBiMap$KeySet $r2;
        java.util.Set r1;
        com.google.common.collect.HashBiMap r0;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 = r0.<com.google.common.collect.HashBiMap: java.util.Set keySet>;

        if r1 != null goto label1;

        $r2 = new com.google.common.collect.HashBiMap$KeySet;

        specialinvoke $r2.<com.google.common.collect.HashBiMap$KeySet: void <init>(com.google.common.collect.HashBiMap)>(r0);

        r0.<com.google.common.collect.HashBiMap: java.util.Set keySet> = $r2;

        return $r2;

     label1:
        return r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object r1, r2;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r1 = virtualinvoke r0.<com.google.common.collect.HashBiMap: java.lang.Object put(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 0);

        return r1;
    }

    java.lang.Object put(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object[] r3;
        com.google.common.collect.HashBiMap r0;
        int $i0, $i1, $i2;
        java.lang.Object r1, r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        $i1 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByKey(java.lang.Object,int)>(r1, $i0);

        if $i1 == -1 goto label2;

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        r1 = r3[$i1];

        $z1 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z1 == 0 goto label1;

        return r2;

     label1:
        specialinvoke r0.<com.google.common.collect.HashBiMap: void replaceValueInEntry(int,java.lang.Object,boolean)>($i1, r2, $z0);

        return r1;

     label2:
        $i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r2);

        $i2 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByValue(java.lang.Object,int)>(r2, $i1);

        if $z0 == 0 goto label3;

        if $i2 == -1 goto label6;

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void removeEntryValueHashKnown(int,int)>($i2, $i1);

        goto label6;

     label3:
        if $i2 != -1 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Value already present: %s", r2);

     label6:
        $i2 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i2 = $i2 + 1;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void ensureCapacity(int)>($i2);

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $i2 = r0.<com.google.common.collect.HashBiMap: int size>;

        r3[$i2] = r1;

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $i2 = r0.<com.google.common.collect.HashBiMap: int size>;

        r3[$i2] = r2;

        $i2 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void insertIntoTableKToV(int,int)>($i2, $i0);

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void insertIntoTableVToK(int,int)>($i0, $i1);

        $i0 = r0.<com.google.common.collect.HashBiMap: int lastInInsertionOrder>;

        $i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i0, $i1);

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i0, -2);

        $i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.HashBiMap: int size> = $i0;

        $i0 = r0.<com.google.common.collect.HashBiMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.HashBiMap: int modCount> = $i0;

        return null;
    }

    java.lang.Object putInverse(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object[] r3;
        com.google.common.collect.HashBiMap r0;
        int[] r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1, r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        $i1 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByValue(java.lang.Object,int)>(r1, $i0);

        if $i1 == -1 goto label2;

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        r1 = r3[$i1];

        $z1 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z1 == 0 goto label1;

        return r2;

     label1:
        specialinvoke r0.<com.google.common.collect.HashBiMap: void replaceKeyInEntry(int,java.lang.Object,boolean)>($i1, r2, $z0);

        return r1;

     label2:
        $i1 = r0.<com.google.common.collect.HashBiMap: int lastInInsertionOrder>;

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r2);

        $i3 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByKey(java.lang.Object,int)>(r2, $i2);

        if $z0 == 0 goto label3;

        if $i3 == -1 goto label6;

        r4 = r0.<com.google.common.collect.HashBiMap: int[] prevInInsertionOrder>;

        $i1 = r4[$i3];

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void removeEntryKeyHashKnown(int,int)>($i3, $i2);

        goto label6;

     label3:
        if $i3 != -1 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Key already present: %s", r2);

     label6:
        $i3 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i3 = $i3 + 1;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void ensureCapacity(int)>($i3);

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $i3 = r0.<com.google.common.collect.HashBiMap: int size>;

        r3[$i3] = r2;

        r3 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $i3 = r0.<com.google.common.collect.HashBiMap: int size>;

        r3[$i3] = r1;

        $i3 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void insertIntoTableKToV(int,int)>($i3, $i2);

        $i2 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void insertIntoTableVToK(int,int)>($i2, $i0);

        if $i1 != -2 goto label7;

        $i0 = r0.<com.google.common.collect.HashBiMap: int firstInInsertionOrder>;

        goto label8;

     label7:
        r4 = r0.<com.google.common.collect.HashBiMap: int[] nextInInsertionOrder>;

        $i0 = r4[$i1];

     label8:
        $i2 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i1, $i2);

        $i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        specialinvoke r0.<com.google.common.collect.HashBiMap: void setSucceeds(int,int)>($i1, $i0);

        $i1 = r0.<com.google.common.collect.HashBiMap: int size>;

        $i1 = $i1 + 1;

        r0.<com.google.common.collect.HashBiMap: int size> = $i1;

        $i1 = r0.<com.google.common.collect.HashBiMap: int modCount>;

        $i1 = $i1 + 1;

        r0.<com.google.common.collect.HashBiMap: int modCount> = $i1;

        return null;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] r2;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r1);

        $i1 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByKey(java.lang.Object,int)>($r1, $i0);

        if $i1 != -1 goto label1;

        return null;

     label1:
        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $r1 = r2[$i1];

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void removeEntryKeyHashKnown(int,int)>($i1, $i0);

        return $r1;
    }

    void removeEntry(int)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $r2 = $r1[$i0];

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r2);

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void removeEntryKeyHashKnown(int,int)>($i0, $i1);

        return;
    }

    void removeEntryKeyHashKnown(int, int)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] values>;

        $r2 = $r1[$i0];

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r2);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void removeEntry(int,int,int)>($i0, $i1, $i2);

        return;
    }

    void removeEntryValueHashKnown(int, int)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.HashBiMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $r2 = $r1[$i0];

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r2);

        specialinvoke r0.<com.google.common.collect.HashBiMap: void removeEntry(int,int,int)>($i0, $i2, $i1);

        return;
    }

    java.lang.Object removeInverse(java.lang.Object)
    {
        com.google.common.collect.HashBiMap r0;
        java.lang.Object[] r2;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r1);

        $i1 = virtualinvoke r0.<com.google.common.collect.HashBiMap: int findEntryByValue(java.lang.Object,int)>($r1, $i0);

        if $i1 != -1 goto label1;

        return null;

     label1:
        r2 = r0.<com.google.common.collect.HashBiMap: java.lang.Object[] keys>;

        $r1 = r2[$i1];

        virtualinvoke r0.<com.google.common.collect.HashBiMap: void removeEntryValueHashKnown(int,int)>($i1, $i0);

        return $r1;
    }

    public int size()
    {
        int i0;
        com.google.common.collect.HashBiMap r0;

        r0 := @this: com.google.common.collect.HashBiMap;

        i0 = r0.<com.google.common.collect.HashBiMap: int size>;

        return i0;
    }

    public volatile java.util.Collection values()
    {
        java.util.Set $r1;
        com.google.common.collect.HashBiMap r0;

        r0 := @this: com.google.common.collect.HashBiMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.HashBiMap: java.util.Set values()>();

        return $r1;
    }

    public java.util.Set values()
    {
        com.google.common.collect.HashBiMap$ValueSet $r2;
        java.util.Set r1;
        com.google.common.collect.HashBiMap r0;

        r0 := @this: com.google.common.collect.HashBiMap;

        r1 = r0.<com.google.common.collect.HashBiMap: java.util.Set valueSet>;

        if r1 != null goto label1;

        $r2 = new com.google.common.collect.HashBiMap$ValueSet;

        specialinvoke $r2.<com.google.common.collect.HashBiMap$ValueSet: void <init>(com.google.common.collect.HashBiMap)>(r0);

        r0.<com.google.common.collect.HashBiMap: java.util.Set valueSet> = $r2;

        return $r2;

     label1:
        return r1;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.HashBiMap: int ENDPOINT> = -2;

        <com.google.common.collect.HashBiMap: int ABSENT> = -1;

        return;
    }
}
