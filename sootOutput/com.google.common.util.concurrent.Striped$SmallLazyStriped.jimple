class com.google.common.util.concurrent.Striped$SmallLazyStriped extends com.google.common.util.concurrent.Striped$PowerOfTwoStriped
{
    final java.util.concurrent.atomic.AtomicReferenceArray locks;
    final java.lang.ref.ReferenceQueue queue;
    final int size;
    final com.google.common.base.Supplier supplier;

    void <init>(int, com.google.common.base.Supplier)
    {
        com.google.common.util.concurrent.Striped$SmallLazyStriped r0;
        int $i0;
        com.google.common.base.Supplier r1;
        java.lang.ref.ReferenceQueue $r2;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;

        r0 := @this: com.google.common.util.concurrent.Striped$SmallLazyStriped;

        $i0 := @parameter0: int;

        r1 := @parameter1: com.google.common.base.Supplier;

        specialinvoke r0.<com.google.common.util.concurrent.Striped$PowerOfTwoStriped: void <init>(int)>($i0);

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.lang.ref.ReferenceQueue queue> = $r2;

        $i0 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: int mask>;

        if $i0 != -1 goto label1;

        $i0 = 2147483647;

        goto label2;

     label1:
        $i0 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: int mask>;

        $i0 = $i0 + 1;

     label2:
        r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: int size> = $i0;

        $r3 = new java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: int size>;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i0);

        r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.util.concurrent.atomic.AtomicReferenceArray locks> = $r3;

        r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: com.google.common.base.Supplier supplier> = r1;

        return;
    }

    private void drainQueue()
    {
        java.lang.ref.Reference $r2;
        com.google.common.util.concurrent.Striped$SmallLazyStriped r0;
        com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference r4;
        int $i0;
        java.lang.ref.ReferenceQueue r3;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        r0 := @this: com.google.common.util.concurrent.Striped$SmallLazyStriped;

     label1:
        r3 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.lang.ref.ReferenceQueue queue>;

        $r2 = virtualinvoke r3.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label2;

        r4 = (com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference) $r2;

        $r1 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.util.concurrent.atomic.AtomicReferenceArray locks>;

        $i0 = r4.<com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference: int index>;

        staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r1, $i0, r4, null);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object getAt(int)
    {
        com.google.common.util.concurrent.Striped$SmallLazyStriped r0;
        com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference r1, r4;
        com.google.common.base.Supplier r5;
        java.lang.ref.ReferenceQueue $r6;
        java.util.concurrent.atomic.AtomicReferenceArray r2;
        int $i0, i1;
        java.lang.Object $r3, $r7;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Striped$SmallLazyStriped;

        $i0 := @parameter0: int;

        i1 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: int size>;

        if i1 == 2147483647 goto label1;

        i1 = virtualinvoke r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: int size()>();

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, i1);

     label1:
        r2 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.util.concurrent.atomic.AtomicReferenceArray locks>;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        r4 = (com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference) $r3;

        if r4 != null goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r3 = virtualinvoke r4.<com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference: java.lang.Object get()>();

     label3:
        if $r3 == null goto label4;

        return $r3;

     label4:
        r5 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: com.google.common.base.Supplier supplier>;

        $r3 = interfaceinvoke r5.<com.google.common.base.Supplier: java.lang.Object get()>();

        r1 = new com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference;

        $r6 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.lang.ref.ReferenceQueue queue>;

        specialinvoke r1.<com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference: void <init>(java.lang.Object,int,java.lang.ref.ReferenceQueue)>($r3, $i0, $r6);

     label5:
        r2 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.util.concurrent.atomic.AtomicReferenceArray locks>;

        $z0 = staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>(r2, $i0, r4, r1);

        if $z0 != 0 goto label8;

        r2 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: java.util.concurrent.atomic.AtomicReferenceArray locks>;

        $r7 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        r4 = (com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference) $r7;

        if r4 != null goto label6;

        $r7 = null;

        goto label7;

     label6:
        $r7 = virtualinvoke r4.<com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference: java.lang.Object get()>();

     label7:
        if $r7 == null goto label5;

        return $r7;

     label8:
        specialinvoke r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: void drainQueue()>();

        return $r3;
    }

    public int size()
    {
        int i0;
        com.google.common.util.concurrent.Striped$SmallLazyStriped r0;

        r0 := @this: com.google.common.util.concurrent.Striped$SmallLazyStriped;

        i0 = r0.<com.google.common.util.concurrent.Striped$SmallLazyStriped: int size>;

        return i0;
    }
}
