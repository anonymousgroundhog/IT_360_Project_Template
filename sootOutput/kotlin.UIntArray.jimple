public final class kotlin.UIntArray extends java.lang.Object implements java.util.Collection, kotlin.jvm.internal.markers.KMappedMarker
{
    private final int[] storage;

    private void <init>(int[])
    {
        int[] $r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.UIntArray: int[] storage> = $r1;

        return;
    }

    public static final kotlin.UIntArray box-impl(int[])
    {
        int[] $r0;
        kotlin.UIntArray $r1;

        $r0 := @parameter0: int[];

        $r1 = new kotlin.UIntArray;

        specialinvoke $r1.<kotlin.UIntArray: void <init>(int[])>($r0);

        return $r1;
    }

    public static int[] constructor-impl(int)
    {
        int $i0;
        int[] $r0;

        $i0 := @parameter0: int;

        $r0 = newarray (int)[$i0];

        $r0 = staticinvoke <kotlin.UIntArray: int[] constructor-impl(int[])>($r0);

        return $r0;
    }

    public static int[] constructor-impl(int[])
    {
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "storage");

        return $r0;
    }

    public static boolean contains-WZ4Q5Ns(int[], int)
    {
        int $i0;
        int[] $r0;
        boolean $z0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(int[],int)>($r0, $i0);

        return $z0;
    }

    public static boolean containsAll-impl(int[], java.util.Collection)
    {
        java.util.Iterator $r3;
        kotlin.UInt $r5;
        java.util.Collection $r1;
        java.lang.Iterable $r2;
        int[] $r0;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = (java.lang.Iterable) $r1;

        $r1 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof kotlin.UInt;

        if $z0 == 0 goto label3;

        $r5 = (kotlin.UInt) $r4;

        $i0 = virtualinvoke $r5.<kotlin.UInt: int unbox-impl()>();

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(int[],int)>($r0, $i0);

        if $z0 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 != 0 goto label2;

        return 0;

     label5:
        return 1;
    }

    public static boolean equals-impl(int[], java.lang.Object)
    {
        int[] $r0, $r3;
        java.lang.Object $r1;
        kotlin.UIntArray $r2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof kotlin.UIntArray;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (kotlin.UIntArray) $r1;

        $r3 = virtualinvoke $r2.<kotlin.UIntArray: int[] unbox-impl()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static final boolean equals-impl0(int[], int[])
    {
        int[] $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $z0;
    }

    public static final int get-pVg5ArA(int[], int)
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i0 = $r0[$i0];

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        return $i0;
    }

    public static int getSize-impl(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        return $i0;
    }

    public static void getStorage$annotations()
    {
        return;
    }

    public static int hashCode-impl(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r0);

        return $i0;
    }

    public static boolean isEmpty-impl(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.util.Iterator iterator-impl(int[])
    {
        kotlin.UIntArray$Iterator $r1;
        java.util.Iterator $r2;
        int[] $r0;

        $r0 := @parameter0: int[];

        $r1 = new kotlin.UIntArray$Iterator;

        specialinvoke $r1.<kotlin.UIntArray$Iterator: void <init>(int[])>($r0);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }

    public static final void set-VXSXFK8(int[], int, int)
    {
        int $i0, $i1;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0[$i0] = $i1;

        return;
    }

    public static java.lang.String toString-impl(int[])
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        int[] $r0;

        $r0 := @parameter0: int[];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UIntArray(storage=");

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean add-WZ4Q5Ns(int)
    {
        int $i0;
        java.lang.UnsupportedOperationException $r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean addAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.UIntArray r0;
        java.util.Collection $r1;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final volatile boolean contains(java.lang.Object)
    {
        kotlin.UInt $r2;
        int $i0;
        java.lang.Object $r1;
        kotlin.UIntArray r0;
        boolean $z0;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.UInt;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (kotlin.UInt) $r1;

        $i0 = virtualinvoke $r2.<kotlin.UInt: int unbox-impl()>();

        $z0 = virtualinvoke r0.<kotlin.UIntArray: boolean contains-WZ4Q5Ns(int)>($i0);

        return $z0;
    }

    public boolean contains-WZ4Q5Ns(int)
    {
        int[] $r1;
        int $i0;
        kotlin.UIntArray r0;
        boolean $z0;

        r0 := @this: kotlin.UIntArray;

        $i0 := @parameter0: int;

        $r1 = r0.<kotlin.UIntArray: int[] storage>;

        $z0 = staticinvoke <kotlin.UIntArray: boolean contains-WZ4Q5Ns(int[],int)>($r1, $i0);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        int[] $r2;
        java.util.Collection $r1;
        kotlin.UIntArray r0;
        boolean $z0;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = r0.<kotlin.UIntArray: int[] storage>;

        $z0 = staticinvoke <kotlin.UIntArray: boolean containsAll-impl(int[],java.util.Collection)>($r2, $r1);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r2;
        java.lang.Object $r1;
        kotlin.UIntArray r0;
        boolean $z0;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlin.UIntArray: int[] storage>;

        $z0 = staticinvoke <kotlin.UIntArray: boolean equals-impl(int[],java.lang.Object)>($r2, $r1);

        return $z0;
    }

    public int getSize()
    {
        int $i0;
        int[] $r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r1 = r0.<kotlin.UIntArray: int[] storage>;

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r1);

        return $i0;
    }

    public int hashCode()
    {
        int $i0;
        int[] $r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r1 = r0.<kotlin.UIntArray: int[] storage>;

        $i0 = staticinvoke <kotlin.UIntArray: int hashCode-impl(int[])>($r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        int[] $r1;
        kotlin.UIntArray r0;
        boolean $z0;

        r0 := @this: kotlin.UIntArray;

        $r1 = r0.<kotlin.UIntArray: int[] storage>;

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r1;
        int[] $r2;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r2 = r0.<kotlin.UIntArray: int[] storage>;

        $r1 = staticinvoke <kotlin.UIntArray: java.util.Iterator iterator-impl(int[])>($r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.UIntArray r0;
        java.util.Collection $r1;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.UIntArray r0;
        java.util.Collection $r1;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public volatile int size()
    {
        int $i0;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $i0 = virtualinvoke r0.<kotlin.UIntArray: int getSize()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] $r1;
        kotlin.UIntArray r0;
        java.util.Collection $r2;

        r0 := @this: kotlin.UIntArray;

        $r2 = (java.util.Collection) r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r2);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        kotlin.UIntArray r0;
        java.util.Collection $r2;

        r0 := @this: kotlin.UIntArray;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r2 = (java.util.Collection) r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        int[] $r2;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        $r2 = r0.<kotlin.UIntArray: int[] storage>;

        $r1 = staticinvoke <kotlin.UIntArray: java.lang.String toString-impl(int[])>($r2);

        return $r1;
    }

    public final int[] unbox-impl()
    {
        int[] r1;
        kotlin.UIntArray r0;

        r0 := @this: kotlin.UIntArray;

        r1 = r0.<kotlin.UIntArray: int[] storage>;

        return r1;
    }
}
