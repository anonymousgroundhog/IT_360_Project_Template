public abstract class com.google.common.io.CharSink extends java.lang.Object
{

    protected void <init>()
    {
        com.google.common.io.CharSink r0;

        r0 := @this: com.google.common.io.CharSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.io.Writer openBufferedStream() throws java.io.IOException
    {
        java.io.BufferedWriter $r2;
        java.io.Writer $r1;
        com.google.common.io.CharSink r0;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSink;

        $r1 = virtualinvoke r0.<com.google.common.io.CharSink: java.io.Writer openStream()>();

        $z0 = $r1 instanceof java.io.BufferedWriter;

        if $z0 == 0 goto label1;

        $r2 = (java.io.BufferedWriter) $r1;

        return $r2;

     label1:
        $r2 = new java.io.BufferedWriter;

        specialinvoke $r2.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        return $r2;
    }

    public abstract java.io.Writer openStream() throws java.io.IOException;

    public void write(java.lang.CharSequence) throws java.io.IOException
    {
        java.lang.Throwable r5, r7;
        java.lang.CharSequence r1;
        java.lang.RuntimeException $r6;
        com.google.common.io.CharSink r0;
        com.google.common.io.Closer $r2;
        java.io.Closeable $r4;
        java.io.Writer $r3;

        r0 := @this: com.google.common.io.CharSink;

        r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label1:
        $r3 = virtualinvoke r0.<com.google.common.io.CharSink: java.io.Writer openStream()>();

        $r4 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r3);

        $r3 = (java.io.Writer) $r4;

        virtualinvoke $r3.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r1);

        virtualinvoke $r3.<java.io.Writer: void flush()>();

     label2:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        return;

     label3:
        r5 := @caughtexception;

     label4:
        $r6 = virtualinvoke $r2.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>(r5);

        throw $r6;

     label5:
        r7 := @caughtexception;

        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        throw r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public long writeFrom(java.lang.Readable) throws java.io.IOException
    {
        java.lang.Throwable r5, r7;
        long $l0;
        java.lang.RuntimeException $r6;
        com.google.common.io.CharSink r0;
        com.google.common.io.Closer $r2;
        java.io.Closeable $r4;
        java.lang.Readable r1;
        java.io.Writer $r3;

        r0 := @this: com.google.common.io.CharSink;

        r1 := @parameter0: java.lang.Readable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label1:
        $r3 = virtualinvoke r0.<com.google.common.io.CharSink: java.io.Writer openStream()>();

        $r4 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r3);

        $r3 = (java.io.Writer) $r4;

        $l0 = staticinvoke <com.google.common.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)>(r1, $r3);

        virtualinvoke $r3.<java.io.Writer: void flush()>();

     label2:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        return $l0;

     label3:
        r5 := @caughtexception;

     label4:
        $r6 = virtualinvoke $r2.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>(r5);

        throw $r6;

     label5:
        r7 := @caughtexception;

        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        throw r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void writeLines(java.lang.Iterable) throws java.io.IOException
    {
        java.lang.String $r2;
        com.google.common.io.CharSink r0;
        java.lang.Iterable r1;

        r0 := @this: com.google.common.io.CharSink;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        virtualinvoke r0.<com.google.common.io.CharSink: void writeLines(java.lang.Iterable,java.lang.String)>(r1, $r2);

        return;
    }

    public void writeLines(java.lang.Iterable, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable r10, r12;
        java.util.Iterator $r6;
        java.lang.CharSequence r8;
        java.lang.RuntimeException $r11;
        com.google.common.io.CharSink r0;
        java.lang.Iterable r1;
        com.google.common.io.Closer $r3;
        java.io.Closeable $r5;
        java.io.Writer $r4, $r9;
        java.lang.Object $r7;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSink;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r3 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label01:
        $r4 = virtualinvoke r0.<com.google.common.io.CharSink: java.io.Writer openBufferedStream()>();

        $r5 = virtualinvoke $r3.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r4);

        $r4 = (java.io.Writer) $r5;

        $r6 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label06;

     label04:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.CharSequence) $r7;

        $r9 = virtualinvoke $r4.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r8);

        virtualinvoke $r9.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r2);

     label05:
        goto label02;

     label06:
        virtualinvoke $r4.<java.io.Writer: void flush()>();

     label07:
        virtualinvoke $r3.<com.google.common.io.Closer: void close()>();

        return;

     label08:
        r10 := @caughtexception;

     label09:
        $r11 = virtualinvoke $r3.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>(r10);

        throw $r11;

     label10:
        r12 := @caughtexception;

        virtualinvoke $r3.<com.google.common.io.Closer: void close()>();

        throw r12;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label10;
    }
}
