final class com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture extends java.lang.Object implements com.google.common.util.concurrent.AbstractScheduledService$Cancellable
{
    private java.util.concurrent.Future currentFuture;
    private final java.util.concurrent.locks.ReentrantLock lock;

    void <init>(java.util.concurrent.locks.ReentrantLock, java.util.concurrent.Future)
    {
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture r0;
        java.util.concurrent.Future r2;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture;

        $r1 := @parameter0: java.util.concurrent.locks.ReentrantLock;

        r2 := @parameter1: java.util.concurrent.Future;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.locks.ReentrantLock lock> = $r1;

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.Future currentFuture> = r2;

        return;
    }

    static java.util.concurrent.Future access$800(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture)
    {
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture $r0;
        java.util.concurrent.Future r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture;

        r1 = $r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.Future currentFuture>;

        return r1;
    }

    static java.util.concurrent.Future access$802(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture, java.util.concurrent.Future)
    {
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture $r0;
        java.util.concurrent.Future $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture;

        $r1 := @parameter1: java.util.concurrent.Future;

        $r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.Future currentFuture> = $r1;

        return $r1;
    }

    public void cancel(boolean)
    {
        java.lang.Throwable $r3;
        java.util.concurrent.Future $r2;
        java.util.concurrent.locks.ReentrantLock $r1;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.Future currentFuture>;

        interfaceinvoke $r2.<java.util.concurrent.Future: boolean cancel(boolean)>($z0);

     label2:
        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label3:
        $r3 := @caughtexception;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isCancelled()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.Future $r2;
        java.util.concurrent.locks.ReentrantLock $r1;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.Future currentFuture>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.Future: boolean isCancelled()>();

     label2:
        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
