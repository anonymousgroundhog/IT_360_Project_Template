final class com.google.common.util.concurrent.InterruptibleTask$Blocker extends java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.lang.Runnable
{
    private final com.google.common.util.concurrent.InterruptibleTask task;

    private void <init>(com.google.common.util.concurrent.InterruptibleTask)
    {
        com.google.common.util.concurrent.InterruptibleTask$Blocker r0;
        com.google.common.util.concurrent.InterruptibleTask r1;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask$Blocker;

        r1 := @parameter0: com.google.common.util.concurrent.InterruptibleTask;

        specialinvoke r0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: void <init>()>();

        r0.<com.google.common.util.concurrent.InterruptibleTask$Blocker: com.google.common.util.concurrent.InterruptibleTask task> = r1;

        return;
    }

    void <init>(com.google.common.util.concurrent.InterruptibleTask, com.google.common.util.concurrent.InterruptibleTask$1)
    {
        com.google.common.util.concurrent.InterruptibleTask$1 $r2;
        com.google.common.util.concurrent.InterruptibleTask$Blocker r0;
        com.google.common.util.concurrent.InterruptibleTask $r1;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask$Blocker;

        $r1 := @parameter0: com.google.common.util.concurrent.InterruptibleTask;

        $r2 := @parameter1: com.google.common.util.concurrent.InterruptibleTask$1;

        specialinvoke r0.<com.google.common.util.concurrent.InterruptibleTask$Blocker: void <init>(com.google.common.util.concurrent.InterruptibleTask)>($r1);

        return;
    }

    static void access$200(com.google.common.util.concurrent.InterruptibleTask$Blocker, java.lang.Thread)
    {
        com.google.common.util.concurrent.InterruptibleTask$Blocker $r0;
        java.lang.Thread $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.InterruptibleTask$Blocker;

        $r1 := @parameter1: java.lang.Thread;

        specialinvoke $r0.<com.google.common.util.concurrent.InterruptibleTask$Blocker: void setOwner(java.lang.Thread)>($r1);

        return;
    }

    private void setOwner(java.lang.Thread)
    {
        com.google.common.util.concurrent.InterruptibleTask$Blocker r0;
        java.lang.Thread $r1;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask$Blocker;

        $r1 := @parameter0: java.lang.Thread;

        specialinvoke r0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)>($r1);

        return;
    }

    public void run()
    {
        com.google.common.util.concurrent.InterruptibleTask$Blocker r0;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask$Blocker;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.google.common.util.concurrent.InterruptibleTask$Blocker r0;
        com.google.common.util.concurrent.InterruptibleTask $r2;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask$Blocker;

        $r2 = r0.<com.google.common.util.concurrent.InterruptibleTask$Blocker: com.google.common.util.concurrent.InterruptibleTask task>;

        $r1 = virtualinvoke $r2.<com.google.common.util.concurrent.InterruptibleTask: java.lang.String toString()>();

        return $r1;
    }
}
