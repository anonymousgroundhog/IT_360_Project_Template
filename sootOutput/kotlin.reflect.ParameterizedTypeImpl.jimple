final class kotlin.reflect.ParameterizedTypeImpl extends java.lang.Object implements java.lang.reflect.ParameterizedType, kotlin.reflect.TypeImpl
{
    private final java.lang.reflect.Type ownerType;
    private final java.lang.Class rawType;
    private final java.lang.reflect.Type[] typeArguments;

    public void <init>(java.lang.Class, java.lang.reflect.Type, java.util.List)
    {
        kotlin.reflect.ParameterizedTypeImpl r0;
        java.util.List $r3;
        java.lang.Object[] $r4;
        java.lang.reflect.Type $r2;
        java.util.Collection $r5;
        java.lang.reflect.Type[] $r6;
        java.lang.Class $r1;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "rawType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "typeArguments");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.Class rawType> = $r1;

        r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerType> = $r2;

        $r5 = (java.util.Collection) $r3;

        $r6 = newarray (java.lang.reflect.Type)[0];

        $r4 = interfaceinvoke $r5.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r6 = (java.lang.reflect.Type[]) $r4;

        r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments> = $r6;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.reflect.ParameterizedTypeImpl r0;
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type $r4, $r5;
        java.lang.reflect.Type[] $r6, $r7;
        java.lang.Object $r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r2 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        $r3 = (java.lang.reflect.ParameterizedType) $r1;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label1;

        $r4 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerType>;

        $r3 = (java.lang.reflect.ParameterizedType) $r1;

        $r5 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r3 = (java.lang.reflect.ParameterizedType) $r1;

        $r7 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r7);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.reflect.Type[] getActualTypeArguments()
    {
        java.lang.reflect.Type[] r1;
        kotlin.reflect.ParameterizedTypeImpl r0;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        r1 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments>;

        return r1;
    }

    public java.lang.reflect.Type getOwnerType()
    {
        kotlin.reflect.ParameterizedTypeImpl r0;
        java.lang.reflect.Type r1;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        r1 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerType>;

        return r1;
    }

    public java.lang.reflect.Type getRawType()
    {
        kotlin.reflect.ParameterizedTypeImpl r0;
        java.lang.Class $r1;
        java.lang.reflect.Type $r2;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        $r1 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        $r2 = (java.lang.reflect.Type) $r1;

        return $r2;
    }

    public java.lang.String getTypeName()
    {
        kotlin.reflect.ParameterizedTypeImpl r0;
        java.lang.CharSequence $r7, $r8;
        java.lang.Appendable $r6;
        kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 $r9;
        kotlin.jvm.functions.Function1 $r10;
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r5;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerType>;

        if $r2 == null goto label1;

        $r2 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerType>;

        $r3 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.String access$typeToString(java.lang.reflect.Type)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r4 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label2;

     label1:
        $r4 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        $r2 = (java.lang.reflect.Type) $r4;

        $r3 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.String access$typeToString(java.lang.reflect.Type)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        $r5 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments>;

        $i0 = lengthof $r5;

        if $i0 != 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label5;

        $r5 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments>;

        $r6 = (java.lang.Appendable) $r1;

        $r7 = (java.lang.CharSequence) "<";

        $r8 = (java.lang.CharSequence) ">";

        $r9 = <kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1: kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 INSTANCE>;

        $r10 = (kotlin.jvm.functions.Function1) $r9;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Appendable joinTo$default(java.lang.Object[],java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r5, $r6, null, $r7, $r8, 0, null, $r10, 50, null);

     label5:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "StringBuilder().apply(builderAction).toString()");

        return $r3;
    }

    public int hashCode()
    {
        kotlin.reflect.ParameterizedTypeImpl r0;
        java.lang.reflect.Type $r2;
        int $i0, $i1;
        java.lang.reflect.Type[] $r3;
        java.lang.Class $r1;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        $r1 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        $i0 = virtualinvoke $r1.<java.lang.Class: int hashCode()>();

        $r2 = r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerType>;

        if $r2 == null goto label1;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $i0 = $i0 ^ $i1;

        $r3 = virtualinvoke r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r3);

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        kotlin.reflect.ParameterizedTypeImpl r0;
        java.lang.String $r1;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl;

        $r1 = virtualinvoke r0.<kotlin.reflect.ParameterizedTypeImpl: java.lang.String getTypeName()>();

        return $r1;
    }
}
