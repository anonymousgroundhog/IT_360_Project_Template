public abstract class kotlinx.coroutines.flow.AbstractFlow extends java.lang.Object implements kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.CancellableFlow
{

    public void <init>()
    {
        kotlinx.coroutines.flow.AbstractFlow r0;

        r0 := @this: kotlinx.coroutines.flow.AbstractFlow;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r10;
        java.lang.IllegalStateException r6;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.AbstractFlow r0;
        kotlin.coroutines.CoroutineContext $r9;
        kotlinx.coroutines.flow.internal.SafeCollector r7, $r8;
        kotlin.Unit r11;
        kotlinx.coroutines.flow.FlowCollector r1;
        kotlinx.coroutines.flow.AbstractFlow$collect$1 $r3;
        int $i0;
        java.lang.Object $r4, $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.AbstractFlow;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.AbstractFlow$collect$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.AbstractFlow$collect$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.AbstractFlow$collect$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: void <init>(kotlinx.coroutines.flow.AbstractFlow,kotlin.coroutines.Continuation)>(r0, $r2);

     label02:
        $r4 = $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label07;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r6;

     label04:
        $r5 = $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: java.lang.Object L$0>;

        r7 = (kotlinx.coroutines.flow.internal.SafeCollector) $r5;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label06:
        goto label10;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r8 = new kotlinx.coroutines.flow.internal.SafeCollector;

        $r9 = interfaceinvoke $r3.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke $r8.<kotlinx.coroutines.flow.internal.SafeCollector: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext)>(r1, $r9);

        r7 = $r8;

     label08:
        r1 = (kotlinx.coroutines.flow.FlowCollector) $r8;

        $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: java.lang.Object L$0> = $r8;

        $r3.<kotlinx.coroutines.flow.AbstractFlow$collect$1: int label> = 1;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.AbstractFlow: java.lang.Object collectSafely(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>(r1, $r3);

     label09:
        if $r4 != $r5 goto label10;

        return $r5;

     label10:
        virtualinvoke r7.<kotlinx.coroutines.flow.internal.SafeCollector: void releaseIntercepted()>();

        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;

     label11:
        $r10 := @caughtexception;

        virtualinvoke r7.<kotlinx.coroutines.flow.internal.SafeCollector: void releaseIntercepted()>();

        throw $r10;

        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    public abstract java.lang.Object collectSafely(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation);
}
