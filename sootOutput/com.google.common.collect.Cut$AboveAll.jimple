final class com.google.common.collect.Cut$AboveAll extends com.google.common.collect.Cut
{
    private static final com.google.common.collect.Cut$AboveAll INSTANCE;
    private static final long serialVersionUID;

    static void <clinit>()
    {
        com.google.common.collect.Cut$AboveAll $r0;

        $r0 = new com.google.common.collect.Cut$AboveAll;

        specialinvoke $r0.<com.google.common.collect.Cut$AboveAll: void <init>()>();

        <com.google.common.collect.Cut$AboveAll: com.google.common.collect.Cut$AboveAll INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        specialinvoke r0.<com.google.common.collect.Cut: void <init>(java.lang.Comparable)>("");

        return;
    }

    static com.google.common.collect.Cut$AboveAll access$100()
    {
        com.google.common.collect.Cut$AboveAll r0;

        r0 = <com.google.common.collect.Cut$AboveAll: com.google.common.collect.Cut$AboveAll INSTANCE>;

        return r0;
    }

    private java.lang.Object readResolve()
    {
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        r0 = <com.google.common.collect.Cut$AboveAll: com.google.common.collect.Cut$AboveAll INSTANCE>;

        return r0;
    }

    public int compareTo(com.google.common.collect.Cut)
    {
        com.google.common.collect.Cut r1;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        r1 := @parameter0: com.google.common.collect.Cut;

        if r1 != r0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.google.common.collect.Cut $r2;
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.common.collect.Cut) $r1;

        $i0 = virtualinvoke r0.<com.google.common.collect.Cut$AboveAll: int compareTo(com.google.common.collect.Cut)>($r2);

        return $i0;
    }

    void describeAsLowerBound(java.lang.StringBuilder)
    {
        java.lang.StringBuilder $r1;
        java.lang.AssertionError $r2;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    void describeAsUpperBound(java.lang.StringBuilder)
    {
        java.lang.StringBuilder $r1;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+\u221e)");

        return;
    }

    java.lang.Comparable endpoint()
    {
        java.lang.IllegalStateException $r1;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("range unbounded on this side");

        throw $r1;
    }

    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain)
    {
        java.lang.Comparable $r2;
        com.google.common.collect.Cut$AboveAll r0;
        com.google.common.collect.DiscreteDomain r1;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        $r2 = virtualinvoke r1.<com.google.common.collect.DiscreteDomain: java.lang.Comparable maxValue()>();

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        return $i0;
    }

    boolean isLessThan(java.lang.Comparable)
    {
        java.lang.Comparable r1;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        r1 := @parameter0: java.lang.Comparable;

        return 0;
    }

    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain)
    {
        java.lang.AssertionError $r2;
        com.google.common.collect.Cut$AboveAll r0;
        com.google.common.collect.DiscreteDomain r1;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        return "+\u221e";
    }

    com.google.common.collect.BoundType typeAsLowerBound()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("this statement should be unreachable");

        throw $r1;
    }

    com.google.common.collect.BoundType typeAsUpperBound()
    {
        java.lang.IllegalStateException $r1;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.BoundType $r1;
        com.google.common.collect.DiscreteDomain r2;
        java.lang.AssertionError $r3;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 := @parameter0: com.google.common.collect.BoundType;

        r2 := @parameter1: com.google.common.collect.DiscreteDomain;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("this statement should be unreachable");

        throw $r3;
    }

    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain)
    {
        java.lang.IllegalStateException $r3;
        com.google.common.collect.BoundType $r1;
        com.google.common.collect.DiscreteDomain r2;
        com.google.common.collect.Cut$AboveAll r0;

        r0 := @this: com.google.common.collect.Cut$AboveAll;

        $r1 := @parameter0: com.google.common.collect.BoundType;

        r2 := @parameter1: com.google.common.collect.DiscreteDomain;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;
    }
}
