public abstract class kotlinx.coroutines.flow.internal.ChannelFlow extends java.lang.Object implements kotlinx.coroutines.flow.internal.FusibleFlow
{
    public final int capacity;
    public final kotlin.coroutines.CoroutineContext context;
    public final kotlinx.coroutines.channels.BufferOverflow onBufferOverflow;

    public void <init>(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlow r0;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        java.lang.AssertionError $r3;
        kotlin.coroutines.CoroutineContext $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context> = $r1;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity> = $i0;

        r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow> = $r2;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        return;
    }

    static java.lang.Object collect$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlow, kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.internal.ChannelFlow $r0;
        kotlin.jvm.functions.Function2 $r4;
        kotlinx.coroutines.flow.internal.ChannelFlow$collect$2 $r3;
        kotlin.Unit r7;
        kotlinx.coroutines.flow.FlowCollector $r1;
        java.lang.Object $r5, $r6;

        $r0 := @parameter0: kotlinx.coroutines.flow.internal.ChannelFlow;

        $r1 := @parameter1: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = new kotlinx.coroutines.flow.internal.ChannelFlow$collect$2;

        specialinvoke $r3.<kotlinx.coroutines.flow.internal.ChannelFlow$collect$2: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.flow.internal.ChannelFlow,kotlin.coroutines.Continuation)>($r1, $r0, null);

        $r4 = (kotlin.jvm.functions.Function2) $r3;

        $r5 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: java.lang.Object coroutineScope(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r4, $r2);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label1;

        return $r5;

     label1:
        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r7;
    }

    protected java.lang.String additionalToStringProps()
    {
        kotlinx.coroutines.flow.internal.ChannelFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        return null;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlinx.coroutines.flow.internal.ChannelFlow r0;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlow: java.lang.Object collect$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlow,kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>(r0, $r1, $r2);

        return $r3;
    }

    protected abstract java.lang.Object collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation);

    protected abstract kotlinx.coroutines.flow.internal.ChannelFlow create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow);

    public kotlinx.coroutines.flow.Flow dropChannelOperators()
    {
        kotlinx.coroutines.flow.internal.ChannelFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        return null;
    }

    public kotlinx.coroutines.flow.Flow fuse(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.internal.ChannelFlow r0;
        kotlinx.coroutines.channels.BufferOverflow $r2, $r4;
        java.lang.AssertionError $r6;
        kotlin.coroutines.CoroutineContext $r1, $r3;
        kotlinx.coroutines.flow.Flow r5;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        z1 = 1;

        if $z0 == 0 goto label04;

        if $i0 == -1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label04:
        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context>;

        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r3);

        $r4 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        if $r2 == $r4 goto label05;

        goto label21;

     label05:
        $i1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if $i1 != -3 goto label06;

        goto label08;

     label06:
        if $i0 != -3 goto label07;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        goto label20;

     label07:
        $i1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if $i1 != -2 goto label09;

     label08:
        goto label20;

     label09:
        if $i0 != -2 goto label10;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        goto label20;

     label10:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label14;

        $i1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if $i1 < 0 goto label11;

        $z0 = 1;

        goto label12;

     label11:
        $z0 = 0;

     label12:
        if $z0 == 0 goto label13;

        goto label14;

     label13:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label14:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label18;

        if $i0 < 0 goto label15;

        goto label16;

     label15:
        z1 = 0;

     label16:
        if z1 == 0 goto label17;

        goto label18;

     label17:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label18:
        $i1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        $i0 = $i1 + $i0;

        if $i0 < 0 goto label19;

        goto label20;

     label19:
        $i0 = 2147483647;

     label20:
        $r2 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

     label21:
        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context>;

        z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if z1 == 0 goto label22;

        $i1 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if $i0 != $i1 goto label22;

        $r4 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        if $r2 != $r4 goto label22;

        r5 = (kotlinx.coroutines.flow.Flow) r0;

        return r5;

     label22:
        r0 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.flow.internal.ChannelFlow create(kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r1, $i0, $r2);

        r5 = (kotlinx.coroutines.flow.Flow) r0;

        return r5;
    }

    public final kotlin.jvm.functions.Function2 getCollectToFun$kotlinx_coroutines_core()
    {
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.flow.internal.ChannelFlow$collectToFun$1 $r1;
        kotlinx.coroutines.flow.internal.ChannelFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        $r1 = new kotlinx.coroutines.flow.internal.ChannelFlow$collectToFun$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.internal.ChannelFlow$collectToFun$1: void <init>(kotlinx.coroutines.flow.internal.ChannelFlow,kotlin.coroutines.Continuation)>(r0, null);

        $r2 = (kotlin.jvm.functions.Function2) $r1;

        return $r2;
    }

    public final int getProduceCapacity$kotlinx_coroutines_core()
    {
        int $i0;
        kotlinx.coroutines.flow.internal.ChannelFlow r0;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if $i0 != -3 goto label1;

        return -2;

     label1:
        $i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        return $i0;
    }

    public kotlinx.coroutines.channels.ReceiveChannel produceImpl(kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.flow.internal.ChannelFlow r0;
        kotlinx.coroutines.channels.ReceiveChannel $r6;
        kotlinx.coroutines.channels.BufferOverflow $r3;
        kotlin.jvm.functions.Function2 $r5;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlinx.coroutines.CoroutineStart $r4;
        int $i0;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context>;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int getProduceCapacity$kotlinx_coroutines_core()>();

        $r3 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r4 = <kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC>;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.jvm.functions.Function2 getCollectToFun$kotlinx_coroutines_core()>();

        $r6 = staticinvoke <kotlinx.coroutines.channels.ProduceKt: kotlinx.coroutines.channels.ReceiveChannel produce$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r1, $r2, $i0, $r3, $r4, null, $r5, 16, null);

        return $r6;
    }

    public java.lang.String toString()
    {
        java.lang.CharSequence $r8;
        kotlinx.coroutines.flow.internal.ChannelFlow r0;
        kotlinx.coroutines.channels.BufferOverflow r5, $r6;
        kotlin.coroutines.CoroutineContext r2;
        java.lang.Iterable $r7;
        java.util.ArrayList $r9;
        kotlin.coroutines.EmptyCoroutineContext $r3;
        int i0;
        java.lang.StringBuilder r4, $r10;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.flow.internal.ChannelFlow;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(4);

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.ChannelFlow: java.lang.String additionalToStringProps()>();

        if $r1 == null goto label1;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label1:
        r2 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context>;

        $r3 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        if r2 == $r3 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("context=");

        r2 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlin.coroutines.CoroutineContext context>;

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label2:
        i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        if i0 == -3 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity=");

        i0 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: int capacity>;

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label3:
        r5 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        $r6 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND>;

        if r5 == $r6 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onBufferOverflow=");

        r5 = r0.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow>;

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>(r0);

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r7 = (java.lang.Iterable) $r9;

        $r8 = (java.lang.CharSequence) ", ";

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r7, $r8, null, null, 0, null, null, 62, null);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r4 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
