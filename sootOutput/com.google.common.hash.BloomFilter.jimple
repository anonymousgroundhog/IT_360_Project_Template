public final class com.google.common.hash.BloomFilter extends java.lang.Object implements com.google.common.base.Predicate, java.io.Serializable
{
    private final com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits;
    private final com.google.common.hash.Funnel funnel;
    private final int numHashFunctions;
    private final com.google.common.hash.BloomFilter$Strategy strategy;

    private void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray, int, com.google.common.hash.Funnel, com.google.common.hash.BloomFilter$Strategy)
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.Funnel r2;
        com.google.common.hash.BloomFilter$Strategy $r3;
        int $i0;
        java.lang.Object $r4;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 := @parameter0: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $i0 := @parameter1: int;

        r2 := @parameter2: com.google.common.hash.Funnel;

        $r3 := @parameter3: com.google.common.hash.BloomFilter$Strategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = 1;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "numHashFunctions (%s) must be > 0", $i0);

        if $i0 > 255 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "numHashFunctions (%s) must be <= 255", $i0);

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) $r4;

        r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits> = $r1;

        r0.<com.google.common.hash.BloomFilter: int numHashFunctions> = $i0;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r2 = (com.google.common.hash.Funnel) $r4;

        r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel> = r2;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r3 = (com.google.common.hash.BloomFilter$Strategy) $r4;

        r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy> = $r3;

        return;
    }

    void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray, int, com.google.common.hash.Funnel, com.google.common.hash.BloomFilter$Strategy, com.google.common.hash.BloomFilter$1)
    {
        com.google.common.hash.Funnel $r2;
        com.google.common.hash.BloomFilter$Strategy $r3;
        com.google.common.hash.BloomFilter$1 $r4;
        int $i0;
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r1;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 := @parameter0: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.google.common.hash.Funnel;

        $r3 := @parameter3: com.google.common.hash.BloomFilter$Strategy;

        $r4 := @parameter4: com.google.common.hash.BloomFilter$1;

        specialinvoke r0.<com.google.common.hash.BloomFilter: void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)>($r1, $i0, $r2, $r3);

        return;
    }

    static com.google.common.hash.BloomFilterStrategies$LockFreeBitArray access$000(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter $r0;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r1;

        $r0 := @parameter0: com.google.common.hash.BloomFilter;

        r1 = $r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        return r1;
    }

    static int access$100(com.google.common.hash.BloomFilter)
    {
        int i0;
        com.google.common.hash.BloomFilter $r0;

        $r0 := @parameter0: com.google.common.hash.BloomFilter;

        i0 = $r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        return i0;
    }

    static com.google.common.hash.Funnel access$200(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter $r0;
        com.google.common.hash.Funnel r1;

        $r0 := @parameter0: com.google.common.hash.BloomFilter;

        r1 = $r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        return r1;
    }

    static com.google.common.hash.BloomFilter$Strategy access$300(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter $r0;
        com.google.common.hash.BloomFilter$Strategy r1;

        $r0 := @parameter0: com.google.common.hash.BloomFilter;

        r1 = $r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        return r1;
    }

    public static com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel, int)
    {
        com.google.common.hash.Funnel r0;
        int $i0;
        com.google.common.hash.BloomFilter $r1;
        long $l1;

        r0 := @parameter0: com.google.common.hash.Funnel;

        $i0 := @parameter1: int;

        $l1 = (long) $i0;

        $r1 = staticinvoke <com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long)>(r0, $l1);

        return $r1;
    }

    public static com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel, int, double)
    {
        com.google.common.hash.Funnel r0;
        int $i0;
        com.google.common.hash.BloomFilter $r1;
        long $l1;
        double $d0;

        r0 := @parameter0: com.google.common.hash.Funnel;

        $i0 := @parameter1: int;

        $d0 := @parameter2: double;

        $l1 = (long) $i0;

        $r1 = staticinvoke <com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double)>(r0, $l1, $d0);

        return $r1;
    }

    public static com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel, long)
    {
        com.google.common.hash.Funnel r0;
        com.google.common.hash.BloomFilter $r1;
        long $l0;

        r0 := @parameter0: com.google.common.hash.Funnel;

        $l0 := @parameter1: long;

        $r1 = staticinvoke <com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double)>(r0, $l0, 0.03);

        return $r1;
    }

    public static com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel, long, double)
    {
        com.google.common.hash.Funnel r0;
        com.google.common.hash.BloomFilter $r2;
        long $l0;
        double $d0;
        com.google.common.hash.BloomFilterStrategies $r1;

        r0 := @parameter0: com.google.common.hash.Funnel;

        $l0 := @parameter1: long;

        $d0 := @parameter2: double;

        $r1 = <com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_64>;

        $r2 = staticinvoke <com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy)>(r0, $l0, $d0, $r1);

        return $r2;
    }

    static com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel, long, double, com.google.common.hash.BloomFilter$Strategy)
    {
        java.lang.Double $r2;
        long $l0, $l2;
        com.google.common.hash.BloomFilter$Strategy $r1;
        byte $b1;
        int $i3;
        java.lang.String $r5;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r6;
        double $d0;
        boolean z0, $z1;
        com.google.common.hash.BloomFilter $r7;
        java.lang.IllegalArgumentException r3, $r9;
        com.google.common.hash.Funnel r0;
        java.lang.StringBuilder $r4, $r8;

        r0 := @parameter0: com.google.common.hash.Funnel;

        $l0 := @parameter1: long;

        $d0 := @parameter2: double;

        $r1 := @parameter3: com.google.common.hash.BloomFilter$Strategy;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z0 = 1;

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z1, "Expected insertions (%s) must be >= 0", $l0);

        $b1 = $d0 cmpl 0.0;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "False positive probability (%s) must be > 0.0", $r2);

        $b1 = $d0 cmpg 1.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label05;

        goto label06;

     label05:
        z0 = 0;

     label06:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>(z0, "False positive probability (%s) must be < 1.0", $r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label07;

        $l0 = 1L;

     label07:
        $l2 = staticinvoke <com.google.common.hash.BloomFilter: long optimalNumOfBits(long,double)>($l0, $d0);

        $i3 = staticinvoke <com.google.common.hash.BloomFilter: int optimalNumOfHashFunctions(long,long)>($l0, $l2);

        $r7 = new com.google.common.hash.BloomFilter;

        $r6 = new com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

     label08:
        specialinvoke $r6.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: void <init>(long)>($l2);

        specialinvoke $r7.<com.google.common.hash.BloomFilter: void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)>($r6, $i3, r0, $r1);

     label09:
        return $r7;

     label10:
        r3 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>(57);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create BloomFilter of ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r5, r3);

        throw $r9;

        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
    }

    static long optimalNumOfBits(long, double)
    {
        byte $b1;
        long $l0;
        double $d0, $d1, $d2;

        $l0 := @parameter0: long;

        $d0 := @parameter1: double;

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label1;

        $d0 = 4.9E-324;

     label1:
        $l0 = neg $l0;

        $d1 = (double) $l0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = $d1 * $d0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d2 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d1 = $d1 * $d2;

        $d0 = $d0 / $d1;

        $l0 = (long) $d0;

        return $l0;
    }

    static int optimalNumOfHashFunctions(long, long)
    {
        int $i2;
        long $l0, $l1;
        double $d0, $d1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $d0 = (double) $l1;

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d0 = $d0 * $d1;

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i2 = (int) $l0;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i2);

        return $i2;
    }

    public static com.google.common.hash.BloomFilter readFrom(java.io.InputStream, com.google.common.hash.Funnel) throws java.io.IOException
    {
        java.io.DataInputStream $r7;
        long l7;
        com.google.common.hash.BloomFilterStrategies r3;
        byte b0, $b3, $b4;
        int i1, i2, $i5, $i6, i8;
        java.lang.String $r6;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r8;
        com.google.common.hash.BloomFilter $r9;
        java.io.IOException $r11;
        java.lang.RuntimeException r4;
        com.google.common.hash.Funnel r1;
        java.lang.StringBuilder r5, $r10;
        com.google.common.hash.BloomFilterStrategies[] $r2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: com.google.common.hash.Funnel;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "InputStream");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Funnel");

        b0 = -1;

        i1 = -1;

        i2 = -1;

        $r7 = new java.io.DataInputStream;

     label01:
        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r0);

        $b3 = virtualinvoke $r7.<java.io.DataInputStream: byte readByte()>();

     label02:
        b0 = $b3;

     label03:
        $b4 = virtualinvoke $r7.<java.io.DataInputStream: byte readByte()>();

        $i5 = staticinvoke <com.google.common.primitives.UnsignedBytes: int toInt(byte)>($b4);

     label04:
        i1 = $i5;

     label05:
        $i6 = virtualinvoke $r7.<java.io.DataInputStream: int readInt()>();

     label06:
        i2 = $i6;

     label07:
        $r2 = staticinvoke <com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies[] values()>();

     label08:
        i8 = (int) $b3;

     label09:
        r3 = $r2[i8];

     label10:
        $r8 = new com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        l7 = (long) $i6;

     label11:
        l7 = staticinvoke <com.google.common.math.LongMath: long checkedMultiply(long,long)>(l7, 64L);

        specialinvoke $r8.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: void <init>(long)>(l7);

     label12:
        i8 = 0;

     label13:
        if i8 >= $i6 goto label16;

     label14:
        l7 = virtualinvoke $r7.<java.io.DataInputStream: long readLong()>();

        virtualinvoke $r8.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: void putData(int,long)>(i8, l7);

     label15:
        i8 = i8 + 1;

        goto label13;

     label16:
        $r9 = new com.google.common.hash.BloomFilter;

     label17:
        specialinvoke $r9.<com.google.common.hash.BloomFilter: void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)>($r8, $i5, r1, r3);

     label18:
        return $r9;

     label19:
        r4 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>(134);

        r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to deserialize BloomFilter from InputStream. strategyOrdinal: ");

        $i5 = (int) b0;

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numHashFunctions: ");

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dataLength: ");

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r4);

        throw $r11;

        catch java.lang.RuntimeException from label01 to label02 with label19;
        catch java.lang.RuntimeException from label03 to label04 with label19;
        catch java.lang.RuntimeException from label05 to label06 with label19;
        catch java.lang.RuntimeException from label07 to label08 with label19;
        catch java.lang.RuntimeException from label09 to label10 with label19;
        catch java.lang.RuntimeException from label11 to label12 with label19;
        catch java.lang.RuntimeException from label14 to label15 with label19;
        catch java.lang.RuntimeException from label17 to label18 with label19;
    }

    private java.lang.Object writeReplace()
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilter$SerialForm $r1;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 = new com.google.common.hash.BloomFilter$SerialForm;

        specialinvoke $r1.<com.google.common.hash.BloomFilter$SerialForm: void <init>(com.google.common.hash.BloomFilter)>(r0);

        return $r1;
    }

    public boolean apply(java.lang.Object)
    {
        com.google.common.hash.BloomFilter r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.hash.BloomFilter: boolean mightContain(java.lang.Object)>(r1);

        return $z0;
    }

    public long approximateElementCount()
    {
        com.google.common.hash.BloomFilter r0;
        long $l0, $l1;
        int $i2;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r1;
        double d0, $d1;
        java.math.RoundingMode $r2;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $l0 = virtualinvoke r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long bitSize()>();

        r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $l1 = virtualinvoke r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long bitCount()>();

        d0 = (double) $l1;

        $d1 = (double) $l0;

        d0 = d0 / $d1;

        d0 = neg d0;

        d0 = staticinvoke <java.lang.Math: double log1p(double)>(d0);

        d0 = neg d0;

        $d1 = (double) $l0;

        d0 = d0 * $d1;

        $i2 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $d1 = (double) $i2;

        d0 = d0 / $d1;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        $l0 = staticinvoke <com.google.common.math.DoubleMath: long roundToLong(double,java.math.RoundingMode)>(d0, $r2);

        return $l0;
    }

    long bitSize()
    {
        com.google.common.hash.BloomFilter r0;
        long $l0;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r1;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $l0 = virtualinvoke $r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long bitSize()>();

        return $l0;
    }

    public com.google.common.hash.BloomFilter copy()
    {
        com.google.common.hash.Funnel $r2;
        com.google.common.hash.BloomFilter$Strategy $r3;
        int $i0;
        com.google.common.hash.BloomFilter r0, $r1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r4;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 = new com.google.common.hash.BloomFilter;

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $r4 = virtualinvoke $r4.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray copy()>();

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        specialinvoke $r1.<com.google.common.hash.BloomFilter: void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)>($r4, $i0, $r2, $r3);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.hash.BloomFilter r0, r2;
        com.google.common.hash.Funnel $r3, $r4;
        com.google.common.hash.BloomFilter$Strategy $r7, $r8;
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r5, $r6;
        boolean z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        z0 = $r1 instanceof com.google.common.hash.BloomFilter;

        if z0 == 0 goto label2;

        r2 = (com.google.common.hash.BloomFilter) $r1;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $i1 = r2.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        if $i0 != $i1 goto label2;

        $r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $r4 = r2.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if z0 == 0 goto label2;

        $r5 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $r6 = r2.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        z0 = virtualinvoke $r5.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: boolean equals(java.lang.Object)>($r6);

        if z0 == 0 goto label2;

        $r7 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r8 = r2.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public double expectedFpp()
    {
        int $i1;
        com.google.common.hash.BloomFilter r0;
        long $l0;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r1;
        double $d0, $d1;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $l0 = virtualinvoke $r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long bitCount()>();

        $d0 = (double) $l0;

        $l0 = virtualinvoke r0.<com.google.common.hash.BloomFilter: long bitSize()>();

        $d1 = (double) $l0;

        $d0 = $d0 / $d1;

        $i1 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $d1 = (double) $i1;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        return $d0;
    }

    public int hashCode()
    {
        com.google.common.hash.Funnel $r1;
        com.google.common.hash.BloomFilter$Strategy $r2;
        java.lang.Object[] $r5;
        int $i0;
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r3;
        java.lang.Integer $r4;

        r0 := @this: com.google.common.hash.BloomFilter;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = $r4;

        $r5[1] = $r1;

        $r5[2] = $r2;

        $r5[3] = $r3;

        $i0 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r5);

        return $i0;
    }

    public boolean isCompatible(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter r0, r1;
        long $l3, $l4;
        com.google.common.hash.BloomFilter$Strategy $r2, $r3;
        com.google.common.hash.Funnel $r4, $r5;
        byte $b0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: com.google.common.hash.BloomFilter;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if r0 == r1 goto label1;

        $i1 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $i2 = r1.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        if $i1 != $i2 goto label1;

        $l3 = virtualinvoke r0.<com.google.common.hash.BloomFilter: long bitSize()>();

        $l4 = virtualinvoke r1.<com.google.common.hash.BloomFilter: long bitSize()>();

        $b0 = $l3 cmp $l4;

        if $b0 != 0 goto label1;

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r3 = r1.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $r5 = r1.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean mightContain(java.lang.Object)
    {
        com.google.common.hash.Funnel $r2;
        com.google.common.hash.BloomFilter$Strategy $r4;
        int $i0;
        com.google.common.hash.BloomFilter r0;
        java.lang.Object r1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r3;
        boolean $z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $z0 = interfaceinvoke $r4.<com.google.common.hash.BloomFilter$Strategy: boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)>(r1, $r2, $i0, $r3);

        return $z0;
    }

    public boolean put(java.lang.Object)
    {
        com.google.common.hash.Funnel $r2;
        com.google.common.hash.BloomFilter$Strategy $r4;
        int $i0;
        com.google.common.hash.BloomFilter r0;
        java.lang.Object r1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r3;
        boolean $z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $z0 = interfaceinvoke $r4.<com.google.common.hash.BloomFilter$Strategy: boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)>(r1, $r2, $i0, $r3);

        return $z0;
    }

    public void putAll(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter r0, r1;
        long $l3, $l4;
        com.google.common.hash.BloomFilter$Strategy $r2, $r3;
        com.google.common.hash.Funnel $r4, $r5;
        byte $b0;
        int $i1, $i2;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray $r6, $r7;
        boolean $z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: com.google.common.hash.BloomFilter;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if r0 == r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot combine a BloomFilter with itself.");

        $i1 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $i2 = r1.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        if $i1 != $i2 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $i1 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $i2 = r1.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "BloomFilters must have the same number of hash functions (%s != %s)", $i1, $i2);

        $l3 = virtualinvoke r0.<com.google.common.hash.BloomFilter: long bitSize()>();

        $l4 = virtualinvoke r1.<com.google.common.hash.BloomFilter: long bitSize()>();

        $b0 = $l3 cmp $l4;

        if $b0 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        $l3 = virtualinvoke r0.<com.google.common.hash.BloomFilter: long bitSize()>();

        $l4 = virtualinvoke r1.<com.google.common.hash.BloomFilter: long bitSize()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,long)>($z0, "BloomFilters must have the same size underlying bit arrays (%s != %s)", $l3, $l4);

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r3 = r1.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r3 = r1.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "BloomFilters must have equal strategies (%s != %s)", $r2, $r3);

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $r5 = r1.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $r5 = r1.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "BloomFilters must have equal funnels (%s != %s)", $r4, $r5);

        $r6 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        $r7 = r1.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        virtualinvoke $r6.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: void putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)>($r7);

        return;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        com.google.common.hash.BloomFilter r0;
        long l1;
        com.google.common.hash.BloomFilter$Strategy r2;
        byte $b2;
        java.io.DataOutputStream $r5;
        int $i0, $i3;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r3;
        java.util.concurrent.atomic.AtomicLongArray r4;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 := @parameter0: java.io.OutputStream;

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $i0 = interfaceinvoke r2.<com.google.common.hash.BloomFilter$Strategy: int ordinal()>();

        l1 = (long) $i0;

        $b2 = staticinvoke <com.google.common.primitives.SignedBytes: byte checkedCast(long)>(l1);

        $i0 = (int) $b2;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeByte(int)>($i0);

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        l1 = (long) $i0;

        $b2 = staticinvoke <com.google.common.primitives.UnsignedBytes: byte checkedCast(long)>(l1);

        $i0 = (int) $b2;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeByte(int)>($i0);

        r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        r4 = r3.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = 0;

     label1:
        r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        r4 = r3.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i3 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        if $i0 >= $i3 goto label2;

        r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits>;

        r4 = r3.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        l1 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i0);

        virtualinvoke $r5.<java.io.DataOutputStream: void writeLong(long)>(l1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
}
