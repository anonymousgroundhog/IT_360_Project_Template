class com.google.common.util.concurrent.ExecutionSequencer$1 extends java.lang.Object implements com.google.common.util.concurrent.AsyncCallable
{
    final java.util.concurrent.Callable val$callable;

    void <init>(com.google.common.util.concurrent.ExecutionSequencer, java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable $r2;
        com.google.common.util.concurrent.ExecutionSequencer $r1;
        com.google.common.util.concurrent.ExecutionSequencer$1 r0;

        r0 := @this: com.google.common.util.concurrent.ExecutionSequencer$1;

        $r1 := @parameter0: com.google.common.util.concurrent.ExecutionSequencer;

        $r2 := @parameter1: java.util.concurrent.Callable;

        r0.<com.google.common.util.concurrent.ExecutionSequencer$1: java.util.concurrent.Callable val$callable> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture call() throws java.lang.Exception
    {
        com.google.common.util.concurrent.ExecutionSequencer$1 r0;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.Callable $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.util.concurrent.ExecutionSequencer$1;

        $r1 = r0.<com.google.common.util.concurrent.ExecutionSequencer$1: java.util.concurrent.Callable val$callable>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>($r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.Callable $r2;
        java.lang.String $r1;
        com.google.common.util.concurrent.ExecutionSequencer$1 r0;

        r0 := @this: com.google.common.util.concurrent.ExecutionSequencer$1;

        $r2 = r0.<com.google.common.util.concurrent.ExecutionSequencer$1: java.util.concurrent.Callable val$callable>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
}
