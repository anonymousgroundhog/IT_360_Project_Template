class kotlin.collections.AbstractList$ListIteratorImpl extends kotlin.collections.AbstractList$IteratorImpl implements java.util.ListIterator, kotlin.jvm.internal.markers.KMappedMarker
{
    final kotlin.collections.AbstractList this$0;

    public void <init>(kotlin.collections.AbstractList, int)
    {
        kotlin.collections.AbstractList $r1;
        kotlin.collections.AbstractList$Companion $r2;
        int $i0, $i1;
        kotlin.collections.AbstractList$ListIteratorImpl r0;

        r0 := @this: kotlin.collections.AbstractList$ListIteratorImpl;

        $r1 := @parameter0: kotlin.collections.AbstractList;

        $i0 := @parameter1: int;

        r0.<kotlin.collections.AbstractList$ListIteratorImpl: kotlin.collections.AbstractList this$0> = $r1;

        specialinvoke r0.<kotlin.collections.AbstractList$IteratorImpl: void <init>(kotlin.collections.AbstractList)>($r1);

        $r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $r1 = r0.<kotlin.collections.AbstractList$ListIteratorImpl: kotlin.collections.AbstractList this$0>;

        $i1 = virtualinvoke $r1.<kotlin.collections.AbstractList: int size()>();

        virtualinvoke $r2.<kotlin.collections.AbstractList$Companion: void checkPositionIndex$kotlin_stdlib(int,int)>($i0, $i1);

        virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: void setIndex(int)>($i0);

        return;
    }

    public void add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        kotlin.collections.AbstractList$ListIteratorImpl r0;

        r0 := @this: kotlin.collections.AbstractList$ListIteratorImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean hasPrevious()
    {
        int $i0;
        kotlin.collections.AbstractList$ListIteratorImpl r0;

        r0 := @this: kotlin.collections.AbstractList$ListIteratorImpl;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: int getIndex()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int nextIndex()
    {
        int $i0;
        kotlin.collections.AbstractList$ListIteratorImpl r0;

        r0 := @this: kotlin.collections.AbstractList$ListIteratorImpl;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: int getIndex()>();

        return $i0;
    }

    public java.lang.Object previous()
    {
        kotlin.collections.AbstractList $r1;
        int $i0;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;
        kotlin.collections.AbstractList$ListIteratorImpl r0;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractList$ListIteratorImpl;

        $z0 = virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: boolean hasPrevious()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<kotlin.collections.AbstractList$ListIteratorImpl: kotlin.collections.AbstractList this$0>;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: int getIndex()>();

        $i0 = $i0 + -1;

        virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: void setIndex(int)>($i0);

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: int getIndex()>();

        $r2 = virtualinvoke $r1.<kotlin.collections.AbstractList: java.lang.Object get(int)>($i0);

        return $r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;
    }

    public int previousIndex()
    {
        int $i0;
        kotlin.collections.AbstractList$ListIteratorImpl r0;

        r0 := @this: kotlin.collections.AbstractList$ListIteratorImpl;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractList$ListIteratorImpl: int getIndex()>();

        $i0 = $i0 + -1;

        return $i0;
    }

    public void set(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        kotlin.collections.AbstractList$ListIteratorImpl r0;

        r0 := @this: kotlin.collections.AbstractList$ListIteratorImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }
}
