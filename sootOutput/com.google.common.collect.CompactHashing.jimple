final class com.google.common.collect.CompactHashing extends java.lang.Object
{
    private static final int BYTE_MASK;
    private static final int BYTE_MAX_SIZE;
    static final int DEFAULT_SIZE;
    static final int HASH_TABLE_BITS_MASK;
    private static final int HASH_TABLE_BITS_MAX_BITS;
    static final int MAX_SIZE;
    private static final int MIN_HASH_TABLE_SIZE;
    static final int MODIFICATION_COUNT_INCREMENT;
    private static final int SHORT_MASK;
    private static final int SHORT_MAX_SIZE;
    static final byte UNSET;

    private void <init>()
    {
        com.google.common.collect.CompactHashing r0;

        r0 := @this: com.google.common.collect.CompactHashing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.Object createTable(int)
    {
        byte[] $r0;
        java.lang.IllegalArgumentException $r3;
        int[] $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        short[] $r1;
        java.lang.String $r5;

        $i0 := @parameter0: int;

        if $i0 < 2 goto label3;

        if $i0 > 1073741824 goto label3;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        if $i1 != $i0 goto label3;

        if $i0 > 256 goto label1;

        $r0 = newarray (byte)[$i0];

        return $r0;

     label1:
        if $i0 > 65536 goto label2;

        $r1 = newarray (short)[$i0];

        return $r1;

     label2:
        $r2 = newarray (int)[$i0];

        return $r2;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(52);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be power of 2 between 2^1 and 2^30: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    static int getHashPrefix(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i1 = $i1 ^ -1;

        $i0 = $i1 & $i0;

        return $i0;
    }

    static int getNext(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 & $i1;

        return $i0;
    }

    static int maskCombine(int, int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = $i2 ^ -1;

        $i0 = $i3 & $i0;

        $i1 = $i1 & $i2;

        $i0 = $i0 | $i1;

        return $i0;
    }

    static int newCapacity(int)
    {
        int $i0;
        byte $b1;

        $i0 := @parameter0: int;

        if $i0 >= 32 goto label1;

        $b1 = 4;

        goto label2;

     label1:
        $b1 = 2;

     label2:
        $i0 = $i0 + 1;

        $i0 = $b1 * $i0;

        return $i0;
    }

    static int remove(java.lang.Object, java.lang.Object, int, java.lang.Object, int[], java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] $r4, $r5;
        int[] $r3;
        int $i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.Object $r0, $r1, $r2, r6;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $r3 := @parameter4: int[];

        $r4 := @parameter5: java.lang.Object[];

        $r5 := @parameter6: java.lang.Object[];

        $i4 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r0);

        i1 = $i4 & $i0;

        $i5 = staticinvoke <com.google.common.collect.CompactHashing: int tableGet(java.lang.Object,int)>($r2, i1);

        i2 = $i5;

        if $i5 != 0 goto label1;

        return -1;

     label1:
        $i5 = staticinvoke <com.google.common.collect.CompactHashing: int getHashPrefix(int,int)>($i4, $i0);

        $i4 = -1;

     label2:
        i2 = i2 + -1;

        i3 = $r3[i2];

        $i6 = staticinvoke <com.google.common.collect.CompactHashing: int getHashPrefix(int,int)>(i3, $i0);

        if $i6 != $i5 goto label5;

        r6 = $r4[i2];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r0, r6);

        if $z0 == 0 goto label5;

        if $r5 == null goto label3;

        r6 = $r5[i2];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, r6);

        if $z0 == 0 goto label5;

     label3:
        $i5 = staticinvoke <com.google.common.collect.CompactHashing: int getNext(int,int)>(i3, $i0);

        if $i4 != -1 goto label4;

        staticinvoke <com.google.common.collect.CompactHashing: void tableSet(java.lang.Object,int,int)>($r2, i1, $i5);

        return i2;

     label4:
        i1 = $r3[$i4];

        $i0 = staticinvoke <com.google.common.collect.CompactHashing: int maskCombine(int,int,int)>(i1, $i5, $i0);

        $r3[$i4] = $i0;

        return i2;

     label5:
        $i4 = i2;

        i3 = staticinvoke <com.google.common.collect.CompactHashing: int getNext(int,int)>(i3, $i0);

        i2 = i3;

        if i3 != 0 goto label2;

        return -1;
    }

    static void tableClear(java.lang.Object)
    {
        byte[] $r1;
        int[] $r3;
        java.lang.Object $r0;
        short[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof byte[];

        if $z0 == 0 goto label1;

        $r1 = (byte[]) $r0;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 0);

        return;

     label1:
        $z0 = $r0 instanceof short[];

        if $z0 == 0 goto label2;

        $r2 = (short[]) $r0;

        staticinvoke <java.util.Arrays: void fill(short[],short)>($r2, 0);

        return;

     label2:
        $r3 = (int[]) $r0;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, 0);

        return;
    }

    static int tableGet(java.lang.Object, int)
    {
        byte[] $r1;
        short $s2;
        byte $b1;
        int[] $r3;
        int $i0;
        java.lang.Object $r0;
        short[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $z0 = $r0 instanceof byte[];

        if $z0 == 0 goto label1;

        $r1 = (byte[]) $r0;

        $b1 = $r1[$i0];

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $i0 = (int) $s2;

        return $i0;

     label1:
        $z0 = $r0 instanceof short[];

        if $z0 == 0 goto label2;

        $r2 = (short[]) $r0;

        $s2 = $r2[$i0];

        $i0 = (int) $s2;

        $i0 = $i0 & 65535;

        return $i0;

     label2:
        $r3 = (int[]) $r0;

        $i0 = $r3[$i0];

        return $i0;
    }

    static void tableSet(java.lang.Object, int, int)
    {
        byte[] $r1;
        short $s3;
        byte $b2;
        int[] $r3;
        int $i0, $i1;
        java.lang.Object $r0;
        short[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r0 instanceof byte[];

        if $z0 == 0 goto label1;

        $r1 = (byte[]) $r0;

        $b2 = (byte) $i1;

        $r1[$i0] = $b2;

        return;

     label1:
        $z0 = $r0 instanceof short[];

        if $z0 == 0 goto label2;

        $r2 = (short[]) $r0;

        $s3 = (short) $i1;

        $r2[$i0] = $s3;

        return;

     label2:
        $r3 = (int[]) $r0;

        $r3[$i0] = $i1;

        return;
    }

    static int tableSize(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 + 1;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int closedTableSize(int,double)>($i0, 1.0);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i0);

        return $i0;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.CompactHashing: int SHORT_MAX_SIZE> = 65536;

        <com.google.common.collect.CompactHashing: int SHORT_MASK> = 65535;

        <com.google.common.collect.CompactHashing: int MODIFICATION_COUNT_INCREMENT> = 32;

        <com.google.common.collect.CompactHashing: int MIN_HASH_TABLE_SIZE> = 4;

        <com.google.common.collect.CompactHashing: int MAX_SIZE> = 1073741823;

        <com.google.common.collect.CompactHashing: int HASH_TABLE_BITS_MAX_BITS> = 5;

        <com.google.common.collect.CompactHashing: int HASH_TABLE_BITS_MASK> = 31;

        <com.google.common.collect.CompactHashing: int DEFAULT_SIZE> = 3;

        <com.google.common.collect.CompactHashing: int BYTE_MAX_SIZE> = 256;

        <com.google.common.collect.CompactHashing: int BYTE_MASK> = 255;

        return;
    }
}
