public final class kotlin.ranges.LongRange extends kotlin.ranges.LongProgression implements kotlin.ranges.ClosedRange, kotlin.ranges.OpenEndRange
{
    public static final kotlin.ranges.LongRange$Companion Companion;
    private static final kotlin.ranges.LongRange EMPTY;

    static void <clinit>()
    {
        kotlin.ranges.LongRange $r1;
        kotlin.ranges.LongRange$Companion $r0;

        $r0 = new kotlin.ranges.LongRange$Companion;

        specialinvoke $r0.<kotlin.ranges.LongRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.ranges.LongRange: kotlin.ranges.LongRange$Companion Companion> = $r0;

        $r1 = new kotlin.ranges.LongRange;

        specialinvoke $r1.<kotlin.ranges.LongRange: void <init>(long,long)>(1L, 0L);

        <kotlin.ranges.LongRange: kotlin.ranges.LongRange EMPTY> = $r1;

        return;
    }

    public void <init>(long, long)
    {
        long $l0, $l1;
        kotlin.ranges.LongRange r0;

        r0 := @this: kotlin.ranges.LongRange;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        specialinvoke r0.<kotlin.ranges.LongProgression: void <init>(long,long,long)>($l0, $l1, 1L);

        return;
    }

    public static final kotlin.ranges.LongRange access$getEMPTY$cp()
    {
        kotlin.ranges.LongRange r0;

        r0 = <kotlin.ranges.LongRange: kotlin.ranges.LongRange EMPTY>;

        return r0;
    }

    public static void getEndExclusive$annotations()
    {
        return;
    }

    public boolean contains(long)
    {
        byte $b2;
        int $i3;
        long $l0, $l1;
        kotlin.ranges.LongRange r0;

        r0 := @this: kotlin.ranges.LongRange;

        $l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getFirst()>();

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 > 0 goto label1;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean contains(java.lang.Comparable)
    {
        java.lang.Comparable $r1;
        long $l0;
        kotlin.ranges.LongRange r0;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: kotlin.ranges.LongRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Number) $r1;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        $z0 = virtualinvoke r0.<kotlin.ranges.LongRange: boolean contains(long)>($l0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b2;
        java.lang.Object $r1;
        long $l0, $l1;
        kotlin.ranges.LongRange r0, $r2;
        boolean $z0;

        r0 := @this: kotlin.ranges.LongRange;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.LongRange;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<kotlin.ranges.LongRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.LongRange) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.LongRange: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $l0 = virtualinvoke r0.<kotlin.ranges.LongRange: long getFirst()>();

        $r2 = (kotlin.ranges.LongRange) $r1;

        $l1 = virtualinvoke $r2.<kotlin.ranges.LongRange: long getFirst()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $l0 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        r0 = (kotlin.ranges.LongRange) $r1;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public volatile java.lang.Comparable getEndExclusive()
    {
        java.lang.Comparable $r2;
        kotlin.ranges.LongRange r0;
        java.lang.Long $r1;

        r0 := @this: kotlin.ranges.LongRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.LongRange: java.lang.Long getEndExclusive()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Long getEndExclusive()
    {
        java.lang.IllegalStateException $r2;
        byte $b0;
        java.lang.Long $r1;
        long $l1;
        java.lang.String $r3;
        kotlin.ranges.LongRange r0;

        r0 := @this: kotlin.ranges.LongRange;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $b0 = $l1 cmp 9223372036854775807L;

        if $b0 == 0 goto label1;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $l1 = $l1 + 1L;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Cannot return the exclusive upper bound of a range that includes MAX_VALUE.";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public volatile java.lang.Comparable getEndInclusive()
    {
        java.lang.Comparable $r2;
        kotlin.ranges.LongRange r0;
        java.lang.Long $r1;

        r0 := @this: kotlin.ranges.LongRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.LongRange: java.lang.Long getEndInclusive()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Long getEndInclusive()
    {
        long $l0;
        kotlin.ranges.LongRange r0;
        java.lang.Long $r1;

        r0 := @this: kotlin.ranges.LongRange;

        $l0 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public volatile java.lang.Comparable getStart()
    {
        java.lang.Comparable $r2;
        kotlin.ranges.LongRange r0;
        java.lang.Long $r1;

        r0 := @this: kotlin.ranges.LongRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.LongRange: java.lang.Long getStart()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Long getStart()
    {
        long $l0;
        kotlin.ranges.LongRange r0;
        java.lang.Long $r1;

        r0 := @this: kotlin.ranges.LongRange;

        $l0 = virtualinvoke r0.<kotlin.ranges.LongRange: long getFirst()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public int hashCode()
    {
        int $i3;
        long $l0, $l1, $l2;
        kotlin.ranges.LongRange r0;
        boolean $z0;

        r0 := @this: kotlin.ranges.LongRange;

        $z0 = virtualinvoke r0.<kotlin.ranges.LongRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $l0 = (long) 31;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getFirst()>();

        $l2 = virtualinvoke r0.<kotlin.ranges.LongRange: long getFirst()>();

        $l2 = $l2 >>> 32;

        $l1 = $l1 ^ $l2;

        $l0 = $l0 * $l1;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $l2 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $l2 = $l2 >>> 32;

        $l1 = $l1 ^ $l2;

        $l0 = $l0 + $l1;

        $i3 = (int) $l0;

        return $i3;
    }

    public boolean isEmpty()
    {
        byte $b0;
        int $i3;
        long $l1, $l2;
        kotlin.ranges.LongRange r0;

        r0 := @this: kotlin.ranges.LongRange;

        $l1 = virtualinvoke r0.<kotlin.ranges.LongRange: long getFirst()>();

        $l2 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $b0 = $l1 cmp $l2;

        $i3 = (int) $b0;

        if $i3 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        long $l0;
        java.lang.String $r2;
        kotlin.ranges.LongRange r0;

        r0 := @this: kotlin.ranges.LongRange;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $l0 = virtualinvoke r0.<kotlin.ranges.LongRange: long getFirst()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $l0 = virtualinvoke r0.<kotlin.ranges.LongRange: long getLast()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
