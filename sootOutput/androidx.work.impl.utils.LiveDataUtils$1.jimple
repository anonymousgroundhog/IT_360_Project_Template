class androidx.work.impl.utils.LiveDataUtils$1 extends java.lang.Object implements androidx.lifecycle.Observer
{
    java.lang.Object mCurrentOutput;
    final java.lang.Object val$lock;
    final androidx.arch.core.util.Function val$mappingMethod;
    final androidx.lifecycle.MediatorLiveData val$outputLiveData;
    final androidx.work.impl.utils.taskexecutor.TaskExecutor val$workTaskExecutor;

    void <init>(androidx.work.impl.utils.taskexecutor.TaskExecutor, java.lang.Object, androidx.arch.core.util.Function, androidx.lifecycle.MediatorLiveData)
    {
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r4;
        androidx.work.impl.utils.LiveDataUtils$1 r0;
        java.lang.Object $r1;
        androidx.arch.core.util.Function $r2;
        androidx.lifecycle.MediatorLiveData $r3;

        r0 := @this: androidx.work.impl.utils.LiveDataUtils$1;

        $r4 := @parameter0: androidx.work.impl.utils.taskexecutor.TaskExecutor;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: androidx.arch.core.util.Function;

        $r3 := @parameter3: androidx.lifecycle.MediatorLiveData;

        r0.<androidx.work.impl.utils.LiveDataUtils$1: androidx.work.impl.utils.taskexecutor.TaskExecutor val$workTaskExecutor> = $r4;

        r0.<androidx.work.impl.utils.LiveDataUtils$1: java.lang.Object val$lock> = $r1;

        r0.<androidx.work.impl.utils.LiveDataUtils$1: androidx.arch.core.util.Function val$mappingMethod> = $r2;

        r0.<androidx.work.impl.utils.LiveDataUtils$1: androidx.lifecycle.MediatorLiveData val$outputLiveData> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.LiveDataUtils$1: java.lang.Object mCurrentOutput> = null;

        return;
    }

    public void onChanged(java.lang.Object)
    {
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r2;
        androidx.work.impl.utils.LiveDataUtils$1 r0;
        androidx.work.impl.utils.LiveDataUtils$1$1 $r3;
        java.lang.Object r1;

        r0 := @this: androidx.work.impl.utils.LiveDataUtils$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.work.impl.utils.LiveDataUtils$1: androidx.work.impl.utils.taskexecutor.TaskExecutor val$workTaskExecutor>;

        $r3 = new androidx.work.impl.utils.LiveDataUtils$1$1;

        specialinvoke $r3.<androidx.work.impl.utils.LiveDataUtils$1$1: void <init>(androidx.work.impl.utils.LiveDataUtils$1,java.lang.Object)>(r0, r1);

        interfaceinvoke $r2.<androidx.work.impl.utils.taskexecutor.TaskExecutor: void executeOnBackgroundThread(java.lang.Runnable)>($r3);

        return;
    }
}
