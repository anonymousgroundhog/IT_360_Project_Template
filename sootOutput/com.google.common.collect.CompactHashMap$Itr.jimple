abstract class com.google.common.collect.CompactHashMap$Itr extends java.lang.Object implements java.util.Iterator
{
    int currentIndex;
    int expectedMetadata;
    int indexToRemove;
    final com.google.common.collect.CompactHashMap this$0;

    private void <init>(com.google.common.collect.CompactHashMap)
    {
        int $i0;
        com.google.common.collect.CompactHashMap$Itr r0;
        com.google.common.collect.CompactHashMap $r1;

        r0 := @this: com.google.common.collect.CompactHashMap$Itr;

        $r1 := @parameter0: com.google.common.collect.CompactHashMap;

        r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0>;

        $i0 = staticinvoke <com.google.common.collect.CompactHashMap: int access$000(com.google.common.collect.CompactHashMap)>($r1);

        r0.<com.google.common.collect.CompactHashMap$Itr: int expectedMetadata> = $i0;

        $r1 = r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.CompactHashMap: int firstEntryIndex()>();

        r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex> = $i0;

        r0.<com.google.common.collect.CompactHashMap$Itr: int indexToRemove> = -1;

        return;
    }

    void <init>(com.google.common.collect.CompactHashMap, com.google.common.collect.CompactHashMap$1)
    {
        com.google.common.collect.CompactHashMap$1 $r2;
        com.google.common.collect.CompactHashMap$Itr r0;
        com.google.common.collect.CompactHashMap $r1;

        r0 := @this: com.google.common.collect.CompactHashMap$Itr;

        $r1 := @parameter0: com.google.common.collect.CompactHashMap;

        $r2 := @parameter1: com.google.common.collect.CompactHashMap$1;

        specialinvoke r0.<com.google.common.collect.CompactHashMap$Itr: void <init>(com.google.common.collect.CompactHashMap)>($r1);

        return;
    }

    private void checkForConcurrentModification()
    {
        int $i0, $i1;
        com.google.common.collect.CompactHashMap$Itr r0;
        com.google.common.collect.CompactHashMap $r1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: com.google.common.collect.CompactHashMap$Itr;

        $r1 = r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0>;

        $i1 = staticinvoke <com.google.common.collect.CompactHashMap: int access$000(com.google.common.collect.CompactHashMap)>($r1);

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int expectedMetadata>;

        if $i1 != $i0 goto label1;

        return;

     label1:
        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;
    }

    abstract java.lang.Object getOutput(int);

    public boolean hasNext()
    {
        int $i0;
        com.google.common.collect.CompactHashMap$Itr r0;

        r0 := @this: com.google.common.collect.CompactHashMap$Itr;

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex>;

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    void incrementExpectedModCount()
    {
        int $i0;
        com.google.common.collect.CompactHashMap$Itr r0;

        r0 := @this: com.google.common.collect.CompactHashMap$Itr;

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int expectedMetadata>;

        $i0 = $i0 + 32;

        r0.<com.google.common.collect.CompactHashMap$Itr: int expectedMetadata> = $i0;

        return;
    }

    public java.lang.Object next()
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap$Itr r0;
        com.google.common.collect.CompactHashMap $r2;
        java.util.NoSuchElementException r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap$Itr;

        specialinvoke r0.<com.google.common.collect.CompactHashMap$Itr: void checkForConcurrentModification()>();

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap$Itr: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex>;

        r0.<com.google.common.collect.CompactHashMap$Itr: int indexToRemove> = $i0;

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex>;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap$Itr: java.lang.Object getOutput(int)>($i0);

        $r2 = r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0>;

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex>;

        $i0 = virtualinvoke $r2.<com.google.common.collect.CompactHashMap: int getSuccessor(int)>($i0);

        r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex> = $i0;

        return $r1;

     label1:
        r3 = new java.util.NoSuchElementException;

        specialinvoke r3.<java.util.NoSuchElementException: void <init>()>();

        throw r3;
    }

    public void remove()
    {
        int $i0, $i1;
        java.lang.Object $r3;
        com.google.common.collect.CompactHashMap$Itr r0;
        com.google.common.collect.CompactHashMap $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap$Itr;

        specialinvoke r0.<com.google.common.collect.CompactHashMap$Itr: void checkForConcurrentModification()>();

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int indexToRemove>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.collect.CollectPreconditions: void checkRemove(boolean)>($z0);

        virtualinvoke r0.<com.google.common.collect.CompactHashMap$Itr: void incrementExpectedModCount()>();

        $r1 = r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0>;

        $r2 = r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0>;

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int indexToRemove>;

        $r3 = staticinvoke <com.google.common.collect.CompactHashMap: java.lang.Object access$100(com.google.common.collect.CompactHashMap,int)>($r2, $i0);

        virtualinvoke $r1.<com.google.common.collect.CompactHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        $r1 = r0.<com.google.common.collect.CompactHashMap$Itr: com.google.common.collect.CompactHashMap this$0>;

        $i0 = r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex>;

        $i1 = r0.<com.google.common.collect.CompactHashMap$Itr: int indexToRemove>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.CompactHashMap: int adjustAfterRemove(int,int)>($i0, $i1);

        r0.<com.google.common.collect.CompactHashMap$Itr: int currentIndex> = $i0;

        r0.<com.google.common.collect.CompactHashMap$Itr: int indexToRemove> = -1;

        return;
    }
}
