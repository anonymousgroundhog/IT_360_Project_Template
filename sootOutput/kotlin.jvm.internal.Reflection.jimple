public class kotlin.jvm.internal.Reflection extends java.lang.Object
{
    private static final kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY;
    static final java.lang.String REFLECTION_NOT_AVAILABLE;
    private static final kotlin.jvm.internal.ReflectionFactory factory;

    static void <clinit>()
    {
        java.lang.IllegalAccessException r3;
        java.lang.ClassCastException r6;
        kotlin.reflect.KClass[] r7;
        kotlin.jvm.internal.ReflectionFactory r2;
        java.lang.InstantiationException r4;
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.ClassNotFoundException r5;

        <kotlin.jvm.internal.Reflection: java.lang.String REFLECTION_NOT_AVAILABLE> = " (Kotlin reflection is not available)";

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.reflect.jvm.internal.ReflectionFactoryImpl");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label02:
        r2 = (kotlin.jvm.internal.ReflectionFactory) $r1;

     label03:
        goto label08;

     label04:
        r3 := @caughtexception;

        r2 = null;

        goto label08;

     label05:
        r4 := @caughtexception;

        r2 = null;

        goto label08;

     label06:
        r5 := @caughtexception;

        r2 = null;

        goto label08;

     label07:
        r6 := @caughtexception;

        r2 = null;

     label08:
        if r2 == null goto label09;

        goto label10;

     label09:
        r2 = new kotlin.jvm.internal.ReflectionFactory;

        specialinvoke r2.<kotlin.jvm.internal.ReflectionFactory: void <init>()>();

     label10:
        <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory> = r2;

        r7 = newarray (kotlin.reflect.KClass)[0];

        <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY> = r7;

        return;

        catch java.lang.ClassCastException from label01 to label03 with label07;
        catch java.lang.ClassNotFoundException from label01 to label02 with label06;
        catch java.lang.InstantiationException from label01 to label02 with label05;
        catch java.lang.IllegalAccessException from label01 to label02 with label04;
    }

    public void <init>()
    {
        kotlin.jvm.internal.Reflection r0;

        r0 := @this: kotlin.jvm.internal.Reflection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static kotlin.reflect.KClass createKotlinClass(java.lang.Class)
    {
        java.lang.Class $r0;
        kotlin.reflect.KClass $r1;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: java.lang.Class;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass createKotlinClass(java.lang.Class)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KClass createKotlinClass(java.lang.Class, java.lang.String)
    {
        kotlin.reflect.KClass $r2;
        kotlin.jvm.internal.ReflectionFactory $r3;
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

        $r3 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = virtualinvoke $r3.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass createKotlinClass(java.lang.Class,java.lang.String)>($r0, $r1);

        return $r2;
    }

    public static kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference)
    {
        kotlin.jvm.internal.FunctionReference $r0;
        kotlin.reflect.KFunction $r1;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.FunctionReference;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)
    {
        java.lang.Class $r0;
        kotlin.reflect.KClass $r1;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: java.lang.Class;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class, java.lang.String)
    {
        kotlin.reflect.KClass $r2;
        kotlin.jvm.internal.ReflectionFactory $r3;
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

        $r3 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = virtualinvoke $r3.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class,java.lang.String)>($r0, $r1);

        return $r2;
    }

    public static kotlin.reflect.KClass[] getOrCreateKotlinClasses(java.lang.Class[])
    {
        kotlin.reflect.KClass[] r2;
        kotlin.reflect.KClass $r1;
        int i0, i1;
        java.lang.Class[] $r0;
        java.lang.Class $r3;

        $r0 := @parameter0: java.lang.Class[];

        i0 = lengthof $r0;

        if i0 != 0 goto label1;

        r2 = <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY>;

        return r2;

     label1:
        r2 = newarray (kotlin.reflect.KClass)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = $r0[i1];

        $r1 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r3);

        r2[i1] = $r1;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class)
    {
        kotlin.reflect.KDeclarationContainer $r1;
        java.lang.Class $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: java.lang.Class;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String)>($r0, "");

        return $r1;
    }

    public static kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class, java.lang.String)
    {
        kotlin.jvm.internal.ReflectionFactory $r3;
        kotlin.reflect.KDeclarationContainer $r2;
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

        $r3 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = virtualinvoke $r3.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String)>($r0, $r1);

        return $r2;
    }

    public static kotlin.reflect.KType mutableCollectionType(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0;
        kotlin.jvm.internal.ReflectionFactory $r1;

        $r0 := @parameter0: kotlin.reflect.KType;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r0 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType mutableCollectionType(kotlin.reflect.KType)>($r0);

        return $r0;
    }

    public static kotlin.reflect.KMutableProperty0 mutableProperty0(kotlin.jvm.internal.MutablePropertyReference0)
    {
        kotlin.reflect.KMutableProperty0 $r1;
        kotlin.jvm.internal.MutablePropertyReference0 $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.MutablePropertyReference0;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KMutableProperty0 mutableProperty0(kotlin.jvm.internal.MutablePropertyReference0)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)
    {
        kotlin.reflect.KMutableProperty1 $r1;
        kotlin.jvm.internal.MutablePropertyReference1 $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.MutablePropertyReference1;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KMutableProperty2 mutableProperty2(kotlin.jvm.internal.MutablePropertyReference2)
    {
        kotlin.reflect.KMutableProperty2 $r1;
        kotlin.jvm.internal.MutablePropertyReference2 $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.MutablePropertyReference2;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KMutableProperty2 mutableProperty2(kotlin.jvm.internal.MutablePropertyReference2)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KType nothingType(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0;
        kotlin.jvm.internal.ReflectionFactory $r1;

        $r0 := @parameter0: kotlin.reflect.KType;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r0 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType nothingType(kotlin.reflect.KType)>($r0);

        return $r0;
    }

    public static kotlin.reflect.KType nullableTypeOf(java.lang.Class)
    {
        kotlin.reflect.KType $r4;
        java.util.List $r3;
        kotlin.reflect.KClass $r2;
        kotlin.jvm.internal.ReflectionFactory $r1;
        java.lang.Class $r0;

        $r0 := @parameter0: java.lang.Class;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r2, $r3, 1);

        return $r4;
    }

    public static kotlin.reflect.KType nullableTypeOf(java.lang.Class, kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KType $r5;
        java.util.List $r4;
        kotlin.reflect.KClass $r3;
        kotlin.jvm.internal.ReflectionFactory $r2;
        kotlin.reflect.KTypeProjection $r1;
        java.lang.Class $r0;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 1);

        return $r5;
    }

    public static kotlin.reflect.KType nullableTypeOf(java.lang.Class, kotlin.reflect.KTypeProjection, kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KClass $r4;
        kotlin.reflect.KTypeProjection $r1, $r2;
        kotlin.reflect.KType $r7;
        java.util.List $r6;
        kotlin.jvm.internal.ReflectionFactory $r3;
        java.lang.Class $r0;
        kotlin.reflect.KTypeProjection[] $r5;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: kotlin.reflect.KTypeProjection;

        $r2 := @parameter2: kotlin.reflect.KTypeProjection;

        $r3 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r4 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r5 = newarray (kotlin.reflect.KTypeProjection)[2];

        $r5[0] = $r1;

        $r5[1] = $r2;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r3.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r4, $r6, 1);

        return $r7;
    }

    public static transient kotlin.reflect.KType nullableTypeOf(java.lang.Class, kotlin.reflect.KTypeProjection[])
    {
        kotlin.reflect.KType $r5;
        java.util.List $r4;
        kotlin.reflect.KClass $r3;
        kotlin.jvm.internal.ReflectionFactory $r2;
        java.lang.Class $r0;
        kotlin.reflect.KTypeProjection[] $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: kotlin.reflect.KTypeProjection[];

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r4 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r1);

        $r5 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 1);

        return $r5;
    }

    public static kotlin.reflect.KType nullableTypeOf(kotlin.reflect.KClassifier)
    {
        kotlin.reflect.KType $r3;
        java.util.List $r2;
        kotlin.jvm.internal.ReflectionFactory $r1;
        kotlin.reflect.KClassifier $r0;

        $r0 := @parameter0: kotlin.reflect.KClassifier;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r0, $r2, 1);

        return $r3;
    }

    public static kotlin.reflect.KType platformType(kotlin.reflect.KType, kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0, $r1;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.reflect.KType;

        $r1 := @parameter1: kotlin.reflect.KType;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r0 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType platformType(kotlin.reflect.KType,kotlin.reflect.KType)>($r0, $r1);

        return $r0;
    }

    public static kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0)
    {
        kotlin.reflect.KProperty0 $r1;
        kotlin.jvm.internal.PropertyReference0 $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.PropertyReference0;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)
    {
        kotlin.reflect.KProperty1 $r1;
        kotlin.jvm.internal.PropertyReference1 $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.PropertyReference1;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)>($r0);

        return $r1;
    }

    public static kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2)
    {
        kotlin.jvm.internal.PropertyReference2 $r0;
        kotlin.reflect.KProperty2 $r1;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.PropertyReference2;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2)>($r0);

        return $r1;
    }

    public static java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)
    {
        java.lang.String $r1;
        kotlin.jvm.internal.FunctionBase $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.FunctionBase;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)>($r0);

        return $r1;
    }

    public static java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)
    {
        java.lang.String $r1;
        kotlin.jvm.internal.Lambda $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.jvm.internal.Lambda;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r1 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)>($r0);

        return $r1;
    }

    public static void setUpperBounds(kotlin.reflect.KTypeParameter, kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r1;
        java.util.List $r3;
        kotlin.reflect.KTypeParameter $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;

        $r0 := @parameter0: kotlin.reflect.KTypeParameter;

        $r1 := @parameter1: kotlin.reflect.KType;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: void setUpperBounds(kotlin.reflect.KTypeParameter,java.util.List)>($r0, $r3);

        return;
    }

    public static transient void setUpperBounds(kotlin.reflect.KTypeParameter, kotlin.reflect.KType[])
    {
        java.util.List $r3;
        kotlin.reflect.KTypeParameter $r0;
        kotlin.jvm.internal.ReflectionFactory $r2;
        kotlin.reflect.KType[] $r1;

        $r0 := @parameter0: kotlin.reflect.KTypeParameter;

        $r1 := @parameter1: kotlin.reflect.KType[];

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r1);

        virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: void setUpperBounds(kotlin.reflect.KTypeParameter,java.util.List)>($r0, $r3);

        return;
    }

    public static kotlin.reflect.KType typeOf(java.lang.Class)
    {
        kotlin.reflect.KType $r4;
        java.util.List $r3;
        kotlin.reflect.KClass $r2;
        kotlin.jvm.internal.ReflectionFactory $r1;
        java.lang.Class $r0;

        $r0 := @parameter0: java.lang.Class;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r2, $r3, 0);

        return $r4;
    }

    public static kotlin.reflect.KType typeOf(java.lang.Class, kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KType $r5;
        java.util.List $r4;
        kotlin.reflect.KClass $r3;
        kotlin.jvm.internal.ReflectionFactory $r2;
        kotlin.reflect.KTypeProjection $r1;
        java.lang.Class $r0;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 0);

        return $r5;
    }

    public static kotlin.reflect.KType typeOf(java.lang.Class, kotlin.reflect.KTypeProjection, kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KClass $r4;
        kotlin.reflect.KTypeProjection $r1, $r2;
        kotlin.reflect.KType $r7;
        java.util.List $r6;
        kotlin.jvm.internal.ReflectionFactory $r3;
        java.lang.Class $r0;
        kotlin.reflect.KTypeProjection[] $r5;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: kotlin.reflect.KTypeProjection;

        $r2 := @parameter2: kotlin.reflect.KTypeProjection;

        $r3 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r4 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r5 = newarray (kotlin.reflect.KTypeProjection)[2];

        $r5[0] = $r1;

        $r5[1] = $r2;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r3.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r4, $r6, 0);

        return $r7;
    }

    public static transient kotlin.reflect.KType typeOf(java.lang.Class, kotlin.reflect.KTypeProjection[])
    {
        kotlin.reflect.KType $r5;
        java.util.List $r4;
        kotlin.reflect.KClass $r3;
        kotlin.jvm.internal.ReflectionFactory $r2;
        java.lang.Class $r0;
        kotlin.reflect.KTypeProjection[] $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: kotlin.reflect.KTypeProjection[];

        $r2 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r0);

        $r4 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toList(java.lang.Object[])>($r1);

        $r5 = virtualinvoke $r2.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r3, $r4, 0);

        return $r5;
    }

    public static kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier)
    {
        kotlin.reflect.KType $r3;
        java.util.List $r2;
        kotlin.jvm.internal.ReflectionFactory $r1;
        kotlin.reflect.KClassifier $r0;

        $r0 := @parameter0: kotlin.reflect.KClassifier;

        $r1 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = virtualinvoke $r1.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier,java.util.List,boolean)>($r0, $r2, 0);

        return $r3;
    }

    public static kotlin.reflect.KTypeParameter typeParameter(java.lang.Object, java.lang.String, kotlin.reflect.KVariance, boolean)
    {
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KTypeParameter $r3;
        kotlin.jvm.internal.ReflectionFactory $r4;
        java.lang.Object $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: kotlin.reflect.KVariance;

        $z0 := @parameter3: boolean;

        $r4 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory>;

        $r3 = virtualinvoke $r4.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KTypeParameter typeParameter(java.lang.Object,java.lang.String,kotlin.reflect.KVariance,boolean)>($r0, $r1, $r2, $z0);

        return $r3;
    }
}
