public final class kotlinx.coroutines.internal.CoroutineExceptionHandlerImplKt extends java.lang.Object
{
    private static final java.util.Collection platformExceptionHandlers;

    static void <clinit>()
    {
        java.util.List $r5;
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r4;
        java.util.Collection $r6;
        java.lang.Class $r0;
        java.util.ServiceLoader $r2;
        java.lang.ClassLoader $r1;

        $r0 = class "Lkotlinx/coroutines/CoroutineExceptionHandler;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lkotlinx/coroutines/CoroutineExceptionHandler;", $r1);

        $r3 = virtualinvoke $r2.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence asSequence(java.util.Iterator)>($r3);

        $r5 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r4);

        $r6 = (java.util.Collection) $r5;

        <kotlinx.coroutines.internal.CoroutineExceptionHandlerImplKt: java.util.Collection platformExceptionHandlers> = $r6;

        return;
    }

    public static final void ensurePlatformExceptionHandlerLoaded(kotlinx.coroutines.CoroutineExceptionHandler)
    {
        java.lang.IllegalStateException $r2;
        java.util.Collection $r1;
        kotlinx.coroutines.CoroutineExceptionHandler $r0;
        java.lang.String $r3;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.CoroutineExceptionHandler;

        $r1 = <kotlinx.coroutines.internal.CoroutineExceptionHandlerImplKt: java.util.Collection platformExceptionHandlers>;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Exception handler was not found via a ServiceLoader";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public static final java.util.Collection getPlatformExceptionHandlers()
    {
        java.util.Collection r0;

        r0 = <kotlinx.coroutines.internal.CoroutineExceptionHandlerImplKt: java.util.Collection platformExceptionHandlers>;

        return r0;
    }

    public static final void propagateExceptionFinalResort(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.Thread$UncaughtExceptionHandler $r2;
        java.lang.Thread $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r2.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r0);

        return;
    }
}
