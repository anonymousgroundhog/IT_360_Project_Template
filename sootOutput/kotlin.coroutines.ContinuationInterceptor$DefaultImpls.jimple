public final class kotlin.coroutines.ContinuationInterceptor$DefaultImpls extends java.lang.Object
{

    public static java.lang.Object fold(kotlin.coroutines.ContinuationInterceptor, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.coroutines.ContinuationInterceptor $r0;
        kotlin.coroutines.CoroutineContext$Element $r3;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r2;

        $r0 := @parameter0: kotlin.coroutines.ContinuationInterceptor;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r3 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>($r3, $r1, $r2);

        return $r1;
    }

    public static kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.ContinuationInterceptor$Key $r5;
        kotlin.coroutines.ContinuationInterceptor $r0;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlin.coroutines.CoroutineContext$Key $r1, $r3;
        kotlin.coroutines.AbstractCoroutineContextKey $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.ContinuationInterceptor;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        $z0 = $r1 instanceof kotlin.coroutines.AbstractCoroutineContextKey;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: boolean isSubKey$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Key)>($r3);

        if $z0 == 0 goto label2;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r4 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r4 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: kotlin.coroutines.CoroutineContext$Element tryCast$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Element)>($r4);

        $z0 = $r4 instanceof kotlin.coroutines.CoroutineContext$Element;

        if $z0 == 0 goto label2;

        return $r4;

     label1:
        $r5 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        if $r5 != $r1 goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type E of kotlin.coroutines.ContinuationInterceptor.get");

        $r4 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        return $r4;

     label2:
        return null;
    }

    public static kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor, kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.ContinuationInterceptor$Key $r7;
        kotlin.coroutines.ContinuationInterceptor $r0;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlin.coroutines.AbstractCoroutineContextKey $r2;
        kotlin.coroutines.CoroutineContext $r6;
        kotlin.coroutines.EmptyCoroutineContext $r5;
        kotlin.coroutines.CoroutineContext$Key $r1, $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.ContinuationInterceptor;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        $z0 = $r1 instanceof kotlin.coroutines.AbstractCoroutineContextKey;

        if $z0 == 0 goto label2;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r3 = interfaceinvoke $r0.<kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: boolean isSubKey$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Key)>($r3);

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.AbstractCoroutineContextKey) $r1;

        $r4 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r4 = virtualinvoke $r2.<kotlin.coroutines.AbstractCoroutineContextKey: kotlin.coroutines.CoroutineContext$Element tryCast$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Element)>($r4);

        if $r4 == null goto label1;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r6 = (kotlin.coroutines.CoroutineContext) $r5;

        return $r6;

     label1:
        $r6 = (kotlin.coroutines.CoroutineContext) $r0;

        return $r6;

     label2:
        $r7 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        if $r7 != $r1 goto label3;

        $r5 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r6 = (kotlin.coroutines.CoroutineContext) $r5;

        return $r6;

     label3:
        $r6 = (kotlin.coroutines.CoroutineContext) $r0;

        return $r6;
    }

    public static kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.ContinuationInterceptor, kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.ContinuationInterceptor $r0;
        kotlin.coroutines.CoroutineContext$Element $r2;

        $r0 := @parameter0: kotlin.coroutines.ContinuationInterceptor;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        $r2 = (kotlin.coroutines.CoroutineContext$Element) $r0;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>($r2, $r1);

        return $r1;
    }

    public static void releaseInterceptedContinuation(kotlin.coroutines.ContinuationInterceptor, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.ContinuationInterceptor $r0;

        $r0 := @parameter0: kotlin.coroutines.ContinuationInterceptor;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "continuation");

        return;
    }
}
