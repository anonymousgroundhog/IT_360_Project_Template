public abstract class kotlinx.coroutines.internal.ConcurrentLinkedListNode extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU;
    private volatile java.lang.Object _next;
    private volatile java.lang.Object _prev;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;", class "Ljava/lang/Object;", "_next");

        <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;", class "Ljava/lang/Object;", "_prev");

        <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.internal.ConcurrentLinkedListNode)
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0, $r1;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _prev> = $r1;

        return;
    }

    public static final java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r0;

        $r0 := @parameter0: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object getNextOrClosed()>();

        return $r1;
    }

    private final kotlinx.coroutines.internal.ConcurrentLinkedListNode getAliveSegmentLeft()
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        r0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

     label1:
        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isRemoved()>();

        if $z0 == 0 goto label2;

        $r1 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r0 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r2;

        goto label1;

     label2:
        return r0;
    }

    private final kotlinx.coroutines.internal.ConcurrentLinkedListNode getAliveSegmentRight()
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0, $r2;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isTail()>();

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        r0 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

     label3:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isRemoved()>();

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        if $r2 != null goto label4;

        return r0;

     label4:
        r0 = $r2;

        goto label3;

     label5:
        return r0;
    }

    private final java.lang.Object getNextOrClosed()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r2 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        return $r1;
    }

    private final void update$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, $r4, $r5);

        if $z0 == 0 goto label1;

        return;
    }

    public final void cleanPrev()
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>(r0, null);

        return;
    }

    public final kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()
    {
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>(r0);

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r1 != $r2 goto label1;

        return null;

     label1:
        r0 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r1;

        return r0;
    }

    public final kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r2 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r0 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r1;

        return r0;
    }

    public abstract boolean isRemoved();

    public final boolean isTail()
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        r0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        if r0 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean markAsClosed()
    {
        kotlinx.coroutines.internal.Symbol $r2;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, r0, null, $r2);

        return $z0;
    }

    public final kotlinx.coroutines.internal.ConcurrentLinkedListNode nextOrIfClosed(kotlin.jvm.functions.Function0)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0;
        java.lang.Object $r2;
        kotlin.KotlinNothingValueException $r4;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        $r2 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>(r0);

        $r3 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.Symbol access$getCLOSED$p()>();

        if $r2 == $r3 goto label1;

        r0 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r2;

        return r0;

     label1:
        interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r4 = new kotlin.KotlinNothingValueException;

        specialinvoke $r4.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r4;
    }

    public final void remove()
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0, $r2, $r3, r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r4;
        java.lang.AssertionError $r1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label05;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isRemoved()>();

        if $z0 != 0 goto label02;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isTail()>();

        if $z0 == 0 goto label01;

        goto label02;

     label01:
        $z0 = 0;

        goto label03;

     label02:
        $z0 = 1;

     label03:
        if $z0 == 0 goto label04;

        goto label05;

     label04:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label05:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isTail()>();

        if $z0 == 0 goto label06;

        return;

     label06:
        $r2 = specialinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: kotlinx.coroutines.internal.ConcurrentLinkedListNode getAliveSegmentLeft()>();

        $r3 = specialinvoke r0.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: kotlinx.coroutines.internal.ConcurrentLinkedListNode getAliveSegmentRight()>();

        r4 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU>;

     label07:
        $r5 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) $r5;

        if r6 != null goto label08;

        r6 = null;

        goto label09;

     label08:
        r6 = $r2;

     label09:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r4, $r3, $r5, r6);

        if $z0 == 0 goto label07;

        if $r2 == null goto label10;

        r4 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        virtualinvoke r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>($r2, $r3);

     label10:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isRemoved()>();

        if $z0 == 0 goto label11;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isTail()>();

        if $z0 == 0 goto label06;

     label11:
        if $r2 == null goto label12;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.ConcurrentLinkedListNode: boolean isRemoved()>();

        if $z0 != 0 goto label06;

     label12:
        return;
    }

    public final boolean trySetNext(kotlinx.coroutines.internal.ConcurrentLinkedListNode)
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r0, $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r1 := @parameter0: kotlinx.coroutines.internal.ConcurrentLinkedListNode;

        $r2 = <kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, r0, null, $r1);

        return $z0;
    }
}
