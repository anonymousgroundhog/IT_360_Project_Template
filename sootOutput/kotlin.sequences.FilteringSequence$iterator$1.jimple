public final class kotlin.sequences.FilteringSequence$iterator$1 extends java.lang.Object implements java.util.Iterator, kotlin.jvm.internal.markers.KMappedMarker
{
    private final java.util.Iterator iterator;
    private java.lang.Object nextItem;
    private int nextState;
    final kotlin.sequences.FilteringSequence this$0;

    void <init>(kotlin.sequences.FilteringSequence)
    {
        java.util.Iterator $r3;
        kotlin.sequences.FilteringSequence$iterator$1 r0;
        kotlin.sequences.Sequence $r2;
        kotlin.sequences.FilteringSequence $r1;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.FilteringSequence;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: kotlin.sequences.FilteringSequence this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kotlin.sequences.FilteringSequence: kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.FilteringSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        r0.<kotlin.sequences.FilteringSequence$iterator$1: java.util.Iterator iterator> = $r3;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState> = -1;

        return;
    }

    private final void calcNext()
    {
        java.util.Iterator r1;
        kotlin.sequences.FilteringSequence $r3;
        kotlin.jvm.functions.Function1 $r4;
        kotlin.sequences.FilteringSequence$iterator$1 r0;
        java.lang.Boolean $r6;
        java.lang.Object $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

     label1:
        r1 = r0.<kotlin.sequences.FilteringSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r1 = r0.<kotlin.sequences.FilteringSequence$iterator$1: java.util.Iterator iterator>;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = r0.<kotlin.sequences.FilteringSequence$iterator$1: kotlin.sequences.FilteringSequence this$0>;

        $r4 = staticinvoke <kotlin.sequences.FilteringSequence: kotlin.jvm.functions.Function1 access$getPredicate$p(kotlin.sequences.FilteringSequence)>($r3);

        $r5 = interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        $r3 = r0.<kotlin.sequences.FilteringSequence$iterator$1: kotlin.sequences.FilteringSequence this$0>;

        $z1 = staticinvoke <kotlin.sequences.FilteringSequence: boolean access$getSendWhen$p(kotlin.sequences.FilteringSequence)>($r3);

        if $z0 != $z1 goto label1;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: java.lang.Object nextItem> = $r2;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState> = 1;

        return;

     label2:
        r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState> = 0;

        return;
    }

    public final java.util.Iterator getIterator()
    {
        java.util.Iterator r1;
        kotlin.sequences.FilteringSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        r1 = r0.<kotlin.sequences.FilteringSequence$iterator$1: java.util.Iterator iterator>;

        return r1;
    }

    public final java.lang.Object getNextItem()
    {
        java.lang.Object r1;
        kotlin.sequences.FilteringSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        r1 = r0.<kotlin.sequences.FilteringSequence$iterator$1: java.lang.Object nextItem>;

        return r1;
    }

    public final int getNextState()
    {
        int i0;
        kotlin.sequences.FilteringSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        i0 = r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState>;

        return i0;
    }

    public boolean hasNext()
    {
        int $i0;
        kotlin.sequences.FilteringSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        $i0 = r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState>;

        if $i0 != -1 goto label1;

        specialinvoke r0.<kotlin.sequences.FilteringSequence$iterator$1: void calcNext()>();

     label1:
        $i0 = r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState>;

        if $i0 != 1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.Object next()
    {
        kotlin.sequences.FilteringSequence$iterator$1 r0;
        int i0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        i0 = r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState>;

        if i0 != -1 goto label1;

        specialinvoke r0.<kotlin.sequences.FilteringSequence$iterator$1: void calcNext()>();

     label1:
        i0 = r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState>;

        if i0 == 0 goto label2;

        r1 = r0.<kotlin.sequences.FilteringSequence$iterator$1: java.lang.Object nextItem>;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: java.lang.Object nextItem> = null;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState> = -1;

        return r1;

     label2:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.sequences.FilteringSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final void setNextItem(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.sequences.FilteringSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: java.lang.Object nextItem> = $r1;

        return;
    }

    public final void setNextState(int)
    {
        int $i0;
        kotlin.sequences.FilteringSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.FilteringSequence$iterator$1;

        $i0 := @parameter0: int;

        r0.<kotlin.sequences.FilteringSequence$iterator$1: int nextState> = $i0;

        return;
    }
}
