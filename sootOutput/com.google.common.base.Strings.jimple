public final class com.google.common.base.Strings extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.base.Strings r0;

        r0 := @this: com.google.common.base.Strings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String commonPrefix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        char $c2, $c3;
        int $i0, $i1, $i4, $i5;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $i4 = (int) $c2;

        $i5 = (int) $c3;

        if $i4 != $i5 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = $i0 + -1;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r0, $i1);

        if $z0 != 0 goto label3;

        $i1 = $i0 + -1;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r1, $i1);

        if $z0 == 0 goto label4;

     label3:
        $i0 = $i0 + -1;

     label4:
        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        $r2 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String commonSuffix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        char $c3, $c4;
        int $i0, $i1, $i2, $i5;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        $i2 = $i2 + -1;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $i2 = (int) $c3;

        $i5 = (int) $c4;

        if $i2 != $i5 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - $i0;

        $i1 = $i1 + -1;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r0, $i1);

        if $z0 != 0 goto label3;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - $i0;

        $i1 = $i1 + -1;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r1, $i1);

        if $z0 == 0 goto label4;

     label3:
        $i0 = $i0 + -1;

     label4:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i1 - $i0;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r2 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String emptyToNull(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.google.common.base.Platform: java.lang.String emptyToNull(java.lang.String)>($r0);

        return $r0;
    }

    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.google.common.base.Platform: boolean stringIsNullOrEmpty(java.lang.String)>($r0);

        return $z0;
    }

    public static transient java.lang.String lenientFormat(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        int i0, i1, i2;
        java.lang.Object r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r0, $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        if $r1 != null goto label1;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "(Object[])null";

        goto label3;

     label1:
        i0 = 0;

     label2:
        i1 = lengthof $r1;

        if i0 >= i1 goto label3;

        r2 = $r1[i0];

        $r3 = staticinvoke <com.google.common.base.Strings: java.lang.String lenientToString(java.lang.Object)>(r2);

        $r1[i0] = $r3;

        i0 = i0 + 1;

        goto label2;

     label3:
        $r4 = new java.lang.StringBuilder;

        i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = lengthof $r1;

        i1 = i1 * 16;

        i0 = i0 + i1;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(i0);

        i1 = 0;

        i0 = 0;

     label4:
        i2 = lengthof $r1;

        if i0 >= i2 goto label6;

        i2 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String,int)>("%s", i1);

        if i2 != -1 goto label5;

        goto label6;

     label5:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, i1, i2);

        r2 = $r1[i0];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        i1 = i2 + 2;

        i0 = i0 + 1;

        goto label4;

     label6:
        i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, i1, i2);

        i1 = lengthof $r1;

        if i0 >= i1 goto label9;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        r2 = $r1[i0];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        i0 = i0 + 1;

     label7:
        i1 = lengthof $r1;

        if i0 >= i1 goto label8;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r2 = $r1[i0];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        i0 = i0 + 1;

        goto label7;

     label8:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label9:
        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    private static java.lang.String lenientToString(java.lang.Object)
    {
        java.util.logging.Logger $r7;
        java.lang.Exception r3;
        java.util.logging.Level $r8;
        int $i0, $i1;
        java.lang.Object $r0;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6;
        java.lang.String $r1, $r2, $r5;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        return "null";

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r2;

     label3:
        r3 := @caughtexception;

        $r4 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.google.common.base.Strings");

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r1 = "Exception during lenientFormat for ";

        if $i0 == 0 goto label4;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        goto label5;

     label4:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>("Exception during lenientFormat for ");

     label5:
        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r8, $r1, r3);

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 9;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String nullToEmpty(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.google.common.base.Platform: java.lang.String nullToEmpty(java.lang.String)>($r0);

        return $r0;
    }

    public static java.lang.String padEnd(java.lang.String, int, char)
    {
        int $i0, $i2;
        char $c1;
        java.lang.StringBuilder r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i2 < $i0 goto label1;

        return $r0;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label2:
        if $i2 >= $i0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.String padStart(java.lang.String, int, char)
    {
        int $i0, $i2;
        char $c1;
        java.lang.StringBuilder r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i2 < $i0 goto label1;

        return $r0;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label2:
        if $i2 >= $i0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.String repeat(java.lang.String, int)
    {
        long l2, l3;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        byte $b4;
        int $i0, $i1, $i5;
        char[] r1;
        java.lang.StringBuilder r3;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = 0;

        if $i0 > 1 goto label3;

        if $i0 < 0 goto label1;

        $z0 = 1;

     label1:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "invalid count: %s", $i0);

        if $i0 != 0 goto label2;

        return "";

     label2:
        return $r0;

     label3:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        l2 = (long) $i1;

        l3 = (long) $i0;

        l2 = l2 * l3;

        $i0 = (int) l2;

        l3 = (long) $i0;

        $b4 = l3 cmp l2;

        if $b4 != 0 goto label6;

        r1 = newarray (char)[$i0];

        virtualinvoke $r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, r1, 0);

     label4:
        $i5 = $i0 - $i1;

        if $i1 >= $i5 goto label5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, $i1, $i1);

        $i1 = $i1 << 1;

        goto label4;

     label5:
        $i0 = $i0 - $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, $i1, $i0);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>(r1);

        return $r0;

     label6:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>(51);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required array size too large: ");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r0);

        throw $r2;
    }

    static boolean validSurrogatePairAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i1 + -2;

        if $i0 > $i1 goto label1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c2);

        if $z0 == 0 goto label1;

        $i0 = $i0 + 1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
