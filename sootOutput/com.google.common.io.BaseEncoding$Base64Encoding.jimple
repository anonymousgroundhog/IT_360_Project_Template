final class com.google.common.io.BaseEncoding$Base64Encoding extends com.google.common.io.BaseEncoding$StandardBaseEncoding
{

    private void <init>(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base64Encoding r0;
        java.lang.Character $r2;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        int $i0;
        char[] $r3;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r2 := @parameter1: java.lang.Character;

        specialinvoke r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r1, $r2);

        $r3 = staticinvoke <com.google.common.io.BaseEncoding$Alphabet: char[] access$000(com.google.common.io.BaseEncoding$Alphabet)>($r1);

        $i0 = lengthof $r3;

        if $i0 != 64 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        return;
    }

    void <init>(java.lang.String, java.lang.String, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base64Encoding r0;
        java.lang.Character $r3;
        com.google.common.io.BaseEncoding$Alphabet $r4;
        char[] $r5;
        java.lang.String $r1, $r2;

        r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Character;

        $r4 = new com.google.common.io.BaseEncoding$Alphabet;

        $r5 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r4.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r1, $r5);

        specialinvoke r0.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r4, $r3);

        return;
    }

    int decodeTo(byte[], java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException
    {
        byte[] $r1;
        java.lang.CharSequence $r2;
        com.google.common.io.BaseEncoding$Alphabet r3;
        com.google.common.io.BaseEncoding$DecodingException r4;
        char $c3;
        com.google.common.io.BaseEncoding$Base64Encoding r0;
        byte b6;
        int $i0, i1, $i2, i4, i5;
        java.lang.StringBuilder r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<com.google.common.io.BaseEncoding$Base64Encoding: java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)>($r2);

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $z0 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: boolean isValidPaddingStartPosition(int)>($i0);

        if $z0 == 0 goto label5;

        $i0 = 0;

        i1 = 0;

     label1:
        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if i1 >= $i2 goto label4;

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i2 = i1 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>(i1);

        i1 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        i1 = i1 << 18;

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        i4 = $i2 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i2);

        $i2 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        $i2 = $i2 << 12;

        i5 = i1 | $i2;

        $i2 = $i0 + 1;

        i1 = i5 >>> 16;

        b6 = (byte) i1;

        $r1[$i0] = b6;

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if i4 >= $i0 goto label3;

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        i1 = i4 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>(i4);

        $i0 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        $i0 = $i0 << 6;

        i4 = $i0 | i5;

        $i0 = $i2 + 1;

        i5 = i4 >>> 8;

        i5 = i5 & 255;

        b6 = (byte) i5;

        $r1[$i2] = b6;

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if i1 >= $i2 goto label2;

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i2 = i1 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>(i1);

        i1 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        i4 = i4 | i1;

        i4 = i4 & 255;

        b6 = (byte) i4;

        $r1[$i0] = b6;

        $i0 = $i0 + 1;

        i1 = $i2;

        goto label1;

     label2:
        goto label1;

     label3:
        $i0 = $i2;

        i1 = i4;

        goto label1;

     label4:
        return $i0;

     label5:
        r4 = new com.google.common.io.BaseEncoding$DecodingException;

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>(int)>(32);

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid input length ");

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r6);

        throw r4;
    }

    void encodeTo(java.lang.Appendable, byte[], int, int) throws java.io.IOException
    {
        byte[] $r2;
        java.lang.Appendable $r1;
        com.google.common.io.BaseEncoding$Alphabet r3;
        char $c8;
        com.google.common.io.BaseEncoding$Base64Encoding r0;
        short s6;
        byte b5;
        int $i0, $i1, i2, i3, i4, i7;

        r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        i2 = $i0 + $i1;

        i3 = lengthof $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, i2, i3);

        i3 = $i0;

        i2 = $i1;

     label1:
        if i2 < 3 goto label2;

        i4 = i3 + 1;

        b5 = $r2[i3];

        s6 = (short) b5;

        s6 = s6 & 255;

        i3 = (int) s6;

        i3 = i3 << 16;

        i7 = i4 + 1;

        b5 = $r2[i4];

        s6 = (short) b5;

        s6 = s6 & 255;

        i4 = (int) s6;

        i4 = i4 << 8;

        i4 = i3 | i4;

        i3 = i7 + 1;

        b5 = $r2[i7];

        s6 = (short) b5;

        s6 = s6 & 255;

        i7 = (int) s6;

        i7 = i4 | i7;

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        i4 = i7 >>> 18;

        $c8 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>(i4);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        i4 = i7 >>> 12;

        i4 = i4 & 63;

        $c8 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>(i4);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        i4 = i7 >>> 6;

        i4 = i4 & 63;

        $c8 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>(i4);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        r3 = r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        i7 = i7 & 63;

        $c8 = virtualinvoke r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>(i7);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        i2 = i2 + -3;

        goto label1;

     label2:
        i2 = $i0 + $i1;

        if i3 >= i2 goto label3;

        $i0 = $i0 + $i1;

        $i0 = $i0 - i3;

        virtualinvoke r0.<com.google.common.io.BaseEncoding$Base64Encoding: void encodeChunkTo(java.lang.Appendable,byte[],int,int)>($r1, $r2, i3, $i0);

     label3:
        return;
    }

    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base64Encoding r0;
        java.lang.Character $r2;
        com.google.common.io.BaseEncoding$Alphabet $r1;

        r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r2 := @parameter1: java.lang.Character;

        r0 = new com.google.common.io.BaseEncoding$Base64Encoding;

        specialinvoke r0.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r1, $r2);

        return r0;
    }
}
