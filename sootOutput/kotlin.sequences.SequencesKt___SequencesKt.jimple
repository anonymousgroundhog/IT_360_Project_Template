class kotlin.sequences.SequencesKt___SequencesKt extends kotlin.sequences.SequencesKt___SequencesJvmKt
{

    public void <init>()
    {
        kotlin.sequences.SequencesKt___SequencesKt r0;

        r0 := @this: kotlin.sequences.SequencesKt___SequencesKt;

        specialinvoke r0.<kotlin.sequences.SequencesKt___SequencesJvmKt: void <init>()>();

        return;
    }

    public static final boolean all(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Boolean $r4;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static final boolean any(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public static final boolean any(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Boolean $r4;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public static final java.lang.Iterable asIterable(kotlin.sequences.Sequence)
    {
        kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1 $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Iterable $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1;

        specialinvoke $r1.<kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1: void <init>(kotlin.sequences.Sequence)>($r0);

        $r2 = (java.lang.Iterable) $r1;

        return $r2;
    }

    private static final kotlin.sequences.Sequence asSequence(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        return $r0;
    }

    public static final java.util.Map associate(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.Pair $r6;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap r2;
        java.util.Map r3;
        java.lang.Object $r5, $r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) r2;

        $r4 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r6 = (kotlin.Pair) $r5;

        $r5 = virtualinvoke $r6.<kotlin.Pair: java.lang.Object getFirst()>();

        $r7 = virtualinvoke $r6.<kotlin.Pair: java.lang.Object getSecond()>();

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

        goto label1;

     label2:
        return r3;
    }

    public static final java.util.Map associateBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap r2;
        java.util.Map r3;
        java.lang.Object $r5, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) r2;

        $r4 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label2:
        return r3;
    }

    public static final java.util.Map associateBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r5;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1, $r2;
        java.util.LinkedHashMap r3;
        java.util.Map r4;
        java.lang.Object $r6, $r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueTransform");

        r3 = new java.util.LinkedHashMap;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>()>();

        r4 = (java.util.Map) r3;

        $r5 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        goto label1;

     label2:
        return r4;
    }

    public static final java.util.Map associateByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.Map associateByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r2, $r3;
        java.util.Map $r1;
        java.lang.Object $r5, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "valueTransform");

        $r4 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.Map associateTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.Pair $r5;
        kotlin.jvm.functions.Function1 $r2;
        java.util.Map $r1;
        java.lang.Object $r4, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r5 = (kotlin.Pair) $r4;

        $r4 = virtualinvoke $r5.<kotlin.Pair: java.lang.Object getFirst()>();

        $r6 = virtualinvoke $r5.<kotlin.Pair: java.lang.Object getSecond()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.Map associateWith(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.LinkedHashMap r2;
        java.util.Map $r5;
        java.lang.Object $r4, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "valueSelector");

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map) r2;

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label1;

     label2:
        $r5 = (java.util.Map) r2;

        return $r5;
    }

    public static final java.util.Map associateWithTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Map $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueSelector");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label1;

     label2:
        return $r1;
    }

    public static final double averageOfByte(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        byte $b1;
        int i0;
        java.lang.Object $r2;
        java.lang.Number r3;
        double $d0, d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        d1 = 0.0;

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $b1 = virtualinvoke r3.<java.lang.Number: byte byteValue()>();

        $d0 = (double) $b1;

        d1 = d1 + $d0;

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        if i0 != 0 goto label3;

        return #NaN;

     label3:
        $d0 = (double) i0;

        d1 = d1 / $d0;

        return d1;
    }

    public static final double averageOfDouble(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int i0;
        java.lang.Object $r2;
        java.lang.Number r3;
        double d0, $d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        d0 = 0.0;

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d1 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        d0 = d0 + $d1;

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        if i0 != 0 goto label3;

        return #NaN;

     label3:
        $d1 = (double) i0;

        d0 = d0 / $d1;

        return d0;
    }

    public static final double averageOfFloat(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int i0;
        float $f0;
        java.lang.Object $r2;
        java.lang.Number r3;
        double $d0, d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        d1 = 0.0;

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f0 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

        $d0 = (double) $f0;

        d1 = d1 + $d0;

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        if i0 != 0 goto label3;

        return #NaN;

     label3:
        $d0 = (double) i0;

        d1 = d1 / $d0;

        return d1;
    }

    public static final double averageOfInt(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int i0, $i1;
        java.lang.Object $r2;
        java.lang.Number r3;
        double $d0, d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        d1 = 0.0;

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $i1 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        $d0 = (double) $i1;

        d1 = d1 + $d0;

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        if i0 != 0 goto label3;

        return #NaN;

     label3:
        $d0 = (double) i0;

        d1 = d1 / $d0;

        return d1;
    }

    public static final double averageOfLong(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        long $l1;
        int i0;
        java.lang.Object $r2;
        java.lang.Number r3;
        double $d0, d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        d1 = 0.0;

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $l1 = virtualinvoke r3.<java.lang.Number: long longValue()>();

        $d0 = (double) $l1;

        d1 = d1 + $d0;

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        if i0 != 0 goto label3;

        return #NaN;

     label3:
        $d0 = (double) i0;

        d1 = d1 / $d0;

        return d1;
    }

    public static final double averageOfShort(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        short $s1;
        int i0;
        java.lang.Object $r2;
        java.lang.Number r3;
        double $d0, d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        d1 = 0.0;

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $s1 = virtualinvoke r3.<java.lang.Number: short shortValue()>();

        $d0 = (double) $s1;

        d1 = d1 + $d0;

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        if i0 != 0 goto label3;

        return #NaN;

     label3:
        $d0 = (double) i0;

        d1 = d1 / $d0;

        return d1;
    }

    public static final kotlin.sequences.Sequence chunked(kotlin.sequences.Sequence, int)
    {
        int $i0;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence windowed(kotlin.sequences.Sequence,int,int,boolean)>($r0, $i0, $i0, 1);

        return $r0;
    }

    public static final kotlin.sequences.Sequence chunked(kotlin.sequences.Sequence, int, kotlin.jvm.functions.Function1)
    {
        int $i0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence windowed(kotlin.sequences.Sequence,int,int,boolean,kotlin.jvm.functions.Function1)>($r0, $i0, $i0, 1, $r1);

        return $r0;
    }

    public static final boolean contains(kotlin.sequences.Sequence, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = staticinvoke <kotlin.sequences.SequencesKt: int indexOf(kotlin.sequences.Sequence,java.lang.Object)>($r0, $r1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final int count(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        return i0;
    }

    public static final int count(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int i0;
        java.lang.Boolean $r4;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        i0 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        i0 = i0 + 1;

        if i0 >= 0 goto label1;

        staticinvoke <kotlin.collections.CollectionsKt: void throwCountOverflow()>();

        goto label1;

     label2:
        return i0;
    }

    public static final kotlin.sequences.Sequence distinct(kotlin.sequences.Sequence)
    {
        kotlin.sequences.SequencesKt___SequencesKt$distinct$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.sequences.SequencesKt___SequencesKt$distinct$1: kotlin.sequences.SequencesKt___SequencesKt$distinct$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence distinctBy(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r0;
    }

    public static final kotlin.sequences.Sequence distinctBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.DistinctSequence $r2;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = new kotlin.sequences.DistinctSequence;

        specialinvoke $r2.<kotlin.sequences.DistinctSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence drop(kotlin.sequences.Sequence, int)
    {
        kotlin.sequences.DropSequence $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.IllegalArgumentException $r5;
        kotlin.sequences.DropTakeSequence $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label5;

        if $i0 != 0 goto label3;

        return $r0;

     label3:
        $z0 = $r0 instanceof kotlin.sequences.DropTakeSequence;

        if $z0 == 0 goto label4;

        $r1 = (kotlin.sequences.DropTakeSequence) $r0;

        $r0 = interfaceinvoke $r1.<kotlin.sequences.DropTakeSequence: kotlin.sequences.Sequence drop(int)>($i0);

        return $r0;

     label4:
        $r2 = new kotlin.sequences.DropSequence;

        specialinvoke $r2.<kotlin.sequences.DropSequence: void <init>(kotlin.sequences.Sequence,int)>($r0, $i0);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r5;
    }

    public static final kotlin.sequences.Sequence dropWhile(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.DropWhileSequence $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = new kotlin.sequences.DropWhileSequence;

        specialinvoke $r2.<kotlin.sequences.DropWhileSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final java.lang.Object elementAt(kotlin.sequences.Sequence, int)
    {
        kotlin.sequences.SequencesKt___SequencesKt$elementAt$1 $r2;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$elementAt$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$elementAt$1: void <init>(int)>($i0);

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object elementAtOrElse(kotlin.sequences.Sequence,int,kotlin.jvm.functions.Function1)>($r0, $i0, $r3);

        return $r1;
    }

    public static final java.lang.Object elementAtOrElse(kotlin.sequences.Sequence, int, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Integer $r2;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "defaultValue");

        if $i0 >= 0 goto label1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return $r3;

     label1:
        $r4 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        i1 = 0;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $i0 != i1 goto label3;

        return $r3;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return $r3;
    }

    public static final java.lang.Object elementAtOrNull(kotlin.sequences.Sequence, int)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        i1 = 0;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $i0 != i1 goto label3;

        return $r2;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public static final kotlin.sequences.Sequence filter(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.FilteringSequence $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = new kotlin.sequences.FilteringSequence;

        specialinvoke $r2.<kotlin.sequences.FilteringSequence: void <init>(kotlin.sequences.Sequence,boolean,kotlin.jvm.functions.Function1)>($r0, 1, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence filterIndexed(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.FilteringSequence $r3;
        kotlin.sequences.IndexingSequence $r4;
        kotlin.jvm.functions.Function1 $r6;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$1 $r5;
        kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2 $r7;
        kotlin.sequences.TransformingSequence $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = new kotlin.sequences.TransformingSequence;

        $r3 = new kotlin.sequences.FilteringSequence;

        $r4 = new kotlin.sequences.IndexingSequence;

        specialinvoke $r4.<kotlin.sequences.IndexingSequence: void <init>(kotlin.sequences.Sequence)>($r0);

        $r0 = (kotlin.sequences.Sequence) $r4;

        $r5 = new kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$1;

        specialinvoke $r5.<kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$1: void <init>(kotlin.jvm.functions.Function2)>($r1);

        $r6 = (kotlin.jvm.functions.Function1) $r5;

        specialinvoke $r3.<kotlin.sequences.FilteringSequence: void <init>(kotlin.sequences.Sequence,boolean,kotlin.jvm.functions.Function1)>($r0, 1, $r6);

        $r0 = (kotlin.sequences.Sequence) $r3;

        $r7 = <kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2: kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2 INSTANCE>;

        $r6 = (kotlin.jvm.functions.Function1) $r7;

        specialinvoke $r2.<kotlin.sequences.TransformingSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r6);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final java.util.Collection filterIndexedTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Integer $r5;
        int i0, i1;
        java.lang.Boolean $r7;
        java.lang.Object $r4, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        i1 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i0 = i1 + 1;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label3:
        i1 = i0;

        goto label1;

     label4:
        return $r1;
    }

    public static final kotlin.sequences.Sequence filterIsInstance(kotlin.sequences.Sequence)
    {
        kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void needClassReification()>();

        $r1 = <kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1: kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlin.sequences.Sequence<R of kotlin.sequences.SequencesKt___SequencesKt.filterIsInstance>");

        return $r0;
    }

    public static final java.util.Collection filterIsInstanceTo(kotlin.sequences.Sequence, java.util.Collection)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "R");

        $z0 = $r3 instanceof java.lang.Object;

        if $z0 == 0 goto label1;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r1;
    }

    public static final kotlin.sequences.Sequence filterNot(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.FilteringSequence $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = new kotlin.sequences.FilteringSequence;

        specialinvoke $r2.<kotlin.sequences.FilteringSequence: void <init>(kotlin.sequences.Sequence,boolean,kotlin.jvm.functions.Function1)>($r0, 0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence filterNotNull(kotlin.sequences.Sequence)
    {
        kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1: kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filterNot(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlin.sequences.Sequence<T of kotlin.sequences.SequencesKt___SequencesKt.filterNotNull>");

        return $r0;
    }

    public static final java.util.Collection filterNotNullTo(kotlin.sequences.Sequence, java.util.Collection)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 == null goto label1;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.Collection filterNotTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Boolean $r6;
        java.lang.Object $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.Collection filterTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Boolean $r6;
        java.lang.Object $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "predicate");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r1;
    }

    private static final java.lang.Object find(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Boolean $r5;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3, $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return $r3;

     label2:
        return null;
    }

    private static final java.lang.Object findLast(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r6;
        java.lang.Object r2, $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r2 = null;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        r2 = $r4;

        goto label1;

     label2:
        return r2;
    }

    public static final java.lang.Object first(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence is empty.");

        throw $r3;
    }

    public static final java.lang.Object first(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        java.util.NoSuchElementException $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return $r3;

     label2:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        throw $r6;
    }

    private static final java.lang.Object firstNotNullOf(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3, $r4;
        java.util.NoSuchElementException $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = $r3;

        if $r3 != null goto label3;

        goto label1;

     label2:
        $r4 = null;

     label3:
        if $r4 == null goto label4;

        return $r4;

     label4:
        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No element of the sequence was transformed to a non-null value.");

        throw $r5;
    }

    private static final java.lang.Object firstNotNullOfOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        if $r3 == null goto label1;

        return $r3;

     label2:
        return null;
    }

    public static final java.lang.Object firstOrNull(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    public static final java.lang.Object firstOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Boolean $r5;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3, $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return $r3;

     label2:
        return null;
    }

    public static final kotlin.sequences.Sequence flatMap(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.SequencesKt___SequencesKt$flatMap$2 $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1, $r4;
        kotlin.sequences.FlatteningSequence $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = new kotlin.sequences.FlatteningSequence;

        $r3 = <kotlin.sequences.SequencesKt___SequencesKt$flatMap$2: kotlin.sequences.SequencesKt___SequencesKt$flatMap$2 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        specialinvoke $r2.<kotlin.sequences.FlatteningSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r0, $r1, $r4);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence flatMapIndexedIterable(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$1 $r2;
        kotlin.jvm.functions.Function1 $r3;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = <kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$1: kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$1 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence flatMapIndexed(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2,kotlin.jvm.functions.Function1)>($r0, $r1, $r3);

        return $r0;
    }

    private static final java.util.Collection flatMapIndexedIterableTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Integer $r5;
        java.lang.Iterable r6;
        int i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        i1 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i0 = i1 + 1;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r4);

        r6 = (java.lang.Iterable) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, r6);

        i1 = i0;

        goto label1;

     label3:
        return $r1;
    }

    public static final kotlin.sequences.Sequence flatMapIndexedSequence(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$2 $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r3;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = <kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$2: kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$2 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence flatMapIndexed(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2,kotlin.jvm.functions.Function1)>($r0, $r1, $r3);

        return $r0;
    }

    private static final java.util.Collection flatMapIndexedSequenceTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Integer $r5;
        int i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        i1 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i0 = i1 + 1;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r0 = (kotlin.sequences.Sequence) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,kotlin.sequences.Sequence)>($r1, $r0);

        i1 = i0;

        goto label1;

     label3:
        return $r1;
    }

    public static final kotlin.sequences.Sequence flatMapIterable(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.SequencesKt___SequencesKt$flatMap$1 $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1, $r4;
        kotlin.sequences.FlatteningSequence $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = new kotlin.sequences.FlatteningSequence;

        $r3 = <kotlin.sequences.SequencesKt___SequencesKt$flatMap$1: kotlin.sequences.SequencesKt___SequencesKt$flatMap$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        specialinvoke $r2.<kotlin.sequences.FlatteningSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r0, $r1, $r4);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final java.util.Collection flatMapIterableTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r4;
        java.lang.Iterable r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        r5 = (java.lang.Iterable) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, r5);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.Collection flatMapTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r0 = (kotlin.sequences.Sequence) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,kotlin.sequences.Sequence)>($r1, $r0);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.lang.Object fold(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r1, $r4;
        kotlin.jvm.functions.Function2 $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r4);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.lang.Object foldIndexed(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function3)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function3 $r2;
        java.lang.Integer $r5;
        int i0, i1;
        java.lang.Object $r1, $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        i1 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i0 = i1 + 1;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1 = interfaceinvoke $r2.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r1, $r4);

        i1 = i0;

        goto label1;

     label3:
        return $r1;
    }

    public static final void forEach(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        goto label1;

     label2:
        return;
    }

    public static final void forEachIndexed(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Integer $r4;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        i1 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        i0 = i1 + 1;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r4, $r3);

        i1 = i0;

        goto label1;

     label3:
        return;
    }

    public static final java.util.Map groupBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList $r8;
        java.util.LinkedHashMap r2;
        java.util.List $r9;
        java.util.Map r3;
        java.lang.Object $r5, $r6, $r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) r2;

        $r4 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r7 != null goto label2;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = (java.util.List) $r8;

        $r7 = $r9;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r9);

        goto label2;

     label2:
        $r9 = (java.util.List) $r7;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label3:
        return r3;
    }

    public static final java.util.Map groupBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r5;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1, $r2;
        java.util.ArrayList $r9;
        java.util.LinkedHashMap r3;
        java.util.List $r10;
        java.util.Map r4;
        java.lang.Object $r6, $r7, $r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "valueTransform");

        r3 = new java.util.LinkedHashMap;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>()>();

        r4 = (java.util.Map) r3;

        $r5 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        $r8 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        if $r8 != null goto label2;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = (java.util.List) $r9;

        $r8 = $r10;

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r10);

        goto label2;

     label2:
        $r10 = (java.util.List) $r8;

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label3:
        return r4;
    }

    public static final java.util.Map groupByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r2;
        java.util.ArrayList $r7;
        java.util.List $r8;
        java.util.Map $r1;
        java.lang.Object $r4, $r5, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 != null goto label2;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = (java.util.List) $r7;

        $r6 = $r8;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label2;

     label2:
        $r8 = (java.util.List) $r6;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label3:
        return $r1;
    }

    public static final java.util.Map groupByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r2, $r3;
        java.util.ArrayList $r8;
        java.util.List $r9;
        java.util.Map $r1;
        java.lang.Object $r5, $r6, $r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "keySelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "valueTransform");

        $r4 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r7 != null goto label2;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = (java.util.List) $r8;

        $r7 = $r9;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r9);

        goto label2;

     label2:
        $r9 = (java.util.List) $r7;

        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label3:
        return $r1;
    }

    public static final kotlin.collections.Grouping groupingBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1 $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.collections.Grouping $r3;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "keySelector");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        $r3 = (kotlin.collections.Grouping) $r2;

        return $r3;
    }

    public static final int indexOf(kotlin.sequences.Sequence, java.lang.Object)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int i0;
        java.lang.Object $r1, $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        i0 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if i0 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label3;

        return i0;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return -1;
    }

    public static final int indexOfFirst(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int i0;
        java.lang.Boolean $r4;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        i0 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if i0 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        return i0;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return -1;
    }

    public static final int indexOfLast(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int i0, i1;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        i0 = -1;

        i1 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        i0 = i1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    public static final java.lang.Appendable joinTo(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        java.lang.CharSequence $r2, $r3, $r4, $r5;
        java.util.Iterator $r7;
        kotlin.sequences.Sequence $r0;
        java.lang.Appendable $r1;
        kotlin.jvm.functions.Function1 $r6;
        int $i0, i1;
        java.lang.Object $r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Appendable;

        $r2 := @parameter2: java.lang.CharSequence;

        $r3 := @parameter3: java.lang.CharSequence;

        $r4 := @parameter4: java.lang.CharSequence;

        $i0 := @parameter5: int;

        $r5 := @parameter6: java.lang.CharSequence;

        $r6 := @parameter7: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "buffer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "separator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "prefix");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r4, "postfix");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r5, "truncated");

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r3);

        i1 = 0;

        $r7 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        i1 = i1 + 1;

        if i1 <= 1 goto label2;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r2);

     label2:
        if $i0 < 0 goto label4;

        if i1 > $i0 goto label3;

        goto label4;

     label3:
        goto label5;

     label4:
        staticinvoke <kotlin.text.StringsKt: void appendElement(java.lang.Appendable,java.lang.Object,kotlin.jvm.functions.Function1)>($r1, $r8, $r6);

        goto label1;

     label5:
        if $i0 < 0 goto label6;

        if i1 <= $i0 goto label6;

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

     label6:
        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r4);

        return $r1;
    }

    public static java.lang.Appendable joinTo$default(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.lang.CharSequence $r2, $r3, $r4, $r5;
        kotlin.sequences.Sequence $r0;
        java.lang.Appendable $r1;
        kotlin.jvm.functions.Function1 $r6;
        int $i0, $i1, $i2;
        java.lang.Object $r7;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Appendable;

        $r2 := @parameter2: java.lang.CharSequence;

        $r3 := @parameter3: java.lang.CharSequence;

        $r4 := @parameter4: java.lang.CharSequence;

        $i0 := @parameter5: int;

        $r5 := @parameter6: java.lang.CharSequence;

        $r6 := @parameter7: kotlin.jvm.functions.Function1;

        $i1 := @parameter8: int;

        $r7 := @parameter9: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $r2 = (java.lang.CharSequence) ", ";

        goto label1;

     label1:
        $i2 = $i1 & 4;

        if $i2 == 0 goto label2;

        $r3 = (java.lang.CharSequence) "";

        goto label2;

     label2:
        $i2 = $i1 & 8;

        if $i2 == 0 goto label3;

        $r4 = (java.lang.CharSequence) "";

        goto label3;

     label3:
        $i2 = $i1 & 16;

        if $i2 == 0 goto label4;

        $i0 = -1;

        goto label4;

     label4:
        $i2 = $i1 & 32;

        if $i2 == 0 goto label5;

        $r5 = (java.lang.CharSequence) "...";

        goto label5;

     label5:
        $i1 = $i1 & 64;

        if $i1 == 0 goto label6;

        $r6 = null;

        goto label6;

     label6:
        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Appendable joinTo(kotlin.sequences.Sequence,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1)>($r0, $r1, $r2, $r3, $r4, $i0, $r5, $r6);

        return $r1;
    }

    public static final java.lang.String joinToString(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        java.lang.CharSequence $r1, $r2, $r3, $r4;
        kotlin.sequences.Sequence $r0;
        java.lang.Appendable $r7;
        kotlin.jvm.functions.Function1 $r5;
        int $i0;
        java.lang.StringBuilder $r6;
        java.lang.String $r8;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: java.lang.CharSequence;

        $r3 := @parameter3: java.lang.CharSequence;

        $i0 := @parameter4: int;

        $r4 := @parameter5: java.lang.CharSequence;

        $r5 := @parameter6: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "separator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "prefix");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "postfix");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r4, "truncated");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = (java.lang.Appendable) $r6;

        $r7 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Appendable joinTo(kotlin.sequences.Sequence,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1)>($r0, $r7, $r1, $r2, $r3, $i0, $r4, $r5);

        $r6 = (java.lang.StringBuilder) $r7;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "joinTo(StringBuilder(), \u2026ed, transform).toString()");

        return $r8;
    }

    public static java.lang.String joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r3, $r4, $r5;
        kotlin.sequences.Sequence $r2;
        kotlin.jvm.functions.Function1 $r6;
        int $i0, $i1, $i2;
        java.lang.Object $r7;
        java.lang.String $r1;

        $r2 := @parameter0: kotlin.sequences.Sequence;

        $r3 := @parameter1: java.lang.CharSequence;

        $r4 := @parameter2: java.lang.CharSequence;

        $r5 := @parameter3: java.lang.CharSequence;

        $i0 := @parameter4: int;

        $r0 := @parameter5: java.lang.CharSequence;

        $r6 := @parameter6: kotlin.jvm.functions.Function1;

        $i1 := @parameter7: int;

        $r7 := @parameter8: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r3 = (java.lang.CharSequence) ", ";

     label1:
        $i2 = $i1 & 2;

        if $i2 == 0 goto label2;

        $r4 = (java.lang.CharSequence) "";

     label2:
        $i2 = $i1 & 4;

        if $i2 == 0 goto label3;

        $r5 = (java.lang.CharSequence) "";

     label3:
        $i2 = $i1 & 8;

        if $i2 == 0 goto label4;

        $i0 = -1;

        goto label4;

     label4:
        $i2 = $i1 & 16;

        if $i2 == 0 goto label5;

        $r0 = (java.lang.CharSequence) "...";

     label5:
        $i1 = $i1 & 32;

        if $i1 == 0 goto label6;

        $r6 = null;

     label6:
        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.String joinToString(kotlin.sequences.Sequence,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1)>($r2, $r3, $r4, $r5, $i0, $r0, $r6);

        return $r1;
    }

    public static final java.lang.Object last(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.util.NoSuchElementException r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        goto label1;

     label2:
        return $r2;

     label3:
        r3 = new java.util.NoSuchElementException;

        specialinvoke r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence is empty.");

        throw r3;
    }

    public static final java.lang.Object last(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r6;
        java.lang.Object r2, $r4, $r5;
        java.util.NoSuchElementException $r7;
        boolean z0, $z1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r2 = null;

        z0 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        r2 = $r4;

        z0 = 1;

        goto label1;

     label2:
        if z0 == 0 goto label3;

        return r2;

     label3:
        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        throw $r7;
    }

    public static final int lastIndexOf(kotlin.sequences.Sequence, java.lang.Object)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int i0, i1;
        java.lang.Object $r1, $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        i0 = -1;

        i1 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label3;

        i0 = i1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    public static final java.lang.Object lastOrNull(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        goto label2;

     label3:
        return $r2;
    }

    public static final java.lang.Object lastOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r6;
        java.lang.Object r2, $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r2 = null;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        r2 = $r4;

        goto label1;

     label2:
        return r2;
    }

    public static final kotlin.sequences.Sequence map(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.TransformingSequence $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = new kotlin.sequences.TransformingSequence;

        specialinvoke $r2.<kotlin.sequences.TransformingSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence mapIndexed(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.TransformingIndexedSequence $r2;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = new kotlin.sequences.TransformingIndexedSequence;

        specialinvoke $r2.<kotlin.sequences.TransformingIndexedSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence mapIndexedNotNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.TransformingIndexedSequence $r2;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = new kotlin.sequences.TransformingIndexedSequence;

        specialinvoke $r2.<kotlin.sequences.TransformingIndexedSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filterNotNull(kotlin.sequences.Sequence)>($r0);

        return $r0;
    }

    public static final java.util.Collection mapIndexedNotNullTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Integer $r5;
        int i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        i1 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i0 = i1 + 1;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $r4 == null goto label3;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label3:
        i1 = i0;

        goto label1;

     label4:
        return $r1;
    }

    public static final java.util.Collection mapIndexedTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function2 $r2;
        java.lang.Integer $r5;
        int i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        i1 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        i0 = i1 + 1;

        if i1 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        i1 = i0;

        goto label1;

     label3:
        return $r1;
    }

    public static final kotlin.sequences.Sequence mapNotNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.TransformingSequence $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = new kotlin.sequences.TransformingSequence;

        specialinvoke $r2.<kotlin.sequences.TransformingSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filterNotNull(kotlin.sequences.Sequence)>($r0);

        return $r0;
    }

    public static final java.util.Collection mapNotNullTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        if $r4 == null goto label2;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        goto label1;

     label3:
        return $r1;
    }

    public static final java.util.Collection mapTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.lang.Object maxByOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3, r4, $r6;
        java.lang.Comparable r5, r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = $r3;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r3;

     label2:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r7 = (java.lang.Comparable) $r6;

        $i0 = interfaceinvoke r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r7);

        if $i0 >= 0 goto label4;

        r4 = $r3;

        r5 = r7;

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return r4;
    }

    public static final java.lang.Object maxByOrThrow(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3, r4, $r6;
        java.lang.Comparable r5, r7;
        java.util.NoSuchElementException r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = $r3;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r3;

     label1:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r7 = (java.lang.Comparable) $r6;

        $i0 = interfaceinvoke r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r7);

        if $i0 >= 0 goto label3;

        r4 = $r3;

        r5 = r7;

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return r4;

     label4:
        r8 = new java.util.NoSuchElementException;

        specialinvoke r8.<java.util.NoSuchElementException: void <init>()>();

        throw r8;
    }

    private static final double maxOf(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        java.lang.Number r4;
        java.util.NoSuchElementException r5;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    private static final float maxOf(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        float $f0, $f1;
        java.lang.Object $r3;
        java.lang.Number r4;
        java.util.NoSuchElementException r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    private static final java.lang.Comparable maxOf(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.Comparable r4, r5;
        java.util.NoSuchElementException r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Comparable) $r3;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r5);

        if $i0 >= 0 goto label1;

        r4 = r5;

        goto label1;

     label2:
        return r4;

     label3:
        r6 = new java.util.NoSuchElementException;

        specialinvoke r6.<java.util.NoSuchElementException: void <init>()>();

        throw r6;
    }

    private static final java.lang.Comparable maxOfOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.Comparable r4, r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Comparable) $r3;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r5);

        if $i0 >= 0 goto label2;

        r4 = r5;

        goto label2;

     label3:
        return r4;
    }

    private static final java.lang.Double maxOfOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        java.lang.Double $r5;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        java.lang.Number r4;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r5;
    }

    private static final java.lang.Float maxOfOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.lang.Float $r5;
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        float $f0, $f1;
        java.lang.Object $r3;
        java.lang.Number r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r5;
    }

    private static final java.lang.Object maxOfWith(kotlin.sequences.Sequence, java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r2;
        int $i0;
        java.lang.Object $r4, $r5;
        java.util.Comparator $r1;
        java.util.NoSuchElementException r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "selector");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i0 >= 0 goto label1;

        $r4 = $r5;

        goto label1;

     label2:
        return $r4;

     label3:
        r6 = new java.util.NoSuchElementException;

        specialinvoke r6.<java.util.NoSuchElementException: void <init>()>();

        throw r6;
    }

    private static final java.lang.Object maxOfWithOrNull(kotlin.sequences.Sequence, java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r2;
        int $i0;
        java.lang.Object $r4, $r5;
        java.util.Comparator $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "selector");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i0 >= 0 goto label2;

        $r4 = $r5;

        goto label2;

     label3:
        return $r4;
    }

    public static final java.lang.Comparable maxOrNull(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.Comparable r3, r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Comparable) $r2;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Comparable) $r2;

        $i0 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);

        if $i0 >= 0 goto label2;

        r3 = r4;

        goto label2;

     label3:
        return r3;
    }

    public static final java.lang.Double maxOrNull(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        java.lang.Double $r4;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d1 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r4;
    }

    public static final java.lang.Float maxOrNull(kotlin.sequences.Sequence)
    {
        java.lang.Float $r4;
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        float $f0, $f1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f0 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f1 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r4;
    }

    public static final double maxOrThrow(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.lang.Number r3;
        java.util.NoSuchElementException r4;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d1 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        r4 = new java.util.NoSuchElementException;

        specialinvoke r4.<java.util.NoSuchElementException: void <init>()>();

        throw r4;
    }

    public static final float maxOrThrow(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        float $f0, $f1;
        java.lang.Object $r2;
        java.lang.Number r3;
        java.util.NoSuchElementException r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f0 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f1 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        r4 = new java.util.NoSuchElementException;

        specialinvoke r4.<java.util.NoSuchElementException: void <init>()>();

        throw r4;
    }

    public static final java.lang.Comparable maxOrThrow(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.Comparable r3, r4;
        java.util.NoSuchElementException r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Comparable) $r2;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Comparable) $r2;

        $i0 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);

        if $i0 >= 0 goto label1;

        r3 = r4;

        goto label1;

     label2:
        return r3;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    public static final java.lang.Object maxWithOrNull(kotlin.sequences.Sequence, java.util.Comparator)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i0 >= 0 goto label2;

        $r3 = $r4;

        goto label2;

     label3:
        return $r3;
    }

    public static final java.lang.Object maxWithOrThrow(kotlin.sequences.Sequence, java.util.Comparator)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r1;
        java.util.NoSuchElementException r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i0 >= 0 goto label1;

        $r3 = $r4;

        goto label1;

     label2:
        return $r3;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    public static final java.lang.Object minByOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3, r4, $r6;
        java.lang.Comparable r5, r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = $r3;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r3;

     label2:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r7 = (java.lang.Comparable) $r6;

        $i0 = interfaceinvoke r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r7);

        if $i0 <= 0 goto label4;

        r4 = $r3;

        r5 = r7;

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return r4;
    }

    public static final java.lang.Object minByOrThrow(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3, r4, $r6;
        java.lang.Comparable r5, r7;
        java.util.NoSuchElementException r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = $r3;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r3;

     label1:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r7 = (java.lang.Comparable) $r6;

        $i0 = interfaceinvoke r5.<java.lang.Comparable: int compareTo(java.lang.Object)>(r7);

        if $i0 <= 0 goto label3;

        r4 = $r3;

        r5 = r7;

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return r4;

     label4:
        r8 = new java.util.NoSuchElementException;

        specialinvoke r8.<java.util.NoSuchElementException: void <init>()>();

        throw r8;
    }

    private static final double minOf(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        java.lang.Number r4;
        java.util.NoSuchElementException r5;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    private static final float minOf(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        float $f0, $f1;
        java.lang.Object $r3;
        java.lang.Number r4;
        java.util.NoSuchElementException r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    private static final java.lang.Comparable minOf(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.Comparable r4, r5;
        java.util.NoSuchElementException r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Comparable) $r3;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r5);

        if $i0 <= 0 goto label1;

        r4 = r5;

        goto label1;

     label2:
        return r4;

     label3:
        r6 = new java.util.NoSuchElementException;

        specialinvoke r6.<java.util.NoSuchElementException: void <init>()>();

        throw r6;
    }

    private static final java.lang.Comparable minOfOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.Comparable r4, r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Comparable) $r3;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r5 = (java.lang.Comparable) $r3;

        $i0 = interfaceinvoke r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r5);

        if $i0 <= 0 goto label2;

        r4 = r5;

        goto label2;

     label3:
        return r4;
    }

    private static final java.lang.Double minOfOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        java.lang.Double $r5;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        java.lang.Number r4;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d0 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke r4.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r5;
    }

    private static final java.lang.Float minOfOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.lang.Float $r5;
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        float $f0, $f1;
        java.lang.Object $r3;
        java.lang.Number r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        r4 = (java.lang.Number) $r3;

        $f1 = virtualinvoke r4.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r5;
    }

    private static final java.lang.Object minOfWith(kotlin.sequences.Sequence, java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r2;
        int $i0;
        java.lang.Object $r4, $r5;
        java.util.Comparator $r1;
        java.util.NoSuchElementException r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "selector");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i0 <= 0 goto label1;

        $r4 = $r5;

        goto label1;

     label2:
        return $r4;

     label3:
        r6 = new java.util.NoSuchElementException;

        specialinvoke r6.<java.util.NoSuchElementException: void <init>()>();

        throw r6;
    }

    private static final java.lang.Object minOfWithOrNull(kotlin.sequences.Sequence, java.util.Comparator, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r2;
        int $i0;
        java.lang.Object $r4, $r5;
        java.util.Comparator $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "selector");

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $i0 <= 0 goto label2;

        $r4 = $r5;

        goto label2;

     label3:
        return $r4;
    }

    public static final java.lang.Comparable minOrNull(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.Comparable r3, r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Comparable) $r2;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Comparable) $r2;

        $i0 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);

        if $i0 <= 0 goto label2;

        r3 = r4;

        goto label2;

     label3:
        return r3;
    }

    public static final java.lang.Double minOrNull(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        java.lang.Double $r4;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d1 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label2;

     label3:
        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r4;
    }

    public static final java.lang.Float minOrNull(kotlin.sequences.Sequence)
    {
        java.lang.Float $r4;
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        float $f0, $f1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f0 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f1 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label2;

     label3:
        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r4;
    }

    public static final double minOrThrow(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.lang.Number r3;
        java.util.NoSuchElementException r4;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d0 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d1 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        goto label1;

     label2:
        return $d0;

     label3:
        r4 = new java.util.NoSuchElementException;

        specialinvoke r4.<java.util.NoSuchElementException: void <init>()>();

        throw r4;
    }

    public static final float minOrThrow(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        float $f0, $f1;
        java.lang.Object $r2;
        java.lang.Number r3;
        java.util.NoSuchElementException r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f0 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f1 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        goto label1;

     label2:
        return $f0;

     label3:
        r4 = new java.util.NoSuchElementException;

        specialinvoke r4.<java.util.NoSuchElementException: void <init>()>();

        throw r4;
    }

    public static final java.lang.Comparable minOrThrow(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.Comparable r3, r4;
        java.util.NoSuchElementException r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Comparable) $r2;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Comparable) $r2;

        $i0 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r4);

        if $i0 <= 0 goto label1;

        r3 = r4;

        goto label1;

     label2:
        return r3;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    public static final java.lang.Object minWithOrNull(kotlin.sequences.Sequence, java.util.Comparator)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i0 <= 0 goto label2;

        $r3 = $r4;

        goto label2;

     label3:
        return $r3;
    }

    public static final java.lang.Object minWithOrThrow(kotlin.sequences.Sequence, java.util.Comparator)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        int $i0;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r1;
        java.util.NoSuchElementException r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i0 <= 0 goto label1;

        $r3 = $r4;

        goto label1;

     label2:
        return $r3;

     label3:
        r5 = new java.util.NoSuchElementException;

        specialinvoke r5.<java.util.NoSuchElementException: void <init>()>();

        throw r5;
    }

    public static final kotlin.sequences.Sequence minus(kotlin.sequences.Sequence, java.lang.Iterable)
    {
        kotlin.sequences.SequencesKt___SequencesKt$minus$3 $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$minus$3;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$minus$3: void <init>(java.lang.Iterable,kotlin.sequences.Sequence)>($r1, $r0);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence minus(kotlin.sequences.Sequence, java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.SequencesKt___SequencesKt$minus$1 $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$minus$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$minus$1: void <init>(kotlin.sequences.Sequence,java.lang.Object)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence minus(kotlin.sequences.Sequence, kotlin.sequences.Sequence)
    {
        kotlin.sequences.SequencesKt___SequencesKt$minus$4 $r2;
        kotlin.sequences.Sequence $r0, $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$minus$4;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$minus$4: void <init>(kotlin.sequences.Sequence,kotlin.sequences.Sequence)>($r1, $r0);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence minus(kotlin.sequences.Sequence, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        kotlin.sequences.Sequence $r0;
        int $i0;
        kotlin.sequences.SequencesKt___SequencesKt$minus$2 $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return $r0;

     label3:
        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$minus$2;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$minus$2: void <init>(kotlin.sequences.Sequence,java.lang.Object[])>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    private static final kotlin.sequences.Sequence minusElement(kotlin.sequences.Sequence, java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence minus(kotlin.sequences.Sequence,java.lang.Object)>($r0, $r1);

        return $r0;
    }

    public static final boolean none(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public static final boolean none(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Boolean $r4;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static final kotlin.sequences.Sequence onEach(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.SequencesKt___SequencesKt$onEach$1 $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$onEach$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$onEach$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        $r1 = (kotlin.jvm.functions.Function1) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r0;
    }

    public static final kotlin.sequences.Sequence onEachIndexed(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.SequencesKt___SequencesKt$onEachIndexed$1 $r2;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$onEachIndexed$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$onEachIndexed$1: void <init>(kotlin.jvm.functions.Function2)>($r1);

        $r1 = (kotlin.jvm.functions.Function2) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence mapIndexed(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2)>($r0, $r1);

        return $r0;
    }

    public static final kotlin.Pair partition(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.Pair $r8;
        kotlin.jvm.functions.Function1 $r1;
        java.util.ArrayList r2, r3;
        java.lang.Boolean $r7;
        java.lang.Object $r5, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = (java.lang.Boolean) $r6;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label3:
        $r8 = new kotlin.Pair;

        specialinvoke $r8.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r8;
    }

    public static final kotlin.sequences.Sequence plus(kotlin.sequences.Sequence, java.lang.Iterable)
    {
        kotlin.sequences.Sequence[] $r3;
        kotlin.sequences.Sequence $r0, $r2;
        java.lang.Iterable $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Iterable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r1);

        $r3 = newarray (kotlin.sequences.Sequence)[2];

        $r3[0] = $r0;

        $r3[1] = $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequenceOf(java.lang.Object[])>($r3);

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence flatten(kotlin.sequences.Sequence)>($r0);

        return $r0;
    }

    public static final kotlin.sequences.Sequence plus(kotlin.sequences.Sequence, java.lang.Object)
    {
        kotlin.sequences.Sequence[] $r4;
        java.lang.Object[] $r2;
        kotlin.sequences.Sequence $r0, $r3;
        java.lang.Object $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r1;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequenceOf(java.lang.Object[])>($r2);

        $r4 = newarray (kotlin.sequences.Sequence)[2];

        $r4[0] = $r0;

        $r4[1] = $r3;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequenceOf(java.lang.Object[])>($r4);

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence flatten(kotlin.sequences.Sequence)>($r0);

        return $r0;
    }

    public static final kotlin.sequences.Sequence plus(kotlin.sequences.Sequence, kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence[] $r2;
        kotlin.sequences.Sequence $r0, $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = newarray (kotlin.sequences.Sequence)[2];

        $r2[0] = $r0;

        $r2[1] = $r1;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequenceOf(java.lang.Object[])>($r2);

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence flatten(kotlin.sequences.Sequence)>($r0);

        return $r0;
    }

    public static final kotlin.sequences.Sequence plus(kotlin.sequences.Sequence, java.lang.Object[])
    {
        java.util.List $r2;
        java.lang.Object[] $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Iterable $r3;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(java.lang.Object[])>($r1);

        $r3 = (java.lang.Iterable) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence plus(kotlin.sequences.Sequence,java.lang.Iterable)>($r0, $r3);

        return $r0;
    }

    private static final kotlin.sequences.Sequence plusElement(kotlin.sequences.Sequence, java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence plus(kotlin.sequences.Sequence,java.lang.Object)>($r0, $r1);

        return $r0;
    }

    public static final java.lang.Object reduce(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        java.lang.UnsupportedOperationException r5;
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r3, $r4;
        kotlin.jvm.functions.Function2 $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label1;

     label2:
        return $r3;

     label3:
        r5 = new java.lang.UnsupportedOperationException;

        specialinvoke r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty sequence can\'t be reduced.");

        throw r5;
    }

    public static final java.lang.Object reduceIndexed(kotlin.sequences.Sequence, kotlin.jvm.functions.Function3)
    {
        java.lang.UnsupportedOperationException r6;
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Integer $r4;
        int i0, i1;
        java.lang.Object $r3, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        i0 = 1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        i1 = i0 + 1;

        if i0 >= 0 goto label2;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label2:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r3, $r5);

        i0 = i1;

        goto label1;

     label3:
        return $r3;

     label4:
        r6 = new java.lang.UnsupportedOperationException;

        specialinvoke r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Empty sequence can\'t be reduced.");

        throw r6;
    }

    public static final java.lang.Object reduceIndexedOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function3)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function3 $r1;
        java.lang.Integer $r4;
        int i0, i1;
        java.lang.Object $r3, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        i0 = 1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        i1 = i0 + 1;

        if i0 >= 0 goto label3;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label3:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r3, $r5);

        i0 = i1;

        goto label2;

     label4:
        return $r3;
    }

    public static final java.lang.Object reduceOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r3, $r4;
        kotlin.jvm.functions.Function2 $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label2;

     label3:
        return $r3;
    }

    public static final kotlin.sequences.Sequence requireNoNulls(kotlin.sequences.Sequence)
    {
        kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls$1 $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls$1;

        specialinvoke $r1.<kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls$1: void <init>(kotlin.sequences.Sequence)>($r0);

        $r2 = (kotlin.jvm.functions.Function1) $r1;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r2);

        return $r0;
    }

    public static final kotlin.sequences.Sequence runningFold(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 $r3;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r3 = new kotlin.sequences.SequencesKt___SequencesKt$runningFold$1;

        specialinvoke $r3.<kotlin.sequences.SequencesKt___SequencesKt$runningFold$1: void <init>(java.lang.Object,kotlin.sequences.Sequence,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r1, $r0, $r2, null);

        $r2 = (kotlin.jvm.functions.Function2) $r3;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r2);

        return $r0;
    }

    public static final kotlin.sequences.Sequence runningFoldIndexed(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function3 $r2;
        java.lang.Object $r1;
        kotlin.sequences.SequencesKt___SequencesKt$runningFoldIndexed$1 $r3;
        kotlin.jvm.functions.Function2 $r4;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r3 = new kotlin.sequences.SequencesKt___SequencesKt$runningFoldIndexed$1;

        specialinvoke $r3.<kotlin.sequences.SequencesKt___SequencesKt$runningFoldIndexed$1: void <init>(java.lang.Object,kotlin.sequences.Sequence,kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation)>($r1, $r0, $r2, null);

        $r4 = (kotlin.jvm.functions.Function2) $r3;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r4);

        return $r0;
    }

    public static final kotlin.sequences.Sequence runningReduce(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.SequencesKt___SequencesKt$runningReduce$1 $r2;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$runningReduce$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$runningReduce$1: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r0, $r1, null);

        $r1 = (kotlin.jvm.functions.Function2) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r1);

        return $r0;
    }

    public static final kotlin.sequences.Sequence runningReduceIndexed(kotlin.sequences.Sequence, kotlin.jvm.functions.Function3)
    {
        kotlin.sequences.SequencesKt___SequencesKt$runningReduceIndexed$1 $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function3 $r1;
        kotlin.jvm.functions.Function2 $r3;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$runningReduceIndexed$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$runningReduceIndexed$1: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function3,kotlin.coroutines.Continuation)>($r0, $r1, null);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r3);

        return $r0;
    }

    public static final kotlin.sequences.Sequence scan(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence runningFold(kotlin.sequences.Sequence,java.lang.Object,kotlin.jvm.functions.Function2)>($r0, $r1, $r2);

        return $r0;
    }

    public static final kotlin.sequences.Sequence scanIndexed(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function3)
    {
        kotlin.jvm.functions.Function3 $r2;
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence runningFoldIndexed(kotlin.sequences.Sequence,java.lang.Object,kotlin.jvm.functions.Function3)>($r0, $r1, $r2);

        return $r0;
    }

    public static final java.lang.Object single(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        java.util.NoSuchElementException r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sequence has more than one element.");

        throw $r3;

     label2:
        r4 = new java.util.NoSuchElementException;

        specialinvoke r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence is empty.");

        throw r4;
    }

    public static final java.lang.Object single(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.IllegalArgumentException $r7;
        java.lang.Boolean $r6;
        java.lang.Object r2, $r4, $r5;
        java.util.NoSuchElementException $r8;
        boolean z0, $z1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r2 = null;

        z0 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        if z0 != 0 goto label2;

        r2 = $r4;

        z0 = 1;

        goto label1;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sequence contains more than one matching element.");

        throw $r7;

     label3:
        if z0 == 0 goto label4;

        return r2;

     label4:
        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Sequence contains no element matching the predicate.");

        throw $r8;
    }

    public static final java.lang.Object singleOrNull(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        return $r2;
    }

    public static final java.lang.Object singleOrNull(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r6;
        java.lang.Object r2, $r4, $r5;
        boolean z0, $z1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        r2 = null;

        z0 = 0;

        $r3 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        if z0 == 0 goto label2;

        return null;

     label2:
        r2 = $r4;

        z0 = 1;

        goto label1;

     label3:
        if z0 != 0 goto label4;

        return null;

     label4:
        return r2;
    }

    public static final kotlin.sequences.Sequence sorted(kotlin.sequences.Sequence)
    {
        kotlin.sequences.SequencesKt___SequencesKt$sorted$1 $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.sequences.SequencesKt___SequencesKt$sorted$1;

        specialinvoke $r1.<kotlin.sequences.SequencesKt___SequencesKt$sorted$1: void <init>(kotlin.sequences.Sequence)>($r0);

        $r0 = (kotlin.sequences.Sequence) $r1;

        return $r0;
    }

    public static final kotlin.sequences.Sequence sortedBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2 $r2;
        java.util.Comparator $r3;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;

        specialinvoke $r2.<kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2: void <init>(kotlin.jvm.functions.Function1)>($r1);

        $r3 = (java.util.Comparator) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence,java.util.Comparator)>($r0, $r3);

        return $r0;
    }

    public static final kotlin.sequences.Sequence sortedByDescending(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1 $r2;
        java.util.Comparator $r3;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;

        specialinvoke $r2.<kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1: void <init>(kotlin.jvm.functions.Function1)>($r1);

        $r3 = (java.util.Comparator) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence,java.util.Comparator)>($r0, $r3);

        return $r0;
    }

    public static final kotlin.sequences.Sequence sortedDescending(kotlin.sequences.Sequence)
    {
        java.util.Comparator $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.comparisons.ComparisonsKt: java.util.Comparator reverseOrder()>();

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence,java.util.Comparator)>($r0, $r1);

        return $r0;
    }

    public static final kotlin.sequences.Sequence sortedWith(kotlin.sequences.Sequence, java.util.Comparator)
    {
        kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1 $r2;
        java.util.Comparator $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1: void <init>(kotlin.sequences.Sequence,java.util.Comparator)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final int sumBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int i0, $i1;
        java.lang.Object $r3;
        java.lang.Number $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        i0 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        i0 = i0 + $i1;

        goto label1;

     label2:
        return i0;
    }

    public static final double sumByDouble(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double d0, $d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        d0 = 0.0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        d0 = d0 + $d1;

        goto label1;

     label2:
        return d0;
    }

    public static final int sumOfByte(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        byte $b1;
        int i0, $i2;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $b1 = virtualinvoke r3.<java.lang.Number: byte byteValue()>();

        $i2 = (int) $b1;

        i0 = i0 + $i2;

        goto label1;

     label2:
        return i0;
    }

    public static final double sumOfDouble(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        java.lang.Object $r2;
        java.lang.Number r3;
        double d0, $d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        d0 = 0.0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $d1 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        d0 = d0 + $d1;

        goto label1;

     label2:
        return d0;
    }

    private static final double sumOfDouble(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        java.lang.Number $r4;
        double d0, $d1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        d0 = 0.0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Number) $r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        d0 = d0 + $d1;

        goto label1;

     label2:
        return d0;
    }

    public static final float sumOfFloat(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        float f0, $f1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        f0 = 0.0F;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $f1 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

        f0 = f0 + $f1;

        goto label1;

     label2:
        return f0;
    }

    public static final int sumOfInt(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        int i0, $i1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $i1 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        i0 = i0 + $i1;

        goto label1;

     label2:
        return i0;
    }

    private static final int sumOfInt(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int i0, $i1;
        java.lang.Object $r3;
        java.lang.Number $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        i0 = 0;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        i0 = i0 + $i1;

        goto label1;

     label2:
        return i0;
    }

    public static final long sumOfLong(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        long l0, $l1;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        l0 = 0L;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $l1 = virtualinvoke r3.<java.lang.Number: long longValue()>();

        l0 = l0 + $l1;

        goto label1;

     label2:
        return l0;
    }

    private static final long sumOfLong(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        long l0, $l1;
        java.lang.Object $r3;
        java.lang.Number $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        l0 = 0L;

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (java.lang.Number) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        l0 = l0 + $l1;

        goto label1;

     label2:
        return l0;
    }

    public static final int sumOfShort(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        kotlin.sequences.Sequence $r0;
        short $s1;
        int i0, $i2;
        java.lang.Object $r2;
        java.lang.Number r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        i0 = 0;

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Number) $r2;

        $s1 = virtualinvoke r3.<java.lang.Number: short shortValue()>();

        $i2 = (int) $s1;

        i0 = i0 + $i2;

        goto label1;

     label2:
        return i0;
    }

    private static final int sumOfUInt(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.UInt $r4;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>(0);

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (kotlin.UInt) $r3;

        $i1 = virtualinvoke $r4.<kotlin.UInt: int unbox-impl()>();

        $i0 = $i1 + $i0;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        goto label1;

     label2:
        return $i0;
    }

    private static final long sumOfULong(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        long $l0, $l1;
        kotlin.ULong $r4;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>(0L);

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r4 = (kotlin.ULong) $r3;

        $l1 = virtualinvoke $r4.<kotlin.ULong: long unbox-impl()>();

        $l0 = $l1 + $l0;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        goto label1;

     label2:
        return $l0;
    }

    public static final kotlin.sequences.Sequence take(kotlin.sequences.Sequence, int)
    {
        kotlin.sequences.TakeSequence $r2;
        kotlin.sequences.Sequence $r0;
        java.lang.IllegalArgumentException $r5;
        kotlin.sequences.DropTakeSequence $r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label5;

        if $i0 != 0 goto label3;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence emptySequence()>();

        return $r0;

     label3:
        $z0 = $r0 instanceof kotlin.sequences.DropTakeSequence;

        if $z0 == 0 goto label4;

        $r1 = (kotlin.sequences.DropTakeSequence) $r0;

        $r0 = interfaceinvoke $r1.<kotlin.sequences.DropTakeSequence: kotlin.sequences.Sequence take(int)>($i0);

        return $r0;

     label4:
        $r2 = new kotlin.sequences.TakeSequence;

        specialinvoke $r2.<kotlin.sequences.TakeSequence: void <init>(kotlin.sequences.Sequence,int)>($r0, $i0);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r5;
    }

    public static final kotlin.sequences.Sequence takeWhile(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlin.sequences.TakeWhileSequence $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = new kotlin.sequences.TakeWhileSequence;

        specialinvoke $r2.<kotlin.sequences.TakeWhileSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final java.util.Collection toCollection(kotlin.sequences.Sequence, java.util.Collection)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r1;
    }

    public static final java.util.HashSet toHashSet(kotlin.sequences.Sequence)
    {
        java.util.HashSet $r2;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r1 = (java.util.Collection) $r2;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.util.Collection toCollection(kotlin.sequences.Sequence,java.util.Collection)>($r0, $r1);

        $r2 = (java.util.HashSet) $r1;

        return $r2;
    }

    public static final java.util.List toList(kotlin.sequences.Sequence)
    {
        java.util.List $r1;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toMutableList(kotlin.sequences.Sequence)>($r0);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List optimizeReadOnlyList(java.util.List)>($r1);

        return $r1;
    }

    public static final java.util.List toMutableList(kotlin.sequences.Sequence)
    {
        java.util.List $r3;
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r1;
        java.util.ArrayList $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r1 = (java.util.Collection) $r2;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.util.Collection toCollection(kotlin.sequences.Sequence,java.util.Collection)>($r0, $r1);

        $r3 = (java.util.List) $r1;

        return $r3;
    }

    public static final java.util.Set toMutableSet(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r2;
        kotlin.sequences.Sequence $r0;
        java.util.Set $r4;
        java.lang.Object $r3;
        java.util.LinkedHashSet r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r1 = new java.util.LinkedHashSet;

        specialinvoke r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        $r4 = (java.util.Set) r1;

        return $r4;
    }

    public static final java.util.Set toSet(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Collection $r2;
        java.util.Set $r3;
        java.util.LinkedHashSet $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = (java.util.Collection) $r1;

        $r2 = staticinvoke <kotlin.sequences.SequencesKt: java.util.Collection toCollection(kotlin.sequences.Sequence,java.util.Collection)>($r0, $r2);

        $r3 = (java.util.Set) $r2;

        $r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)>($r3);

        return $r3;
    }

    public static final kotlin.sequences.Sequence windowed(kotlin.sequences.Sequence, int, int, boolean)
    {
        kotlin.sequences.Sequence $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.collections.SlidingWindowKt: kotlin.sequences.Sequence windowedSequence(kotlin.sequences.Sequence,int,int,boolean,boolean)>($r0, $i0, $i1, $z0, 0);

        return $r0;
    }

    public static final kotlin.sequences.Sequence windowed(kotlin.sequences.Sequence, int, int, boolean, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.Sequence $r0;
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r1 := @parameter4: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r0 = staticinvoke <kotlin.collections.SlidingWindowKt: kotlin.sequences.Sequence windowedSequence(kotlin.sequences.Sequence,int,int,boolean,boolean)>($r0, $i0, $i1, $z0, 1);

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r0, $r1);

        return $r0;
    }

    public static kotlin.sequences.Sequence windowed$default(kotlin.sequences.Sequence, int, int, boolean, int, java.lang.Object)
    {
        kotlin.sequences.Sequence $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i1 = 1;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $z0 = 0;

     label2:
        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence windowed(kotlin.sequences.Sequence,int,int,boolean)>($r0, $i0, $i1, $z0);

        return $r0;
    }

    public static kotlin.sequences.Sequence windowed$default(kotlin.sequences.Sequence, int, int, boolean, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlin.sequences.Sequence $r1;
        kotlin.jvm.functions.Function1 $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r0 := @parameter4: kotlin.jvm.functions.Function1;

        $i2 := @parameter5: int;

        $r2 := @parameter6: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i1 = 1;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $z0 = 0;

     label2:
        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence windowed(kotlin.sequences.Sequence,int,int,boolean,kotlin.jvm.functions.Function1)>($r1, $i0, $i1, $z0, $r0);

        return $r1;
    }

    public static final kotlin.sequences.Sequence withIndex(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.IndexingSequence $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.sequences.IndexingSequence;

        specialinvoke $r1.<kotlin.sequences.IndexingSequence: void <init>(kotlin.sequences.Sequence)>($r0);

        $r0 = (kotlin.sequences.Sequence) $r1;

        return $r0;
    }

    public static final kotlin.sequences.Sequence zip(kotlin.sequences.Sequence, kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0, $r1;
        kotlin.sequences.MergingSequence $r2;
        kotlin.sequences.SequencesKt___SequencesKt$zip$1 $r3;
        kotlin.jvm.functions.Function2 $r4;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = new kotlin.sequences.MergingSequence;

        $r3 = <kotlin.sequences.SequencesKt___SequencesKt$zip$1: kotlin.sequences.SequencesKt___SequencesKt$zip$1 INSTANCE>;

        $r4 = (kotlin.jvm.functions.Function2) $r3;

        specialinvoke $r2.<kotlin.sequences.MergingSequence: void <init>(kotlin.sequences.Sequence,kotlin.sequences.Sequence,kotlin.jvm.functions.Function2)>($r0, $r1, $r4);

        $r0 = (kotlin.sequences.Sequence) $r2;

        return $r0;
    }

    public static final kotlin.sequences.Sequence zip(kotlin.sequences.Sequence, kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.sequences.Sequence $r0, $r1;
        kotlin.sequences.MergingSequence $r3;
        kotlin.jvm.functions.Function2 $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transform");

        $r3 = new kotlin.sequences.MergingSequence;

        specialinvoke $r3.<kotlin.sequences.MergingSequence: void <init>(kotlin.sequences.Sequence,kotlin.sequences.Sequence,kotlin.jvm.functions.Function2)>($r0, $r1, $r2);

        $r0 = (kotlin.sequences.Sequence) $r3;

        return $r0;
    }

    public static final kotlin.sequences.Sequence zipWithNext(kotlin.sequences.Sequence)
    {
        kotlin.jvm.functions.Function2 $r2;
        kotlin.sequences.Sequence $r0;
        kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1 $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1: kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function2) $r1;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence zipWithNext(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2)>($r0, $r2);

        return $r0;
    }

    public static final kotlin.sequences.Sequence zipWithNext(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r1;
        kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = new kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2;

        specialinvoke $r2.<kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r0, $r1, null);

        $r1 = (kotlin.jvm.functions.Function2) $r2;

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence sequence(kotlin.jvm.functions.Function2)>($r1);

        return $r0;
    }
}
