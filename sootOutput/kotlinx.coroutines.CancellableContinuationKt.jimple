public final class kotlinx.coroutines.CancellableContinuationKt extends java.lang.Object
{

    public static final void disposeOnCancellation(kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.CancellableContinuation $r0;
        kotlin.jvm.functions.Function1 $r4;
        kotlinx.coroutines.DisposeOnCancel $r2;
        kotlinx.coroutines.CancelHandlerBase $r3;

        $r0 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r1 := @parameter1: kotlinx.coroutines.DisposableHandle;

        $r2 = new kotlinx.coroutines.DisposeOnCancel;

        specialinvoke $r2.<kotlinx.coroutines.DisposeOnCancel: void <init>(kotlinx.coroutines.DisposableHandle)>($r1);

        $r3 = (kotlinx.coroutines.CancelHandlerBase) $r2;

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        interfaceinvoke $r0.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r4);

        return;
    }

    public static final kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r0;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r1, $r3;
        boolean $z0;

        $r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r0 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        if $z0 != 0 goto label1;

        $r1 = new kotlinx.coroutines.CancellableContinuationImpl;

        specialinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r0, 1);

        return $r1;

     label1:
        $r2 = (kotlinx.coroutines.internal.DispatchedContinuation) $r0;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CancellableContinuationImpl claimReusableCancellableContinuation()>();

        $r3 = $r1;

        if $r1 == null goto label5;

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: boolean resetStateReusable()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r3 = null;

     label3:
        if $r3 != null goto label4;

        goto label5;

     label4:
        return $r3;

     label5:
        $r1 = new kotlinx.coroutines.CancellableContinuationImpl;

        specialinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r0, 2);

        return $r1;
    }

    public static final java.lang.Object suspendCancellableCoroutine(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1, $r3;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r4, $r5;
        kotlinx.coroutines.CancellableContinuationImpl r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        r2 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        specialinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r3, 1);

        virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        $r4 = virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label1;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label1:
        return $r4;
    }

    private static final java.lang.Object suspendCancellableCoroutine$$forInline(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1, r3;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r4, $r5;
        kotlinx.coroutines.CancellableContinuationImpl r2;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        r2 = new kotlinx.coroutines.CancellableContinuationImpl;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        specialinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>(r3, 1);

        virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        $r4 = virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label1;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label1:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        return $r4;
    }

    public static final java.lang.Object suspendCancellableCoroutineReusable(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r2;
        kotlin.coroutines.Continuation $r1, $r3;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r5, $r6;
        kotlinx.coroutines.CancellableContinuationImpl $r4;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r4 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r3);

     label1:
        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label2:
        $r5 = virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label4;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

        return $r5;

     label3:
        r2 := @caughtexception;

        virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw r2;

     label4:
        return $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static final java.lang.Object suspendCancellableCoroutineReusable$$forInline(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r6;
        kotlin.coroutines.Continuation $r1, r2;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r4, $r5;
        kotlinx.coroutines.CancellableContinuationImpl $r3;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>(r2);

     label1:
        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

     label2:
        $r4 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label3;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        return $r4;

     label4:
        r6 := @caughtexception;

        virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
