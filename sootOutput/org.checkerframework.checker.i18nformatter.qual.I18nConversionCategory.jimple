public final enum class org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory extends java.lang.Enum
{
    private static final org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $VALUES;
    public static final enum org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE;
    public static final enum org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL;
    public static final enum org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER;
    public static final enum org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED;
    static org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] namedCategories;
    public final java.lang.String[] strings;
    public final java.lang.Class[] types;

    static void <clinit>()
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory $r0;
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $r3;
        java.lang.Class[] $r1;
        java.lang.String[] $r2;

        $r0 = new org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        specialinvoke $r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: void <init>(java.lang.String,int,java.lang.Class[],java.lang.String[])>("UNUSED", 0, null, null);

        <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED> = $r0;

        $r0 = new org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        specialinvoke $r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: void <init>(java.lang.String,int,java.lang.Class[],java.lang.String[])>("GENERAL", 1, null, null);

        <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL> = $r0;

        $r0 = new org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/util/Date;";

        $r1[1] = class "Ljava/lang/Number;";

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "date";

        $r2[1] = "time";

        specialinvoke $r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: void <init>(java.lang.String,int,java.lang.Class[],java.lang.String[])>("DATE", 2, $r1, $r2);

        <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE> = $r0;

        $r0 = new org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Number;";

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "number";

        $r2[1] = "choice";

        specialinvoke $r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: void <init>(java.lang.String,int,java.lang.Class[],java.lang.String[])>("NUMBER", 3, $r1, $r2);

        <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER> = $r0;

        $r3 = newarray (org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory)[4];

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED>;

        $r3[0] = $r0;

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL>;

        $r3[1] = $r0;

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE>;

        $r3[2] = $r0;

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER>;

        $r3[3] = $r0;

        <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $VALUES> = $r3;

        $r3 = newarray (org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory)[2];

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE>;

        $r3[0] = $r0;

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER>;

        $r3[1] = $r0;

        <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] namedCategories> = $r3;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.Class[], java.lang.String[])
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory r0;
        int $i0;
        java.lang.Class[] r2;
        java.lang.String[] $r3;
        java.lang.String $r1;

        r0 := @this: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Class[];

        $r3 := @parameter3: java.lang.String[];

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types> = r2;

        r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.String[] strings> = $r3;

        return;
    }

    private static java.util.Set arrayToSet(java.lang.Object[])
    {
        java.util.HashSet $r1;
        java.util.List $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = new java.util.HashSet;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public static org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory intersect(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory, org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory)
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory $r0, $r1, r3;
        java.lang.Class[] r4;
        java.util.Set $r5, $r6;
        java.lang.RuntimeException $r7;
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $r2;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r1 := @parameter1: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        r3 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED>;

        if $r0 != r3 goto label1;

        return $r1;

     label1:
        r3 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED>;

        if $r1 != r3 goto label2;

        return $r0;

     label2:
        r3 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL>;

        if $r0 != r3 goto label3;

        return $r1;

     label3:
        r3 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL>;

        if $r1 != r3 goto label4;

        return $r0;

     label4:
        r4 = $r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types>;

        $r5 = staticinvoke <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        r4 = $r1.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types>;

        $r6 = staticinvoke <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        interfaceinvoke $r5.<java.util.Set: boolean retainAll(java.util.Collection)>($r6);

        $r2 = newarray (org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory)[2];

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE>;

        $i0 = 0;

        $r2[0] = $r0;

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER>;

        $r2[1] = $r0;

     label5:
        if $i0 >= 2 goto label7;

        $r0 = $r2[$i0];

        r4 = $r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types>;

        $r6 = staticinvoke <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.util.Set arrayToSet(java.lang.Object[])>(r4);

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label6;

        return $r0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>()>();

        throw $r7;
    }

    public static boolean isSubsetOf(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory, org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory)
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory $r0, $r1;

        $r0 := @parameter0: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r1 := @parameter1: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r1 = staticinvoke <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory intersect(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory)>($r0, $r1);

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory stringToI18nConversionCategory(java.lang.String)
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory r0;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r5;
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r6;
        java.lang.String r2, $r3;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] namedCategories>;

        $i1 = lengthof $r4;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label5;

        r0 = $r4[$i2];

        $r1 = r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.String[] strings>;

        $i0 = lengthof $r1;

        $i3 = 0;

     label2:
        if $i3 >= $i0 goto label4;

        r2 = $r1[$i3];

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        return r0;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        $i2 = $i2 + 1;

        goto label1;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format type ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r5;
    }

    public static org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory union(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory, org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory)
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory $r0, $r1, $r2;

        $r0 := @parameter0: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r1 := @parameter1: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        $r2 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED>;

        if $r0 == $r2 goto label6;

        $r2 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED>;

        if $r1 != $r2 goto label1;

        goto label6;

     label1:
        $r2 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL>;

        if $r0 == $r2 goto label5;

        $r2 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL>;

        if $r1 != $r2 goto label2;

        goto label5;

     label2:
        $r2 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE>;

        if $r0 == $r2 goto label4;

        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE>;

        if $r1 != $r0 goto label3;

        goto label4;

     label3:
        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER>;

        return $r0;

     label4:
        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE>;

        return $r0;

     label5:
        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL>;

        return $r0;

     label6:
        $r0 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED>;

        return $r0;
    }

    public static org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory valueOf(java.lang.String)
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory $r2;
        java.lang.String $r0;
        java.lang.Enum $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;", $r0);

        $r2 = (org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) $r1;

        return $r2;
    }

    public static org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] values()
    {
        java.lang.Object $r0;
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $r1;

        $r1 = <org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[]) $r0;

        return $r1;
    }

    public boolean isAssignableFrom(java.lang.Class)
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory r0;
        int $i0, $i1;
        java.lang.Class[] $r3;
        java.lang.Class r1, r2;
        boolean $z0;

        r0 := @this: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        r1 := @parameter0: java.lang.Class;

        $r3 = r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types>;

        if $r3 != null goto label1;

        return 1;

     label1:
        r2 = <java.lang.Void: java.lang.Class TYPE>;

        if r1 != r2 goto label2;

        return 1;

     label2:
        $r3 = r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types>;

        $i0 = lengthof $r3;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        r2 = $r3[$i1];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return 0;
    }

    public java.lang.String toString()
    {
        org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory r0;
        java.lang.Class[] r4;
        java.util.StringJoiner r5;
        int $i0, $i1;
        java.lang.StringBuilder r1;
        java.lang.Class r2;
        java.lang.String $r3;

        r0 := @this: org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory;

        r1 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.String name()>();

        specialinvoke r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        r4 = r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types>;

        if r4 != null goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" conversion category (all types)");

        goto label4;

     label1:
        r5 = new java.util.StringJoiner;

        specialinvoke r5.<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", " conversion category (one of: ", ")");

        r4 = r0.<org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory: java.lang.Class[] types>;

        $i0 = lengthof r4;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        r2 = r4[$i1];

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        virtualinvoke r5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r3);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
