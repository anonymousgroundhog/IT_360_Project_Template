final class kotlin.collections.SlidingWindowKt$windowedIterator$1 extends kotlin.coroutines.jvm.internal.RestrictedSuspendLambda implements kotlin.jvm.functions.Function2
{
    final java.util.Iterator $iterator;
    final boolean $partialWindows;
    final boolean $reuseBuffer;
    final int $size;
    final int $step;
    int I$0;
    private java.lang.Object L$0;
    java.lang.Object L$1;
    java.lang.Object L$2;
    int label;

    void <init>(int, int, java.util.Iterator, boolean, boolean, kotlin.coroutines.Continuation)
    {
        kotlin.collections.SlidingWindowKt$windowedIterator$1 r0;
        kotlin.coroutines.Continuation $r2;
        java.util.Iterator $r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: kotlin.collections.SlidingWindowKt$windowedIterator$1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.util.Iterator;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r2 := @parameter5: kotlin.coroutines.Continuation;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size> = $i0;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $step> = $i1;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.util.Iterator $iterator> = $r1;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $reuseBuffer> = $z0;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $partialWindows> = $z1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.RestrictedSuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.collections.SlidingWindowKt$windowedIterator$1 r0, $r4;
        kotlin.coroutines.Continuation $r2;
        java.util.Iterator $r3;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: kotlin.collections.SlidingWindowKt$windowedIterator$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new kotlin.collections.SlidingWindowKt$windowedIterator$1;

        $i0 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        $i1 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $step>;

        $r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.util.Iterator $iterator>;

        $z0 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $reuseBuffer>;

        $z1 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $partialWindows>;

        specialinvoke $r4.<kotlin.collections.SlidingWindowKt$windowedIterator$1: void <init>(int,int,java.util.Iterator,boolean,boolean,kotlin.coroutines.Continuation)>($i0, $i1, $r3, $z0, $z1, $r2);

        $r4.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r4;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.collections.SlidingWindowKt$windowedIterator$1 r0;
        kotlin.coroutines.Continuation $r4;
        java.lang.Object $r1, $r2;
        kotlin.sequences.SequenceScope $r3;

        r0 := @this: kotlin.collections.SlidingWindowKt$windowedIterator$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.sequences.SequenceScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object invoke(kotlin.sequences.SequenceScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlin.sequences.SequenceScope, kotlin.coroutines.Continuation)
    {
        kotlin.collections.SlidingWindowKt$windowedIterator$1 r0;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;
        kotlin.sequences.SequenceScope $r1;

        r0 := @this: kotlin.collections.SlidingWindowKt$windowedIterator$1;

        $r1 := @parameter0: kotlin.sequences.SequenceScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlin.collections.SlidingWindowKt$windowedIterator$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        kotlin.collections.SlidingWindowKt$windowedIterator$1 r0, r6;
        java.lang.IllegalStateException $r13;
        kotlin.coroutines.Continuation $r9;
        kotlin.collections.RingBuffer r4, $r15;
        java.util.ArrayList $r8, $r14;
        int $i0, i1, $i2, $i3;
        kotlin.sequences.SequenceScope $r5;
        boolean $z0;
        java.util.Iterator r7;
        java.util.Collection r10;
        java.util.List $r11;
        kotlin.Unit r12;
        java.lang.Object $r1, $r2, r3;

        r0 := @this: kotlin.collections.SlidingWindowKt$windowedIterator$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i1 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int label>;

        lookupswitch(i1)
        {
            case 0: goto label07;
            case 1: goto label06;
            case 2: goto label05;
            case 3: goto label04;
            case 4: goto label03;
            case 5: goto label02;
            default: goto label01;
        };

     label01:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r13;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label28;

     label03:
        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1>;

        r4 = (kotlin.collections.RingBuffer) r3;

        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0>;

        $r5 = (kotlin.sequences.SequenceScope) r3;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r1 = $r2;

        goto label26;

     label04:
        r6 = r0;

        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$2>;

        r7 = (java.util.Iterator) r3;

        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1>;

        r4 = (kotlin.collections.RingBuffer) r3;

        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0>;

        $r5 = (kotlin.sequences.SequenceScope) r3;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label21;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label15;

     label06:
        i1 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int I$0>;

        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$2>;

        r7 = (java.util.Iterator) r3;

        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1>;

        $r8 = (java.util.ArrayList) r3;

        r3 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0>;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r5 = (kotlin.sequences.SequenceScope) r3;

        $r1 = $r2;

        goto label10;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r6 = r0;

        $r1 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0>;

        $r5 = (kotlin.sequences.SequenceScope) $r1;

        i1 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>(i1, 1024);

        $i2 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $step>;

        $i0 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        $i0 = $i2 - $i0;

        if $i0 < 0 goto label16;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(i1);

        $i2 = 0;

        r7 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.util.Iterator $iterator>;

        $r1 = $r2;

        i1 = $i0;

        $r8 = $r14;

     label08:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r2 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        if $i2 <= 0 goto label09;

        $i2 = $i2 + -1;

        goto label08;

     label09:
        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i3 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        if $i3 != $i0 goto label08;

        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0> = $r5;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1> = $r8;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$2> = r7;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int I$0> = i1;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int label> = 1;

        $r2 = virtualinvoke $r5.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r8, $r9);

        if $r2 != $r1 goto label10;

        return $r1;

     label10:
        $z0 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $reuseBuffer>;

        if $z0 == 0 goto label11;

        virtualinvoke $r8.<java.util.ArrayList: void clear()>();

        goto label12;

     label11:
        $r14 = new java.util.ArrayList;

        $r8 = $r14;

        $i2 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i2);

     label12:
        $i2 = i1;

        goto label08;

     label13:
        r10 = (java.util.Collection) $r8;

        $z0 = interfaceinvoke r10.<java.util.Collection: boolean isEmpty()>();

        $z0 = 1 ^ $z0;

        if $z0 == 0 goto label29;

        $z0 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $partialWindows>;

        if $z0 != 0 goto label14;

        i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i2 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        if i1 != $i2 goto label29;

     label14:
        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0> = null;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1> = null;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$2> = null;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int label> = 2;

        $r2 = virtualinvoke $r5.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r8, $r9);

        if $r2 != $r1 goto label15;

        return $r1;

     label15:
        goto label29;

     label16:
        $r15 = new kotlin.collections.RingBuffer;

        specialinvoke $r15.<kotlin.collections.RingBuffer: void <init>(int)>(i1);

        r4 = $r15;

        r7 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.util.Iterator $iterator>;

     label17:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

        $r1 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r4.<kotlin.collections.RingBuffer: void add(java.lang.Object)>($r1);

        $z0 = virtualinvoke r4.<kotlin.collections.RingBuffer: boolean isFull()>();

        if $z0 == 0 goto label17;

        i1 = virtualinvoke r4.<kotlin.collections.RingBuffer: int size()>();

        $i2 = r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        if i1 >= $i2 goto label18;

        i1 = r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $size>;

        r4 = virtualinvoke r4.<kotlin.collections.RingBuffer: kotlin.collections.RingBuffer expanded(int)>(i1);

        goto label17;

     label18:
        $z0 = r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $reuseBuffer>;

        if $z0 == 0 goto label19;

        $r11 = (java.util.List) r4;

        goto label20;

     label19:
        $r14 = new java.util.ArrayList;

        r10 = (java.util.Collection) r4;

        specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>(r10);

        $r11 = (java.util.List) $r14;

     label20:
        $r9 = (kotlin.coroutines.Continuation) r6;

        r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0> = $r5;

        r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1> = r4;

        r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$2> = r7;

        r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int label> = 3;

        $r1 = virtualinvoke $r5.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r11, $r9);

        if $r1 != $r2 goto label21;

        return $r2;

     label21:
        i1 = r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $step>;

        virtualinvoke r4.<kotlin.collections.RingBuffer: void removeFirst(int)>(i1);

        goto label17;

     label22:
        $z0 = r6.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $partialWindows>;

        if $z0 == 0 goto label29;

        $r1 = $r2;

        r0 = r6;

     label23:
        i1 = virtualinvoke r4.<kotlin.collections.RingBuffer: int size()>();

        $i2 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $step>;

        if i1 <= $i2 goto label27;

        $z0 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: boolean $reuseBuffer>;

        if $z0 == 0 goto label24;

        $r11 = (java.util.List) r4;

        goto label25;

     label24:
        $r14 = new java.util.ArrayList;

        r10 = (java.util.Collection) r4;

        specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>(r10);

        $r11 = (java.util.List) $r14;

     label25:
        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0> = $r5;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1> = r4;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$2> = null;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int label> = 4;

        $r2 = virtualinvoke $r5.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r11, $r9);

        if $r2 != $r1 goto label26;

        return $r1;

     label26:
        i1 = r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int $step>;

        virtualinvoke r4.<kotlin.collections.RingBuffer: void removeFirst(int)>(i1);

        goto label23;

     label27:
        r10 = (java.util.Collection) r4;

        $z0 = interfaceinvoke r10.<java.util.Collection: boolean isEmpty()>();

        $z0 = 1 ^ $z0;

        if $z0 == 0 goto label29;

        $r9 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$0> = null;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$1> = null;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: java.lang.Object L$2> = null;

        r0.<kotlin.collections.SlidingWindowKt$windowedIterator$1: int label> = 5;

        $r2 = virtualinvoke $r5.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>(r4, $r9);

        if $r2 != $r1 goto label28;

        return $r1;

     label28:
        goto label29;

     label29:
        r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r12;
    }
}
