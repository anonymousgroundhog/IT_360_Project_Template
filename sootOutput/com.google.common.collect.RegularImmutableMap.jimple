final class com.google.common.collect.RegularImmutableMap extends com.google.common.collect.ImmutableMap
{
    private static final byte ABSENT;
    private static final int BYTE_MASK;
    private static final int BYTE_MAX_SIZE;
    static final com.google.common.collect.ImmutableMap EMPTY;
    private static final int SHORT_MASK;
    private static final int SHORT_MAX_SIZE;
    private static final long serialVersionUID;
    final transient java.lang.Object[] alternatingKeysAndValues;
    private final transient java.lang.Object hashTable;
    private final transient int size;

    static void <clinit>()
    {
        java.lang.Object[] $r1;
        com.google.common.collect.RegularImmutableMap $r0;

        <com.google.common.collect.RegularImmutableMap: int SHORT_MAX_SIZE> = 32768;

        <com.google.common.collect.RegularImmutableMap: int SHORT_MASK> = 65535;

        <com.google.common.collect.RegularImmutableMap: int BYTE_MAX_SIZE> = 128;

        <com.google.common.collect.RegularImmutableMap: int BYTE_MASK> = 255;

        <com.google.common.collect.RegularImmutableMap: byte ABSENT> = -1;

        $r0 = new com.google.common.collect.RegularImmutableMap;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<com.google.common.collect.RegularImmutableMap: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0);

        <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY> = $r0;

        return;
    }

    private void <init>(java.lang.Object, java.lang.Object[], int)
    {
        java.lang.Object[] $r2;
        com.google.common.collect.RegularImmutableMap r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

        $i0 := @parameter2: int;

        specialinvoke r0.<com.google.common.collect.ImmutableMap: void <init>()>();

        r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object hashTable> = $r1;

        r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues> = $r2;

        r0.<com.google.common.collect.RegularImmutableMap: int size> = $i0;

        return;
    }

    static com.google.common.collect.RegularImmutableMap create(int, java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] $r0;
        com.google.common.collect.RegularImmutableMap $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[],com.google.common.collect.ImmutableMap$Builder)>($i0, $r0, null);

        return $r1;
    }

    static com.google.common.collect.RegularImmutableMap create(int, java.lang.Object[], com.google.common.collect.ImmutableMap$Builder)
    {
        java.lang.Object[] $r1, r6;
        com.google.common.collect.ImmutableMap r2;
        com.google.common.collect.RegularImmutableMap r3;
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey r7;
        java.lang.IllegalArgumentException $r9;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.lang.Integer $r8;
        int $i0, i1;
        java.lang.Object r4, r5;
        boolean z0;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object[];

        r0 := @parameter2: com.google.common.collect.ImmutableMap$Builder;

        if $i0 != 0 goto label1;

        r2 = <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY>;

        r3 = (com.google.common.collect.RegularImmutableMap) r2;

        return r3;

     label1:
        if $i0 != 1 goto label2;

        r4 = $r1[0];

        r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        r5 = $r1[1];

        r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        r3 = new com.google.common.collect.RegularImmutableMap;

        specialinvoke r3.<com.google.common.collect.RegularImmutableMap: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 1);

        return r3;

     label2:
        i1 = lengthof $r1;

        i1 = i1 >> 1;

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i0, i1);

        i1 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i0);

        r4 = staticinvoke <com.google.common.collect.RegularImmutableMap: java.lang.Object createHashTable(java.lang.Object[],int,int,int)>($r1, $i0, i1, 0);

        z0 = r4 instanceof java.lang.Object[];

        if z0 == 0 goto label4;

        r6 = (java.lang.Object[]) r4;

        r4 = r6[2];

        r7 = (com.google.common.collect.ImmutableMap$Builder$DuplicateKey) r4;

        if r0 == null goto label3;

        r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey> = r7;

        r4 = r6[0];

        r5 = r6[1];

        $r8 = (java.lang.Integer) r5;

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i0 = i1;

        i1 = i1 * 2;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, i1);

        goto label4;

     label3:
        $r9 = virtualinvoke r7.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.IllegalArgumentException exception()>();

        throw $r9;

     label4:
        r3 = new com.google.common.collect.RegularImmutableMap;

        specialinvoke r3.<com.google.common.collect.RegularImmutableMap: void <init>(java.lang.Object,java.lang.Object[],int)>(r4, $r1, $i0);

        return r3;
    }

    private static java.lang.Object createHashTable(java.lang.Object[], int, int, int)
    {
        byte[] r4;
        java.lang.Object[] $r0;
        java.lang.Integer $r6;
        short s8, $s9;
        byte b7;
        int[] r8;
        int $i0, $i1, $i2, i3, i4, i5, i6, i10;
        boolean $z0;
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey r3, $r9;
        java.lang.Object r1, r2, r5;
        short[] r7;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i0 != 1 goto label01;

        r1 = $r0[$i2];

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $i0 = $i2 ^ 1;

        r2 = $r0[$i0];

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, r2);

        return null;

     label01:
        i3 = $i1 + -1;

        r3 = null;

        if $i1 > 128 goto label10;

        r4 = newarray (byte)[$i1];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r4, -1);

        $i1 = 0;

        i4 = 0;

     label02:
        if i4 >= $i0 goto label08;

        i5 = i4 * 2;

        i6 = i5 + $i2;

        i5 = $i1 * 2;

        i5 = i5 + $i2;

        r1 = $r0[i6];

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        i6 = i6 ^ 1;

        r2 = $r0[i6];

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, r2);

        i6 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i6 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>(i6);

     label03:
        i6 = i6 & i3;

        b7 = r4[i6];

        s8 = (short) b7;

        s8 = s8 & 255;

        i10 = (int) s8;

        if i10 != 255 goto label05;

        b7 = (byte) i5;

        r4[i6] = b7;

        if $i1 >= i4 goto label04;

        $r0[i5] = r1;

        i5 = i5 ^ 1;

        $r0[i5] = r2;

     label04:
        $i1 = $i1 + 1;

        goto label06;

     label05:
        i10 = (int) s8;

        r5 = $r0[i10];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label07;

        $r9 = new com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        $s9 = s8 ^ 1;

        i5 = (int) $s9;

        r5 = $r0[i5];

        r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        specialinvoke $r9.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r5);

        s8 = s8 ^ 1;

        i5 = (int) s8;

        $r0[i5] = r2;

        r3 = $r9;

     label06:
        i4 = i4 + 1;

        goto label02;

     label07:
        i6 = i6 + 1;

        goto label03;

     label08:
        if $i1 != $i0 goto label09;

        return r4;

     label09:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = r4;

        $r0[1] = $r6;

        $r0[2] = r3;

        return $r0;

     label10:
        if $i1 > 32768 goto label19;

        r7 = newarray (short)[$i1];

        s8 = (short) -1;

        staticinvoke <java.util.Arrays: void fill(short[],short)>(r7, s8);

        $i1 = 0;

        i4 = 0;

     label11:
        if i4 >= $i0 goto label17;

        i5 = i4 * 2;

        i6 = i5 + $i2;

        i5 = $i1 * 2;

        i5 = i5 + $i2;

        r1 = $r0[i6];

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        i6 = i6 ^ 1;

        r2 = $r0[i6];

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, r2);

        i6 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i6 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>(i6);

     label12:
        i6 = i6 & i3;

        s8 = r7[i6];

        i10 = (int) s8;

        i10 = i10 & 65535;

        if i10 != 65535 goto label14;

        s8 = (short) i5;

        r7[i6] = s8;

        if $i1 >= i4 goto label13;

        $r0[i5] = r1;

        i5 = i5 ^ 1;

        $r0[i5] = r2;

     label13:
        $i1 = $i1 + 1;

        goto label15;

     label14:
        r5 = $r0[i10];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label16;

        $r9 = new com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        i5 = i10 ^ 1;

        r5 = $r0[i5];

        r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        specialinvoke $r9.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r5);

        r3 = $r9;

        i5 = i10 ^ 1;

        $r0[i5] = r2;

     label15:
        i4 = i4 + 1;

        goto label11;

     label16:
        i6 = i6 + 1;

        goto label12;

     label17:
        if $i1 != $i0 goto label18;

        return r7;

     label18:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = r7;

        $r0[1] = $r6;

        $r0[2] = r3;

        return $r0;

     label19:
        r8 = newarray (int)[$i1];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r8, -1);

        $i1 = 0;

        i4 = 0;

     label20:
        if i4 >= $i0 goto label26;

        i5 = i4 * 2;

        i6 = i5 + $i2;

        i5 = $i1 * 2;

        i5 = i5 + $i2;

        r1 = $r0[i6];

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        i6 = i6 ^ 1;

        r2 = $r0[i6];

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, r2);

        i6 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i6 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>(i6);

     label21:
        i10 = i6 & i3;

        i6 = r8[i10];

        if i6 != -1 goto label23;

        r8[i10] = i5;

        if $i1 >= i4 goto label22;

        $r0[i5] = r1;

        i5 = i5 ^ 1;

        $r0[i5] = r2;

     label22:
        $i1 = $i1 + 1;

        goto label24;

     label23:
        r5 = $r0[i6];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label25;

        $r9 = new com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        i5 = i6 ^ 1;

        r5 = $r0[i5];

        r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        specialinvoke $r9.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r5);

        r3 = $r9;

        i5 = i6 ^ 1;

        $r0[i5] = r2;

     label24:
        i4 = i4 + 1;

        goto label20;

     label25:
        i6 = i10 + 1;

        goto label21;

     label26:
        if $i1 != $i0 goto label27;

        return r8;

     label27:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = r8;

        $r0[1] = $r6;

        $r0[2] = r3;

        return $r0;
    }

    static java.lang.Object createHashTableOrThrow(java.lang.Object[], int, int, int)
    {
        java.lang.Object[] $r0;
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        boolean z0;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 = staticinvoke <com.google.common.collect.RegularImmutableMap: java.lang.Object createHashTable(java.lang.Object[],int,int,int)>($r0, $i0, $i1, $i2);

        z0 = $r1 instanceof java.lang.Object[];

        if z0 != 0 goto label1;

        return $r1;

     label1:
        $r0 = (java.lang.Object[]) $r1;

        $r1 = $r0[2];

        r2 = (com.google.common.collect.ImmutableMap$Builder$DuplicateKey) $r1;

        $r3 = virtualinvoke r2.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.IllegalArgumentException exception()>();

        throw $r3;
    }

    static java.lang.Object get(java.lang.Object, java.lang.Object[], int, int, java.lang.Object)
    {
        byte[] r3;
        java.lang.Object[] $r1;
        short s3;
        byte b2;
        int[] r5;
        int $i0, $i1, i4;
        java.lang.Object $r0, $r2;
        short[] r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        if $r2 != null goto label01;

        return null;

     label01:
        if $i0 != 1 goto label03;

        $r0 = $r1[$i1];

        $r0 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r0);

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        $i0 = $i1 ^ 1;

        $r0 = $r1[$i0];

        $r0 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r0);

        return $r0;

     label02:
        return null;

     label03:
        if $r0 != null goto label04;

        return null;

     label04:
        $z0 = $r0 instanceof byte[];

        if $z0 == 0 goto label08;

        r3 = (byte[]) $r0;

        $i0 = lengthof r3;

        $i0 = $i0 - 1;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i1);

     label05:
        $i1 = $i1 & $i0;

        b2 = r3[$i1];

        s3 = (short) b2;

        s3 = s3 & 255;

        i4 = (int) s3;

        if i4 != 255 goto label06;

        return null;

     label06:
        i4 = (int) s3;

        $r0 = $r1[i4];

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label07;

        s3 = s3 ^ 1;

        $i0 = (int) s3;

        $r0 = $r1[$i0];

        return $r0;

     label07:
        $i1 = $i1 + 1;

        goto label05;

     label08:
        $z0 = $r0 instanceof short[];

        if $z0 == 0 goto label12;

        r4 = (short[]) $r0;

        $i0 = lengthof r4;

        $i0 = $i0 - 1;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i1);

     label09:
        $i1 = $i1 & $i0;

        s3 = r4[$i1];

        i4 = (int) s3;

        i4 = i4 & 65535;

        if i4 != 65535 goto label10;

        return null;

     label10:
        $r0 = $r1[i4];

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label11;

        $i0 = i4 ^ 1;

        $r0 = $r1[$i0];

        return $r0;

     label11:
        $i1 = $i1 + 1;

        goto label09;

     label12:
        r5 = (int[]) $r0;

        $i0 = lengthof r5;

        $i0 = $i0 - 1;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i1);

     label13:
        $i1 = $i1 & $i0;

        i4 = r5[$i1];

        if i4 != -1 goto label14;

        return null;

     label14:
        $r0 = $r1[i4];

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label15;

        $i0 = i4 ^ 1;

        $r0 = $r1[$i0];

        return $r0;

     label15:
        $i1 = $i1 + 1;

        goto label13;
    }

    com.google.common.collect.ImmutableSet createEntrySet()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r1;
        java.lang.Object[] $r2;
        com.google.common.collect.RegularImmutableMap r0;
        int $i0;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.RegularImmutableMap$EntrySet;

        $r2 = r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = r0.<com.google.common.collect.RegularImmutableMap: int size>;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$EntrySet: void <init>(com.google.common.collect.ImmutableMap,java.lang.Object[],int,int)>(r0, $r2, 0, $i0);

        return $r1;
    }

    com.google.common.collect.ImmutableSet createKeySet()
    {
        java.lang.Object[] $r2;
        com.google.common.collect.RegularImmutableMap r0;
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList r1;
        int $i0;
        com.google.common.collect.RegularImmutableMap$KeySet $r3;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        r1 = new com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        $r2 = r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = r0.<com.google.common.collect.RegularImmutableMap: int size>;

        specialinvoke r1.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0);

        $r3 = new com.google.common.collect.RegularImmutableMap$KeySet;

        specialinvoke $r3.<com.google.common.collect.RegularImmutableMap$KeySet: void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)>(r0, r1);

        return $r3;
    }

    com.google.common.collect.ImmutableCollection createValues()
    {
        java.lang.Object[] $r2;
        com.google.common.collect.RegularImmutableMap r0;
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList $r1;
        int $i0;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        $r2 = r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = r0.<com.google.common.collect.RegularImmutableMap: int size>;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: void <init>(java.lang.Object[],int,int)>($r2, 1, $i0);

        return $r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object[] $r3;
        com.google.common.collect.RegularImmutableMap r0;
        int $i0;
        java.lang.Object $r1, r2;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object hashTable>;

        $r3 = r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = r0.<com.google.common.collect.RegularImmutableMap: int size>;

        $r1 = staticinvoke <com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>(r2, $r3, $i0, 0, $r1);

        if $r1 != null goto label1;

        return null;

     label1:
        return $r1;
    }

    boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        return 0;
    }

    public int size()
    {
        int i0;
        com.google.common.collect.RegularImmutableMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        i0 = r0.<com.google.common.collect.RegularImmutableMap: int size>;

        return i0;
    }
}
