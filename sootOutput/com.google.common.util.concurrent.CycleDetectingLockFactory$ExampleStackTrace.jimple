class com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace extends java.lang.IllegalStateException
{
    static final java.lang.StackTraceElement[] EMPTY_STACK_TRACE;
    static final com.google.common.collect.ImmutableSet EXCLUDED_CLASS_NAMES;

    static void <clinit>()
    {
        java.lang.StackTraceElement[] $r0;
        com.google.common.collect.ImmutableSet $r5;
        java.lang.Class $r1;
        java.lang.String $r2, $r3, $r4;

        $r0 = newarray (java.lang.StackTraceElement)[0];

        <com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: java.lang.StackTraceElement[] EMPTY_STACK_TRACE> = $r0;

        $r1 = class "Lcom/google/common/util/concurrent/CycleDetectingLockFactory;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r1 = class "Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r1 = class "Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;";

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        <com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: com.google.common.collect.ImmutableSet EXCLUDED_CLASS_NAMES> = $r5;

        return;
    }

    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)
    {
        com.google.common.collect.ImmutableSet $r10;
        java.lang.Object[] $r11;
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r1, $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace r0;
        java.lang.StackTraceElement[] $r7;
        int $i0, $i1;
        java.lang.StringBuilder $r6;
        java.lang.Class $r8;
        java.lang.StackTraceElement $r9;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r3 = virtualinvoke $r1.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.lang.String getLockName()>();

        $r4 = virtualinvoke $r2.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.lang.String getLockName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 4;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        $r7 = virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = 0;

        $i1 = lengthof $r7;

     label1:
        if $i0 >= $i1 goto label4;

        $r8 = class "Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering;";

        $r3 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r9 = $r7[$i0];

        $r4 = virtualinvoke $r9.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r7 = <com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: java.lang.StackTraceElement[] EMPTY_STACK_TRACE>;

        virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: void setStackTrace(java.lang.StackTraceElement[])>($r7);

        return;

     label2:
        $r10 = <com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: com.google.common.collect.ImmutableSet EXCLUDED_CLASS_NAMES>;

        $r9 = $r7[$i0];

        $r3 = virtualinvoke $r9.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r10.<com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $r11 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r7, $i0, $i1);

        $r7 = (java.lang.StackTraceElement[]) $r11;

        virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: void setStackTrace(java.lang.StackTraceElement[])>($r7);

        return;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;
    }
}
