public abstract class androidx.work.WorkManager extends java.lang.Object
{

    protected void <init>()
    {
        androidx.work.WorkManager r0;

        r0 := @this: androidx.work.WorkManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static androidx.work.WorkManager getInstance()
    {
        java.lang.IllegalStateException $r0;
        androidx.work.impl.WorkManagerImpl $r1;

        $r1 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WorkManager is not initialized properly.  The most likely cause is that you disabled WorkManagerInitializer in your manifest but forgot to call WorkManager#initialize in your Application#onCreate or a ContentProvider.");

        throw $r0;
    }

    public static androidx.work.WorkManager getInstance(android.content.Context)
    {
        android.content.Context $r0;
        androidx.work.impl.WorkManagerImpl $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r0);

        return $r1;
    }

    public static void initialize(android.content.Context, androidx.work.Configuration)
    {
        android.content.Context $r0;
        androidx.work.Configuration $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: androidx.work.Configuration;

        staticinvoke <androidx.work.impl.WorkManagerImpl: void initialize(android.content.Context,androidx.work.Configuration)>($r0, $r1);

        return;
    }

    public final androidx.work.WorkContinuation beginUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, androidx.work.OneTimeWorkRequest)
    {
        java.util.List $r4;
        androidx.work.ExistingWorkPolicy $r2;
        androidx.work.OneTimeWorkRequest $r3;
        androidx.work.WorkContinuation $r5;
        androidx.work.WorkManager r0;
        java.lang.String $r1;

        r0 := @this: androidx.work.WorkManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: androidx.work.ExistingWorkPolicy;

        $r3 := @parameter2: androidx.work.OneTimeWorkRequest;

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        $r5 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.WorkContinuation beginUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>($r1, $r2, $r4);

        return $r5;
    }

    public abstract androidx.work.WorkContinuation beginUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, java.util.List);

    public final androidx.work.WorkContinuation beginWith(androidx.work.OneTimeWorkRequest)
    {
        java.util.List $r2;
        androidx.work.OneTimeWorkRequest $r1;
        androidx.work.WorkContinuation $r3;
        androidx.work.WorkManager r0;

        r0 := @this: androidx.work.WorkManager;

        $r1 := @parameter0: androidx.work.OneTimeWorkRequest;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r3 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.WorkContinuation beginWith(java.util.List)>($r2);

        return $r3;
    }

    public abstract androidx.work.WorkContinuation beginWith(java.util.List);

    public abstract androidx.work.Operation cancelAllWork();

    public abstract androidx.work.Operation cancelAllWorkByTag(java.lang.String);

    public abstract androidx.work.Operation cancelUniqueWork(java.lang.String);

    public abstract androidx.work.Operation cancelWorkById(java.util.UUID);

    public abstract android.app.PendingIntent createCancelPendingIntent(java.util.UUID);

    public final androidx.work.Operation enqueue(androidx.work.WorkRequest)
    {
        java.util.List $r2;
        androidx.work.WorkRequest $r1;
        androidx.work.Operation $r3;
        androidx.work.WorkManager r0;

        r0 := @this: androidx.work.WorkManager;

        $r1 := @parameter0: androidx.work.WorkRequest;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        $r3 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.Operation enqueue(java.util.List)>($r2);

        return $r3;
    }

    public abstract androidx.work.Operation enqueue(java.util.List);

    public abstract androidx.work.Operation enqueueUniquePeriodicWork(java.lang.String, androidx.work.ExistingPeriodicWorkPolicy, androidx.work.PeriodicWorkRequest);

    public androidx.work.Operation enqueueUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, androidx.work.OneTimeWorkRequest)
    {
        java.util.List $r4;
        androidx.work.ExistingWorkPolicy $r2;
        androidx.work.Operation $r5;
        androidx.work.OneTimeWorkRequest $r3;
        androidx.work.WorkManager r0;
        java.lang.String $r1;

        r0 := @this: androidx.work.WorkManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: androidx.work.ExistingWorkPolicy;

        $r3 := @parameter2: androidx.work.OneTimeWorkRequest;

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        $r5 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.Operation enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>($r1, $r2, $r4);

        return $r5;
    }

    public abstract androidx.work.Operation enqueueUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, java.util.List);

    public abstract com.google.common.util.concurrent.ListenableFuture getLastCancelAllTimeMillis();

    public abstract androidx.lifecycle.LiveData getLastCancelAllTimeMillisLiveData();

    public abstract com.google.common.util.concurrent.ListenableFuture getWorkInfoById(java.util.UUID);

    public abstract androidx.lifecycle.LiveData getWorkInfoByIdLiveData(java.util.UUID);

    public abstract com.google.common.util.concurrent.ListenableFuture getWorkInfos(androidx.work.WorkQuery);

    public abstract com.google.common.util.concurrent.ListenableFuture getWorkInfosByTag(java.lang.String);

    public abstract androidx.lifecycle.LiveData getWorkInfosByTagLiveData(java.lang.String);

    public abstract com.google.common.util.concurrent.ListenableFuture getWorkInfosForUniqueWork(java.lang.String);

    public abstract androidx.lifecycle.LiveData getWorkInfosForUniqueWorkLiveData(java.lang.String);

    public abstract androidx.lifecycle.LiveData getWorkInfosLiveData(androidx.work.WorkQuery);

    public abstract androidx.work.Operation pruneWork();
}
