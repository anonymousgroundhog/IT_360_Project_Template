final class kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow extends kotlinx.coroutines.flow.SharedFlowImpl implements kotlinx.coroutines.flow.StateFlow
{

    public void <init>(int)
    {
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r1;
        kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow r0;
        java.lang.Integer $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow;

        $i0 := @parameter0: int;

        $r1 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST>;

        specialinvoke r0.<kotlinx.coroutines.flow.SharedFlowImpl: void <init>(int,int,kotlinx.coroutines.channels.BufferOverflow)>(1, 2147483647, $r1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r0.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: boolean tryEmit(java.lang.Object)>($r2);

        return;
    }

    public java.lang.Integer getValue()
    {
        java.lang.Throwable $r4;
        int $i0;
        java.lang.Object $r1;
        java.lang.Number $r2;
        kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow r0;
        java.lang.Integer $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: java.lang.Object getLastReplayedLocked()>();

        $r2 = (java.lang.Number) $r1;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label2:
        exitmonitor r0;

        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public volatile java.lang.Object getValue()
    {
        kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow r0;
        java.lang.Integer $r1;

        r0 := @this: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: java.lang.Integer getValue()>();

        return $r1;
    }

    public final boolean increment(int)
    {
        java.lang.Throwable $r4;
        kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow r0;
        java.lang.Integer $r3;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: java.lang.Object getLastReplayedLocked()>();

        $r2 = (java.lang.Number) $r1;

        $i1 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        $i0 = $i1 + $i0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = virtualinvoke r0.<kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow: boolean tryEmit(java.lang.Object)>($r3);

     label2:
        exitmonitor r0;

        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
