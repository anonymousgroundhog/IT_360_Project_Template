final class kotlinx.coroutines.flow.FlowKt__ChannelsKt extends java.lang.Object
{

    public static final java.lang.Object access$emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.FlowCollector $r0;
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: kotlinx.coroutines.channels.ReceiveChannel;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ChannelsKt: java.lang.Object emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.Continuation)>($r0, $r1, $z0, $r2);

        return $r3;
    }

    public static final kotlinx.coroutines.flow.Flow asFlow(kotlinx.coroutines.channels.BroadcastChannel)
    {
        kotlinx.coroutines.channels.BroadcastChannel $r0;
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.FlowKt__ChannelsKt$asFlow$$inlined$unsafeFlow$1 $r1;

        $r0 := @parameter0: kotlinx.coroutines.channels.BroadcastChannel;

        $r1 = new kotlinx.coroutines.flow.FlowKt__ChannelsKt$asFlow$$inlined$unsafeFlow$1;

        specialinvoke $r1.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$asFlow$$inlined$unsafeFlow$1: void <init>(kotlinx.coroutines.channels.BroadcastChannel)>($r0);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

    public static final kotlinx.coroutines.flow.Flow consumeAsFlow(kotlinx.coroutines.channels.ReceiveChannel)
    {
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.ChannelAsFlow $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.ReceiveChannel;

        $r1 = new kotlinx.coroutines.flow.ChannelAsFlow;

        specialinvoke $r1.<kotlinx.coroutines.flow.ChannelAsFlow: void <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, 1, null, 0, null, 28, null);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

    public static final java.lang.Object emitAll(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit r5;
        kotlinx.coroutines.flow.FlowCollector $r0;
        kotlinx.coroutines.channels.ReceiveChannel $r1;
        java.lang.Object $r3, $r4;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: kotlinx.coroutines.channels.ReceiveChannel;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlinx.coroutines.flow.FlowKt__ChannelsKt: java.lang.Object emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector,kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.Continuation)>($r0, $r1, 1, $r2);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r3 != $r4 goto label1;

        return $r3;

     label1:
        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r5;
    }

    private static final java.lang.Object emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r11, r13, r14, r15;
        java.lang.IllegalStateException r8;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.ReceiveChannel r1, r10;
        kotlinx.coroutines.channels.ChannelIterator r9;
        int $i0;
        java.lang.Boolean $r12;
        kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1 $r3, $r4;
        boolean z0, $z1;
        kotlin.Unit r16;
        kotlinx.coroutines.flow.FlowCollector r0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r1 := @parameter1: kotlinx.coroutines.channels.ReceiveChannel;

        z0 := @parameter2: boolean;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $z1 = $r2 instanceof kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1;

        if $z1 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: void <init>(kotlin.coroutines.Continuation)>($r2);

     label02:
        $r4 = $r3;

        $r5 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $r7 = $r6;

        $i0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label11;
            case 1: goto label07;
            case 2: goto label04;
            default: goto label03;
        };

     label03:
        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r8;

     label04:
        z0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0>;

        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$2>;

        r9 = (kotlinx.coroutines.channels.ChannelIterator) $r6;

        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1>;

        r10 = (kotlinx.coroutines.channels.ReceiveChannel) $r6;

        $r6 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0>;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label06:
        r0 = (kotlinx.coroutines.flow.FlowCollector) $r6;

        goto label13;

     label07:
        z0 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0>;

        $r7 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$2>;

        r9 = (kotlinx.coroutines.channels.ChannelIterator) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1>;

        r10 = (kotlinx.coroutines.channels.ReceiveChannel) $r7;

        $r7 = $r3.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0>;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label09:
        r0 = (kotlinx.coroutines.flow.FlowCollector) $r7;

        r1 = r10;

        $r7 = $r6;

        goto label16;

     label10:
        r11 := @caughtexception;

        goto label25;

     label11:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        r10 = r1;

        staticinvoke <kotlinx.coroutines.flow.FlowKt: void ensureActive(kotlinx.coroutines.flow.FlowCollector)>(r0);

     label12:
        r9 = interfaceinvoke r1.<kotlinx.coroutines.channels.ReceiveChannel: kotlinx.coroutines.channels.ChannelIterator iterator()>();

     label13:
        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0> = r0;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1> = r10;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$2> = r9;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0> = z0;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label> = 1;

        $r5 = interfaceinvoke r9.<kotlinx.coroutines.channels.ChannelIterator: java.lang.Object hasNext(kotlin.coroutines.Continuation)>($r4);

     label14:
        if $r5 != $r7 goto label15;

        return $r7;

     label15:
        r1 = r10;

     label16:
        $r12 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

     label17:
        if $z1 == 0 goto label21;

     label18:
        $r5 = interfaceinvoke r9.<kotlinx.coroutines.channels.ChannelIterator: java.lang.Object next()>();

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$0> = r0;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$1> = r1;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: java.lang.Object L$2> = r9;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: boolean Z$0> = z0;

        $r4.<kotlinx.coroutines.flow.FlowKt__ChannelsKt$emitAllImpl$1: int label> = 2;

        $r5 = interfaceinvoke r0.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r5, $r4);

     label19:
        if $r5 != $r7 goto label20;

        return $r7;

     label20:
        r10 = r1;

        goto label13;

     label21:
        if z0 == 0 goto label22;

        staticinvoke <kotlinx.coroutines.channels.ChannelsKt: void cancelConsumed(kotlinx.coroutines.channels.ReceiveChannel,java.lang.Throwable)>(r1, null);

     label22:
        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r16;

     label23:
        r11 := @caughtexception;

        r10 = r1;

        goto label25;

     label24:
        r13 := @caughtexception;

        r11 = r13;

     label25:
        r14 = r11;

     label26:
        throw r11;

     label27:
        r15 := @caughtexception;

        if z0 == 0 goto label28;

        staticinvoke <kotlinx.coroutines.channels.ChannelsKt: void cancelConsumed(kotlinx.coroutines.channels.ReceiveChannel,java.lang.Throwable)>(r10, r14);

     label28:
        throw r15;

        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label26 to label27 with label27;
    }

    public static final kotlinx.coroutines.channels.ReceiveChannel produceIn(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.CoroutineScope)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.internal.ChannelFlow $r2;
        kotlinx.coroutines.channels.ReceiveChannel $r3;
        kotlinx.coroutines.CoroutineScope $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: kotlinx.coroutines.CoroutineScope;

        $r2 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowKt: kotlinx.coroutines.flow.internal.ChannelFlow asChannelFlow(kotlinx.coroutines.flow.Flow)>($r0);

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.flow.internal.ChannelFlow: kotlinx.coroutines.channels.ReceiveChannel produceImpl(kotlinx.coroutines.CoroutineScope)>($r1);

        return $r3;
    }

    public static final kotlinx.coroutines.flow.Flow receiveAsFlow(kotlinx.coroutines.channels.ReceiveChannel)
    {
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.ChannelAsFlow $r1;
        kotlinx.coroutines.channels.ReceiveChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.ReceiveChannel;

        $r1 = new kotlinx.coroutines.flow.ChannelAsFlow;

        specialinvoke $r1.<kotlinx.coroutines.flow.ChannelAsFlow: void <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, 0, null, 0, null, 28, null);

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }
}
