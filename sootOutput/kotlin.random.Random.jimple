public abstract class kotlin.random.Random extends java.lang.Object
{
    public static final kotlin.random.Random$Default Default;
    private static final kotlin.random.Random defaultRandom;

    static void <clinit>()
    {
        kotlin.internal.PlatformImplementations $r2;
        kotlin.random.Random $r0;
        kotlin.random.Random$Default $r1;

        $r1 = new kotlin.random.Random$Default;

        specialinvoke $r1.<kotlin.random.Random$Default: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.random.Random: kotlin.random.Random$Default Default> = $r1;

        $r2 = <kotlin.internal.PlatformImplementationsKt: kotlin.internal.PlatformImplementations IMPLEMENTATIONS>;

        $r0 = virtualinvoke $r2.<kotlin.internal.PlatformImplementations: kotlin.random.Random defaultPlatformRandom()>();

        <kotlin.random.Random: kotlin.random.Random defaultRandom> = $r0;

        return;
    }

    public void <init>()
    {
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final kotlin.random.Random access$getDefaultRandom$cp()
    {
        kotlin.random.Random r0;

        r0 = <kotlin.random.Random: kotlin.random.Random defaultRandom>;

        return r0;
    }

    public static byte[] nextBytes$default(kotlin.random.Random, byte[], int, int, int, java.lang.Object)
    {
        byte[] $r0;
        java.lang.UnsupportedOperationException $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        kotlin.random.Random $r1;

        $r1 := @parameter0: kotlin.random.Random;

        $r0 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        if $r2 != null goto label3;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = lengthof $r0;

     label2:
        $r0 = virtualinvoke $r1.<kotlin.random.Random: byte[] nextBytes(byte[],int,int)>($r0, $i0, $i1);

        return $r0;

     label3:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: nextBytes");

        throw $r3;
    }

    public abstract int nextBits(int);

    public boolean nextBoolean()
    {
        int $i0;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $i0 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(1);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public byte[] nextBytes(int)
    {
        int $i0;
        byte[] $r1;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $i0 := @parameter0: int;

        $r1 = newarray (byte)[$i0];

        $r1 = virtualinvoke r0.<kotlin.random.Random: byte[] nextBytes(byte[])>($r1);

        return $r1;
    }

    public byte[] nextBytes(byte[])
    {
        int $i0;
        byte[] $r1;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $r1 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $i0 = lengthof $r1;

        $r1 = virtualinvoke r0.<kotlin.random.Random: byte[] nextBytes(byte[],int,int)>($r1, 0, $i0);

        return $r1;
    }

    public byte[] nextBytes(byte[], int, int)
    {
        byte[] $r1;
        byte $b5;
        int $i0, $i1, i2, i3, $i4, $i6, $i7;
        java.lang.String $r4;
        kotlin.ranges.IntRange r2;
        boolean $z0, z1;
        java.lang.IllegalArgumentException r5;
        java.lang.StringBuilder r3;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        r2 = new kotlin.ranges.IntRange;

        i2 = lengthof $r1;

        i3 = 0;

        specialinvoke r2.<kotlin.ranges.IntRange: void <init>(int,int)>(0, i2);

        $z0 = virtualinvoke r2.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        z1 = 1;

        if $z0 == 0 goto label01;

        r2 = new kotlin.ranges.IntRange;

        i2 = lengthof $r1;

        specialinvoke r2.<kotlin.ranges.IntRange: void <init>(int,int)>(0, i2);

        $z0 = virtualinvoke r2.<kotlin.ranges.IntRange: boolean contains(int)>($i1);

        if $z0 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label10;

        if $i0 > $i1 goto label03;

        goto label04;

     label03:
        z1 = 0;

     label04:
        if z1 == 0 goto label09;

        i2 = $i1 - $i0;

        i2 = i2 / 4;

     label05:
        if i3 >= i2 goto label06;

        $i4 = virtualinvoke r0.<kotlin.random.Random: int nextInt()>();

        $b5 = (byte) $i4;

        $r1[$i0] = $b5;

        $i6 = $i0 + 1;

        $i7 = $i4 >>> 8;

        $b5 = (byte) $i7;

        $r1[$i6] = $b5;

        $i6 = $i0 + 2;

        $i7 = $i4 >>> 16;

        $b5 = (byte) $i7;

        $r1[$i6] = $b5;

        $i6 = $i0 + 3;

        $i4 = $i4 >>> 24;

        $b5 = (byte) $i4;

        $r1[$i6] = $b5;

        $i0 = $i0 + 4;

        i3 = i3 + 1;

        goto label05;

     label06:
        $i1 = $i1 - $i0;

        i3 = $i1 * 8;

        i3 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(i3);

        i2 = 0;

     label07:
        if i2 >= $i1 goto label08;

        $i4 = $i0 + i2;

        $i6 = i2 * 8;

        $i6 = i3 >>> $i6;

        $b5 = (byte) $i6;

        $r1[$i4] = $b5;

        i2 = i2 + 1;

        goto label07;

     label08:
        return $r1;

     label09:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex (");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be not greater than toIndex (");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r5;

     label10:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex (");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") or toIndex (");

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") are out of range: 0..");

        $i0 = lengthof $r1;

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r3 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r5;
    }

    public double nextDouble()
    {
        int $i0, $i1;
        kotlin.random.Random r0;
        double $d0;

        r0 := @this: kotlin.random.Random;

        $i0 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(26);

        $i1 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(27);

        $d0 = staticinvoke <kotlin.random.PlatformRandomKt: double doubleFromParts(int,int)>($i0, $i1);

        return $d0;
    }

    public double nextDouble(double)
    {
        kotlin.random.Random r0;
        double $d0;

        r0 := @this: kotlin.random.Random;

        $d0 := @parameter0: double;

        $d0 = virtualinvoke r0.<kotlin.random.Random: double nextDouble(double,double)>(0.0, $d0);

        return $d0;
    }

    public double nextDouble(double, double)
    {
        byte $b0;
        int $i1;
        kotlin.random.Random r0;
        double $d0, $d1, d2, $d3, $d4;
        boolean $z0, $z1;

        r0 := @this: kotlin.random.Random;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        staticinvoke <kotlin.random.RandomKt: void checkRangeBounds(double,double)>($d0, $d1);

        d2 = $d1 - $d0;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d2);

        if $z0 == 0 goto label5;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        $z0 = 1;

        if $z1 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label5;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z1 != 0 goto label3;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        d2 = virtualinvoke r0.<kotlin.random.Random: double nextDouble()>();

        $d4 = $d1 / 2.0;

        $d3 = $d0 / 2.0;

        $d4 = $d4 - $d3;

        d2 = d2 * $d4;

        $d0 = $d0 + d2;

        $d0 = $d0 + d2;

        goto label6;

     label5:
        $d4 = virtualinvoke r0.<kotlin.random.Random: double nextDouble()>();

        d2 = $d4 * d2;

        $d0 = $d0 + d2;

     label6:
        $b0 = $d0 cmpl $d1;

        $i1 = (int) $b0;

        if $i1 < 0 goto label7;

        $d0 = staticinvoke <java.lang.Math: double nextAfter(double,double)>($d1, #-Infinity);

     label7:
        return $d0;
    }

    public float nextFloat()
    {
        int $i0;
        float $f0;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $i0 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(24);

        $f0 = (float) $i0;

        $f0 = $f0 / 1.6777216E7F;

        return $f0;
    }

    public int nextInt()
    {
        int $i0;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $i0 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(32);

        return $i0;
    }

    public int nextInt(int)
    {
        int $i0;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $i0 := @parameter0: int;

        $i0 = virtualinvoke r0.<kotlin.random.Random: int nextInt(int,int)>(0, $i0);

        return $i0;
    }

    public int nextInt(int, int)
    {
        int $i0, $i1, i2, $i3, i4;
        kotlin.random.Random r0;
        boolean z0;

        r0 := @this: kotlin.random.Random;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <kotlin.random.RandomKt: void checkRangeBounds(int,int)>($i0, $i1);

        i2 = $i1 - $i0;

        if i2 > 0 goto label3;

        if i2 != -2147483648 goto label1;

        goto label3;

     label1:
        i2 = virtualinvoke r0.<kotlin.random.Random: int nextInt()>();

        z0 = 0;

        if $i0 > i2 goto label2;

        if i2 >= $i1 goto label2;

        z0 = 1;

     label2:
        if z0 == 0 goto label1;

        return i2;

     label3:
        $i1 = neg i2;

        $i1 = $i1 & i2;

        if $i1 != i2 goto label4;

        $i1 = staticinvoke <kotlin.random.RandomKt: int fastLog2(int)>(i2);

        $i1 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>($i1);

        goto label5;

     label4:
        $i1 = virtualinvoke r0.<kotlin.random.Random: int nextInt()>();

        i4 = $i1 >>> 1;

        $i1 = i4 % i2;

        i4 = i4 - $i1;

        $i3 = i2 + -1;

        i4 = i4 + $i3;

        if i4 < 0 goto label4;

     label5:
        $i0 = $i0 + $i1;

        return $i0;
    }

    public long nextLong()
    {
        int $i0;
        long $l1, $l2;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $i0 = virtualinvoke r0.<kotlin.random.Random: int nextInt()>();

        $l1 = (long) $i0;

        $l1 = $l1 << 32;

        $i0 = virtualinvoke r0.<kotlin.random.Random: int nextInt()>();

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        return $l1;
    }

    public long nextLong(long)
    {
        long $l0;
        kotlin.random.Random r0;

        r0 := @this: kotlin.random.Random;

        $l0 := @parameter0: long;

        $l0 = virtualinvoke r0.<kotlin.random.Random: long nextLong(long,long)>(0L, $l0);

        return $l0;
    }

    public long nextLong(long, long)
    {
        long $l0, $l1, l2, l6, $l7;
        byte b4;
        int i3, i5;
        kotlin.random.Random r0;
        boolean z0;

        r0 := @this: kotlin.random.Random;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <kotlin.random.RandomKt: void checkRangeBounds(long,long)>($l0, $l1);

        l2 = $l1 - $l0;

        b4 = l2 cmp 0L;

        i3 = (int) b4;

        if i3 <= 0 goto label6;

        $l1 = neg l2;

        $l1 = $l1 & l2;

        b4 = $l1 cmp l2;

        if b4 != 0 goto label4;

        i5 = (int) l2;

        $l1 = l2 >>> 32;

        i3 = (int) $l1;

        if i5 == 0 goto label1;

        i3 = staticinvoke <kotlin.random.RandomKt: int fastLog2(int)>(i5);

        i3 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(i3);

        $l1 = (long) i3;

        $l1 = 4294967295L & $l1;

        goto label3;

     label1:
        if i3 != 1 goto label2;

        i3 = virtualinvoke r0.<kotlin.random.Random: int nextInt()>();

        $l1 = (long) i3;

        $l1 = 4294967295L & $l1;

        goto label3;

     label2:
        i3 = staticinvoke <kotlin.random.RandomKt: int fastLog2(int)>(i3);

        i3 = virtualinvoke r0.<kotlin.random.Random: int nextBits(int)>(i3);

        $l1 = (long) i3;

        $l1 = $l1 << 32;

        i3 = virtualinvoke r0.<kotlin.random.Random: int nextInt()>();

        l2 = (long) i3;

        l2 = 4294967295L & l2;

        $l1 = l2 + $l1;

     label3:
        goto label5;

     label4:
        $l1 = virtualinvoke r0.<kotlin.random.Random: long nextLong()>();

        l6 = $l1 >>> 1;

        $l1 = l6 % l2;

        l6 = l6 - $l1;

        $l7 = l2 - 1L;

        l6 = l6 + $l7;

        b4 = l6 cmp 0L;

        i3 = (int) b4;

        if i3 < 0 goto label4;

     label5:
        $l0 = $l0 + $l1;

        return $l0;

     label6:
        l2 = virtualinvoke r0.<kotlin.random.Random: long nextLong()>();

        z0 = 0;

        b4 = $l0 cmp l2;

        i3 = (int) b4;

        if i3 > 0 goto label7;

        b4 = l2 cmp $l1;

        i3 = (int) b4;

        if i3 >= 0 goto label7;

        z0 = 1;

     label7:
        if z0 == 0 goto label6;

        return l2;
    }
}
