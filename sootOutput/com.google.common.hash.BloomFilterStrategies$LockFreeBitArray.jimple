final class com.google.common.hash.BloomFilterStrategies$LockFreeBitArray extends java.lang.Object
{
    private static final int LONG_ADDRESSABLE_BITS;
    private final com.google.common.hash.LongAddable bitCount;
    final java.util.concurrent.atomic.AtomicLongArray data;

    void <init>(long)
    {
        long $l0;
        com.google.common.hash.LongAddable $r2;
        byte $b1;
        int $i2;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        boolean $z0;
        java.math.RoundingMode $r1;
        java.util.concurrent.atomic.AtomicLongArray $r3;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "data length is zero!");

        $r3 = new java.util.concurrent.atomic.AtomicLongArray;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $l0 = staticinvoke <com.google.common.math.LongMath: long divide(long,long,java.math.RoundingMode)>($l0, 64L, $r1);

        $i2 = staticinvoke <com.google.common.primitives.Ints: int checkedCast(long)>($l0);

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLongArray: void <init>(int)>($i2);

        r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data> = $r3;

        $r2 = staticinvoke <com.google.common.hash.LongAddables: com.google.common.hash.LongAddable create()>();

        r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: com.google.common.hash.LongAddable bitCount> = $r2;

        return;
    }

    void <init>(long[])
    {
        long l0, l3;
        com.google.common.hash.LongAddable $r3;
        long[] $r1;
        int $i1, $i2, $i4;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLongArray $r2;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 := @parameter0: long[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof $r1;

        $i2 = 0;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "data length is zero!");

        $r2 = new java.util.concurrent.atomic.AtomicLongArray;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLongArray: void <init>(long[])>($r1);

        r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data> = $r2;

        $r3 = staticinvoke <com.google.common.hash.LongAddables: com.google.common.hash.LongAddable create()>();

        r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: com.google.common.hash.LongAddable bitCount> = $r3;

        l3 = 0L;

        $i1 = lengthof $r1;

     label3:
        if $i2 >= $i1 goto label4;

        l0 = $r1[$i2];

        $i4 = staticinvoke <java.lang.Long: int bitCount(long)>(l0);

        l0 = (long) $i4;

        l3 = l3 + l0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r3 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: com.google.common.hash.LongAddable bitCount>;

        interfaceinvoke $r3.<com.google.common.hash.LongAddable: void add(long)>(l3);

        return;
    }

    public static long[] toPlainArray(java.util.concurrent.atomic.AtomicLongArray)
    {
        long[] r1;
        int $i0, $i1;
        long $l2;
        java.util.concurrent.atomic.AtomicLongArray $r0;

        $r0 := @parameter0: java.util.concurrent.atomic.AtomicLongArray;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        r1 = newarray (long)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r1;

        if $i0 >= $i1 goto label2;

        $l2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i0);

        r1[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    long bitCount()
    {
        long $l0;
        com.google.common.hash.LongAddable $r1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: com.google.common.hash.LongAddable bitCount>;

        $l0 = interfaceinvoke $r1.<com.google.common.hash.LongAddable: long sum()>();

        return $l0;
    }

    long bitSize()
    {
        int $i0;
        long $l1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        $l1 = (long) $i0;

        $l1 = $l1 * 64L;

        return $l1;
    }

    com.google.common.hash.BloomFilterStrategies$LockFreeBitArray copy()
    {
        long[] $r2;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0, $r1;
        java.util.concurrent.atomic.AtomicLongArray $r3;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 = new com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r3 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $r2 = staticinvoke <com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long[] toPlainArray(java.util.concurrent.atomic.AtomicLongArray)>($r3);

        specialinvoke $r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: void <init>(long[])>($r2);

        return $r1;
    }

    int dataLength()
    {
        int $i0;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        long[] $r4, $r5;
        java.lang.Object $r1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0, r2;
        boolean z0;
        java.util.concurrent.atomic.AtomicLongArray $r3;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 := @parameter0: java.lang.Object;

        z0 = $r1 instanceof com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        if z0 == 0 goto label1;

        r2 = (com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) $r1;

        $r3 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $r4 = staticinvoke <com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long[] toPlainArray(java.util.concurrent.atomic.AtomicLongArray)>($r3);

        $r3 = r2.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $r5 = staticinvoke <com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long[] toPlainArray(java.util.concurrent.atomic.AtomicLongArray)>($r3);

        z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r4, $r5);

        return z0;

     label1:
        return 0;
    }

    boolean get(long)
    {
        byte $b3;
        int $i2;
        long $l0, $l1;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $l0 := @parameter0: long;

        $r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $l1 = $l0 >>> 6;

        $i2 = (int) $l1;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i2);

        $i2 = (int) $l0;

        $l0 = 1L << $i2;

        $l0 = $l1 & $l0;

        $b3 = $l0 cmp 0L;

        if $b3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        long[] $r2;
        int $i0;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $r2 = staticinvoke <com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: long[] toPlainArray(java.util.concurrent.atomic.AtomicLongArray)>($r1);

        $i0 = staticinvoke <java.util.Arrays: int hashCode(long[])>($r2);

        return $i0;
    }

    void putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
    {
        int $i0, $i1;
        long $l2;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0, $r1;
        java.util.concurrent.atomic.AtomicLongArray r2;
        boolean z0;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $r1 := @parameter0: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        r2 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        r2 = $r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        if $i0 != $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r2 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        r2 = $r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>(z0, "BitArrays must be of equal length (%s != %s)", $i0, $i1);

        $i0 = 0;

     label3:
        r2 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        if $i0 >= $i1 goto label4;

        r2 = $r1.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $l2 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i0);

        virtualinvoke r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: void putData(int,long)>($i0, $l2);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }

    void putData(int, long)
    {
        long $l1, l2, $l3;
        com.google.common.hash.LongAddable $r2;
        byte b4;
        int $i0, $i5;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        boolean z0, $z1;
        java.util.concurrent.atomic.AtomicLongArray r1;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        z0 = 1;

     label1:
        r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $l3 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i0);

        l2 = $l3 | $l1;

        b4 = $l3 cmp l2;

        if b4 != 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $z1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>($i0, $l3, l2);

        if $z1 == 0 goto label1;

     label3:
        if z0 == 0 goto label4;

        $i0 = staticinvoke <java.lang.Long: int bitCount(long)>(l2);

        $i5 = staticinvoke <java.lang.Long: int bitCount(long)>($l3);

        $i0 = $i0 - $i5;

        $r2 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: com.google.common.hash.LongAddable bitCount>;

        $l1 = (long) $i0;

        interfaceinvoke $r2.<com.google.common.hash.LongAddable: void add(long)>($l1);

     label4:
        return;
    }

    boolean set(long)
    {
        long $l0, l1, $l4;
        com.google.common.hash.LongAddable $r2;
        byte $b5;
        int i2, $i3;
        com.google.common.hash.BloomFilterStrategies$LockFreeBitArray r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.hash.BloomFilterStrategies$LockFreeBitArray;

        $l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: boolean get(long)>($l0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        l1 = $l0 >>> 6;

        i2 = (int) l1;

        $i3 = (int) $l0;

        l1 = 1L << $i3;

     label2:
        $r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $l4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>(i2);

        $l0 = $l4 | l1;

        $b5 = $l4 cmp $l0;

        if $b5 != 0 goto label3;

        return 0;

     label3:
        $r1 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: java.util.concurrent.atomic.AtomicLongArray data>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>(i2, $l4, $l0);

        if $z0 == 0 goto label2;

        $r2 = r0.<com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: com.google.common.hash.LongAddable bitCount>;

        interfaceinvoke $r2.<com.google.common.hash.LongAddable: void increment()>();

        return 1;
    }

    public static void <clinit>()
    {
        <com.google.common.hash.BloomFilterStrategies$LockFreeBitArray: int LONG_ADDRESSABLE_BITS> = 6;

        return;
    }
}
