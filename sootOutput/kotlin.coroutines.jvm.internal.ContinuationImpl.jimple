public abstract class kotlin.coroutines.jvm.internal.ContinuationImpl extends kotlin.coroutines.jvm.internal.BaseContinuationImpl
{
    private final kotlin.coroutines.CoroutineContext _context;
    private transient kotlin.coroutines.Continuation intercepted;

    public void <init>(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>($r1, $r2);

        return;
    }

    public void <init>(kotlin.coroutines.Continuation, kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r1);

        r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context> = $r2;

        return;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlin.coroutines.jvm.internal.ContinuationImpl r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r1 = r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public final kotlin.coroutines.Continuation intercepted()
    {
        kotlin.coroutines.ContinuationInterceptor$Key r3;
        kotlin.coroutines.Continuation $r1, $r7;
        kotlin.coroutines.CoroutineContext$Element $r5;
        kotlin.coroutines.ContinuationInterceptor $r6;
        kotlin.coroutines.CoroutineContext $r2;
        kotlin.coroutines.jvm.internal.ContinuationImpl r0;
        kotlin.coroutines.CoroutineContext$Key r4;

        r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        $r1 = r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted>;

        if $r1 != null goto label3;

        $r2 = virtualinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r3 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        r4 = (kotlin.coroutines.CoroutineContext$Key) r3;

        $r5 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r4);

        $r6 = (kotlin.coroutines.ContinuationInterceptor) $r5;

        if $r6 == null goto label1;

        $r1 = (kotlin.coroutines.Continuation) r0;

        $r1 = interfaceinvoke $r6.<kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)>($r1);

        $r7 = $r1;

        if $r1 != null goto label2;

     label1:
        $r7 = (kotlin.coroutines.Continuation) r0;

     label2:
        r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted> = $r7;

        return $r7;

     label3:
        return $r1;
    }

    protected void releaseIntercepted()
    {
        kotlin.coroutines.ContinuationInterceptor$Key $r3;
        kotlin.coroutines.Continuation r1;
        kotlin.coroutines.CoroutineContext$Element $r5;
        kotlin.coroutines.ContinuationInterceptor $r6;
        kotlin.coroutines.jvm.internal.CompletedContinuation $r7;
        kotlin.coroutines.CoroutineContext $r2;
        kotlin.coroutines.jvm.internal.ContinuationImpl r0;
        kotlin.coroutines.CoroutineContext$Key $r4;

        r0 := @this: kotlin.coroutines.jvm.internal.ContinuationImpl;

        r1 = r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted>;

        if r1 == null goto label1;

        if r1 == r0 goto label1;

        $r2 = virtualinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r4 = (kotlin.coroutines.CoroutineContext$Key) $r3;

        $r5 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = (kotlin.coroutines.ContinuationInterceptor) $r5;

        interfaceinvoke $r6.<kotlin.coroutines.ContinuationInterceptor: void releaseInterceptedContinuation(kotlin.coroutines.Continuation)>(r1);

     label1:
        $r7 = <kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.jvm.internal.CompletedContinuation INSTANCE>;

        r1 = (kotlin.coroutines.Continuation) $r7;

        r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted> = r1;

        return;
    }
}
