public final class com.google.common.collect.TreeMultiset extends com.google.common.collect.AbstractSortedMultiset implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final transient com.google.common.collect.TreeMultiset$AvlNode header;
    private final transient com.google.common.collect.GeneralRange range;
    private final transient com.google.common.collect.TreeMultiset$Reference rootReference;

    void <init>(com.google.common.collect.TreeMultiset$Reference, com.google.common.collect.GeneralRange, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.GeneralRange r2;
        com.google.common.collect.TreeMultiset$AvlNode r3;
        java.util.Comparator $r4;
        com.google.common.collect.TreeMultiset$Reference r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: com.google.common.collect.TreeMultiset$Reference;

        r2 := @parameter1: com.google.common.collect.GeneralRange;

        r3 := @parameter2: com.google.common.collect.TreeMultiset$AvlNode;

        $r4 = virtualinvoke r2.<com.google.common.collect.GeneralRange: java.util.Comparator comparator()>();

        specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: void <init>(java.util.Comparator)>($r4);

        r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference> = r1;

        r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range> = r2;

        r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header> = r3;

        return;
    }

    void <init>(java.util.Comparator)
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.GeneralRange $r2;
        com.google.common.collect.TreeMultiset$AvlNode $r3, $r4;
        java.util.Comparator r1;
        com.google.common.collect.TreeMultiset$Reference $r5;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: void <init>(java.util.Comparator)>(r1);

        $r2 = staticinvoke <com.google.common.collect.GeneralRange: com.google.common.collect.GeneralRange all(java.util.Comparator)>(r1);

        r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range> = $r2;

        $r3 = new com.google.common.collect.TreeMultiset$AvlNode;

        specialinvoke $r3.<com.google.common.collect.TreeMultiset$AvlNode: void <init>()>();

        r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header> = $r3;

        $r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        $r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>($r3, $r4);

        $r5 = new com.google.common.collect.TreeMultiset$Reference;

        specialinvoke $r5.<com.google.common.collect.TreeMultiset$Reference: void <init>(com.google.common.collect.TreeMultiset$1)>(null);

        r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference> = $r5;

        return;
    }

    static com.google.common.collect.TreeMultiset$AvlNode access$1300(com.google.common.collect.TreeMultiset)
    {
        com.google.common.collect.TreeMultiset $r0;
        com.google.common.collect.TreeMultiset$AvlNode $r1;

        $r0 := @parameter0: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke $r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode firstNode()>();

        return $r1;
    }

    static com.google.common.collect.GeneralRange access$1400(com.google.common.collect.TreeMultiset)
    {
        com.google.common.collect.TreeMultiset $r0;
        com.google.common.collect.GeneralRange r1;

        $r0 := @parameter0: com.google.common.collect.TreeMultiset;

        r1 = $r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        return r1;
    }

    static com.google.common.collect.Multiset$Entry access$1500(com.google.common.collect.TreeMultiset, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.TreeMultiset $r0;
        com.google.common.collect.TreeMultiset$AvlNode $r1;
        com.google.common.collect.Multiset$Entry $r2;

        $r0 := @parameter0: com.google.common.collect.TreeMultiset;

        $r1 := @parameter1: com.google.common.collect.TreeMultiset$AvlNode;

        $r2 = specialinvoke $r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.Multiset$Entry wrapEntry(com.google.common.collect.TreeMultiset$AvlNode)>($r1);

        return $r2;
    }

    static com.google.common.collect.TreeMultiset$AvlNode access$1600(com.google.common.collect.TreeMultiset)
    {
        com.google.common.collect.TreeMultiset $r0;
        com.google.common.collect.TreeMultiset$AvlNode r1;

        $r0 := @parameter0: com.google.common.collect.TreeMultiset;

        r1 = $r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        return r1;
    }

    static com.google.common.collect.TreeMultiset$AvlNode access$1700(com.google.common.collect.TreeMultiset)
    {
        com.google.common.collect.TreeMultiset $r0;
        com.google.common.collect.TreeMultiset$AvlNode $r1;

        $r0 := @parameter0: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke $r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode lastNode()>();

        return $r1;
    }

    static void access$1800(com.google.common.collect.TreeMultiset$AvlNode, com.google.common.collect.TreeMultiset$AvlNode, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.TreeMultiset$AvlNode $r0, $r1, $r2;

        $r0 := @parameter0: com.google.common.collect.TreeMultiset$AvlNode;

        $r1 := @parameter1: com.google.common.collect.TreeMultiset$AvlNode;

        $r2 := @parameter2: com.google.common.collect.TreeMultiset$AvlNode;

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>($r0, $r1, $r2);

        return;
    }

    static void access$1900(com.google.common.collect.TreeMultiset$AvlNode, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.TreeMultiset$AvlNode $r0, $r1;

        $r0 := @parameter0: com.google.common.collect.TreeMultiset$AvlNode;

        $r1 := @parameter1: com.google.common.collect.TreeMultiset$AvlNode;

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>($r0, $r1);

        return;
    }

    private long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.GeneralRange $r4;
        com.google.common.collect.TreeMultiset$Aggregate $r1;
        long $l1, $l2;
        java.lang.AssertionError $r9;
        com.google.common.collect.TreeMultiset r0;
        int[] $r7;
        com.google.common.collect.BoundType $r8;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r2, $r10;
        java.lang.Object $r5, $r6;
        java.util.Comparator $r3;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: com.google.common.collect.TreeMultiset$Aggregate;

        r2 := @parameter1: com.google.common.collect.TreeMultiset$AvlNode;

        if r2 != null goto label1;

        return 0L;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r5 = virtualinvoke $r4.<com.google.common.collect.GeneralRange: java.lang.Object getUpperEndpoint()>();

        $r5 = staticinvoke <com.google.common.collect.NullnessCasts: java.lang.Object uncheckedCastNullableTToT(java.lang.Object)>($r5);

        $r6 = virtualinvoke r2.<com.google.common.collect.TreeMultiset$AvlNode: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i0 <= 0 goto label2;

        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)>($r1, r2);

        return $l1;

     label2:
        if $i0 != 0 goto label6;

        $r7 = <com.google.common.collect.TreeMultiset$4: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r8 = virtualinvoke $r4.<com.google.common.collect.GeneralRange: com.google.common.collect.BoundType getUpperBoundType()>();

        $i0 = virtualinvoke $r8.<com.google.common.collect.BoundType: int ordinal()>();

        $i0 = $r7[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            default: goto label3;
        };

     label3:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label4:
        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        return $l1;

     label5:
        $i0 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = (long) $i0;

        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l2 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = $l1 + $l2;

        return $l1;

     label6:
        $r10 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>($r10);

        $i0 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$500(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l2 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)>($r1, r2);

        $l1 = $l1 + $l2;

        return $l1;
    }

    private long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.GeneralRange $r4;
        com.google.common.collect.TreeMultiset$Aggregate $r1;
        long $l1, $l2;
        java.lang.AssertionError $r9;
        com.google.common.collect.TreeMultiset r0;
        int[] $r7;
        com.google.common.collect.BoundType $r8;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r2, $r10;
        java.lang.Object $r5, $r6;
        java.util.Comparator $r3;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: com.google.common.collect.TreeMultiset$Aggregate;

        r2 := @parameter1: com.google.common.collect.TreeMultiset$AvlNode;

        if r2 != null goto label1;

        return 0L;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r5 = virtualinvoke $r4.<com.google.common.collect.GeneralRange: java.lang.Object getLowerEndpoint()>();

        $r5 = staticinvoke <com.google.common.collect.NullnessCasts: java.lang.Object uncheckedCastNullableTToT(java.lang.Object)>($r5);

        $r6 = virtualinvoke r2.<com.google.common.collect.TreeMultiset$AvlNode: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i0 >= 0 goto label2;

        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$500(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)>($r1, r2);

        return $l1;

     label2:
        if $i0 != 0 goto label6;

        $r7 = <com.google.common.collect.TreeMultiset$4: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r8 = virtualinvoke $r4.<com.google.common.collect.GeneralRange: com.google.common.collect.BoundType getLowerBoundType()>();

        $i0 = virtualinvoke $r8.<com.google.common.collect.BoundType: int ordinal()>();

        $i0 = $r7[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            default: goto label3;
        };

     label3:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label4:
        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$500(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        return $l1;

     label5:
        $i0 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = (long) $i0;

        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$500(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l2 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = $l1 + $l2;

        return $l1;

     label6:
        $r10 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$500(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l1 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>($r10);

        $i0 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        $l2 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)>($r1, r2);

        $l1 = $l1 + $l2;

        return $l1;
    }

    private long aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate)
    {
        com.google.common.collect.GeneralRange $r5;
        com.google.common.collect.TreeMultiset$Aggregate $r1;
        long $l0, l1;
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.TreeMultiset$AvlNode r4;
        java.lang.Object $r3;
        com.google.common.collect.TreeMultiset$Reference r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: com.google.common.collect.TreeMultiset$Aggregate;

        r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r3 = virtualinvoke r2.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

        r4 = (com.google.common.collect.TreeMultiset$AvlNode) $r3;

        $l0 = virtualinvoke $r1.<com.google.common.collect.TreeMultiset$Aggregate: long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode)>(r4);

        l1 = $l0;

        $r5 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke $r5.<com.google.common.collect.GeneralRange: boolean hasLowerBound()>();

        if $z0 == 0 goto label1;

        l1 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)>($r1, r4);

        l1 = $l0 - l1;

     label1:
        $r5 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke $r5.<com.google.common.collect.GeneralRange: boolean hasUpperBound()>();

        if $z0 == 0 goto label2;

        $l0 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)>($r1, r4);

        $l0 = l1 - $l0;

        return $l0;

     label2:
        return l1;
    }

    public static com.google.common.collect.TreeMultiset create()
    {
        com.google.common.collect.TreeMultiset $r0;
        com.google.common.collect.Ordering $r1;

        $r0 = new com.google.common.collect.TreeMultiset;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r0.<com.google.common.collect.TreeMultiset: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static com.google.common.collect.TreeMultiset create(java.lang.Iterable)
    {
        com.google.common.collect.TreeMultiset $r1;
        java.lang.Iterable r0;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset create()>();

        staticinvoke <com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, r0);

        return $r1;
    }

    public static com.google.common.collect.TreeMultiset create(java.util.Comparator)
    {
        com.google.common.collect.TreeMultiset $r2;
        java.util.Comparator r0;
        com.google.common.collect.Ordering $r1;

        r0 := @parameter0: java.util.Comparator;

        if r0 != null goto label1;

        $r2 = new com.google.common.collect.TreeMultiset;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r2.<com.google.common.collect.TreeMultiset: void <init>(java.util.Comparator)>($r1);

        return $r2;

     label1:
        $r2 = new com.google.common.collect.TreeMultiset;

        specialinvoke $r2.<com.google.common.collect.TreeMultiset: void <init>(java.util.Comparator)>(r0);

        return $r2;
    }

    static int distinctElements(com.google.common.collect.TreeMultiset$AvlNode)
    {
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r0;

        r0 := @parameter0: com.google.common.collect.TreeMultiset$AvlNode;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: int access$400(com.google.common.collect.TreeMultiset$AvlNode)>(r0);

        return $i0;
    }

    private com.google.common.collect.TreeMultiset$AvlNode firstNode()
    {
        com.google.common.collect.GeneralRange r4;
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.BoundType $r7, $r8;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r3, $r6;
        java.lang.Object $r2, $r9;
        java.util.Comparator $r5;
        com.google.common.collect.TreeMultiset$Reference r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r2 = virtualinvoke r1.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

        r3 = (com.google.common.collect.TreeMultiset$AvlNode) $r2;

        if r3 != null goto label1;

        return null;

     label1:
        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke r4.<com.google.common.collect.GeneralRange: boolean hasLowerBound()>();

        if $z0 == 0 goto label4;

        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r2 = virtualinvoke r4.<com.google.common.collect.GeneralRange: java.lang.Object getLowerEndpoint()>();

        $r2 = staticinvoke <com.google.common.collect.NullnessCasts: java.lang.Object uncheckedCastNullableTToT(java.lang.Object)>($r2);

        $r5 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r6 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$1000(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object)>(r3, $r5, $r2);

        r3 = $r6;

        if $r6 != null goto label2;

        return null;

     label2:
        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r7 = virtualinvoke r4.<com.google.common.collect.GeneralRange: com.google.common.collect.BoundType getLowerBoundType()>();

        $r8 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        if $r7 != $r8 goto label3;

        $r5 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r9 = virtualinvoke $r6.<com.google.common.collect.TreeMultiset$AvlNode: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r5.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, $r9);

        if $i0 != 0 goto label3;

        r3 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode)>($r6);

     label3:
        goto label5;

     label4:
        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        r3 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode)>(r3);

     label5:
        $r6 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        if r3 == $r6 goto label7;

        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r2 = virtualinvoke r3.<com.google.common.collect.TreeMultiset$AvlNode: java.lang.Object getElement()>();

        $z0 = virtualinvoke r4.<com.google.common.collect.GeneralRange: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label6;

        return null;

     label6:
        return r3;

     label7:
        return null;
    }

    private com.google.common.collect.TreeMultiset$AvlNode lastNode()
    {
        com.google.common.collect.GeneralRange r4;
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.BoundType $r7, $r8;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r3, $r6;
        java.lang.Object $r2, $r9;
        java.util.Comparator $r5;
        com.google.common.collect.TreeMultiset$Reference r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r2 = virtualinvoke r1.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

        r3 = (com.google.common.collect.TreeMultiset$AvlNode) $r2;

        if r3 != null goto label1;

        return null;

     label1:
        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke r4.<com.google.common.collect.GeneralRange: boolean hasUpperBound()>();

        if $z0 == 0 goto label4;

        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r2 = virtualinvoke r4.<com.google.common.collect.GeneralRange: java.lang.Object getUpperEndpoint()>();

        $r2 = staticinvoke <com.google.common.collect.NullnessCasts: java.lang.Object uncheckedCastNullableTToT(java.lang.Object)>($r2);

        $r5 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r6 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$1100(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object)>(r3, $r5, $r2);

        r3 = $r6;

        if $r6 != null goto label2;

        return null;

     label2:
        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r7 = virtualinvoke r4.<com.google.common.collect.GeneralRange: com.google.common.collect.BoundType getUpperBoundType()>();

        $r8 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        if $r7 != $r8 goto label3;

        $r5 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r9 = virtualinvoke $r6.<com.google.common.collect.TreeMultiset$AvlNode: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r5.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, $r9);

        if $i0 != 0 goto label3;

        r3 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$1200(com.google.common.collect.TreeMultiset$AvlNode)>($r6);

     label3:
        goto label5;

     label4:
        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        r3 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$1200(com.google.common.collect.TreeMultiset$AvlNode)>(r3);

     label5:
        $r6 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        if r3 == $r6 goto label7;

        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r2 = virtualinvoke r3.<com.google.common.collect.TreeMultiset$AvlNode: java.lang.Object getElement()>();

        $z0 = virtualinvoke r4.<com.google.common.collect.GeneralRange: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label6;

        return null;

     label6:
        return r3;

     label7:
        return null;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.google.common.collect.GeneralRange $r5;
        com.google.common.collect.Serialization$FieldSetter $r4;
        java.io.ObjectInputStream $r1;
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.TreeMultiset$AvlNode r7;
        java.lang.Object $r2;
        java.util.Comparator r3;
        com.google.common.collect.TreeMultiset$Reference $r6;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = (java.util.Comparator) $r2;

        $r4 = staticinvoke <com.google.common.collect.Serialization: com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/AbstractSortedMultiset;", "comparator");

        virtualinvoke $r4.<com.google.common.collect.Serialization$FieldSetter: void set(java.lang.Object,java.lang.Object)>(r0, r3);

        $r4 = staticinvoke <com.google.common.collect.Serialization: com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/TreeMultiset;", "range");

        $r5 = staticinvoke <com.google.common.collect.GeneralRange: com.google.common.collect.GeneralRange all(java.util.Comparator)>(r3);

        virtualinvoke $r4.<com.google.common.collect.Serialization$FieldSetter: void set(java.lang.Object,java.lang.Object)>(r0, $r5);

        $r4 = staticinvoke <com.google.common.collect.Serialization: com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/TreeMultiset;", "rootReference");

        $r6 = new com.google.common.collect.TreeMultiset$Reference;

        specialinvoke $r6.<com.google.common.collect.TreeMultiset$Reference: void <init>(com.google.common.collect.TreeMultiset$1)>(null);

        virtualinvoke $r4.<com.google.common.collect.Serialization$FieldSetter: void set(java.lang.Object,java.lang.Object)>(r0, $r6);

        r7 = new com.google.common.collect.TreeMultiset$AvlNode;

        specialinvoke r7.<com.google.common.collect.TreeMultiset$AvlNode: void <init>()>();

        $r4 = staticinvoke <com.google.common.collect.Serialization: com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/TreeMultiset;", "header");

        virtualinvoke $r4.<com.google.common.collect.Serialization$FieldSetter: void set(java.lang.Object,java.lang.Object)>(r0, r7);

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r7, r7);

        staticinvoke <com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)>(r0, $r1);

        return;
    }

    private static void successor(com.google.common.collect.TreeMultiset$AvlNode, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.TreeMultiset$AvlNode r0, r1;

        r0 := @parameter0: com.google.common.collect.TreeMultiset$AvlNode;

        r1 := @parameter1: com.google.common.collect.TreeMultiset$AvlNode;

        staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r0, r1);

        staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r1, r0);

        return;
    }

    private static void successor(com.google.common.collect.TreeMultiset$AvlNode, com.google.common.collect.TreeMultiset$AvlNode, com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.TreeMultiset$AvlNode r0, r1, r2;

        r0 := @parameter0: com.google.common.collect.TreeMultiset$AvlNode;

        r1 := @parameter1: com.google.common.collect.TreeMultiset$AvlNode;

        r2 := @parameter2: com.google.common.collect.TreeMultiset$AvlNode;

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r0, r1);

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r1, r2);

        return;
    }

    private com.google.common.collect.Multiset$Entry wrapEntry(com.google.common.collect.TreeMultiset$AvlNode)
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.TreeMultiset$1 $r2;
        com.google.common.collect.TreeMultiset$AvlNode r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: com.google.common.collect.TreeMultiset$AvlNode;

        $r2 = new com.google.common.collect.TreeMultiset$1;

        specialinvoke $r2.<com.google.common.collect.TreeMultiset$1: void <init>(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode)>(r0, r1);

        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.common.collect.TreeMultiset r0;
        java.io.ObjectOutputStream $r1;
        java.util.NavigableSet $r2;
        java.util.Comparator $r3;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.NavigableSet elementSet()>();

        $r3 = interfaceinvoke $r2.<java.util.NavigableSet: java.util.Comparator comparator()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        staticinvoke <com.google.common.collect.Serialization: void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream)>(r0, $r1);

        return;
    }

    public int add(java.lang.Object, int)
    {
        com.google.common.collect.GeneralRange r2;
        com.google.common.collect.TreeMultiset r0;
        int[] r10;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r5, r7, r8, $r9;
        java.lang.Object r1, $r4;
        java.util.Comparator $r6;
        com.google.common.collect.TreeMultiset$Reference r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "occurrences");

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: int count(java.lang.Object)>(r1);

        return $i0;

     label1:
        r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke r2.<com.google.common.collect.GeneralRange: boolean contains(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r4 = virtualinvoke r3.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

        r5 = (com.google.common.collect.TreeMultiset$AvlNode) $r4;

        if r5 != null goto label2;

        $r6 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        interfaceinvoke $r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r1);

        r7 = new com.google.common.collect.TreeMultiset$AvlNode;

        specialinvoke r7.<com.google.common.collect.TreeMultiset$AvlNode: void <init>(java.lang.Object,int)>(r1, $i0);

        r8 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        $r9 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r8, r7, $r9);

        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        virtualinvoke r3.<com.google.common.collect.TreeMultiset$Reference: void checkAndSet(java.lang.Object,java.lang.Object)>(r5, r7);

        return 0;

     label2:
        r10 = newarray (int)[1];

        $r6 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        r7 = virtualinvoke r5.<com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode add(java.util.Comparator,java.lang.Object,int,int[])>($r6, r1, $i0, r10);

        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        virtualinvoke r3.<com.google.common.collect.TreeMultiset$Reference: void checkAndSet(java.lang.Object,java.lang.Object)>(r5, r7);

        $i0 = r10[0];

        return $i0;
    }

    public void clear()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.GeneralRange r1;
        java.util.Iterator $r5;
        com.google.common.collect.TreeMultiset$AvlNode r2, r3;
        com.google.common.collect.TreeMultiset$Reference r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke r1.<com.google.common.collect.GeneralRange: boolean hasLowerBound()>();

        if $z0 != 0 goto label3;

        r1 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke r1.<com.google.common.collect.GeneralRange: boolean hasUpperBound()>();

        if $z0 != 0 goto label3;

        r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        r2 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

     label1:
        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        if r2 == r3 goto label2;

        r3 = staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode)>(r2);

        staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: int access$202(com.google.common.collect.TreeMultiset$AvlNode,int)>(r2, 0);

        staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$502(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r2, null);

        staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$602(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r2, null);

        staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r2, null);

        staticinvoke <com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r2, null);

        r2 = r3;

        goto label1;

     label2:
        r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        staticinvoke <com.google.common.collect.TreeMultiset: void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)>(r2, r3);

        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        virtualinvoke r4.<com.google.common.collect.TreeMultiset$Reference: void clear()>();

        return;

     label3:
        $r5 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Iterator entryIterator()>();

        staticinvoke <com.google.common.collect.Iterators: void clear(java.util.Iterator)>($r5);

        return;
    }

    public volatile java.util.Comparator comparator()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Comparator $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: java.util.Comparator comparator()>();

        return $r1;
    }

    public volatile boolean contains(java.lang.Object)
    {
        com.google.common.collect.TreeMultiset r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public int count(java.lang.Object)
    {
        com.google.common.collect.GeneralRange $r5;
        java.lang.ClassCastException r8;
        java.lang.NullPointerException r7;
        com.google.common.collect.TreeMultiset r0;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r4;
        java.lang.Object $r1, $r3;
        java.util.Comparator $r6;
        com.google.common.collect.TreeMultiset$Reference r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: java.lang.Object;

     label01:
        r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

     label02:
        $r3 = virtualinvoke r2.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

     label03:
        r4 = (com.google.common.collect.TreeMultiset$AvlNode) $r3;

     label04:
        $r5 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

     label05:
        $z0 = virtualinvoke $r5.<com.google.common.collect.GeneralRange: boolean contains(java.lang.Object)>($r1);

     label06:
        if $z0 == 0 goto label09;

        if r4 != null goto label07;

        return 0;

     label07:
        $r6 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $i0 = virtualinvoke r4.<com.google.common.collect.TreeMultiset$AvlNode: int count(java.util.Comparator,java.lang.Object)>($r6, $r1);

     label08:
        return $i0;

     label09:
        return 0;

     label10:
        r7 := @caughtexception;

        return 0;

     label11:
        r8 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label02 to label04 with label11;
        catch java.lang.ClassCastException from label05 to label06 with label11;
        catch java.lang.ClassCastException from label07 to label08 with label11;
        catch java.lang.NullPointerException from label01 to label03 with label10;
        catch java.lang.NullPointerException from label04 to label06 with label10;
        catch java.lang.NullPointerException from label07 to label08 with label10;
    }

    java.util.Iterator descendingEntryIterator()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.TreeMultiset$3 $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = new com.google.common.collect.TreeMultiset$3;

        specialinvoke $r1.<com.google.common.collect.TreeMultiset$3: void <init>(com.google.common.collect.TreeMultiset)>(r0);

        return $r1;
    }

    public volatile com.google.common.collect.SortedMultiset descendingMultiset()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.SortedMultiset $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset descendingMultiset()>();

        return $r1;
    }

    int distinctElements()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.TreeMultiset$Aggregate $r1;
        int $i1;
        long $l0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = <com.google.common.collect.TreeMultiset$Aggregate: com.google.common.collect.TreeMultiset$Aggregate DISTINCT>;

        $l0 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate)>($r1);

        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l0);

        return $i1;
    }

    java.util.Iterator elementIterator()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Iterator entryIterator()>();

        $r1 = staticinvoke <com.google.common.collect.Multisets: java.util.Iterator elementIterator(java.util.Iterator)>($r1);

        return $r1;
    }

    public volatile java.util.NavigableSet elementSet()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.NavigableSet $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: java.util.NavigableSet elementSet()>();

        return $r1;
    }

    java.util.Iterator entryIterator()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.TreeMultiset$2 $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = new com.google.common.collect.TreeMultiset$2;

        specialinvoke $r1.<com.google.common.collect.TreeMultiset$2: void <init>(com.google.common.collect.TreeMultiset)>(r0);

        return $r1;
    }

    public volatile java.util.Set entrySet()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Set $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: java.util.Set entrySet()>();

        return $r1;
    }

    public volatile com.google.common.collect.Multiset$Entry firstEntry()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.Multiset$Entry $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.Multiset$Entry firstEntry()>();

        return $r1;
    }

    public com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.GeneralRange $r5, $r7;
        com.google.common.collect.TreeMultiset r0, $r3;
        com.google.common.collect.BoundType $r2;
        com.google.common.collect.TreeMultiset$AvlNode $r8;
        java.lang.Object r1;
        java.util.Comparator $r6;
        com.google.common.collect.TreeMultiset$Reference $r4;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.common.collect.BoundType;

        $r3 = new com.google.common.collect.TreeMultiset;

        $r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r5 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r6 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r7 = staticinvoke <com.google.common.collect.GeneralRange: com.google.common.collect.GeneralRange upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)>($r6, r1, $r2);

        $r5 = virtualinvoke $r5.<com.google.common.collect.GeneralRange: com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange)>($r7);

        $r8 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        specialinvoke $r3.<com.google.common.collect.TreeMultiset: void <init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)>($r4, $r5, $r8);

        return $r3;
    }

    public volatile boolean isEmpty()
    {
        com.google.common.collect.TreeMultiset r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.TreeMultiset r0;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = staticinvoke <com.google.common.collect.Multisets: java.util.Iterator iteratorImpl(com.google.common.collect.Multiset)>(r0);

        return $r1;
    }

    public volatile com.google.common.collect.Multiset$Entry lastEntry()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.Multiset$Entry $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.Multiset$Entry lastEntry()>();

        return $r1;
    }

    public volatile com.google.common.collect.Multiset$Entry pollFirstEntry()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.Multiset$Entry $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.Multiset$Entry pollFirstEntry()>();

        return $r1;
    }

    public volatile com.google.common.collect.Multiset$Entry pollLastEntry()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.Multiset$Entry $r1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.Multiset$Entry pollLastEntry()>();

        return $r1;
    }

    public int remove(java.lang.Object, int)
    {
        com.google.common.collect.GeneralRange $r6;
        java.lang.ClassCastException r10;
        java.lang.NullPointerException r9;
        com.google.common.collect.TreeMultiset r0;
        int[] r5;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r4, $r8;
        java.lang.Object $r1, $r3;
        java.util.Comparator $r7;
        com.google.common.collect.TreeMultiset$Reference r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "occurrences");

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: int count(java.lang.Object)>($r1);

        return $i0;

     label1:
        r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r3 = virtualinvoke r2.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

        r4 = (com.google.common.collect.TreeMultiset$AvlNode) $r3;

        r5 = newarray (int)[1];

     label2:
        $r6 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

     label3:
        $z0 = virtualinvoke $r6.<com.google.common.collect.GeneralRange: boolean contains(java.lang.Object)>($r1);

     label4:
        if $z0 == 0 goto label7;

        if r4 != null goto label5;

        return 0;

     label5:
        $r7 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r8 = virtualinvoke r4.<com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode remove(java.util.Comparator,java.lang.Object,int,int[])>($r7, $r1, $i0, r5);

     label6:
        r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        virtualinvoke r2.<com.google.common.collect.TreeMultiset$Reference: void checkAndSet(java.lang.Object,java.lang.Object)>(r4, $r8);

        $i0 = r5[0];

        return $i0;

     label7:
        return 0;

     label8:
        r9 := @caughtexception;

        return 0;

     label9:
        r10 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label3 to label4 with label9;
        catch java.lang.ClassCastException from label5 to label6 with label9;
        catch java.lang.NullPointerException from label2 to label4 with label8;
        catch java.lang.NullPointerException from label5 to label6 with label8;
    }

    public int setCount(java.lang.Object, int)
    {
        com.google.common.collect.GeneralRange r3;
        com.google.common.collect.TreeMultiset r0;
        int[] r6;
        int $i0;
        com.google.common.collect.TreeMultiset$AvlNode r5, $r8;
        java.lang.Object r1, $r4;
        java.util.Comparator $r7;
        com.google.common.collect.TreeMultiset$Reference $r2;
        boolean $z0, z1;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "count");

        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke r3.<com.google.common.collect.GeneralRange: boolean contains(java.lang.Object)>(r1);

        z1 = 1;

        if $z0 != 0 goto label3;

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z1);

        return 0;

     label3:
        $r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r4 = virtualinvoke $r2.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

        r5 = (com.google.common.collect.TreeMultiset$AvlNode) $r4;

        if r5 != null goto label4;

        if $i0 <= 0 goto label5;

        virtualinvoke r0.<com.google.common.collect.TreeMultiset: int add(java.lang.Object,int)>(r1, $i0);

        return 0;

     label4:
        r6 = newarray (int)[1];

        $r7 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r8 = virtualinvoke r5.<com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int[])>($r7, r1, $i0, r6);

        $r2 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        virtualinvoke $r2.<com.google.common.collect.TreeMultiset$Reference: void checkAndSet(java.lang.Object,java.lang.Object)>(r5, $r8);

        $i0 = r6[0];

        return $i0;

     label5:
        return 0;
    }

    public boolean setCount(java.lang.Object, int, int)
    {
        com.google.common.collect.GeneralRange r3;
        com.google.common.collect.TreeMultiset r0;
        int[] r2;
        int $i0, $i1;
        com.google.common.collect.TreeMultiset$AvlNode r6, $r8;
        java.lang.Object r1, $r5;
        java.util.Comparator $r7;
        com.google.common.collect.TreeMultiset$Reference r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i1, "newCount");

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "oldCount");

        r3 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $z0 = virtualinvoke r3.<com.google.common.collect.GeneralRange: boolean contains(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r5 = virtualinvoke r4.<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()>();

        r6 = (com.google.common.collect.TreeMultiset$AvlNode) $r5;

        if r6 != null goto label2;

        if $i0 != 0 goto label1;

        if $i1 <= 0 goto label3;

        virtualinvoke r0.<com.google.common.collect.TreeMultiset: int add(java.lang.Object,int)>(r1, $i1);

        return 1;

     label1:
        return 0;

     label2:
        r2 = newarray (int)[1];

        $r7 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r8 = virtualinvoke r6.<com.google.common.collect.TreeMultiset$AvlNode: com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int,int[])>($r7, r1, $i0, $i1, r2);

        r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        virtualinvoke r4.<com.google.common.collect.TreeMultiset$Reference: void checkAndSet(java.lang.Object,java.lang.Object)>(r6, $r8);

        $i1 = r2[0];

        if $i1 != $i0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    public int size()
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.TreeMultiset$Aggregate $r1;
        int $i1;
        long $l0;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r1 = <com.google.common.collect.TreeMultiset$Aggregate: com.google.common.collect.TreeMultiset$Aggregate SIZE>;

        $l0 = specialinvoke r0.<com.google.common.collect.TreeMultiset: long aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate)>($r1);

        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l0);

        return $i1;
    }

    public volatile com.google.common.collect.SortedMultiset subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.TreeMultiset r0;
        com.google.common.collect.SortedMultiset $r4;
        com.google.common.collect.BoundType $r1, $r3;
        java.lang.Object $r2, $r5;

        r0 := @this: com.google.common.collect.TreeMultiset;

        $r5 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: com.google.common.collect.BoundType;

        $r4 = specialinvoke r0.<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)>($r5, $r1, $r2, $r3);

        return $r4;
    }

    public com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.GeneralRange $r5, $r7;
        com.google.common.collect.TreeMultiset r0, $r3;
        com.google.common.collect.BoundType $r2;
        com.google.common.collect.TreeMultiset$AvlNode $r8;
        java.lang.Object r1;
        java.util.Comparator $r6;
        com.google.common.collect.TreeMultiset$Reference $r4;

        r0 := @this: com.google.common.collect.TreeMultiset;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.common.collect.BoundType;

        $r3 = new com.google.common.collect.TreeMultiset;

        $r4 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$Reference rootReference>;

        $r5 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.GeneralRange range>;

        $r6 = virtualinvoke r0.<com.google.common.collect.TreeMultiset: java.util.Comparator comparator()>();

        $r7 = staticinvoke <com.google.common.collect.GeneralRange: com.google.common.collect.GeneralRange downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)>($r6, r1, $r2);

        $r5 = virtualinvoke $r5.<com.google.common.collect.GeneralRange: com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange)>($r7);

        $r8 = r0.<com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset$AvlNode header>;

        specialinvoke $r3.<com.google.common.collect.TreeMultiset: void <init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)>($r4, $r5, $r8);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.TreeMultiset: long serialVersionUID> = 1L;

        return;
    }
}
