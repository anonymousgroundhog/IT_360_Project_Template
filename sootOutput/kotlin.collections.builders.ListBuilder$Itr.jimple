final class kotlin.collections.builders.ListBuilder$Itr extends java.lang.Object implements java.util.ListIterator, kotlin.jvm.internal.markers.KMutableListIterator
{
    private int index;
    private int lastIndex;
    private final kotlin.collections.builders.ListBuilder list;

    public void <init>(kotlin.collections.builders.ListBuilder, int)
    {
        int $i0;
        kotlin.collections.builders.ListBuilder $r1;
        kotlin.collections.builders.ListBuilder$Itr r0;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $r1 := @parameter0: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "list");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list> = $r1;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i0;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = -1;

        return;
    }

    public void add(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r2;
        int $i0, $i1;
        kotlin.collections.builders.ListBuilder$Itr r0;
        java.lang.Object $r1;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $i1 = $i0 + 1;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i1;

        virtualinvoke $r2.<kotlin.collections.builders.ListBuilder: void add(int,java.lang.Object)>($i0, $r1);

        r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = -1;

        return;
    }

    public boolean hasNext()
    {
        kotlin.collections.builders.ListBuilder $r1;
        int $i0, $i1;
        kotlin.collections.builders.ListBuilder$Itr r0;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i1 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $r1 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i0 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getLength$p(kotlin.collections.builders.ListBuilder)>($r1);

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasPrevious()
    {
        int $i0;
        kotlin.collections.builders.ListBuilder$Itr r0;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        kotlin.collections.builders.ListBuilder $r1;
        java.lang.Object[] $r2;
        int $i0, $i1;
        kotlin.collections.builders.ListBuilder$Itr r0;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $r1 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i1 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getLength$p(kotlin.collections.builders.ListBuilder)>($r1);

        if $i0 >= $i1 goto label1;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $i1 = $i0 + 1;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i1;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = $i0;

        $r1 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $r2 = staticinvoke <kotlin.collections.builders.ListBuilder: java.lang.Object[] access$getArray$p(kotlin.collections.builders.ListBuilder)>($r1);

        $r1 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i1 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getOffset$p(kotlin.collections.builders.ListBuilder)>($r1);

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        $i0 = $i1 + $i0;

        $r3 = $r2[$i0];

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

    public int nextIndex()
    {
        int i0;
        kotlin.collections.builders.ListBuilder$Itr r0;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        return i0;
    }

    public java.lang.Object previous()
    {
        kotlin.collections.builders.ListBuilder $r1;
        java.lang.Object[] $r2;
        int $i0, $i1;
        kotlin.collections.builders.ListBuilder$Itr r0;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $i0 = $i0 + -1;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i0;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = $i0;

        $r1 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $r2 = staticinvoke <kotlin.collections.builders.ListBuilder: java.lang.Object[] access$getArray$p(kotlin.collections.builders.ListBuilder)>($r1);

        $r1 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i1 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getOffset$p(kotlin.collections.builders.ListBuilder)>($r1);

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        $i0 = $i1 + $i0;

        $r3 = $r2[$i0];

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

    public int previousIndex()
    {
        int $i0;
        kotlin.collections.builders.ListBuilder$Itr r0;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $i0 = $i0 + -1;

        return $i0;
    }

    public void remove()
    {
        kotlin.collections.builders.ListBuilder $r2;
        java.lang.IllegalStateException $r3;
        int $i0;
        kotlin.collections.builders.ListBuilder$Itr r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        virtualinvoke $r2.<kotlin.collections.builders.ListBuilder: java.lang.Object remove(int)>($i0);

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i0;

        r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = -1;

        return;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r1 = "Call next() or previous() before removing element from the iterator.";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public void set(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r3;
        java.lang.IllegalStateException $r4;
        int $i0;
        kotlin.collections.builders.ListBuilder$Itr r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $r1 := @parameter0: java.lang.Object;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i0 = r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        virtualinvoke $r3.<kotlin.collections.builders.ListBuilder: java.lang.Object set(int,java.lang.Object)>($i0, $r1);

        return;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r2 = "Call next() or previous() before replacing element from the iterator.";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r4;
    }
}
