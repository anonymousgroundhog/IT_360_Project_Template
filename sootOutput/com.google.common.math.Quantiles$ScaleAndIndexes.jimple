public final class com.google.common.math.Quantiles$ScaleAndIndexes extends java.lang.Object
{
    private final int[] indexes;
    private final int scale;

    private void <init>(int, int[])
    {
        com.google.common.math.Quantiles$ScaleAndIndexes r0;
        int[] $r1;
        int $i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.google.common.math.Quantiles$ScaleAndIndexes;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = lengthof $r1;

        $z0 = 0;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        i1 = $r1[$i3];

        staticinvoke <com.google.common.math.Quantiles: void access$300(int,int)>(i1, $i0);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        i1 = lengthof $r1;

        if i1 <= 0 goto label3;

        $z0 = 1;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Indexes must be a non empty array");

        r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int scale> = $i0;

        r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes> = $r1;

        return;
    }

    void <init>(int, int[], com.google.common.math.Quantiles$1)
    {
        com.google.common.math.Quantiles$ScaleAndIndexes r0;
        int[] $r1;
        int $i0;
        com.google.common.math.Quantiles$1 $r2;

        r0 := @this: com.google.common.math.Quantiles$ScaleAndIndexes;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: com.google.common.math.Quantiles$1;

        specialinvoke r0.<com.google.common.math.Quantiles$ScaleAndIndexes: void <init>(int,int[])>($i0, $r1);

        return;
    }

    public java.util.Map compute(java.util.Collection)
    {
        com.google.common.math.Quantiles$ScaleAndIndexes r0;
        java.util.Collection r1;
        java.util.Map $r3;
        double[] $r2;

        r0 := @this: com.google.common.math.Quantiles$ScaleAndIndexes;

        r1 := @parameter0: java.util.Collection;

        $r2 = staticinvoke <com.google.common.primitives.Doubles: double[] toArray(java.util.Collection)>(r1);

        $r3 = virtualinvoke r0.<com.google.common.math.Quantiles$ScaleAndIndexes: java.util.Map computeInPlace(double[])>($r2);

        return $r3;
    }

    public transient java.util.Map compute(double[])
    {
        com.google.common.math.Quantiles$ScaleAndIndexes r0;
        java.util.Map $r3;
        double[] $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.math.Quantiles$ScaleAndIndexes;

        $r1 := @parameter0: double[];

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (double[]) $r2;

        $r3 = virtualinvoke r0.<com.google.common.math.Quantiles$ScaleAndIndexes: java.util.Map computeInPlace(double[])>($r1);

        return $r3;
    }

    public transient java.util.Map compute(int[])
    {
        com.google.common.math.Quantiles$ScaleAndIndexes r0;
        int[] $r1;
        java.util.Map $r3;
        double[] $r2;

        r0 := @this: com.google.common.math.Quantiles$ScaleAndIndexes;

        $r1 := @parameter0: int[];

        $r2 = staticinvoke <com.google.common.math.Quantiles: double[] access$500(int[])>($r1);

        $r3 = virtualinvoke r0.<com.google.common.math.Quantiles$ScaleAndIndexes: java.util.Map computeInPlace(double[])>($r2);

        return $r3;
    }

    public transient java.util.Map compute(long[])
    {
        long[] $r1;
        com.google.common.math.Quantiles$ScaleAndIndexes r0;
        java.util.Map $r3;
        double[] $r2;

        r0 := @this: com.google.common.math.Quantiles$ScaleAndIndexes;

        $r1 := @parameter0: long[];

        $r2 = staticinvoke <com.google.common.math.Quantiles: double[] access$400(long[])>($r1);

        $r3 = virtualinvoke r0.<com.google.common.math.Quantiles$ScaleAndIndexes: java.util.Map computeInPlace(double[])>($r2);

        return $r3;
    }

    public transient java.util.Map computeInPlace(double[])
    {
        java.lang.Double $r8;
        double[] $r1, $r4;
        long l4, $l5, $l6;
        java.lang.Integer $r7;
        java.util.LinkedHashMap r5, $r12;
        int[] r2, r3, r6, r10;
        java.util.Map $r9;
        int i0, i1, i2, i3;
        boolean z0;
        java.math.RoundingMode r11;
        double $d0, $d1, $d2, d3;
        com.google.common.math.Quantiles$ScaleAndIndexes r0;

        r0 := @this: com.google.common.math.Quantiles$ScaleAndIndexes;

        $r1 := @parameter0: double[];

        $r4 = $r1;

        i1 = lengthof $r1;

        i2 = 0;

        if i1 <= 0 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Cannot calculate quantiles of an empty dataset");

        z0 = staticinvoke <com.google.common.math.Quantiles: boolean access$600(double[])>($r1);

        if z0 == 0 goto label05;

        $r12 = new java.util.LinkedHashMap;

        r5 = $r12;

        specialinvoke $r12.<java.util.LinkedHashMap: void <init>()>();

        r6 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i1 = lengthof r6;

     label03:
        if i2 >= i1 goto label04;

        i3 = r6[i2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#NaN);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        i2 = i2 + 1;

        goto label03;

     label04:
        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r5);

        return $r9;

     label05:
        r6 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i2 = lengthof r6;

        r6 = newarray (int)[i2];

        r2 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i2 = lengthof r2;

        r2 = newarray (int)[i2];

        r3 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i2 = lengthof r3;

        i2 = i2 * 2;

        r3 = newarray (int)[i2];

        i1 = 0;

        i2 = 0;

     label06:
        r10 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i3 = lengthof r10;

        if i1 >= i3 goto label08;

        r10 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i3 = r10[i1];

        l4 = (long) i3;

        i3 = lengthof $r1;

        i3 = i3 - 1;

        $l5 = (long) i3;

        l4 = l4 * $l5;

        i3 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int scale>;

        $l5 = (long) i3;

        r11 = <java.math.RoundingMode: java.math.RoundingMode DOWN>;

        $l5 = staticinvoke <com.google.common.math.LongMath: long divide(long,long,java.math.RoundingMode)>(l4, $l5, r11);

        i3 = (int) $l5;

        $l5 = (long) i3;

        i0 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int scale>;

        $l6 = (long) i0;

        $l5 = $l5 * $l6;

        l4 = l4 - $l5;

        i0 = (int) l4;

        r6[i1] = i3;

        r2[i1] = i0;

        r3[i2] = i3;

        i2 = i2 + 1;

        if i0 == 0 goto label07;

        i3 = i3 + 1;

        r3[i2] = i3;

        i2 = i2 + 1;

     label07:
        i1 = i1 + 1;

        goto label06;

     label08:
        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r3, 0, i2);

        i2 = i2 + -1;

        i1 = lengthof $r1;

        i1 = i1 + -1;

        staticinvoke <com.google.common.math.Quantiles: void access$900(int[],int,int,double[],int,int)>(r3, 0, i2, $r1, 0, i1);

        $r12 = new java.util.LinkedHashMap;

        r5 = $r12;

        specialinvoke $r12.<java.util.LinkedHashMap: void <init>()>();

        i2 = 0;

     label09:
        r3 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i1 = lengthof r3;

        if i2 >= i1 goto label12;

        i1 = r6[i2];

        i3 = r2[i2];

        if i3 != 0 goto label10;

        r3 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i3 = r3[i2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $d0 = $r4[i1];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label11;

     label10:
        r3 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int[] indexes>;

        i0 = r3[i2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $d0 = $r4[i1];

        i1 = i1 + 1;

        $d1 = $r4[i1];

        $d2 = (double) i3;

        i1 = r0.<com.google.common.math.Quantiles$ScaleAndIndexes: int scale>;

        d3 = (double) i1;

        $d0 = staticinvoke <com.google.common.math.Quantiles: double access$800(double,double,double,double)>($d0, $d1, $d2, d3);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label11:
        i2 = i2 + 1;

        $r4 = $r1;

        goto label09;

     label12:
        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r5);

        return $r9;
    }
}
