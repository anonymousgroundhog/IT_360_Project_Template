public final class kotlinx.coroutines.scheduling.CoroutineScheduler$Worker extends java.lang.Thread
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU;
    private volatile int indexInArray;
    public final kotlinx.coroutines.scheduling.WorkQueue localQueue;
    public boolean mayHaveLocalTasks;
    private long minDelayUntilStealableTaskNs;
    private volatile java.lang.Object nextParkedWorker;
    private int rngState;
    public kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state;
    private final kotlin.jvm.internal.Ref$ObjectRef stolenTask;
    private long terminationDeadline;
    final kotlinx.coroutines.scheduling.CoroutineScheduler this$0;
    private volatile int workerCtl;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;", "workerCtl");

        <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU> = $r0;

        return;
    }

    private void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)
    {
        kotlinx.coroutines.internal.Symbol $r5;
        kotlin.random.Random$Default $r6;
        kotlinx.coroutines.scheduling.WorkQueue $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        kotlin.jvm.internal.Ref$ObjectRef $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0> = $r1;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setDaemon(boolean)>(1);

        $r2 = new kotlinx.coroutines.scheduling.WorkQueue;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.WorkQueue: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue> = $r2;

        $r3 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r3.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlin.jvm.internal.Ref$ObjectRef stolenTask> = $r3;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r4;

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker> = $r5;

        $r6 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $i0 = virtualinvoke $r6.<kotlin.random.Random$Default: int nextInt()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState> = $i0;

        return;
    }

    public void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler, int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter1: int;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler)>($r1);

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>($i0);

        return;
    }

    public static final kotlinx.coroutines.scheduling.CoroutineScheduler access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r0;

        $r0 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        return r1;
    }

    private final void afterTask(int)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r2;
        java.lang.AssertionError $r5;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r3, $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return;

     label1:
        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r2 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r1, -2097152L);

        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if r3 == $r4 goto label6;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        if r3 != $r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = r3;

     label6:
        return;
    }

    private final void beforeTask(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork()>();

     label2:
        return;
    }

    private final void executeTask(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.Task $r1;
        int $i0;
        kotlinx.coroutines.scheduling.TaskContext $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r2 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleReset(int)>($i0);

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void beforeTask(int)>($i0);

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>($r1);

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void afterTask(int)>($i0);

        return;
    }

    private final kotlinx.coroutines.scheduling.Task findAnyTask(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.Task $r2;
        int i0;
        boolean $z0;
        kotlinx.coroutines.scheduling.WorkQueue r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label5;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        i0 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        i0 = i0 * 2;

        i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>(i0);

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 == null goto label3;

        return $r2;

     label3:
        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r2 = virtualinvoke r3.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()>();

        if $r2 == null goto label4;

        return $r2;

     label4:
        if $z0 != 0 goto label6;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 == null goto label6;

        return $r2;

     label5:
        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()>();

        if $r2 == null goto label6;

        return $r2;

     label6:
        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(int)>(3);

        return $r2;
    }

    private final kotlinx.coroutines.scheduling.Task findBlockingTask()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.coroutines.scheduling.GlobalQueue $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.Task $r2;
        java.lang.Object $r5;
        kotlinx.coroutines.scheduling.WorkQueue $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task pollBlocking()>();

        if $r2 != null goto label1;

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r4 = $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r2 = (kotlinx.coroutines.scheduling.Task) $r5;

        if $r2 != null goto label1;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(int)>(1);

     label1:
        return $r2;
    }

    private final kotlinx.coroutines.scheduling.Task findCpuTask()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.coroutines.scheduling.GlobalQueue $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.Task $r2;
        java.lang.Object $r5;
        kotlinx.coroutines.scheduling.WorkQueue $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task pollCpu()>();

        if $r2 != null goto label1;

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r4 = $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        $r2 = (kotlinx.coroutines.scheduling.Task) $r5;

        if $r2 != null goto label1;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(int)>(2);

     label1:
        return $r2;
    }

    public static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater getWorkerCtl$FU()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;

        r0 = <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU>;

        return r0;
    }

    private final void idleReset(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        java.lang.AssertionError $r3;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = 0L;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        if $r1 != $r2 goto label5;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $z0 = 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

     label5:
        return;
    }

    private final boolean inStack()
    {
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final void park()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        byte $b1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i3;
        long $l0, $l2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l2 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        $l0 = $l0 + $l2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = $l0;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $l0 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>($l0);

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline>;

        $l0 = $l0 - $l2;

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline> = 0L;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryTerminateWorker()>();

     label2:
        return;
    }

    private final kotlinx.coroutines.scheduling.Task pollGlobalQueues()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;
        kotlinx.coroutines.scheduling.GlobalQueue r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.Task r4;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>(2);

        if $i0 != 0 goto label2;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        r2 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r3 = virtualinvoke r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        r2 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r3 = virtualinvoke r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        return r4;

     label2:
        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        r2 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r3 = virtualinvoke r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        if r4 == null goto label3;

        return r4;

     label3:
        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        r2 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r3 = virtualinvoke r2.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        r4 = (kotlinx.coroutines.scheduling.Task) $r3;

        return r4;
    }

    private final void runWorker()
    {
        kotlinx.coroutines.scheduling.Task $r4;
        long $l1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r2, $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;
        byte $b0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        boolean z0, $z1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        z0 = 0;

     label1:
        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $z1 = virtualinvoke r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

        if $z1 != 0 goto label5;

        r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if r2 == $r3 goto label5;

        $z1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)>($z1);

        if $r4 == null goto label2;

        z0 = 0;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = 0L;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void executeTask(kotlinx.coroutines.scheduling.Task)>($r4);

        goto label1;

     label2:
        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks> = 0;

        $l1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label4;

        if z0 != 0 goto label3;

        z0 = 1;

        goto label1;

     label3:
        z0 = 0;

        r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>(r2);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $l1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>($l1);

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = 0L;

        goto label1;

     label4:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryPark()>();

        goto label1;

     label5:
        r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>(r2);

        return;
    }

    private final boolean tryAcquireCpuPermit()
    {
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4, $r5;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r1, $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int i2;
        boolean z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        if r1 != $r2 goto label1;

        return 1;

     label1:
        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

     label2:
        $l1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r3);

        l0 = 9223367638808264704L & $l1;

        l0 = l0 >> 42;

        i2 = (int) l0;

        if i2 != 0 goto label3;

        z0 = 0;

        goto label4;

     label3:
        l0 = $l1 - 4398046511104L;

        $r5 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r3, $l1, l0);

        if z0 == 0 goto label6;

        z0 = 1;

     label4:
        if z0 == 0 goto label5;

        r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = r1;

        return 1;

     label5:
        return 0;

     label6:
        goto label2;
    }

    private final void tryPark()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>(r0);

        return;

     label1:
        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(java.lang.Object,int)>(r0, -1);

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()>();

        if $z0 == 0 goto label4;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        if $i0 != -1 goto label4;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

        if $z0 != 0 goto label4;

        $r4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r4 != $r1 goto label3;

        return;

     label3:
        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING>;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r1);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void park()>();

        goto label2;

     label4:
        return;
    }

    private final kotlinx.coroutines.scheduling.Task trySteal(int)
    {
        long $l2, $l6;
        kotlinx.coroutines.scheduling.WorkQueue r7;
        byte $b1;
        int $i0, i3, $i4, $i5, $i7;
        kotlin.jvm.internal.Ref$ObjectRef $r1;
        kotlinx.coroutines.scheduling.Task r8;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0, r6;
        java.lang.Object $r5;
        kotlinx.coroutines.internal.ResizableAtomicArray r4;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r3 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r2);

        $l2 = $l2 & 2097151L;

        i3 = (int) $l2;

        if i3 >= 2 goto label1;

        return null;

     label1:
        $i4 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)>(i3);

        $l2 = 9223372036854775807L;

        r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $i5 = 0;

     label2:
        $l6 = 0L;

        if $i5 >= i3 goto label6;

        $i4 = $i4 + 1;

        if $i4 <= i3 goto label3;

        $i4 = 1;

     label3:
        r4 = r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r5 = virtualinvoke r4.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i4);

        r6 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r5;

        if r6 == null goto label5;

        if r6 == r0 goto label5;

        r7 = r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlin.jvm.internal.Ref$ObjectRef stolenTask>;

        $l6 = virtualinvoke r7.<kotlinx.coroutines.scheduling.WorkQueue: long trySteal(int,kotlin.jvm.internal.Ref$ObjectRef)>($i0, $r1);

        $b1 = $l6 cmp -1L;

        if $b1 != 0 goto label4;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlin.jvm.internal.Ref$ObjectRef stolenTask>;

        $r5 = $r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        r8 = (kotlinx.coroutines.scheduling.Task) $r5;

        $r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlin.jvm.internal.Ref$ObjectRef stolenTask>;

        $r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = null;

        return r8;

     label4:
        $b1 = $l6 cmp 0L;

        $i7 = (int) $b1;

        if $i7 <= 0 goto label5;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l6);

        goto label5;

     label5:
        $i5 = $i5 + 1;

        goto label2;

     label6:
        $b1 = $l2 cmp 9223372036854775807L;

        if $b1 == 0 goto label7;

        $l6 = $l2;

     label7:
        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs> = $l6;

        return null;
    }

    private final void tryTerminateWorker()
    {
        java.lang.Throwable $r10;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        long $l0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r9;
        kotlinx.coroutines.scheduling.CoroutineScheduler r1;
        kotlin.Unit $r8;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0, $r7;
        int i1, $i2;
        java.lang.Object $r6;
        kotlinx.coroutines.internal.ResizableAtomicArray r2, $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        r2 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        entermonitor r2;

     label01:
        $z0 = virtualinvoke r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

     label02:
        if $z0 == 0 goto label03;

        exitmonitor r2;

        return;

     label03:
        $r3 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r1);

        $l0 = $l0 & 2097151L;

        i1 = (int) $l0;

        $i2 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

     label04:
        if i1 > $i2 goto label05;

        exitmonitor r2;

        return;

     label05:
        r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU>;

        $z0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, -1, 1);

     label06:
        if $z0 != 0 goto label07;

        exitmonitor r2;

        return;

     label07:
        i1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray>;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>(0);

        virtualinvoke r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>(r0, i1, 0);

        $r3 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(java.lang.Object)>(r1);

        $l0 = 2097151L & $l0;

        $i2 = (int) $l0;

        if $i2 == i1 goto label08;

        $r5 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>($i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r7 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r6;

        $r5 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        virtualinvoke $r5.<kotlinx.coroutines.internal.ResizableAtomicArray: void setSynchronized(int,java.lang.Object)>(i1, $r7);

        virtualinvoke $r7.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)>(i1);

        virtualinvoke r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)>($r7, $i2, i1);

     label08:
        $r5 = r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        virtualinvoke $r5.<kotlinx.coroutines.internal.ResizableAtomicArray: void setSynchronized(int,java.lang.Object)>($i2, null);

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label09:
        exitmonitor r2;

        r9 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = r9;

        return;

     label10:
        $r10 := @caughtexception;

        exitmonitor r2;

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
    }

    public final kotlinx.coroutines.scheduling.Task findTask(boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.Task $r1;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()>();

        if $z1 == 0 goto label1;

        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findAnyTask(boolean)>($z0);

        return $r1;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findBlockingTask()>();

        return $r1;
    }

    public final int getIndexInArray()
    {
        int i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray>;

        return i0;
    }

    public final java.lang.Object getNextParkedWorker()
    {
        java.lang.Object r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker>;

        return r1;
    }

    public final kotlinx.coroutines.scheduling.CoroutineScheduler getScheduler()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>(r0);

        return $r1;
    }

    public final int getWorkerCtl()
    {
        int i0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl>;

        return i0;
    }

    public final boolean isIo()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final int nextInt(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0, i1, i2, $i3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        i1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState>;

        i2 = i1 << 13;

        i1 = i1 ^ i2;

        i2 = i1 >> 17;

        i1 = i1 ^ i2;

        i2 = i1 << 5;

        i1 = i1 ^ i2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState> = i1;

        i2 = $i0 + -1;

        $i3 = i2 & $i0;

        if $i3 != 0 goto label1;

        $i0 = i1 & i2;

        return $i0;

     label1:
        i1 = 2147483647 & i1;

        $i0 = i1 % $i0;

        return $i0;
    }

    public void run()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void runWorker()>();

        return;
    }

    public final long runSingleTask()
    {
        kotlinx.coroutines.scheduling.Task $r4;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r6;
        java.lang.AssertionError $r7;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r1, r2, r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler r5;
        byte b1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        boolean $z0, z1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        $z0 = 1;

        if r2 != r3 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        if z1 == 0 goto label03;

        $r4 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findCpuTask()>();

        goto label04;

     label03:
        $r4 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findBlockingTask()>();

     label04:
        if $r4 != null goto label06;

        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        b1 = $l0 cmp 0L;

        if b1 != 0 goto label05;

        return -1L;

     label05:
        $l0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs>;

        return $l0;

     label06:
        r5 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        virtualinvoke r5.<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>($r4);

        if z1 != 0 goto label07;

        r5 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r6 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r5, -2097152L);

     label07:
        z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if z1 == 0 goto label11;

        r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        if r2 != r1 goto label08;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        if $z0 == 0 goto label10;

        return 0L;

     label10:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label11:
        return 0L;
    }

    public final void setIndexInArray(int)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r3 = $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-worker-");

        if $i0 != 0 goto label1;

        $r3 = "TERMINATED";

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setName(java.lang.String)>($r3);

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray> = $i0;

        return;
    }

    public final void setNextParkedWorker(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: java.lang.Object;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker> = $r1;

        return;
    }

    public final boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r1, r2, r5;
        boolean z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState;

        r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED>;

        if r2 != r5 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label3;

        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0>;

        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r3, 4398046511104L);

     label3:
        if r2 == $r1 goto label4;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state> = $r1;

     label4:
        return z0;
    }
}
