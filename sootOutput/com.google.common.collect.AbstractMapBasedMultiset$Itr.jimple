abstract class com.google.common.collect.AbstractMapBasedMultiset$Itr extends java.lang.Object implements java.util.Iterator
{
    int entryIndex;
    int expectedModCount;
    final com.google.common.collect.AbstractMapBasedMultiset this$0;
    int toRemove;

    void <init>(com.google.common.collect.AbstractMapBasedMultiset)
    {
        com.google.common.collect.ObjectCountHashMap $r2;
        com.google.common.collect.AbstractMapBasedMultiset $r1;
        int $i0;
        com.google.common.collect.AbstractMapBasedMultiset$Itr r0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$Itr;

        $r1 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r2 = $r1.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = virtualinvoke $r2.<com.google.common.collect.ObjectCountHashMap: int firstIndex()>();

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex> = $i0;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int toRemove> = -1;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r2 = $r1.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = $r2.<com.google.common.collect.ObjectCountHashMap: int modCount>;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int expectedModCount> = $i0;

        return;
    }

    private void checkForConcurrentModification()
    {
        com.google.common.collect.ObjectCountHashMap $r2;
        int $i0, $i1;
        com.google.common.collect.AbstractMapBasedMultiset $r1;
        com.google.common.collect.AbstractMapBasedMultiset$Itr r0;
        java.util.ConcurrentModificationException $r3;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$Itr;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r2 = $r1.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i1 = $r2.<com.google.common.collect.ObjectCountHashMap: int modCount>;

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int expectedModCount>;

        if $i1 != $i0 goto label1;

        return;

     label1:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }

    public boolean hasNext()
    {
        int $i0;
        com.google.common.collect.AbstractMapBasedMultiset$Itr r0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$Itr;

        specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: void checkForConcurrentModification()>();

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex>;

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        com.google.common.collect.ObjectCountHashMap $r3;
        int $i0;
        com.google.common.collect.AbstractMapBasedMultiset $r2;
        java.lang.Object $r1;
        com.google.common.collect.AbstractMapBasedMultiset$Itr r0;
        java.util.NoSuchElementException r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$Itr;

        $z0 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex>;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: java.lang.Object result(int)>($i0);

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex>;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int toRemove> = $i0;

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r3 = $r2.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex>;

        $i0 = virtualinvoke $r3.<com.google.common.collect.ObjectCountHashMap: int nextIndex(int)>($i0);

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex> = $i0;

        return $r1;

     label1:
        r4 = new java.util.NoSuchElementException;

        specialinvoke r4.<java.util.NoSuchElementException: void <init>()>();

        throw r4;
    }

    public void remove()
    {
        com.google.common.collect.AbstractMapBasedMultiset $r1, $r2;
        long $l1, $l2;
        com.google.common.collect.AbstractMapBasedMultiset$Itr r0;
        com.google.common.collect.ObjectCountHashMap $r3;
        int $i0, $i3;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$Itr;

        specialinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: void checkForConcurrentModification()>();

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int toRemove>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.collect.CollectPreconditions: void checkRemove(boolean)>($z0);

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $l1 = $r1.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r3 = $r2.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int toRemove>;

        $i0 = virtualinvoke $r3.<com.google.common.collect.ObjectCountHashMap: int removeEntry(int)>($i0);

        $l2 = (long) $i0;

        $l1 = $l1 - $l2;

        $r1.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l1;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r3 = $r1.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i3 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex>;

        $i0 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int toRemove>;

        $i0 = virtualinvoke $r3.<com.google.common.collect.ObjectCountHashMap: int nextIndexAfterRemove(int,int)>($i3, $i0);

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int entryIndex> = $i0;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int toRemove> = -1;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r3 = $r1.<com.google.common.collect.AbstractMapBasedMultiset: com.google.common.collect.ObjectCountHashMap backingMap>;

        $i0 = $r3.<com.google.common.collect.ObjectCountHashMap: int modCount>;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$Itr: int expectedModCount> = $i0;

        return;
    }

    abstract java.lang.Object result(int);
}
