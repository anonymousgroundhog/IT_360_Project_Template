final class kotlinx.coroutines.flow.StateFlowSlot extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU;
    private volatile java.lang.Object _state;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/flow/StateFlowSlot;", class "Ljava/lang/Object;", "_state");

        <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU> = $r0;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.flow.StateFlowSlot r0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot: void <init>()>();

        return;
    }

    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$get_state$FU$p()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;

        r0 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        return r0;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlinx.coroutines.flow.StateFlowSlot r0;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    public volatile boolean allocateLocked(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl $r2;
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlinx.coroutines.flow.StateFlowImpl) $r1;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowSlot: boolean allocateLocked(kotlinx.coroutines.flow.StateFlowImpl)>($r2);

        return $z0;
    }

    public boolean allocateLocked(kotlinx.coroutines.flow.StateFlowImpl)
    {
        kotlinx.coroutines.flow.StateFlowImpl $r1;
        kotlinx.coroutines.internal.Symbol $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: kotlinx.coroutines.flow.StateFlowImpl;

        $r2 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r3 == null goto label1;

        return 0;

     label1:
        $r2 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r4 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r4);

        return 1;
    }

    public final java.lang.Object awaitPending(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.internal.Symbol $r8;
        kotlin.coroutines.Continuation $r1, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5;
        kotlin.Result$Companion $r9;
        kotlinx.coroutines.CancellableContinuationImpl r2;
        java.lang.AssertionError $r7;
        kotlin.Unit $r10;
        kotlinx.coroutines.CancellableContinuation r4;
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.lang.Object $r6, $r11;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        r2 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $z0 = 1;

        specialinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r3, 1);

        virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r4 = (kotlinx.coroutines.CancellableContinuation) r2;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label2;

        $r5 = staticinvoke <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$get_state$FU$p()>();

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $z1 = $r6 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        $z1 = $z1 ^ 1;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r5 = staticinvoke <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$get_state$FU$p()>();

        $r8 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r0, $r8, r4);

        if $z1 != 0 goto label7;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label6;

        $r5 = staticinvoke <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$get_state$FU$p()>();

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r8 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        if $r6 != $r8 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label6:
        $r3 = (kotlin.coroutines.Continuation) r4;

        $r9 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r10);

        interfaceinvoke $r3.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r6);

     label7:
        $r6 = virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r11 goto label8;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label8:
        $r11 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r11 goto label9;

        return $r6;

     label9:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;
    }

    public volatile kotlin.coroutines.Continuation[] freeLocked(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl $r3;
        kotlin.coroutines.Continuation[] $r2;
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: java.lang.Object;

        $r3 = (kotlinx.coroutines.flow.StateFlowImpl) $r1;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowSlot: kotlin.coroutines.Continuation[] freeLocked(kotlinx.coroutines.flow.StateFlowImpl)>($r3);

        return $r2;
    }

    public kotlin.coroutines.Continuation[] freeLocked(kotlinx.coroutines.flow.StateFlowImpl)
    {
        kotlinx.coroutines.flow.StateFlowImpl $r1;
        kotlin.coroutines.Continuation[] r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        kotlinx.coroutines.flow.StateFlowSlot r0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        $r1 := @parameter0: kotlinx.coroutines.flow.StateFlowImpl;

        $r2 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, null);

        r3 = <kotlinx.coroutines.flow.internal.AbstractSharedFlowKt: kotlin.coroutines.Continuation[] EMPTY_RESUMES>;

        return r3;
    }

    public final void makePending()
    {
        kotlinx.coroutines.internal.Symbol $r3;
        kotlin.coroutines.Continuation $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1, $r4;
        kotlin.Result$Companion $r7;
        kotlinx.coroutines.CancellableContinuationImpl $r5;
        kotlin.Unit $r8;
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        r1 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

     label1:
        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        if $r2 != $r3 goto label3;

        return;

     label3:
        $r3 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        if $r2 != $r3 goto label4;

        $r4 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r2, $r3);

        if $z0 == 0 goto label5;

        return;

     label4:
        $r4 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, r0, $r2, $r3);

        if $z0 == 0 goto label5;

        $r5 = (kotlinx.coroutines.CancellableContinuationImpl) $r2;

        $r6 = (kotlin.coroutines.Continuation) $r5;

        $r7 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r8);

        interfaceinvoke $r6.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r2);

        return;

     label5:
        goto label1;
    }

    public final boolean takePending()
    {
        kotlinx.coroutines.internal.Symbol $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        kotlinx.coroutines.flow.StateFlowSlot r0;
        java.lang.Object $r3;
        java.lang.AssertionError $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowSlot;

        r1 = <kotlinx.coroutines.flow.StateFlowSlot: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getNONE$p()>();

        $r3 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = $r3 instanceof kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol access$getPENDING$p()>();

        if $r3 != $r2 goto label3;

        return 1;

     label3:
        return 0;
    }
}
