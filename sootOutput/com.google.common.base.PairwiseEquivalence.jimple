final class com.google.common.base.PairwiseEquivalence extends com.google.common.base.Equivalence implements java.io.Serializable
{
    private static final long serialVersionUID;
    final com.google.common.base.Equivalence elementEquivalence;

    void <init>(com.google.common.base.Equivalence)
    {
        java.lang.Object $r2;
        com.google.common.base.Equivalence r1;
        com.google.common.base.PairwiseEquivalence r0;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        r1 := @parameter0: com.google.common.base.Equivalence;

        specialinvoke r0.<com.google.common.base.Equivalence: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (com.google.common.base.Equivalence) $r2;

        r0.<com.google.common.base.PairwiseEquivalence: com.google.common.base.Equivalence elementEquivalence> = r1;

        return;
    }

    protected boolean doEquivalent(java.lang.Iterable, java.lang.Iterable)
    {
        java.util.Iterator $r3, $r4;
        com.google.common.base.Equivalence $r5;
        java.lang.Iterable r1, r2;
        com.google.common.base.PairwiseEquivalence r0;
        java.lang.Object $r6, $r7;
        boolean $z0;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.lang.Iterable;

        $r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<com.google.common.base.PairwiseEquivalence: com.google.common.base.Equivalence elementEquivalence>;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r5.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    protected volatile boolean doEquivalent(java.lang.Object, java.lang.Object)
    {
        com.google.common.base.PairwiseEquivalence r0;
        java.lang.Object $r1, $r2;
        java.lang.Iterable $r3, $r4;
        boolean $z0;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Iterable) $r1;

        $r4 = (java.lang.Iterable) $r2;

        $z0 = virtualinvoke r0.<com.google.common.base.PairwiseEquivalence: boolean doEquivalent(java.lang.Iterable,java.lang.Iterable)>($r3, $r4);

        return $z0;
    }

    protected int doHash(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        com.google.common.base.Equivalence $r4;
        java.lang.Iterable r1;
        com.google.common.base.PairwiseEquivalence r0;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        r1 := @parameter0: java.lang.Iterable;

        $i0 = 78721;

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = $i0 * 24943;

        $r4 = r0.<com.google.common.base.PairwiseEquivalence: com.google.common.base.Equivalence elementEquivalence>;

        $i1 = virtualinvoke $r4.<com.google.common.base.Equivalence: int hash(java.lang.Object)>($r3);

        $i0 = $i0 + $i1;

        goto label1;

     label2:
        return $i0;
    }

    protected volatile int doHash(java.lang.Object)
    {
        com.google.common.base.PairwiseEquivalence r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Iterable) $r1;

        $i0 = virtualinvoke r0.<com.google.common.base.PairwiseEquivalence: int doHash(java.lang.Iterable)>($r2);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.base.Equivalence $r2, $r4;
        com.google.common.base.PairwiseEquivalence r0, r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.base.PairwiseEquivalence;

        if $z0 == 0 goto label1;

        r3 = (com.google.common.base.PairwiseEquivalence) $r1;

        $r4 = r0.<com.google.common.base.PairwiseEquivalence: com.google.common.base.Equivalence elementEquivalence>;

        $r2 = r3.<com.google.common.base.PairwiseEquivalence: com.google.common.base.Equivalence elementEquivalence>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        return $z0;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        com.google.common.base.Equivalence $r1;
        com.google.common.base.PairwiseEquivalence r0;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        $r1 = r0.<com.google.common.base.PairwiseEquivalence: com.google.common.base.Equivalence elementEquivalence>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 ^ 1185147655;

        return $i0;
    }

    public java.lang.String toString()
    {
        com.google.common.base.Equivalence $r2;
        com.google.common.base.PairwiseEquivalence r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r4;

        r0 := @this: com.google.common.base.PairwiseEquivalence;

        $r2 = r0.<com.google.common.base.PairwiseEquivalence: com.google.common.base.Equivalence elementEquivalence>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 11;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".pairwise()");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <com.google.common.base.PairwiseEquivalence: long serialVersionUID> = 1L;

        return;
    }
}
