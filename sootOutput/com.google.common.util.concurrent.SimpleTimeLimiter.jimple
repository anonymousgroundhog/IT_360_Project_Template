public final class com.google.common.util.concurrent.SimpleTimeLimiter extends java.lang.Object implements com.google.common.util.concurrent.TimeLimiter
{
    private final java.util.concurrent.ExecutorService executor;

    private void <init>(java.util.concurrent.ExecutorService)
    {
        java.lang.Object $r2;
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.util.concurrent.ExecutorService) $r2;

        r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor> = $r1;

        return;
    }

    static java.lang.Object access$000(com.google.common.util.concurrent.SimpleTimeLimiter, java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception
    {
        java.util.concurrent.TimeUnit $r2;
        com.google.common.util.concurrent.SimpleTimeLimiter $r0;
        java.util.concurrent.Callable $r1;
        long $l0;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: com.google.common.util.concurrent.SimpleTimeLimiter;

        $r1 := @parameter1: java.util.concurrent.Callable;

        $l0 := @parameter2: long;

        $r2 := @parameter3: java.util.concurrent.TimeUnit;

        $z0 := @parameter4: boolean;

        $r3 = specialinvoke $r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)>($r1, $l0, $r2, $z0);

        return $r3;
    }

    static java.lang.Exception access$100(java.lang.Exception, boolean) throws java.lang.Exception
    {
        java.lang.Exception $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Exception;

        $z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.lang.Exception throwCause(java.lang.Exception,boolean)>($r0, $z0);

        return $r0;
    }

    private java.lang.Object callWithTimeout(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception
    {
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.TimeoutException r7;
        java.util.concurrent.Callable r1;
        long l0;
        java.lang.Exception $r10;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.ExecutionException r9;
        java.util.concurrent.Future $r4;
        java.lang.InterruptedException r6;
        java.lang.Object $r5;
        com.google.common.util.concurrent.UncheckedTimeoutException $r8;
        java.util.concurrent.ExecutorService r3;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.util.concurrent.Callable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        z0 := @parameter3: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: void checkPositiveTimeout(long)>(l0);

        r3 = r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor>;

        $r4 = interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r1);

        if z0 == 0 goto label6;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r2);

     label2:
        return $r5;

     label3:
        r6 := @caughtexception;

     label4:
        interfaceinvoke $r4.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

     label5:
        throw r6;

     label6:
        $r5 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>($r4, l0, r2);

     label7:
        return $r5;

     label8:
        r7 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        $r8 = new com.google.common.util.concurrent.UncheckedTimeoutException;

        specialinvoke $r8.<com.google.common.util.concurrent.UncheckedTimeoutException: void <init>(java.lang.Throwable)>(r7);

        throw $r8;

     label9:
        r9 := @caughtexception;

        $r10 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.lang.Exception throwCause(java.lang.Exception,boolean)>(r9, 1);

        throw $r10;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label9;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label8;
        catch java.util.concurrent.ExecutionException from label4 to label5 with label9;
        catch java.util.concurrent.ExecutionException from label6 to label7 with label9;
        catch java.util.concurrent.TimeoutException from label4 to label5 with label8;
        catch java.util.concurrent.TimeoutException from label6 to label7 with label8;
    }

    private static void checkPositiveTimeout(long)
    {
        byte $b1;
        int $i2;
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "timeout must be positive: %s", $l0);

        return;
    }

    public static com.google.common.util.concurrent.SimpleTimeLimiter create(java.util.concurrent.ExecutorService)
    {
        com.google.common.util.concurrent.SimpleTimeLimiter $r1;
        java.util.concurrent.ExecutorService $r0;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $r1 = new com.google.common.util.concurrent.SimpleTimeLimiter;

        specialinvoke $r1.<com.google.common.util.concurrent.SimpleTimeLimiter: void <init>(java.util.concurrent.ExecutorService)>($r0);

        return $r1;
    }

    private static boolean declaresInterruptedEx(java.lang.reflect.Method)
    {
        int $i0, $i1;
        java.lang.Class[] $r2;
        java.lang.Class r1;
        java.lang.reflect.Method $r0;

        $r0 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r1 = $r2[$i1];

        if r1 != class "Ljava/lang/InterruptedException;" goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static java.util.Set findInterruptibleMethods(java.lang.Class)
    {
        java.util.HashSet $r2;
        int $i0, $i1;
        java.lang.Class r0;
        java.lang.reflect.Method r1;
        java.lang.reflect.Method[] $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r1 = $r3[$i1];

        $z0 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: boolean declaresInterruptedEx(java.lang.reflect.Method)>(r1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r2;
    }

    private static java.lang.Object newProxy(java.lang.Class, java.lang.reflect.InvocationHandler)
    {
        java.lang.Class[] $r3;
        java.lang.Class r0;
        java.lang.Object $r4;
        java.lang.reflect.InvocationHandler $r1;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.reflect.InvocationHandler;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = r0;

        $r4 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r2, $r3, $r1);

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r4);

        return $r4;
    }

    private static java.lang.Exception throwCause(java.lang.Exception, boolean) throws java.lang.Exception
    {
        java.lang.Throwable $r1;
        java.lang.StackTraceElement[] $r2, $r3;
        java.lang.Object[] $r4;
        java.lang.Error r5;
        java.lang.Exception $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Exception;

        $z0 := @parameter1: boolean;

        $r1 = virtualinvoke $r0.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r1 == null goto label4;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r3 = virtualinvoke $r0.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $r4 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] concat(java.lang.Object[],java.lang.Object[],java.lang.Class)>($r2, $r3, class "Ljava/lang/StackTraceElement;");

        $r2 = (java.lang.StackTraceElement[]) $r4;

        virtualinvoke $r1.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2);

     label1:
        $z0 = $r1 instanceof java.lang.Exception;

        if $z0 != 0 goto label3;

        $z0 = $r1 instanceof java.lang.Error;

        if $z0 == 0 goto label2;

        r5 = (java.lang.Error) $r1;

        throw r5;

     label2:
        throw $r0;

     label3:
        $r0 = (java.lang.Exception) $r1;

        throw $r0;

     label4:
        throw $r0;
    }

    private void wrapAndThrowExecutionExceptionOrError(java.lang.Throwable) throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r1;
        java.util.concurrent.ExecutionException $r3;
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        com.google.common.util.concurrent.UncheckedExecutionException $r2;
        java.lang.Error $r5;
        com.google.common.util.concurrent.ExecutionError $r4;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = $r1 instanceof java.lang.Error;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r2 = new com.google.common.util.concurrent.UncheckedExecutionException;

        specialinvoke $r2.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

     label1:
        $r3 = new java.util.concurrent.ExecutionException;

        specialinvoke $r3.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r1);

        throw $r3;

     label2:
        $r4 = new com.google.common.util.concurrent.ExecutionError;

        $r5 = (java.lang.Error) $r1;

        specialinvoke $r4.<com.google.common.util.concurrent.ExecutionError: void <init>(java.lang.Error)>($r5);

        throw $r4;
    }

    private void wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        com.google.common.util.concurrent.UncheckedExecutionException $r4;
        java.lang.Error $r3;
        com.google.common.util.concurrent.ExecutionError $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = $r1 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r2 = new com.google.common.util.concurrent.ExecutionError;

        $r3 = (java.lang.Error) $r1;

        specialinvoke $r2.<com.google.common.util.concurrent.ExecutionError: void <init>(java.lang.Error)>($r3);

        throw $r2;

     label1:
        $r4 = new com.google.common.util.concurrent.UncheckedExecutionException;

        specialinvoke $r4.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r1);

        throw $r4;
    }

    public java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r7;
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.TimeoutException r9;
        java.util.concurrent.Callable r1;
        long $l0;
        java.lang.AssertionError $r8;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ExecutionException r6;
        java.util.concurrent.Future $r4;
        java.lang.Object $r5;
        java.util.concurrent.ExecutorService r3;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.util.concurrent.Callable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: void checkPositiveTimeout(long)>($l0);

        r3 = r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor>;

        $r4 = interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r1);

     label1:
        $r5 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>($r4, $l0, $r2);

     label2:
        return $r5;

     label3:
        r6 := @caughtexception;

        $r7 = virtualinvoke r6.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r0.<com.google.common.util.concurrent.SimpleTimeLimiter: void wrapAndThrowExecutionExceptionOrError(java.lang.Throwable)>($r7);

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label4:
        r9 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        throw r9;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public java.lang.Object callWithTimeout(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r7;
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.Callable r1;
        long $l0;
        java.lang.AssertionError $r8;
        java.lang.Exception r9;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ExecutionException r6;
        java.util.concurrent.Future $r4;
        java.lang.Object $r5;
        java.util.concurrent.ExecutorService r3;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.util.concurrent.Callable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: void checkPositiveTimeout(long)>($l0);

        r3 = r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor>;

        $r4 = interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r1);

     label1:
        $r5 = interfaceinvoke $r4.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r2);

     label2:
        return $r5;

     label3:
        r6 := @caughtexception;

        $r7 = virtualinvoke r6.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r0.<com.google.common.util.concurrent.SimpleTimeLimiter: void wrapAndThrowExecutionExceptionOrError(java.lang.Throwable)>($r7);

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label4:
        r9 := @caughtexception;

        goto label6;

     label5:
        r9 := @caughtexception;

     label6:
        interfaceinvoke $r4.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        throw r9;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public java.lang.Object newProxy(java.lang.Object, java.lang.Class, long, java.util.concurrent.TimeUnit)
    {
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.Set $r4;
        long $l0;
        com.google.common.util.concurrent.SimpleTimeLimiter$1 r5;
        java.util.concurrent.TimeUnit $r3;
        java.lang.Object r1;
        java.lang.Class r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $l0 := @parameter2: long;

        $r3 := @parameter3: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: void checkPositiveTimeout(long)>($l0);

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isInterface()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "interfaceType must be an interface type");

        $r4 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.util.Set findInterruptibleMethods(java.lang.Class)>(r2);

        r5 = new com.google.common.util.concurrent.SimpleTimeLimiter$1;

        specialinvoke r5.<com.google.common.util.concurrent.SimpleTimeLimiter$1: void <init>(com.google.common.util.concurrent.SimpleTimeLimiter,java.lang.Object,long,java.util.concurrent.TimeUnit,java.util.Set)>(r0, r1, $l0, $r3, $r4);

        r1 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(r2, r5);

        return r1;
    }

    public void runUninterruptiblyWithTimeout(java.lang.Runnable, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r6;
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.TimeoutException r8;
        long $l0;
        java.lang.AssertionError $r7;
        java.lang.Runnable $r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ExecutionException r5;
        java.util.concurrent.Future $r4;
        java.util.concurrent.ExecutorService r3;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        $r1 := @parameter0: java.lang.Runnable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: void checkPositiveTimeout(long)>($l0);

        r3 = r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor>;

        $r4 = interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r1);

     label1:
        staticinvoke <com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>($r4, $l0, $r2);

     label2:
        return;

     label3:
        r5 := @caughtexception;

        $r6 = virtualinvoke r5.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r0.<com.google.common.util.concurrent.SimpleTimeLimiter: void wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable)>($r6);

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        r8 := @caughtexception;

        interfaceinvoke $r4.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        throw r8;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public void runWithTimeout(java.lang.Runnable, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.lang.InterruptedException
    {
        java.lang.Throwable $r6;
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        long $l0;
        java.lang.AssertionError $r7;
        java.lang.Runnable $r1;
        java.lang.Exception r8;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ExecutionException r5;
        java.util.concurrent.Future $r4;
        java.util.concurrent.ExecutorService r3;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        $r1 := @parameter0: java.lang.Runnable;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: void checkPositiveTimeout(long)>($l0);

        r3 = r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor>;

        $r4 = interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r1);

     label1:
        interfaceinvoke $r4.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r2);

     label2:
        return;

     label3:
        r5 := @caughtexception;

        $r6 = virtualinvoke r5.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r0.<com.google.common.util.concurrent.SimpleTimeLimiter: void wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable)>($r6);

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        r8 := @caughtexception;

        goto label6;

     label5:
        r8 := @caughtexception;

     label6:
        interfaceinvoke $r4.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        throw r8;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }
}
