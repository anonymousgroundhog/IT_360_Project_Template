final class com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper extends com.google.common.util.concurrent.AggregateFutureState$AtomicHelper
{

    private void <init>()
    {
        com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFutureState$AtomicHelper: void <init>(com.google.common.util.concurrent.AggregateFutureState$1)>(null);

        return;
    }

    void <init>(com.google.common.util.concurrent.AggregateFutureState$1)
    {
        com.google.common.util.concurrent.AggregateFutureState$1 $r1;
        com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AggregateFutureState$1;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper: void <init>()>();

        return;
    }

    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState, java.util.Set, java.util.Set)
    {
        java.lang.Throwable $r5;
        java.util.Set r2, r3, $r4;
        com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper r0;
        com.google.common.util.concurrent.AggregateFutureState r1;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper;

        r1 := @parameter0: com.google.common.util.concurrent.AggregateFutureState;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: java.util.Set;

        entermonitor r1;

     label1:
        $r4 = staticinvoke <com.google.common.util.concurrent.AggregateFutureState: java.util.Set access$200(com.google.common.util.concurrent.AggregateFutureState)>(r1);

        if $r4 != r2 goto label2;

        staticinvoke <com.google.common.util.concurrent.AggregateFutureState: java.util.Set access$202(com.google.common.util.concurrent.AggregateFutureState,java.util.Set)>(r1, r3);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState)
    {
        java.lang.Throwable $r2;
        int $i0;
        com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper r0;
        com.google.common.util.concurrent.AggregateFutureState r1;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper;

        r1 := @parameter0: com.google.common.util.concurrent.AggregateFutureState;

        entermonitor r1;

     label1:
        $i0 = staticinvoke <com.google.common.util.concurrent.AggregateFutureState: int access$306(com.google.common.util.concurrent.AggregateFutureState)>(r1);

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
