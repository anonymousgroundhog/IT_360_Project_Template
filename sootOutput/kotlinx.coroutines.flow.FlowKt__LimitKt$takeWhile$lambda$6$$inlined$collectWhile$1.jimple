public final class kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1 extends java.lang.Object implements kotlinx.coroutines.flow.FlowCollector
{
    final kotlin.jvm.functions.Function2 $predicate$inlined;
    final kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow$inlined;

    public void <init>(kotlin.jvm.functions.Function2, kotlinx.coroutines.flow.FlowCollector)
    {
        kotlin.jvm.functions.Function2 $r1;
        kotlinx.coroutines.flow.FlowCollector $r2;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1 r0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1;

        $r1 := @parameter0: kotlin.jvm.functions.Function2;

        $r2 := @parameter1: kotlinx.coroutines.flow.FlowCollector;

        r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1: kotlin.jvm.functions.Function2 $predicate$inlined> = $r1;

        r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow$inlined> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException $r7;
        kotlin.coroutines.Continuation $r2;
        int i0;
        java.lang.Boolean $r11;
        kotlinx.coroutines.flow.internal.AbortFlowException $r13;
        boolean $z0, $z1;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1 $r3, $r4;
        kotlin.jvm.functions.Function2 $r10;
        kotlin.Unit r14;
        kotlinx.coroutines.flow.FlowCollector $r12;
        java.lang.Object $r1, $r5, $r6, r8;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1 r0, r9;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1) $r2;

        i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: int label>;

        i0 = i0 & -2147483648;

        if i0 == 0 goto label01;

        i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: int label>;

        i0 = i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: int label> = i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: void <init>(kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1,kotlin.coroutines.Continuation)>(r0, $r2);

     label02:
        $r4 = $r3;

        $r5 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: int label>;

        $z0 = 1;

        lookupswitch(i0)
        {
            case 0: goto label06;
            case 1: goto label05;
            case 2: goto label04;
            default: goto label03;
        };

     label03:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;

     label04:
        $r1 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1) $r1;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        goto label09;

     label05:
        $r1 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object L$1>;

        r8 = $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object L$0>;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        r9 = (kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1) r8;

        goto label07;

     label06:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        r9 = r0;

        $r2 = (kotlin.coroutines.Continuation) $r3;

        $r10 = r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1: kotlin.jvm.functions.Function2 $predicate$inlined>;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object L$1> = $r1;

        $r3.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: int label> = 1;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(6);

        r8 = interfaceinvoke $r10.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r3);

        $r5 = r8;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(7);

        if r8 != $r6 goto label07;

        return $r6;

     label07:
        $r11 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label10;

        $r12 = r9.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow$inlined>;

        $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object L$0> = r9;

        $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: java.lang.Object L$1> = null;

        $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1$1: int label> = 2;

        $r1 = interfaceinvoke $r12.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r4);

        if $r1 != $r6 goto label08;

        return $r6;

     label08:
        r0 = r9;

     label09:
        r9 = r0;

        goto label11;

     label10:
        $z0 = 0;

     label11:
        if $z0 == 0 goto label12;

        r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r14;

     label12:
        $r13 = new kotlinx.coroutines.flow.internal.AbortFlowException;

        $r12 = (kotlinx.coroutines.flow.FlowCollector) r9;

        specialinvoke $r13.<kotlinx.coroutines.flow.internal.AbortFlowException: void <init>(kotlinx.coroutines.flow.FlowCollector)>($r12);

        throw $r13;
    }
}
