public final class kotlin.random.jdk8.PlatformThreadLocalRandom extends kotlin.random.AbstractPlatformRandom
{

    public void <init>()
    {
        kotlin.random.jdk8.PlatformThreadLocalRandom r0;

        r0 := @this: kotlin.random.jdk8.PlatformThreadLocalRandom;

        specialinvoke r0.<kotlin.random.AbstractPlatformRandom: void <init>()>();

        return;
    }

    public java.util.Random getImpl()
    {
        java.util.Random $r2;
        kotlin.random.jdk8.PlatformThreadLocalRandom r0;
        java.util.concurrent.ThreadLocalRandom $r1;

        r0 := @this: kotlin.random.jdk8.PlatformThreadLocalRandom;

        $r1 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "current()");

        $r2 = (java.util.Random) $r1;

        return $r2;
    }

    public double nextDouble(double)
    {
        kotlin.random.jdk8.PlatformThreadLocalRandom r0;
        double $d0;
        java.util.concurrent.ThreadLocalRandom $r1;

        r0 := @this: kotlin.random.jdk8.PlatformThreadLocalRandom;

        $d0 := @parameter0: double;

        $r1 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        $d0 = virtualinvoke $r1.<java.util.concurrent.ThreadLocalRandom: double nextDouble(double)>($d0);

        return $d0;
    }

    public int nextInt(int, int)
    {
        java.util.concurrent.ThreadLocalRandom $r1;
        int $i0, $i1;
        kotlin.random.jdk8.PlatformThreadLocalRandom r0;

        r0 := @this: kotlin.random.jdk8.PlatformThreadLocalRandom;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        $i0 = virtualinvoke $r1.<java.util.concurrent.ThreadLocalRandom: int nextInt(int,int)>($i0, $i1);

        return $i0;
    }

    public long nextLong(long)
    {
        long $l0;
        kotlin.random.jdk8.PlatformThreadLocalRandom r0;
        java.util.concurrent.ThreadLocalRandom $r1;

        r0 := @this: kotlin.random.jdk8.PlatformThreadLocalRandom;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.ThreadLocalRandom: long nextLong(long)>($l0);

        return $l0;
    }

    public long nextLong(long, long)
    {
        java.util.concurrent.ThreadLocalRandom $r1;
        long $l0, $l1;
        kotlin.random.jdk8.PlatformThreadLocalRandom r0;

        r0 := @this: kotlin.random.jdk8.PlatformThreadLocalRandom;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.ThreadLocalRandom: long nextLong(long,long)>($l0, $l1);

        return $l0;
    }
}
