public final class kotlinx.coroutines.scheduling.DefaultIoScheduler extends kotlinx.coroutines.ExecutorCoroutineDispatcher implements java.util.concurrent.Executor
{
    public static final kotlinx.coroutines.scheduling.DefaultIoScheduler INSTANCE;
    private static final kotlinx.coroutines.CoroutineDispatcher 'default';

    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.DefaultIoScheduler $r0;
        kotlinx.coroutines.scheduling.UnlimitedIoScheduler $r1;
        int $i0;
        kotlinx.coroutines.CoroutineDispatcher $r2;

        $r0 = new kotlinx.coroutines.scheduling.DefaultIoScheduler;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.DefaultIoScheduler: void <init>()>();

        <kotlinx.coroutines.scheduling.DefaultIoScheduler: kotlinx.coroutines.scheduling.DefaultIoScheduler INSTANCE> = $r0;

        $r1 = <kotlinx.coroutines.scheduling.UnlimitedIoScheduler: kotlinx.coroutines.scheduling.UnlimitedIoScheduler INSTANCE>;

        $i0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int getAVAILABLE_PROCESSORS()>();

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>(64, $i0);

        $i0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>("kotlinx.coroutines.io.parallelism", $i0, 0, 0, 12, null);

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.UnlimitedIoScheduler: kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)>($i0);

        <kotlinx.coroutines.scheduling.DefaultIoScheduler: kotlinx.coroutines.CoroutineDispatcher 'default'> = $r2;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>();

        return;
    }

    public void close()
    {
        java.lang.IllegalStateException $r1;
        java.lang.String $r2;
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        $r1 = new java.lang.IllegalStateException;

        $r2 = "Cannot be invoked on Dispatchers.IO";

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 = <kotlinx.coroutines.scheduling.DefaultIoScheduler: kotlinx.coroutines.CoroutineDispatcher 'default'>;

        virtualinvoke $r3.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

        return;
    }

    public void dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 = <kotlinx.coroutines.scheduling.DefaultIoScheduler: kotlinx.coroutines.CoroutineDispatcher 'default'>;

        virtualinvoke $r3.<kotlinx.coroutines.CoroutineDispatcher: void dispatchYield(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

        return;
    }

    public void execute(java.lang.Runnable)
    {
        kotlin.coroutines.EmptyCoroutineContext $r2;
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r3 = (kotlin.coroutines.CoroutineContext) $r2;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.DefaultIoScheduler: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r3, $r1);

        return;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        java.util.concurrent.Executor $r1;
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        $r1 = (java.util.concurrent.Executor) r0;

        return $r1;
    }

    public kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)
    {
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;
        kotlinx.coroutines.scheduling.UnlimitedIoScheduler $r2;
        int $i0;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        $i0 := @parameter0: int;

        $r2 = <kotlinx.coroutines.scheduling.UnlimitedIoScheduler: kotlinx.coroutines.scheduling.UnlimitedIoScheduler INSTANCE>;

        $r1 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.UnlimitedIoScheduler: kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)>($i0);

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.scheduling.DefaultIoScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.DefaultIoScheduler;

        return "Dispatchers.IO";
    }
}
