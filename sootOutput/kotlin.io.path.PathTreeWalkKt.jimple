public final class kotlin.io.path.PathTreeWalkKt extends java.lang.Object
{

    public static final boolean access$createsCycle(kotlin.io.path.PathNode)
    {
        kotlin.io.path.PathNode $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.io.path.PathNode;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalkKt: boolean createsCycle(kotlin.io.path.PathNode)>($r0);

        return $z0;
    }

    public static final java.lang.Object access$keyOf(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Object $r2;
        java.nio.file.LinkOption[] $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

        $r2 = staticinvoke <kotlin.io.path.PathTreeWalkKt: java.lang.Object keyOf(java.nio.file.Path,java.nio.file.LinkOption[])>($r0, $r1);

        return $r2;
    }

    private static final boolean createsCycle(kotlin.io.path.PathNode)
    {
        java.io.IOException $r7;
        kotlin.io.path.PathNode $r0, $r1;
        java.lang.Object $r2, $r3;
        java.lang.SecurityException $r6;
        java.nio.file.Path $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlin.io.path.PathNode;

        $r1 = virtualinvoke $r0.<kotlin.io.path.PathNode: kotlin.io.path.PathNode getParent()>();

     label1:
        if $r1 == null goto label7;

        $r2 = virtualinvoke $r1.<kotlin.io.path.PathNode: java.lang.Object getKey()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r0.<kotlin.io.path.PathNode: java.lang.Object getKey()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r1.<kotlin.io.path.PathNode: java.lang.Object getKey()>();

        $r3 = virtualinvoke $r0.<kotlin.io.path.PathNode: java.lang.Object getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label6;

        return 1;

     label2:
        $r4 = virtualinvoke $r1.<kotlin.io.path.PathNode: java.nio.file.Path getPath()>();

        $r5 = virtualinvoke $r0.<kotlin.io.path.PathNode: java.nio.file.Path getPath()>();

        $z0 = staticinvoke <java.nio.file.Files: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>($r4, $r5);

     label3:
        if $z0 == 0 goto label6;

        return 1;

     label4:
        $r6 := @caughtexception;

        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        $r1 = virtualinvoke $r1.<kotlin.io.path.PathNode: kotlin.io.path.PathNode getParent()>();

        goto label1;

     label7:
        return 0;

        catch java.io.IOException from label2 to label3 with label5;
        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    private static final java.lang.Object keyOf(java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.lang.Throwable r5;
        java.lang.Object[] $r2;
        java.nio.file.LinkOption[] $r1;
        int $i0;
        java.lang.Object $r4;
        java.nio.file.attribute.BasicFileAttributes $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.LinkOption[];

     label1:
        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.LinkOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>($r0, class "Ljava/nio/file/attribute/BasicFileAttributes;", $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "readAttributes(this, A::class.java, *options)");

        $r4 = interfaceinvoke $r3.<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>();

     label2:
        return $r4;

     label3:
        r5 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
