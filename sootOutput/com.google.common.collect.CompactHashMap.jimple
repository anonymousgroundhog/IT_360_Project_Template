class com.google.common.collect.CompactHashMap extends java.util.AbstractMap implements java.io.Serializable
{
    static final double HASH_FLOODING_FPP;
    private static final int MAX_HASH_BUCKET_LENGTH;
    private static final java.lang.Object NOT_FOUND;
    transient int[] entries;
    private transient java.util.Set entrySetView;
    private transient java.util.Set keySetView;
    transient java.lang.Object[] keys;
    private transient int metadata;
    private transient int size;
    private transient java.lang.Object table;
    transient java.lang.Object[] values;
    private transient java.util.Collection valuesView;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <com.google.common.collect.CompactHashMap: int MAX_HASH_BUCKET_LENGTH> = 9;

        <com.google.common.collect.CompactHashMap: double HASH_FLOODING_FPP> = 0.001;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.google.common.collect.CompactHashMap: java.lang.Object NOT_FOUND> = $r0;

        return;
    }

    void <init>()
    {
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void init(int)>(3);

        return;
    }

    void <init>(int)
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void init(int)>($i0);

        return;
    }

    static int access$000(com.google.common.collect.CompactHashMap)
    {
        int i0;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        i0 = $r0.<com.google.common.collect.CompactHashMap: int metadata>;

        return i0;
    }

    static java.lang.Object access$100(com.google.common.collect.CompactHashMap, int)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $i0 := @parameter1: int;

        $r1 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: java.lang.Object key(int)>($i0);

        return $r1;
    }

    static java.lang.Object[] access$1000(com.google.common.collect.CompactHashMap)
    {
        java.lang.Object[] $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $r1 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        return $r1;
    }

    static java.lang.Object[] access$1100(com.google.common.collect.CompactHashMap)
    {
        java.lang.Object[] $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $r1 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireValues()>();

        return $r1;
    }

    static int access$1210(com.google.common.collect.CompactHashMap)
    {
        int $i0, $i1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $i0 = $r0.<com.google.common.collect.CompactHashMap: int size>;

        $i1 = $i0 + -1;

        $r0.<com.google.common.collect.CompactHashMap: int size> = $i1;

        return $i0;
    }

    static void access$1300(com.google.common.collect.CompactHashMap, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        specialinvoke $r0.<com.google.common.collect.CompactHashMap: void setValue(int,java.lang.Object)>($i0, $r1);

        return;
    }

    static java.lang.Object access$200(com.google.common.collect.CompactHashMap, java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $r1 := @parameter1: java.lang.Object;

        $r1 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: java.lang.Object removeHelper(java.lang.Object)>($r1);

        return $r1;
    }

    static java.lang.Object access$300()
    {
        java.lang.Object r0;

        r0 = <com.google.common.collect.CompactHashMap: java.lang.Object NOT_FOUND>;

        return r0;
    }

    static int access$500(com.google.common.collect.CompactHashMap, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $r1 := @parameter1: java.lang.Object;

        $i0 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: int indexOf(java.lang.Object)>($r1);

        return $i0;
    }

    static java.lang.Object access$600(com.google.common.collect.CompactHashMap, int)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $i0 := @parameter1: int;

        $r1 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: java.lang.Object value(int)>($i0);

        return $r1;
    }

    static int access$700(com.google.common.collect.CompactHashMap)
    {
        int $i0;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $i0 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: int hashTableMask()>();

        return $i0;
    }

    static java.lang.Object access$800(com.google.common.collect.CompactHashMap)
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap $r0;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $r1 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        return $r1;
    }

    static int[] access$900(com.google.common.collect.CompactHashMap)
    {
        com.google.common.collect.CompactHashMap $r0;
        int[] $r1;

        $r0 := @parameter0: com.google.common.collect.CompactHashMap;

        $r1 = specialinvoke $r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        return $r1;
    }

    public static com.google.common.collect.CompactHashMap create()
    {
        com.google.common.collect.CompactHashMap $r0;

        $r0 = new com.google.common.collect.CompactHashMap;

        specialinvoke $r0.<com.google.common.collect.CompactHashMap: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.CompactHashMap createWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.CompactHashMap $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.collect.CompactHashMap;

        specialinvoke $r0.<com.google.common.collect.CompactHashMap: void <init>(int)>($i0);

        return $r0;
    }

    private int entry(int)
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $i0 = $r1[$i0];

        return $i0;
    }

    private int hashTableMask()
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 = r0.<com.google.common.collect.CompactHashMap: int metadata>;

        $i0 = $i0 & 31;

        $i0 = 1 << $i0;

        $i0 = $i0 - 1;

        return $i0;
    }

    private int indexOf(java.lang.Object)
    {
        com.google.common.collect.CompactHashMap r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: boolean needsAllocArrays()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r1);

        $i2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int hashTableMask()>();

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        i0 = $i1 & $i2;

        $i3 = staticinvoke <com.google.common.collect.CompactHashing: int tableGet(java.lang.Object,int)>($r2, i0);

        i0 = $i3;

        if $i3 != 0 goto label2;

        return -1;

     label2:
        $i1 = staticinvoke <com.google.common.collect.CompactHashing: int getHashPrefix(int,int)>($i1, $i2);

     label3:
        i0 = i0 + -1;

        $i3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int entry(int)>(i0);

        $i4 = staticinvoke <com.google.common.collect.CompactHashing: int getHashPrefix(int,int)>($i3, $i2);

        if $i4 != $i1 goto label4;

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object key(int)>(i0);

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label4;

        return i0;

     label4:
        $i3 = staticinvoke <com.google.common.collect.CompactHashing: int getNext(int,int)>($i3, $i2);

        i0 = $i3;

        if $i3 != 0 goto label3;

        return -1;
    }

    private java.lang.Object key(int)
    {
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        $r2 = $r1[$i0];

        return $r2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream $r1;
        com.google.common.collect.CompactHashMap r0;
        int $i0, i1;
        java.io.InvalidObjectException r4;
        java.lang.Object $r2, $r3;
        java.lang.StringBuilder r5;
        java.lang.String $r6;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        if $i0 < 0 goto label3;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void init(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;

     label3:
        r4 = new java.io.InvalidObjectException;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>(int)>(25);

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid size: ");

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r6);

        throw r4;
    }

    private java.lang.Object removeHelper(java.lang.Object)
    {
        java.lang.Object[] $r4;
        com.google.common.collect.CompactHashMap r0;
        int[] $r3;
        int $i0, $i1;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: boolean needsAllocArrays()>();

        if $z0 == 0 goto label1;

        $r1 = <com.google.common.collect.CompactHashMap: java.lang.Object NOT_FOUND>;

        return $r1;

     label1:
        $i0 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int hashTableMask()>();

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        $r3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $r4 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        $i1 = staticinvoke <com.google.common.collect.CompactHashing: int remove(java.lang.Object,java.lang.Object,int,java.lang.Object,int[],java.lang.Object[],java.lang.Object[])>($r1, null, $i0, $r2, $r3, $r4, null);

        if $i1 != -1 goto label2;

        $r1 = <com.google.common.collect.CompactHashMap: java.lang.Object NOT_FOUND>;

        return $r1;

     label2:
        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object value(int)>($i1);

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void moveLastEntry(int,int)>($i1, $i0);

        $i0 = r0.<com.google.common.collect.CompactHashMap: int size>;

        $i0 = $i0 + -1;

        r0.<com.google.common.collect.CompactHashMap: int size> = $i0;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void incrementModCount()>();

        return $r1;
    }

    private int[] requireEntries()
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap r0;
        int[] $r2;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r2 = r0.<com.google.common.collect.CompactHashMap: int[] entries>;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r2 = (int[]) $r1;

        return $r2;
    }

    private java.lang.Object[] requireKeys()
    {
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r2 = r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] keys>;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    private java.lang.Object requireTable()
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = r0.<com.google.common.collect.CompactHashMap: java.lang.Object table>;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1);

        return $r1;
    }

    private java.lang.Object[] requireValues()
    {
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r2 = r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] values>;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    private void resizeMeMaybe(int)
    {
        int[] $r1;
        int $i0, i1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        i1 = lengthof $r1;

        if $i0 <= i1 goto label1;

        $i0 = i1 >>> 1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0);

        $i0 = $i0 + i1;

        $i0 = $i0 | 1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i0);

        if $i0 == i1 goto label1;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void resizeEntries(int)>($i0);

     label1:
        return;
    }

    private int resizeTable(int, int, int, int)
    {
        com.google.common.collect.CompactHashMap r0;
        int[] $r3;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, $i8;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = staticinvoke <com.google.common.collect.CompactHashing: java.lang.Object createTable(int)>($i1);

        $i1 = $i1 + -1;

        if $i3 == 0 goto label1;

        $i2 = $i2 & $i1;

        $i3 = $i3 + 1;

        staticinvoke <com.google.common.collect.CompactHashing: void tableSet(java.lang.Object,int,int)>($r1, $i2, $i3);

     label1:
        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        $r3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $i2 = 0;

     label2:
        if $i2 > $i0 goto label5;

        i6 = staticinvoke <com.google.common.collect.CompactHashing: int tableGet(java.lang.Object,int)>($r2, $i2);

     label3:
        if i6 == 0 goto label4;

        $i3 = i6 + -1;

        i4 = $r3[$i3];

        i5 = staticinvoke <com.google.common.collect.CompactHashing: int getHashPrefix(int,int)>(i4, $i0);

        i7 = i5 | $i2;

        i5 = i7 & $i1;

        $i8 = staticinvoke <com.google.common.collect.CompactHashing: int tableGet(java.lang.Object,int)>($r1, i5);

        staticinvoke <com.google.common.collect.CompactHashing: void tableSet(java.lang.Object,int,int)>($r1, i5, i6);

        i6 = staticinvoke <com.google.common.collect.CompactHashing: int maskCombine(int,int,int)>(i7, $i8, $i1);

        $r3[$i3] = i6;

        i6 = staticinvoke <com.google.common.collect.CompactHashing: int getNext(int,int)>(i4, $i0);

        goto label3;

     label4:
        $i2 = $i2 + 1;

        goto label2;

     label5:
        r0.<com.google.common.collect.CompactHashMap: java.lang.Object table> = $r1;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void setHashTableMask(int)>($i1);

        return $i1;
    }

    private void setEntry(int, int)
    {
        int[] $r1;
        int $i0, $i1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $r1[$i0] = $i1;

        return;
    }

    private void setHashTableMask(int)
    {
        int $i0, $i1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = 32 - $i0;

        $i1 = r0.<com.google.common.collect.CompactHashMap: int metadata>;

        $i0 = staticinvoke <com.google.common.collect.CompactHashing: int maskCombine(int,int,int)>($i1, $i0, 31);

        r0.<com.google.common.collect.CompactHashMap: int metadata> = $i0;

        return;
    }

    private void setKey(int, java.lang.Object)
    {
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Object r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        $r2[$i0] = r1;

        return;
    }

    private void setValue(int, java.lang.Object)
    {
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Object r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireValues()>();

        $r2[$i0] = r1;

        return;
    }

    private java.lang.Object value(int)
    {
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireValues()>();

        $r2 = $r1[$i0];

        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        int $i0;
        java.io.ObjectOutputStream $r1;
        java.lang.Object $r3;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: int size()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Iterator entrySetIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $r3 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        goto label1;

     label2:
        return;
    }

    void accessEntry(int)
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        return;
    }

    int adjustAfterRemove(int, int)
    {
        int $i0, $i1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 + -1;

        return $i0;
    }

    int allocArrays()
    {
        java.lang.Object[] $r3;
        int[] $r2;
        int i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: boolean needsAllocArrays()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Arrays already allocated");

        i0 = r0.<com.google.common.collect.CompactHashMap: int metadata>;

        $i1 = staticinvoke <com.google.common.collect.CompactHashing: int tableSize(int)>(i0);

        $r1 = staticinvoke <com.google.common.collect.CompactHashing: java.lang.Object createTable(int)>($i1);

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object table> = $r1;

        $i1 = $i1 + -1;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void setHashTableMask(int)>($i1);

        $r2 = newarray (int)[i0];

        r0.<com.google.common.collect.CompactHashMap: int[] entries> = $r2;

        $r3 = newarray (java.lang.Object)[i0];

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] keys> = $r3;

        $r3 = newarray (java.lang.Object)[i0];

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] values> = $r3;

        return i0;
    }

    public void clear()
    {
        java.lang.Object[] $r2;
        int[] $r4;
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r3;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: boolean needsAllocArrays()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void incrementModCount()>();

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r1 == null goto label2;

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: int size()>();

        $i0 = staticinvoke <com.google.common.primitives.Ints: int constrainToRange(int,int,int)>($i0, 3, 1073741823);

        r0.<com.google.common.collect.CompactHashMap: int metadata> = $i0;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object table> = null;

        r0.<com.google.common.collect.CompactHashMap: int size> = 0;

        return;

     label2:
        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        $i0 = r0.<com.google.common.collect.CompactHashMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, 0, $i0, null);

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireValues()>();

        $i0 = r0.<com.google.common.collect.CompactHashMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, 0, $i0, null);

        $r3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        staticinvoke <com.google.common.collect.CompactHashing: void tableClear(java.lang.Object)>($r3);

        $r4 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $i0 = r0.<com.google.common.collect.CompactHashMap: int size>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r4, 0, $i0, 0);

        r0.<com.google.common.collect.CompactHashMap: int size> = 0;

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;

     label1:
        $i0 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int indexOf(java.lang.Object)>($r1);

        if $i0 == -1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Map $r2;
        int i0, $i1;
        java.lang.Object $r1, $r3;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>($r1);

        return $z0;

     label1:
        i0 = 0;

     label2:
        $i1 = r0.<com.google.common.collect.CompactHashMap: int size>;

        if i0 >= $i1 goto label4;

        $r3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object value(int)>(i0);

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return 0;
    }

    java.util.Map convertToHashFloodingResistantImplementation()
    {
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r2, $r3;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int hashTableMask()>();

        $i0 = $i0 + 1;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map createHashFloodingResistantDelegate(int)>($i0);

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: int firstEntryIndex()>();

     label1:
        if $i0 < 0 goto label2;

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object key(int)>($i0);

        $r3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object value(int)>($i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: int getSuccessor(int)>($i0);

        goto label1;

     label2:
        r0.<com.google.common.collect.CompactHashMap: java.lang.Object table> = $r1;

        r0.<com.google.common.collect.CompactHashMap: int[] entries> = null;

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] keys> = null;

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] values> = null;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void incrementModCount()>();

        return $r1;
    }

    java.util.Set createEntrySet()
    {
        com.google.common.collect.CompactHashMap r0;
        com.google.common.collect.CompactHashMap$EntrySetView $r1;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = new com.google.common.collect.CompactHashMap$EntrySetView;

        specialinvoke $r1.<com.google.common.collect.CompactHashMap$EntrySetView: void <init>(com.google.common.collect.CompactHashMap)>(r0);

        return $r1;
    }

    java.util.Map createHashFloodingResistantDelegate(int)
    {
        int $i0;
        java.util.LinkedHashMap $r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F);

        return $r1;
    }

    java.util.Set createKeySet()
    {
        com.google.common.collect.CompactHashMap r0;
        com.google.common.collect.CompactHashMap$KeySetView $r1;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = new com.google.common.collect.CompactHashMap$KeySetView;

        specialinvoke $r1.<com.google.common.collect.CompactHashMap$KeySetView: void <init>(com.google.common.collect.CompactHashMap)>(r0);

        return $r1;
    }

    java.util.Collection createValues()
    {
        com.google.common.collect.CompactHashMap$ValuesView $r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = new com.google.common.collect.CompactHashMap$ValuesView;

        specialinvoke $r1.<com.google.common.collect.CompactHashMap$ValuesView: void <init>(com.google.common.collect.CompactHashMap)>(r0);

        return $r1;
    }

    java.util.Map delegateOrNull()
    {
        java.util.Map $r2;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = r0.<com.google.common.collect.CompactHashMap: java.lang.Object table>;

        $z0 = $r1 instanceof java.util.Map;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.collect.CompactHashMap: java.lang.Object table>;

        $r2 = (java.util.Map) $r1;

        return $r2;

     label1:
        return null;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = r0.<com.google.common.collect.CompactHashMap: java.util.Set entrySetView>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Set createEntrySet()>();

        r0.<com.google.common.collect.CompactHashMap: java.util.Set entrySetView> = $r1;

        return $r1;

     label1:
        $r1 = r0.<com.google.common.collect.CompactHashMap: java.util.Set entrySetView>;

        return $r1;
    }

    java.util.Iterator entrySetIterator()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        com.google.common.collect.CompactHashMap r0;
        com.google.common.collect.CompactHashMap$2 $r4;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;

     label1:
        $r4 = new com.google.common.collect.CompactHashMap$2;

        specialinvoke $r4.<com.google.common.collect.CompactHashMap$2: void <init>(com.google.common.collect.CompactHashMap)>(r0);

        return $r4;
    }

    int firstEntryIndex()
    {
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r2 == null goto label1;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        return $r1;

     label1:
        $i0 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int indexOf(java.lang.Object)>($r1);

        if $i0 != -1 goto label2;

        return null;

     label2:
        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void accessEntry(int)>($i0);

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object value(int)>($i0);

        return $r1;
    }

    int getSuccessor(int)
    {
        int $i0, $i1, $i2;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $i2 = $i0 + 1;

        $i1 = r0.<com.google.common.collect.CompactHashMap: int size>;

        if $i2 >= $i1 goto label1;

        $i0 = $i0 + 1;

        return $i0;

     label1:
        return -1;
    }

    void incrementModCount()
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 = r0.<com.google.common.collect.CompactHashMap: int metadata>;

        $i0 = $i0 + 32;

        r0.<com.google.common.collect.CompactHashMap: int metadata> = $i0;

        return;
    }

    void init(int)
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Expected size must be >= 0");

        $i0 = staticinvoke <com.google.common.primitives.Ints: int constrainToRange(int,int,int)>($i0, 1, 1073741823);

        r0.<com.google.common.collect.CompactHashMap: int metadata> = $i0;

        return;
    }

    void insertEntry(int, java.lang.Object, java.lang.Object, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.Object r1, r2;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i1 = staticinvoke <com.google.common.collect.CompactHashing: int maskCombine(int,int,int)>($i1, 0, $i2);

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void setEntry(int,int)>($i0, $i1);

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void setKey(int,java.lang.Object)>($i0, r1);

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void setValue(int,java.lang.Object)>($i0, r2);

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = r0.<com.google.common.collect.CompactHashMap: java.util.Set keySetView>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Set createKeySet()>();

        r0.<com.google.common.collect.CompactHashMap: java.util.Set keySetView> = $r1;

        return $r1;

     label1:
        $r1 = r0.<com.google.common.collect.CompactHashMap: java.util.Set keySetView>;

        return $r1;
    }

    java.util.Iterator keySetIterator()
    {
        com.google.common.collect.CompactHashMap$1 $r4;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;

     label1:
        $r4 = new com.google.common.collect.CompactHashMap$1;

        specialinvoke $r4.<com.google.common.collect.CompactHashMap$1: void <init>(com.google.common.collect.CompactHashMap)>(r0);

        return $r4;
    }

    void moveLastEntry(int, int)
    {
        java.lang.Object[] $r4, $r5;
        com.google.common.collect.CompactHashMap r0;
        int[] $r3;
        int $i0, $i1, i2, i3, $i4, i5, $i6;
        java.lang.Object r1, $r2, r6;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        $r3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $r4 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        $r5 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireValues()>();

        $i4 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: int size()>();

        i2 = $i4 + -1;

        if $i0 >= i2 goto label3;

        r1 = $r4[i2];

        $r4[$i0] = r1;

        r6 = $r5[i2];

        $r5[$i0] = r6;

        $r4[i2] = null;

        $r5[i2] = null;

        $i4 = $r3[i2];

        $r3[$i0] = $i4;

        $r3[i2] = 0;

        $i4 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        i5 = $i4 & $i1;

        i3 = staticinvoke <com.google.common.collect.CompactHashing: int tableGet(java.lang.Object,int)>($r2, i5);

        $i4 = i3;

        i2 = i2 + 1;

        if i3 != i2 goto label1;

        $i0 = $i0 + 1;

        staticinvoke <com.google.common.collect.CompactHashing: void tableSet(java.lang.Object,int,int)>($r2, i5, $i0);

        goto label2;

     label1:
        i5 = $i4 + -1;

        i3 = $r3[i5];

        $i6 = staticinvoke <com.google.common.collect.CompactHashing: int getNext(int,int)>(i3, $i1);

        $i4 = $i6;

        if $i6 != i2 goto label1;

        $i0 = $i0 + 1;

        $i0 = staticinvoke <com.google.common.collect.CompactHashing: int maskCombine(int,int,int)>(i3, $i0, $i1);

        $r3[i5] = $i0;

     label2:
        return;

     label3:
        $r4[$i0] = null;

        $r5[$i0] = null;

        $r3[$i0] = 0;

        return;
    }

    boolean needsAllocArrays()
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = r0.<com.google.common.collect.CompactHashMap: java.lang.Object table>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r5, $r6;
        int[] $r4;
        java.util.Map $r3;
        int i0, i1, $i2, $i3, i4, $i5, i6, i7, $i8;
        boolean $z0;
        com.google.common.collect.CompactHashMap r0;
        java.lang.Object r1, r2, $r7;

        r0 := @this: com.google.common.collect.CompactHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: boolean needsAllocArrays()>();

        if $z0 == 0 goto label01;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: int allocArrays()>();

     label01:
        $r3 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r3 == null goto label02;

        r1 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r1;

     label02:
        $r4 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $r5 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        $r6 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireValues()>();

        i0 = r0.<com.google.common.collect.CompactHashMap: int size>;

        i1 = i0 + 1;

        $i2 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        $i3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int hashTableMask()>();

        i4 = $i2 & $i3;

        $r7 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        $i5 = staticinvoke <com.google.common.collect.CompactHashing: int tableGet(java.lang.Object,int)>($r7, i4);

        i6 = $i5;

        if $i5 != 0 goto label04;

        if i1 <= $i3 goto label03;

        i4 = staticinvoke <com.google.common.collect.CompactHashing: int newCapacity(int)>($i3);

        $i3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int resizeTable(int,int,int,int)>($i3, i4, $i2, i0);

        goto label09;

     label03:
        $r7 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object requireTable()>();

        $i5 = i0 + 1;

        staticinvoke <com.google.common.collect.CompactHashing: void tableSet(java.lang.Object,int,int)>($r7, i4, $i5);

        goto label09;

     label04:
        i4 = staticinvoke <com.google.common.collect.CompactHashing: int getHashPrefix(int,int)>($i2, $i3);

        $i5 = 0;

     label05:
        i6 = i6 + -1;

        i7 = $r4[i6];

        $i8 = staticinvoke <com.google.common.collect.CompactHashing: int getHashPrefix(int,int)>(i7, $i3);

        if $i8 != i4 goto label06;

        $r7 = $r5[i6];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z0 == 0 goto label06;

        r1 = $r6[i6];

        $r6[i6] = r2;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void accessEntry(int)>(i6);

        return r1;

     label06:
        $i8 = staticinvoke <com.google.common.collect.CompactHashing: int getNext(int,int)>(i7, $i3);

        $i5 = $i5 + 1;

        if $i8 != 0 goto label10;

        if $i5 < 9 goto label07;

        $r3 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map convertToHashFloodingResistantImplementation()>();

        r1 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r1;

     label07:
        if i1 <= $i3 goto label08;

        i4 = staticinvoke <com.google.common.collect.CompactHashing: int newCapacity(int)>($i3);

        $i3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int resizeTable(int,int,int,int)>($i3, i4, $i2, i0);

        goto label09;

     label08:
        i4 = i0 + 1;

        i4 = staticinvoke <com.google.common.collect.CompactHashing: int maskCombine(int,int,int)>(i7, i4, $i3);

        $r4[i6] = i4;

     label09:
        specialinvoke r0.<com.google.common.collect.CompactHashMap: void resizeMeMaybe(int)>(i1);

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void insertEntry(int,java.lang.Object,java.lang.Object,int,int)>(i0, r1, r2, $i2, $i3);

        r0.<com.google.common.collect.CompactHashMap: int size> = i1;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void incrementModCount()>();

        return null;

     label10:
        i6 = $i8;

        goto label05;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object $r1, $r3;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r2 == null goto label1;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return $r1;

     label1:
        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object removeHelper(java.lang.Object)>($r1);

        $r3 = <com.google.common.collect.CompactHashMap: java.lang.Object NOT_FOUND>;

        if $r1 != $r3 goto label2;

        return null;

     label2:
        return $r1;
    }

    void resizeEntries(int)
    {
        java.lang.Object[] $r2;
        int[] $r1;
        int $i0;
        com.google.common.collect.CompactHashMap r0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0);

        r0.<com.google.common.collect.CompactHashMap: int[] entries> = $r1;

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireKeys()>();

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] keys> = $r2;

        $r2 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] requireValues()>();

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object[] values> = $r2;

        return;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.CompactHashMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;

     label1:
        $i0 = r0.<com.google.common.collect.CompactHashMap: int size>;

        return $i0;
    }

    public void trimToSize()
    {
        int[] $r3;
        java.util.Map $r1, $r2;
        int $i0, i1;
        com.google.common.collect.CompactHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: boolean needsAllocArrays()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r1 == null goto label2;

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: int size()>();

        $r2 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map createHashFloodingResistantDelegate(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r1);

        r0.<com.google.common.collect.CompactHashMap: java.lang.Object table> = $r2;

        return;

     label2:
        $i0 = r0.<com.google.common.collect.CompactHashMap: int size>;

        $r3 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int[] requireEntries()>();

        i1 = lengthof $r3;

        if $i0 >= i1 goto label3;

        virtualinvoke r0.<com.google.common.collect.CompactHashMap: void resizeEntries(int)>($i0);

     label3:
        $i0 = staticinvoke <com.google.common.collect.CompactHashing: int tableSize(int)>($i0);

        i1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int hashTableMask()>();

        if $i0 >= i1 goto label4;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: int resizeTable(int,int,int,int)>(i1, $i0, 0, 0);

     label4:
        return;
    }

    public java.util.Collection values()
    {
        com.google.common.collect.CompactHashMap r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = r0.<com.google.common.collect.CompactHashMap: java.util.Collection valuesView>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Collection createValues()>();

        r0.<com.google.common.collect.CompactHashMap: java.util.Collection valuesView> = $r1;

        return $r1;

     label1:
        $r1 = r0.<com.google.common.collect.CompactHashMap: java.util.Collection valuesView>;

        return $r1;
    }

    java.util.Iterator valuesIterator()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Collection $r2;
        com.google.common.collect.CompactHashMap r0;
        com.google.common.collect.CompactHashMap$3 $r4;

        r0 := @this: com.google.common.collect.CompactHashMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;

     label1:
        $r4 = new com.google.common.collect.CompactHashMap$3;

        specialinvoke $r4.<com.google.common.collect.CompactHashMap$3: void <init>(com.google.common.collect.CompactHashMap)>(r0);

        return $r4;
    }
}
