public abstract class kotlin.jvm.internal.PropertyReference2 extends kotlin.jvm.internal.PropertyReference implements kotlin.reflect.KProperty2
{

    public void <init>()
    {
        kotlin.jvm.internal.PropertyReference2 r0;

        r0 := @this: kotlin.jvm.internal.PropertyReference2;

        specialinvoke r0.<kotlin.jvm.internal.PropertyReference: void <init>()>();

        return;
    }

    public void <init>(java.lang.Class, java.lang.String, java.lang.String, int)
    {
        kotlin.jvm.internal.PropertyReference2 r0;
        int $i0;
        java.lang.Class $r1;
        java.lang.Object $r4;
        java.lang.String $r2, $r3;

        r0 := @this: kotlin.jvm.internal.PropertyReference2;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r4 = <kotlin.jvm.internal.PropertyReference2: java.lang.Object NO_RECEIVER>;

        specialinvoke r0.<kotlin.jvm.internal.PropertyReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>($r4, $r1, $r2, $r3, $i0);

        return;
    }

    protected kotlin.reflect.KCallable computeReflected()
    {
        kotlin.jvm.internal.PropertyReference2 r0;
        kotlin.reflect.KProperty2 $r1;

        r0 := @this: kotlin.jvm.internal.PropertyReference2;

        $r1 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2)>(r0);

        return $r1;
    }

    public java.lang.Object getDelegate(java.lang.Object, java.lang.Object)
    {
        kotlin.reflect.KProperty $r3;
        kotlin.jvm.internal.PropertyReference2 r0;
        kotlin.reflect.KProperty2 $r4;
        java.lang.Object $r1, $r2;

        r0 := @this: kotlin.jvm.internal.PropertyReference2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<kotlin.jvm.internal.PropertyReference2: kotlin.reflect.KProperty getReflected()>();

        $r4 = (kotlin.reflect.KProperty2) $r3;

        $r1 = interfaceinvoke $r4.<kotlin.reflect.KProperty2: java.lang.Object getDelegate(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    public volatile kotlin.reflect.KProperty$Getter getGetter()
    {
        kotlin.reflect.KProperty2$Getter $r1;
        kotlin.jvm.internal.PropertyReference2 r0;

        r0 := @this: kotlin.jvm.internal.PropertyReference2;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.PropertyReference2: kotlin.reflect.KProperty2$Getter getGetter()>();

        return $r1;
    }

    public kotlin.reflect.KProperty2$Getter getGetter()
    {
        kotlin.reflect.KProperty $r1;
        kotlin.jvm.internal.PropertyReference2 r0;
        kotlin.reflect.KProperty2 $r2;
        kotlin.reflect.KProperty2$Getter $r3;

        r0 := @this: kotlin.jvm.internal.PropertyReference2;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.PropertyReference2: kotlin.reflect.KProperty getReflected()>();

        $r2 = (kotlin.reflect.KProperty2) $r1;

        $r3 = interfaceinvoke $r2.<kotlin.reflect.KProperty2: kotlin.reflect.KProperty2$Getter getGetter()>();

        return $r3;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        kotlin.jvm.internal.PropertyReference2 r0;

        r0 := @this: kotlin.jvm.internal.PropertyReference2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<kotlin.jvm.internal.PropertyReference2: java.lang.Object get(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }
}
