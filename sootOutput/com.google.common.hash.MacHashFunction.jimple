final class com.google.common.hash.MacHashFunction extends com.google.common.hash.AbstractHashFunction
{
    private final int bits;
    private final java.security.Key key;
    private final javax.crypto.Mac prototype;
    private final boolean supportsClone;
    private final java.lang.String toString;

    void <init>(java.lang.String, java.security.Key, java.lang.String)
    {
        javax.crypto.Mac $r4;
        com.google.common.hash.MacHashFunction r0;
        java.security.Key $r2;
        int $i0;
        java.lang.Object $r5;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.hash.MacHashFunction;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.Key;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.google.common.hash.AbstractHashFunction: void <init>()>();

        $r4 = staticinvoke <com.google.common.hash.MacHashFunction: javax.crypto.Mac getMac(java.lang.String,java.security.Key)>($r1, $r2);

        r0.<com.google.common.hash.MacHashFunction: javax.crypto.Mac prototype> = $r4;

        $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r2 = (java.security.Key) $r5;

        r0.<com.google.common.hash.MacHashFunction: java.security.Key key> = $r2;

        $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r1 = (java.lang.String) $r5;

        r0.<com.google.common.hash.MacHashFunction: java.lang.String toString> = $r1;

        $r4 = r0.<com.google.common.hash.MacHashFunction: javax.crypto.Mac prototype>;

        $i0 = virtualinvoke $r4.<javax.crypto.Mac: int getMacLength()>();

        $i0 = $i0 * 8;

        r0.<com.google.common.hash.MacHashFunction: int bits> = $i0;

        $r4 = r0.<com.google.common.hash.MacHashFunction: javax.crypto.Mac prototype>;

        $z0 = staticinvoke <com.google.common.hash.MacHashFunction: boolean supportsClone(javax.crypto.Mac)>($r4);

        r0.<com.google.common.hash.MacHashFunction: boolean supportsClone> = $z0;

        return;
    }

    private static javax.crypto.Mac getMac(java.lang.String, java.security.Key)
    {
        java.security.Key $r1;
        java.lang.IllegalStateException $r6;
        java.security.NoSuchAlgorithmException r5;
        javax.crypto.Mac $r2;
        java.security.InvalidKeyException r3;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.Key;

     label1:
        $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r0);

        virtualinvoke $r2.<javax.crypto.Mac: void init(java.security.Key)>($r1);

     label2:
        return $r2;

     label3:
        r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

     label4:
        r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r5);

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
    }

    private static boolean supportsClone(javax.crypto.Mac)
    {
        javax.crypto.Mac $r0;
        java.lang.CloneNotSupportedException r1;

        $r0 := @parameter0: javax.crypto.Mac;

     label1:
        virtualinvoke $r0.<javax.crypto.Mac: java.lang.Object clone()>();

     label2:
        return 1;

     label3:
        r1 := @caughtexception;

        return 0;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public int bits()
    {
        com.google.common.hash.MacHashFunction r0;
        int i0;

        r0 := @this: com.google.common.hash.MacHashFunction;

        i0 = r0.<com.google.common.hash.MacHashFunction: int bits>;

        return i0;
    }

    public com.google.common.hash.Hasher newHasher()
    {
        com.google.common.hash.MacHashFunction$MacHasher $r2;
        javax.crypto.Mac $r3;
        java.lang.CloneNotSupportedException $r5;
        com.google.common.hash.MacHashFunction r0;
        java.security.Key $r1;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: com.google.common.hash.MacHashFunction;

        $z0 = r0.<com.google.common.hash.MacHashFunction: boolean supportsClone>;

        if $z0 == 0 goto label6;

        $r2 = new com.google.common.hash.MacHashFunction$MacHasher;

        $r3 = r0.<com.google.common.hash.MacHashFunction: javax.crypto.Mac prototype>;

     label1:
        $r4 = virtualinvoke $r3.<javax.crypto.Mac: java.lang.Object clone()>();

     label2:
        $r3 = (javax.crypto.Mac) $r4;

     label3:
        specialinvoke $r2.<com.google.common.hash.MacHashFunction$MacHasher: void <init>(javax.crypto.Mac,com.google.common.hash.MacHashFunction$1)>($r3, null);

     label4:
        return $r2;

     label5:
        $r5 := @caughtexception;

     label6:
        $r2 = new com.google.common.hash.MacHashFunction$MacHasher;

        $r3 = r0.<com.google.common.hash.MacHashFunction: javax.crypto.Mac prototype>;

        $r6 = virtualinvoke $r3.<javax.crypto.Mac: java.lang.String getAlgorithm()>();

        $r1 = r0.<com.google.common.hash.MacHashFunction: java.security.Key key>;

        $r3 = staticinvoke <com.google.common.hash.MacHashFunction: javax.crypto.Mac getMac(java.lang.String,java.security.Key)>($r6, $r1);

        specialinvoke $r2.<com.google.common.hash.MacHashFunction$MacHasher: void <init>(javax.crypto.Mac,com.google.common.hash.MacHashFunction$1)>($r3, null);

        return $r2;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
        catch java.lang.CloneNotSupportedException from label3 to label4 with label5;
    }

    public java.lang.String toString()
    {
        com.google.common.hash.MacHashFunction r0;
        java.lang.String r1;

        r0 := @this: com.google.common.hash.MacHashFunction;

        r1 = r0.<com.google.common.hash.MacHashFunction: java.lang.String toString>;

        return r1;
    }
}
