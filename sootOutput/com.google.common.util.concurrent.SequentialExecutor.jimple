final class com.google.common.util.concurrent.SequentialExecutor extends java.lang.Object implements java.util.concurrent.Executor
{
    private static final java.util.logging.Logger log;
    private final java.util.concurrent.Executor executor;
    private final java.util.Deque queue;
    private final com.google.common.util.concurrent.SequentialExecutor$QueueWorker worker;
    private long workerRunCount;
    private com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/common/util/concurrent/SequentialExecutor;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.util.concurrent.SequentialExecutor: java.util.logging.Logger log> = $r2;

        return;
    }

    void <init>(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r1;
        com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState $r4;
        com.google.common.util.concurrent.SequentialExecutor r0;
        java.lang.Object $r2;
        com.google.common.util.concurrent.SequentialExecutor$QueueWorker $r5;
        java.util.ArrayDeque $r3;

        r0 := @this: com.google.common.util.concurrent.SequentialExecutor;

        $r1 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue> = $r3;

        $r4 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState IDLE>;

        r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState> = $r4;

        r0.<com.google.common.util.concurrent.SequentialExecutor: long workerRunCount> = 0L;

        $r5 = new com.google.common.util.concurrent.SequentialExecutor$QueueWorker;

        specialinvoke $r5.<com.google.common.util.concurrent.SequentialExecutor$QueueWorker: void <init>(com.google.common.util.concurrent.SequentialExecutor,com.google.common.util.concurrent.SequentialExecutor$1)>(r0, null);

        r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$QueueWorker worker> = $r5;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.util.concurrent.Executor) $r2;

        r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.concurrent.Executor executor> = $r1;

        return;
    }

    static java.util.Deque access$100(com.google.common.util.concurrent.SequentialExecutor)
    {
        com.google.common.util.concurrent.SequentialExecutor $r0;
        java.util.Deque r1;

        $r0 := @parameter0: com.google.common.util.concurrent.SequentialExecutor;

        r1 = $r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue>;

        return r1;
    }

    static com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState access$200(com.google.common.util.concurrent.SequentialExecutor)
    {
        com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState r1;
        com.google.common.util.concurrent.SequentialExecutor $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.SequentialExecutor;

        r1 = $r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState>;

        return r1;
    }

    static com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState access$202(com.google.common.util.concurrent.SequentialExecutor, com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState)
    {
        com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState $r1;
        com.google.common.util.concurrent.SequentialExecutor $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.SequentialExecutor;

        $r1 := @parameter1: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState;

        $r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState> = $r1;

        return $r1;
    }

    static long access$308(com.google.common.util.concurrent.SequentialExecutor)
    {
        com.google.common.util.concurrent.SequentialExecutor $r0;
        long $l0, $l1;

        $r0 := @parameter0: com.google.common.util.concurrent.SequentialExecutor;

        $l0 = $r0.<com.google.common.util.concurrent.SequentialExecutor: long workerRunCount>;

        $l1 = 1L + $l0;

        $r0.<com.google.common.util.concurrent.SequentialExecutor: long workerRunCount> = $l1;

        return $l0;
    }

    static java.util.logging.Logger access$400()
    {
        java.util.logging.Logger r0;

        r0 = <com.google.common.util.concurrent.SequentialExecutor: java.util.logging.Logger log>;

        return r0;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Throwable r9, r10, r11, r12;
        long l0, $l1;
        java.util.Deque r3, $r6;
        java.lang.Runnable r1;
        byte b2;
        com.google.common.util.concurrent.SequentialExecutor$1 r2;
        com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState r4, $r5;
        com.google.common.util.concurrent.SequentialExecutor$QueueWorker $r8;
        boolean $z0, z1;
        java.util.concurrent.Executor r7;
        com.google.common.util.concurrent.SequentialExecutor r0;

        r0 := @this: com.google.common.util.concurrent.SequentialExecutor;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r3 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue>;

        entermonitor r3;

     label01:
        r4 = r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState>;

        $r5 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState RUNNING>;

        if r4 == $r5 goto label25;

        r4 = r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState>;

        $r5 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUED>;

        if r4 != $r5 goto label02;

        goto label25;

     label02:
        l0 = r0.<com.google.common.util.concurrent.SequentialExecutor: long workerRunCount>;

        r2 = new com.google.common.util.concurrent.SequentialExecutor$1;

        specialinvoke r2.<com.google.common.util.concurrent.SequentialExecutor$1: void <init>(com.google.common.util.concurrent.SequentialExecutor,java.lang.Runnable)>(r0, r1);

        $r6 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue>;

        interfaceinvoke $r6.<java.util.Deque: boolean add(java.lang.Object)>(r2);

        r4 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUING>;

        r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState> = r4;

        exitmonitor r3;

     label03:
        z1 = 1;

     label04:
        r7 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.concurrent.Executor executor>;

        $r8 = r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$QueueWorker worker>;

        interfaceinvoke r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8);

     label05:
        r4 = r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState>;

        $r5 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUING>;

        if r4 == $r5 goto label06;

        goto label07;

     label06:
        z1 = 0;

     label07:
        if z1 == 0 goto label08;

        return;

     label08:
        r3 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue>;

        entermonitor r3;

     label09:
        $l1 = r0.<com.google.common.util.concurrent.SequentialExecutor: long workerRunCount>;

        b2 = $l1 cmp l0;

        if b2 != 0 goto label10;

        r4 = r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState>;

        $r5 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUING>;

        if r4 != $r5 goto label10;

        r4 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUED>;

        r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState> = r4;

     label10:
        exitmonitor r3;

     label11:
        return;

     label12:
        r9 := @caughtexception;

        exitmonitor r3;

     label13:
        throw r9;

     label14:
        r10 := @caughtexception;

        goto label16;

     label15:
        r10 := @caughtexception;

     label16:
        r3 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue>;

        entermonitor r3;

     label17:
        r4 = r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState>;

        $r5 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState IDLE>;

        if r4 == $r5 goto label18;

        r4 = r0.<com.google.common.util.concurrent.SequentialExecutor: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState>;

        $r5 = <com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState: com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUING>;

        if r4 != $r5 goto label19;

     label18:
        $r6 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue>;

        $z0 = interfaceinvoke $r6.<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>(r2);

        if $z0 == 0 goto label19;

        goto label20;

     label19:
        z1 = 0;

     label20:
        $z0 = r10 instanceof java.util.concurrent.RejectedExecutionException;

        if $z0 == 0 goto label22;

        if z1 != 0 goto label22;

        exitmonitor r3;

     label21:
        return;

     label22:
        throw r10;

     label23:
        r11 := @caughtexception;

        exitmonitor r3;

     label24:
        throw r11;

     label25:
        $r6 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.Deque queue>;

        interfaceinvoke $r6.<java.util.Deque: boolean add(java.lang.Object)>(r1);

        exitmonitor r3;

     label26:
        return;

     label27:
        r12 := @caughtexception;

        exitmonitor r3;

     label28:
        throw r12;

        catch java.lang.Throwable from label01 to label03 with label27;
        catch java.lang.RuntimeException from label04 to label05 with label15;
        catch java.lang.Error from label04 to label05 with label14;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label17 to label21 with label23;
        catch java.lang.Throwable from label22 to label24 with label23;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.Executor $r2;
        int $i0, $i1;
        com.google.common.util.concurrent.SequentialExecutor r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r4;

        r0 := @this: com.google.common.util.concurrent.SequentialExecutor;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r2 = r0.<com.google.common.util.concurrent.SequentialExecutor: java.util.concurrent.Executor executor>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = $i1 + 32;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SequentialExecutor@");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
