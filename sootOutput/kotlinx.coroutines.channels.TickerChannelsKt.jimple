public final class kotlinx.coroutines.channels.TickerChannelsKt extends java.lang.Object
{

    public static final java.lang.Object access$fixedDelayTicker(long, long, kotlinx.coroutines.channels.SendChannel, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.channels.SendChannel $r0;
        long $l0, $l1;
        java.lang.Object $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: kotlinx.coroutines.channels.SendChannel;

        $r1 := @parameter3: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.channels.TickerChannelsKt: java.lang.Object fixedDelayTicker(long,long,kotlinx.coroutines.channels.SendChannel,kotlin.coroutines.Continuation)>($l0, $l1, $r0, $r1);

        return $r2;
    }

    public static final java.lang.Object access$fixedPeriodTicker(long, long, kotlinx.coroutines.channels.SendChannel, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.channels.SendChannel $r0;
        long $l0, $l1;
        java.lang.Object $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: kotlinx.coroutines.channels.SendChannel;

        $r1 := @parameter3: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.channels.TickerChannelsKt: java.lang.Object fixedPeriodTicker(long,long,kotlinx.coroutines.channels.SendChannel,kotlin.coroutines.Continuation)>($l0, $l1, $r0, $r1);

        return $r2;
    }

    private static final java.lang.Object fixedDelayTicker(long, long, kotlinx.coroutines.channels.SendChannel, kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException r6;
        kotlin.coroutines.Continuation $r1;
        long l0, l1;
        kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1 $r2, $r3;
        kotlin.Unit $r8;
        kotlinx.coroutines.channels.SendChannel r0;
        int $i2;
        java.lang.Object $r4, $r5, r7;
        boolean $z0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: kotlinx.coroutines.channels.SendChannel;

        $r1 := @parameter3: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1) $r1;

        $i2 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: int label>;

        $i2 = $i2 & -2147483648;

        if $i2 == 0 goto label1;

        $i2 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: int label>;

        $i2 = $i2 - -2147483648;

        $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: int label> = $i2;

        goto label2;

     label1:
        $r2 = new kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1;

        specialinvoke $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: void <init>(kotlin.coroutines.Continuation)>($r1);

     label2:
        $r3 = $r2;

        $r4 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i2 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: int label>;

        lookupswitch($i2)
        {
            case 0: goto label7;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            default: goto label3;
        };

     label3:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r6;

     label4:
        l0 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: long J$0>;

        r7 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.SendChannel) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label8;

     label5:
        l0 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: long J$0>;

        r7 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.SendChannel) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label9;

     label6:
        l0 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: long J$0>;

        r7 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.SendChannel) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label8;

     label7:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: java.lang.Object L$0> = r0;

        $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: long J$0> = l0;

        $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: int label> = 1;

        $r4 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>(l1, $r2);

        if $r4 != $r5 goto label8;

        return $r5;

     label8:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: long J$0> = l0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: int label> = 2;

        $r4 = interfaceinvoke r0.<kotlinx.coroutines.channels.SendChannel: java.lang.Object send(java.lang.Object,kotlin.coroutines.Continuation)>($r8, $r3);

        if $r4 != $r5 goto label9;

        return $r5;

     label9:
        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: long J$0> = l0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedDelayTicker$1: int label> = 3;

        $r4 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>(l0, $r3);

        if $r4 != $r5 goto label8;

        return $r5;
    }

    private static final java.lang.Object fixedPeriodTicker(long, long, kotlinx.coroutines.channels.SendChannel, kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException r6;
        kotlin.coroutines.Continuation $r1;
        long l0, l1, $l3, $l4;
        byte $b5;
        kotlinx.coroutines.channels.SendChannel r0;
        int $i2;
        boolean $z0;
        kotlin.Unit r9;
        kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1 $r2, $r3;
        java.lang.Object $r4, $r5, r7;
        kotlinx.coroutines.AbstractTimeSource $r8;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: kotlinx.coroutines.channels.SendChannel;

        $r1 := @parameter3: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1;

        if $z0 == 0 goto label01;

        $r2 = (kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1) $r1;

        $i2 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label>;

        $i2 = $i2 & -2147483648;

        if $i2 == 0 goto label01;

        $i2 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label>;

        $i2 = $i2 - -2147483648;

        $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label> = $i2;

        goto label02;

     label01:
        $r2 = new kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1;

        specialinvoke $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: void <init>(kotlin.coroutines.Continuation)>($r1);

     label02:
        $r3 = $r2;

        $r4 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i2 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label>;

        lookupswitch($i2)
        {
            case 0: goto label08;
            case 1: goto label07;
            case 2: goto label06;
            case 3: goto label05;
            case 4: goto label04;
            default: goto label03;
        };

     label03:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r6;

     label04:
        l0 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1>;

        l1 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0>;

        r7 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.SendChannel) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label13;

     label05:
        l0 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1>;

        l1 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0>;

        r7 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.SendChannel) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label13;

     label06:
        l0 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1>;

        l1 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0>;

        r7 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.SendChannel) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label14;

     label07:
        l1 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1>;

        l0 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0>;

        r7 = $r2.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.SendChannel) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label12;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r8 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r8 == null goto label09;

        $l3 = virtualinvoke $r8.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

        goto label10;

     label09:
        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l4 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: long delayToNanos(long)>(l1);

        $l3 = $l3 + $l4;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0> = l0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1> = $l3;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label> = 1;

        $r4 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>(l1, $r3);

        if $r4 != $r5 goto label11;

        return $r5;

     label11:
        l1 = $l3;

     label12:
        l0 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: long delayToNanos(long)>(l0);

     label13:
        l1 = l1 + l0;

        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0> = l1;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1> = l0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label> = 2;

        $r4 = interfaceinvoke r0.<kotlinx.coroutines.channels.SendChannel: java.lang.Object send(java.lang.Object,kotlin.coroutines.Continuation)>(r9, $r3);

        if $r4 != $r5 goto label14;

        return $r5;

     label14:
        $r8 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r8 == null goto label15;

        $l3 = virtualinvoke $r8.<kotlinx.coroutines.AbstractTimeSource: long nanoTime()>();

        goto label16;

     label15:
        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

     label16:
        $l4 = l1 - $l3;

        $l4 = staticinvoke <kotlin.ranges.RangesKt: long coerceAtLeast(long,long)>($l4, 0L);

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label18;

        $b5 = l0 cmp 0L;

        if $b5 == 0 goto label18;

        l1 = $l3 - l1;

        l1 = l1 % l0;

        $l4 = l0 - l1;

        l1 = $l3 + $l4;

        $l3 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: long delayNanosToMillis(long)>($l4);

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0> = l1;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1> = l0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label> = 3;

        $r4 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l3, $r3);

        if $r4 != $r5 goto label17;

        return $r5;

     label17:
        goto label13;

     label18:
        $l3 = staticinvoke <kotlinx.coroutines.EventLoop_commonKt: long delayNanosToMillis(long)>($l4);

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$0> = l1;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: long J$1> = l0;

        $r3.<kotlinx.coroutines.channels.TickerChannelsKt$fixedPeriodTicker$1: int label> = 4;

        $r4 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l3, $r3);

        if $r4 != $r5 goto label19;

        return $r5;

     label19:
        goto label13;
    }

    public static final kotlinx.coroutines.channels.ReceiveChannel ticker(long, long, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.TickerMode)
    {
        kotlinx.coroutines.channels.ReceiveChannel $r6;
        long $l0, $l1;
        kotlinx.coroutines.CoroutineScope $r3;
        byte $b2;
        kotlinx.coroutines.channels.TickerChannelsKt$ticker$3 $r9;
        int $i3;
        java.lang.String $r8;
        boolean $z0, $z1;
        kotlinx.coroutines.GlobalScope $r2;
        kotlinx.coroutines.CoroutineDispatcher $r4;
        kotlin.jvm.functions.Function2 $r5;
        java.lang.IllegalArgumentException $r11;
        kotlin.coroutines.CoroutineContext $r0;
        java.lang.StringBuilder $r7, $r10;
        kotlinx.coroutines.channels.TickerMode $r1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter3: kotlinx.coroutines.channels.TickerMode;

        $z0 = 1;

        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label6;

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $r2 = <kotlinx.coroutines.GlobalScope: kotlinx.coroutines.GlobalScope INSTANCE>;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r2;

        $r4 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getUnconfined()>();

        $r0 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r0);

        $r9 = new kotlinx.coroutines.channels.TickerChannelsKt$ticker$3;

        specialinvoke $r9.<kotlinx.coroutines.channels.TickerChannelsKt$ticker$3: void <init>(kotlinx.coroutines.channels.TickerMode,long,long,kotlin.coroutines.Continuation)>($r1, $l0, $l1, null);

        $r5 = (kotlin.jvm.functions.Function2) $r9;

        $r6 = staticinvoke <kotlinx.coroutines.channels.ProduceKt: kotlinx.coroutines.channels.ReceiveChannel produce(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,int,kotlin.jvm.functions.Function2)>($r3, $r0, 0, $r5);

        return $r6;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected non-negative initial delay, but has ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r11;

     label6:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected non-negative delay, but has ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r11;
    }

    public static kotlinx.coroutines.channels.ReceiveChannel ticker$default(long, long, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.TickerMode, int, java.lang.Object)
    {
        kotlinx.coroutines.channels.ReceiveChannel $r0;
        long $l0, $l1;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.EmptyCoroutineContext $r4;
        int $i2, $i3;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.TickerMode $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter3: kotlinx.coroutines.channels.TickerMode;

        $i2 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $l1 = $l0;

     label1:
        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $r4 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r1 = (kotlin.coroutines.CoroutineContext) $r4;

     label2:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label3;

        $r2 = <kotlinx.coroutines.channels.TickerMode: kotlinx.coroutines.channels.TickerMode FIXED_PERIOD>;

     label3:
        $r0 = staticinvoke <kotlinx.coroutines.channels.TickerChannelsKt: kotlinx.coroutines.channels.ReceiveChannel ticker(long,long,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.channels.TickerMode)>($l0, $l1, $r1, $r2);

        return $r0;
    }
}
