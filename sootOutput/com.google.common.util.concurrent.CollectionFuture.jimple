abstract class com.google.common.util.concurrent.CollectionFuture extends com.google.common.util.concurrent.AggregateFuture
{
    private java.util.List values;

    void <init>(com.google.common.collect.ImmutableCollection, boolean)
    {
        java.util.List $r2;
        com.google.common.util.concurrent.CollectionFuture r0;
        int $i0, $i1;
        com.google.common.collect.ImmutableCollection r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CollectionFuture;

        r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void <init>(com.google.common.collect.ImmutableCollection,boolean,boolean)>(r1, $z0, 1);

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: int size()>();

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

     label2:
        $i0 = 0;

     label3:
        $i1 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: int size()>();

        if $i0 >= $i1 goto label4;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(null);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        r0.<com.google.common.util.concurrent.CollectionFuture: java.util.List values> = $r2;

        return;
    }

    final void collectOneValue(int, java.lang.Object)
    {
        java.util.List r2;
        com.google.common.util.concurrent.CollectionFuture r0;
        int $i0;
        com.google.common.util.concurrent.CollectionFuture$Present $r3;
        java.lang.Object r1;

        r0 := @this: com.google.common.util.concurrent.CollectionFuture;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 = r0.<com.google.common.util.concurrent.CollectionFuture: java.util.List values>;

        if r2 == null goto label1;

        $r3 = new com.google.common.util.concurrent.CollectionFuture$Present;

        specialinvoke $r3.<com.google.common.util.concurrent.CollectionFuture$Present: void <init>(java.lang.Object)>(r1);

        interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r3);

     label1:
        return;
    }

    abstract java.lang.Object combine(java.util.List);

    final void handleAllCompleted()
    {
        java.util.List r1;
        java.lang.Object $r2;
        com.google.common.util.concurrent.CollectionFuture r0;

        r0 := @this: com.google.common.util.concurrent.CollectionFuture;

        r1 = r0.<com.google.common.util.concurrent.CollectionFuture: java.util.List values>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.CollectionFuture: java.lang.Object combine(java.util.List)>(r1);

        virtualinvoke r0.<com.google.common.util.concurrent.CollectionFuture: boolean set(java.lang.Object)>($r2);

     label1:
        return;
    }

    void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)
    {
        com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason $r1;
        com.google.common.util.concurrent.CollectionFuture r0;

        r0 := @this: com.google.common.util.concurrent.CollectionFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)>($r1);

        r0.<com.google.common.util.concurrent.CollectionFuture: java.util.List values> = null;

        return;
    }
}
