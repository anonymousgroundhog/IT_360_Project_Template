public final class kotlin.reflect.KTypeProjection$Companion extends java.lang.Object
{

    private void <init>()
    {
        kotlin.reflect.KTypeProjection$Companion r0;

        r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.reflect.KTypeProjection$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.reflect.KTypeProjection$Companion: void <init>()>();

        return;
    }

    public static void getStar$annotations()
    {
        return;
    }

    public final kotlin.reflect.KTypeProjection contravariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r1;
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KTypeProjection $r3;
        kotlin.reflect.KTypeProjection$Companion r0;

        r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "type");

        $r3 = new kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance IN>;

        specialinvoke $r3.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r2, $r1);

        return $r3;
    }

    public final kotlin.reflect.KTypeProjection covariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r1;
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KTypeProjection $r3;
        kotlin.reflect.KTypeProjection$Companion r0;

        r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "type");

        $r3 = new kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance OUT>;

        specialinvoke $r3.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r2, $r1);

        return $r3;
    }

    public final kotlin.reflect.KTypeProjection getSTAR()
    {
        kotlin.reflect.KTypeProjection r1;
        kotlin.reflect.KTypeProjection$Companion r0;

        r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        r1 = <kotlin.reflect.KTypeProjection: kotlin.reflect.KTypeProjection star>;

        return r1;
    }

    public final kotlin.reflect.KTypeProjection invariant(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r1;
        kotlin.reflect.KVariance $r2;
        kotlin.reflect.KTypeProjection $r3;
        kotlin.reflect.KTypeProjection$Companion r0;

        r0 := @this: kotlin.reflect.KTypeProjection$Companion;

        $r1 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "type");

        $r3 = new kotlin.reflect.KTypeProjection;

        $r2 = <kotlin.reflect.KVariance: kotlin.reflect.KVariance INVARIANT>;

        specialinvoke $r3.<kotlin.reflect.KTypeProjection: void <init>(kotlin.reflect.KVariance,kotlin.reflect.KType)>($r2, $r1);

        return $r3;
    }
}
