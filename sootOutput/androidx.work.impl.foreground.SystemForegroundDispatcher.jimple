public class androidx.work.impl.foreground.SystemForegroundDispatcher extends java.lang.Object implements androidx.work.impl.constraints.WorkConstraintsCallback, androidx.work.impl.ExecutionListener
{
    private static final java.lang.String ACTION_CANCEL_WORK;
    private static final java.lang.String ACTION_NOTIFY;
    private static final java.lang.String ACTION_START_FOREGROUND;
    private static final java.lang.String ACTION_STOP_FOREGROUND;
    private static final java.lang.String KEY_FOREGROUND_SERVICE_TYPE;
    private static final java.lang.String KEY_NOTIFICATION;
    private static final java.lang.String KEY_NOTIFICATION_ID;
    private static final java.lang.String KEY_WORKSPEC_ID;
    static final java.lang.String TAG;
    private androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback;
    final androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker;
    private android.content.Context mContext;
    java.lang.String mCurrentForegroundWorkSpecId;
    final java.util.Map mForegroundInfoById;
    final java.lang.Object mLock;
    private final androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor;
    final java.util.Set mTrackedWorkSpecs;
    private androidx.work.impl.WorkManagerImpl mWorkManagerImpl;
    final java.util.Map mWorkSpecById;

    static void <clinit>()
    {
        java.lang.String $r0;

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_WORKSPEC_ID> = "KEY_WORKSPEC_ID";

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_NOTIFICATION_ID> = "KEY_NOTIFICATION_ID";

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_NOTIFICATION> = "KEY_NOTIFICATION";

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String KEY_FOREGROUND_SERVICE_TYPE> = "KEY_FOREGROUND_SERVICE_TYPE";

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_STOP_FOREGROUND> = "ACTION_STOP_FOREGROUND";

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_START_FOREGROUND> = "ACTION_START_FOREGROUND";

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_NOTIFY> = "ACTION_NOTIFY";

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String ACTION_CANCEL_WORK> = "ACTION_CANCEL_WORK";

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("SystemFgDispatcher");

        <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG> = $r0;

        return;
    }

    void <init>(android.content.Context)
    {
        android.content.Context $r1;
        java.util.HashMap $r7;
        androidx.work.impl.Processor $r9;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r2;
        java.util.LinkedHashMap $r5;
        java.util.HashSet $r6;
        androidx.work.impl.constraints.WorkConstraintsTracker $r8;
        java.lang.Object $r3;
        androidx.work.impl.WorkManagerImpl $r4;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext> = $r1;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock> = $r3;

        $r1 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext>;

        $r4 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>($r1);

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl> = $r4;

        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r2 = virtualinvoke $r4.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r2;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String mCurrentForegroundWorkSpecId> = null;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById> = $r7;

        $r8 = new androidx.work.impl.constraints.WorkConstraintsTracker;

        $r1 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext>;

        $r2 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        specialinvoke $r8.<androidx.work.impl.constraints.WorkConstraintsTracker: void <init>(android.content.Context,androidx.work.impl.utils.taskexecutor.TaskExecutor,androidx.work.impl.constraints.WorkConstraintsCallback)>($r1, $r2, r0);

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker> = $r8;

        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r9 = virtualinvoke $r4.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r9.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        return;
    }

    void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl, androidx.work.impl.constraints.WorkConstraintsTracker)
    {
        android.content.Context $r1;
        java.util.HashMap $r8;
        androidx.work.impl.Processor $r9;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r5;
        java.util.LinkedHashMap $r6;
        java.util.HashSet $r7;
        androidx.work.impl.constraints.WorkConstraintsTracker $r3;
        androidx.work.impl.WorkManagerImpl $r2;
        java.lang.Object $r4;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r3 := @parameter2: androidx.work.impl.constraints.WorkConstraintsTracker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Context mContext> = $r1;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock> = $r4;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl> = $r2;

        $r2 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r5 = virtualinvoke $r2.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor> = $r5;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String mCurrentForegroundWorkSpecId> = null;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById> = $r8;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker> = $r3;

        $r2 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r9 = virtualinvoke $r2.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r9.<androidx.work.impl.Processor: void addExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        return;
    }

    public static android.content.Intent createCancelWorkIntent(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.Object[] $r3;
        android.net.Uri $r5;
        android.content.Intent r2;
        java.lang.String $r1, $r4;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_CANCEL_WORK");

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("workspec://%s", $r3);

        $r5 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r4);

        virtualinvoke r2.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r5);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("KEY_WORKSPEC_ID", $r1);

        return r2;
    }

    public static android.content.Intent createNotifyIntent(android.content.Context, java.lang.String, androidx.work.ForegroundInfo)
    {
        android.content.Context $r0;
        androidx.work.ForegroundInfo $r2;
        int $i0;
        android.app.Notification $r4;
        android.content.Intent r3;
        java.lang.String $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: androidx.work.ForegroundInfo;

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_NOTIFY");

        $i0 = virtualinvoke $r2.<androidx.work.ForegroundInfo: int getNotificationId()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_NOTIFICATION_ID", $i0);

        $i0 = virtualinvoke $r2.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_FOREGROUND_SERVICE_TYPE", $i0);

        $r4 = virtualinvoke $r2.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("KEY_NOTIFICATION", $r4);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("KEY_WORKSPEC_ID", $r1);

        return r3;
    }

    public static android.content.Intent createStartForegroundIntent(android.content.Context, java.lang.String, androidx.work.ForegroundInfo)
    {
        android.content.Context $r0;
        androidx.work.ForegroundInfo $r2;
        int $i0;
        android.app.Notification $r4;
        android.content.Intent r3;
        java.lang.String $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: androidx.work.ForegroundInfo;

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_START_FOREGROUND");

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("KEY_WORKSPEC_ID", $r1);

        $i0 = virtualinvoke $r2.<androidx.work.ForegroundInfo: int getNotificationId()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_NOTIFICATION_ID", $i0);

        $i0 = virtualinvoke $r2.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("KEY_FOREGROUND_SERVICE_TYPE", $i0);

        $r4 = virtualinvoke $r2.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("KEY_NOTIFICATION", $r4);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("KEY_WORKSPEC_ID", $r1);

        return r3;
    }

    public static android.content.Intent createStopForegroundIntent(android.content.Context)
    {
        android.content.Context $r0;
        android.content.Intent r1;

        $r0 := @parameter0: android.content.Context;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Landroidx/work/impl/foreground/SystemForegroundService;");

        virtualinvoke r1.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("ACTION_STOP_FOREGROUND");

        return r1;
    }

    private void handleCancelWork(android.content.Intent)
    {
        java.lang.Object[] $r4;
        android.content.Intent $r1;
        java.util.UUID $r8;
        androidx.work.Logger $r2;
        java.lang.Throwable[] $r6;
        androidx.work.impl.WorkManagerImpl $r7;
        java.lang.String $r3, $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        boolean $z0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: android.content.Intent;

        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r3 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stopping foreground work for %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.<androidx.work.Logger: void info(java.lang.String,java.lang.String,java.lang.Throwable[])>($r3, $r5, $r6);

        $r3 = virtualinvoke $r1.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("KEY_WORKSPEC_ID");

        if $r3 == null goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label1;

        $r7 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r8 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>($r3);

        virtualinvoke $r7.<androidx.work.impl.WorkManagerImpl: androidx.work.Operation cancelWorkById(java.util.UUID)>($r8);

     label1:
        return;
    }

    private void handleNotify(android.content.Intent)
    {
        java.lang.Object[] $r9;
        android.content.Intent $r1;
        java.lang.Integer $r7, $r8;
        androidx.work.Logger $r5;
        androidx.work.ForegroundInfo r13;
        java.util.Map r14;
        int $i0, $i1;
        java.lang.String $r2, r6, $r10;
        boolean $z0;
        java.util.Map$Entry r18;
        android.os.Parcelable $r3;
        java.util.Iterator $r16;
        java.util.Set $r15;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback r12;
        java.lang.Throwable[] r11;
        android.app.Notification r4;
        java.lang.Object $r17;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: android.content.Intent;

        $i0 = virtualinvoke $r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("KEY_NOTIFICATION_ID", 0);

        $i1 = virtualinvoke $r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("KEY_FOREGROUND_SERVICE_TYPE", 0);

        $r2 = virtualinvoke $r1.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("KEY_WORKSPEC_ID");

        $r3 = virtualinvoke $r1.<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>("KEY_NOTIFICATION");

        r4 = (android.app.Notification) $r3;

        $r5 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r6 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = $r7;

        $r9[1] = $r2;

        $r9[2] = $r8;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Notifying with (id: %s, workSpecId: %s, notificationType: %s)", $r9);

        r11 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r5.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>(r6, $r10, r11);

        if r4 == null goto label4;

        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if r12 == null goto label4;

        r13 = new androidx.work.ForegroundInfo;

        specialinvoke r13.<androidx.work.ForegroundInfo: void <init>(int,android.app.Notification,int)>($i0, r4, $i1);

        r14 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r13);

        r6 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String mCurrentForegroundWorkSpecId>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z0 == 0 goto label1;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String mCurrentForegroundWorkSpecId> = $r2;

        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        interfaceinvoke r12.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void startForeground(int,int,android.app.Notification)>($i0, $i1, r4);

        return;

     label1:
        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        interfaceinvoke r12.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void notify(int,android.app.Notification)>($i0, r4);

        if $i1 == 0 goto label4;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 29 goto label4;

        $i0 = 0;

        r14 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $r15 = interfaceinvoke r14.<java.util.Map: java.util.Set entrySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.util.Map$Entry) $r17;

        $r17 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (androidx.work.ForegroundInfo) $r17;

        $i1 = virtualinvoke r13.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        $i0 = $i0 | $i1;

        goto label2;

     label3:
        r14 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $r2 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String mCurrentForegroundWorkSpecId>;

        $r17 = interfaceinvoke r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r13 = (androidx.work.ForegroundInfo) $r17;

        if r13 == null goto label4;

        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        $i1 = virtualinvoke r13.<androidx.work.ForegroundInfo: int getNotificationId()>();

        r4 = virtualinvoke r13.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        interfaceinvoke r12.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void startForeground(int,int,android.app.Notification)>($i1, $i0, r4);

     label4:
        return;
    }

    private void handleStartForeground(android.content.Intent)
    {
        java.lang.Object[] $r4;
        androidx.work.impl.foreground.SystemForegroundDispatcher$1 $r10;
        android.content.Intent $r1;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r9;
        androidx.work.Logger $r2;
        androidx.work.impl.WorkDatabase $r8;
        java.lang.Throwable[] $r6;
        androidx.work.impl.WorkManagerImpl r7;
        java.lang.String r3, $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: android.content.Intent;

        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r3 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Started foreground service %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.<androidx.work.Logger: void info(java.lang.String,java.lang.String,java.lang.Throwable[])>(r3, $r5, $r6);

        r3 = virtualinvoke $r1.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("KEY_WORKSPEC_ID");

        r7 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r8 = virtualinvoke r7.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r9 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.utils.taskexecutor.TaskExecutor mTaskExecutor>;

        $r10 = new androidx.work.impl.foreground.SystemForegroundDispatcher$1;

        specialinvoke $r10.<androidx.work.impl.foreground.SystemForegroundDispatcher$1: void <init>(androidx.work.impl.foreground.SystemForegroundDispatcher,androidx.work.impl.WorkDatabase,java.lang.String)>(r0, $r8, r3);

        interfaceinvoke $r9.<androidx.work.impl.utils.taskexecutor.TaskExecutor: void executeOnBackgroundThread(java.lang.Runnable)>($r10);

        return;
    }

    androidx.work.impl.WorkManagerImpl getWorkManager()
    {
        androidx.work.impl.WorkManagerImpl r1;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        return r1;
    }

    void handleStop(android.content.Intent)
    {
        androidx.work.Logger $r3;
        java.lang.Throwable[] $r4;
        android.content.Intent $r1;
        java.lang.String $r2;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: android.content.Intent;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r2 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r4 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r3.<androidx.work.Logger: void info(java.lang.String,java.lang.String,java.lang.Throwable[])>($r2, "Stopping foreground service", $r4);

        $r5 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if $r5 == null goto label1;

        $r5 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        interfaceinvoke $r5.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void stop()>();

     label1:
        return;
    }

    public void onAllConstraintsMet(java.util.List)
    {
        java.util.List r1;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: java.util.List;

        return;
    }

    public void onAllConstraintsNotMet(java.util.List)
    {
        java.lang.Object[] $r7;
        java.util.Iterator $r3;
        java.util.List r1;
        androidx.work.Logger $r6;
        java.lang.Throwable[] $r9;
        java.lang.Object $r4;
        androidx.work.impl.WorkManagerImpl $r10;
        java.lang.String $r2, r5, $r8;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        boolean $z0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r2 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r5;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Constraints unmet for WorkSpec %s", $r7);

        $r9 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r6.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>($r2, $r8, $r9);

        $r10 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        virtualinvoke $r10.<androidx.work.impl.WorkManagerImpl: void stopForegroundWork(java.lang.String)>(r5);

        goto label1;

     label2:
        return;
    }

    void onDestroy()
    {
        java.lang.Throwable $r5;
        androidx.work.impl.constraints.WorkConstraintsTracker $r3;
        java.lang.Object $r2;
        androidx.work.impl.WorkManagerImpl $r4;
        androidx.work.impl.Processor $r1;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback> = null;

        $r2 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker>;

        virtualinvoke $r3.<androidx.work.impl.constraints.WorkConstraintsTracker: void reset()>();

        exitmonitor $r2;

     label2:
        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.WorkManagerImpl mWorkManagerImpl>;

        $r1 = virtualinvoke $r4.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        virtualinvoke $r1.<androidx.work.impl.Processor: void removeExecutionListener(androidx.work.impl.ExecutionListener)>(r0);

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onExecuted(java.lang.String, boolean)
    {
        java.lang.Throwable r20;
        java.lang.Object[] $r18;
        java.lang.Integer $r16, $r17;
        androidx.work.impl.model.WorkSpec r5;
        androidx.work.Logger $r15;
        androidx.work.impl.constraints.WorkConstraintsTracker r7;
        androidx.work.ForegroundInfo r8, r13;
        java.util.Map r3;
        int $i0, $i1;
        java.lang.String $r1, r9;
        boolean $z0;
        java.util.Map$Entry r11;
        java.util.Iterator $r10;
        java.util.Set r6;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback r12;
        java.lang.Throwable[] $r19;
        android.app.Notification $r14;
        java.lang.Object r2, $r4;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z0 = 0;

        r2 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mWorkSpecById>;

        $r4 = interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        r5 = (androidx.work.impl.model.WorkSpec) $r4;

        if r5 == null goto label02;

        r6 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs>;

        $z0 = interfaceinvoke r6.<java.util.Set: boolean remove(java.lang.Object)>(r5);

     label02:
        if $z0 == 0 goto label03;

        r7 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.constraints.WorkConstraintsTracker mConstraintsTracker>;

        r6 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Set mTrackedWorkSpecs>;

        virtualinvoke r7.<androidx.work.impl.constraints.WorkConstraintsTracker: void replace(java.lang.Iterable)>(r6);

     label03:
        exitmonitor r2;

     label04:
        r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        r2 = interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        r8 = (androidx.work.ForegroundInfo) r2;

        r9 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String mCurrentForegroundWorkSpecId>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label07;

        r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        $i0 = interfaceinvoke r3.<java.util.Map: int size()>();

        if $i0 <= 0 goto label07;

        r3 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.util.Map mForegroundInfoById>;

        r6 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>();

        r2 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) r2;

     label05:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        r2 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) r2;

        goto label05;

     label06:
        r2 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) r2;

        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String mCurrentForegroundWorkSpecId> = r9;

        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if r12 == null goto label07;

        r2 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (androidx.work.ForegroundInfo) r2;

        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        $i0 = virtualinvoke r13.<androidx.work.ForegroundInfo: int getNotificationId()>();

        $i1 = virtualinvoke r13.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        $r14 = virtualinvoke r13.<androidx.work.ForegroundInfo: android.app.Notification getNotification()>();

        interfaceinvoke r12.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void startForeground(int,int,android.app.Notification)>($i0, $i1, $r14);

        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        $i0 = virtualinvoke r13.<androidx.work.ForegroundInfo: int getNotificationId()>();

        interfaceinvoke r12.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void cancelNotification(int)>($i0);

     label07:
        r12 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if r8 == null goto label11;

        if r12 == null goto label11;

        $r15 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r9 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $i0 = virtualinvoke r8.<androidx.work.ForegroundInfo: int getNotificationId()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i0 = virtualinvoke r8.<androidx.work.ForegroundInfo: int getForegroundServiceType()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r18 = newarray (java.lang.Object)[3];

        $r18[0] = $r16;

        $r18[1] = $r1;

        $r18[2] = $r17;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Removing Notification (id: %s, workSpecId: %s ,notificationType: %s)", $r18);

        $r19 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r15.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>(r9, $r1, $r19);

        $i0 = virtualinvoke r8.<androidx.work.ForegroundInfo: int getNotificationId()>();

        interfaceinvoke r12.<androidx.work.impl.foreground.SystemForegroundDispatcher$Callback: void cancelNotification(int)>($i0);

        return;

     label08:
        r20 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw r20;

     label11:
        return;

        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void onStartCommand(android.content.Intent)
    {
        android.content.Intent $r1;
        java.lang.String $r2, $r3;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;
        boolean $z0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke $r1.<android.content.Intent: java.lang.String getAction()>();

        $r3 = "ACTION_START_FOREGROUND";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleStartForeground(android.content.Intent)>($r1);

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleNotify(android.content.Intent)>($r1);

        return;

     label1:
        $r3 = "ACTION_NOTIFY";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleNotify(android.content.Intent)>($r1);

        return;

     label2:
        $r3 = "ACTION_CANCEL_WORK";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        specialinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleCancelWork(android.content.Intent)>($r1);

        return;

     label3:
        $r3 = "ACTION_STOP_FOREGROUND";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        virtualinvoke r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: void handleStop(android.content.Intent)>($r1);

     label4:
        return;
    }

    void setCallback(androidx.work.impl.foreground.SystemForegroundDispatcher$Callback)
    {
        androidx.work.Logger $r3;
        java.lang.Throwable[] $r5;
        androidx.work.impl.foreground.SystemForegroundDispatcher$Callback $r1, $r4;
        java.lang.String $r2;
        androidx.work.impl.foreground.SystemForegroundDispatcher r0;

        r0 := @this: androidx.work.impl.foreground.SystemForegroundDispatcher;

        $r1 := @parameter0: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback;

        $r4 = r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback>;

        if $r4 == null goto label1;

        $r3 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r2 = <androidx.work.impl.foreground.SystemForegroundDispatcher: java.lang.String TAG>;

        $r5 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r3.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable[])>($r2, "A callback already exists.", $r5);

        return;

     label1:
        r0.<androidx.work.impl.foreground.SystemForegroundDispatcher: androidx.work.impl.foreground.SystemForegroundDispatcher$Callback mCallback> = $r1;

        return;
    }
}
