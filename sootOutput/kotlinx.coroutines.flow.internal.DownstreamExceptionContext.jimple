public final class kotlinx.coroutines.flow.internal.DownstreamExceptionContext extends java.lang.Object implements kotlin.coroutines.CoroutineContext
{
    private final kotlin.coroutines.CoroutineContext $$delegate_0;
    public final java.lang.Throwable e;

    public void <init>(java.lang.Throwable, kotlin.coroutines.CoroutineContext)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext r0;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: java.lang.Throwable e> = $r1;

        r0.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: kotlin.coroutines.CoroutineContext $$delegate_0> = $r2;

        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext r0;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 = r0.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: kotlin.coroutines.CoroutineContext $$delegate_0>;

        $r1 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>($r1, $r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CoroutineContext$Element $r2;
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext r0;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r3 = r0.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: kotlin.coroutines.CoroutineContext $$delegate_0>;

        $r2 = interfaceinvoke $r3.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CoroutineContext$Key $r1;
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext r0;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = r0.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: kotlin.coroutines.CoroutineContext $$delegate_0>;

        $r2 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>($r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.flow.internal.DownstreamExceptionContext r0;
        kotlin.coroutines.CoroutineContext $r1, $r2;

        r0 := @this: kotlinx.coroutines.flow.internal.DownstreamExceptionContext;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 = r0.<kotlinx.coroutines.flow.internal.DownstreamExceptionContext: kotlin.coroutines.CoroutineContext $$delegate_0>;

        $r1 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r1);

        return $r1;
    }
}
