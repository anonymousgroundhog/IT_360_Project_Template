public class kotlinx.coroutines.CancellableContinuationImpl extends kotlinx.coroutines.DispatchedTask implements kotlinx.coroutines.CancellableContinuation, kotlin.coroutines.jvm.internal.CoroutineStackFrame, kotlinx.coroutines.Waiter
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _parentHandle$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU;
    private volatile int _decisionAndIndex;
    private volatile java.lang.Object _parentHandle;
    private volatile java.lang.Object _state;
    private final kotlin.coroutines.CoroutineContext context;
    private final kotlin.coroutines.Continuation delegate;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/CancellableContinuationImpl;", "_decisionAndIndex");

        <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/CancellableContinuationImpl;", class "Ljava/lang/Object;", "_state");

        <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/CancellableContinuationImpl;", class "Ljava/lang/Object;", "_parentHandle");

        <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _parentHandle$FU> = $r1;

        return;
    }

    public void <init>(kotlin.coroutines.Continuation, int)
    {
        kotlinx.coroutines.Active $r3;
        kotlin.coroutines.Continuation $r1;
        int $i0;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.AssertionError $r4;
        kotlin.coroutines.CoroutineContext $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $i0 := @parameter1: int;

        specialinvoke r0.<kotlinx.coroutines.DispatchedTask: void <init>(int)>($i0);

        r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate> = $r1;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $r1 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext context> = $r2;

        $i0 = 0 << 29;

        $i0 = $i0 + 536870911;

        r0.<kotlinx.coroutines.CancellableContinuationImpl: int _decisionAndIndex> = $i0;

        $r3 = <kotlinx.coroutines.Active: kotlinx.coroutines.Active INSTANCE>;

        r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state> = $r3;

        return;
    }

    private final java.lang.Void alreadyResumedError(java.lang.Object)
    {
        java.lang.IllegalStateException $r2;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.String $r4;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already resumed, but proposed with update ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    private final void callCancelHandler(kotlin.jvm.functions.Function1, java.lang.Throwable)
    {
        java.lang.Throwable $r2, $r3;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.CompletionHandlerException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: java.lang.Throwable;

     label1:
        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = new kotlinx.coroutines.CompletionHandlerException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in invokeOnCancellation handler for ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r3);

        $r2 = (java.lang.Throwable) $r5;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r4, $r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private final void callCancelHandlerSafely(kotlin.jvm.functions.Function0)
    {
        java.lang.Throwable r2;
        java.lang.StringBuilder $r5;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.String $r6;
        kotlin.jvm.functions.Function0 $r1;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.coroutines.CompletionHandlerException $r4;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

     label1:
        interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r4 = new kotlinx.coroutines.CompletionHandlerException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in invokeOnCancellation handler for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r2);

        r2 = (java.lang.Throwable) $r4;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r3, r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private final void callSegmentOnCancellation(kotlinx.coroutines.internal.Segment, java.lang.Throwable)
    {
        java.lang.Throwable $r2, $r5;
        java.lang.IllegalStateException $r9;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.CompletionHandlerException $r6;
        kotlinx.coroutines.internal.Segment $r1;
        int $i0;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.internal.Segment;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i0 = $i0 & 536870911;

        if $i0 == 536870911 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label7;

     label3:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        virtualinvoke $r1.<kotlinx.coroutines.internal.Segment: void onCancellation(int,java.lang.Throwable,kotlin.coroutines.CoroutineContext)>($i0, $r2, $r4);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r6 = new kotlinx.coroutines.CompletionHandlerException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in invokeOnCancellation handler for ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r5);

        $r2 = (java.lang.Throwable) $r6;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r4, $r2);

     label6:
        return;

     label7:
        $r9 = new java.lang.IllegalStateException;

        $r8 = "The index for Segment.onCancellation(..) is broken";

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private final boolean cancelLater(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlin.coroutines.Continuation r2;
        kotlinx.coroutines.internal.DispatchedContinuation r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isReusable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r2, "null cannot be cast to non-null type kotlinx.coroutines.internal.DispatchedContinuation<*>");

        r3 = (kotlinx.coroutines.internal.DispatchedContinuation) r2;

        $z0 = virtualinvoke r3.<kotlinx.coroutines.internal.DispatchedContinuation: boolean postponeCancellation(java.lang.Throwable)>($r1);

        return $z0;
    }

    private final void detachChildIfNonResuable()
    {
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isReusable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$kotlinx_coroutines_core()>();

     label1:
        return;
    }

    private final void dispatchResume(int)
    {
        kotlinx.coroutines.DispatchedTask $r1;
        int $i0;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $i0 := @parameter0: int;

        $z0 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean tryResume()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = (kotlinx.coroutines.DispatchedTask) r0;

        staticinvoke <kotlinx.coroutines.DispatchedTaskKt: void dispatch(kotlinx.coroutines.DispatchedTask,int)>($r1, $i0);

        return;
    }

    private final kotlinx.coroutines.DisposableHandle getParentHandle()
    {
        kotlinx.coroutines.DisposableHandle $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _parentHandle$FU>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (kotlinx.coroutines.DisposableHandle) $r1;

        return $r3;
    }

    private final java.lang.String getStateDebugRepresentation()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()>();

        $z0 = $r1 instanceof kotlinx.coroutines.NotCompleted;

        if $z0 == 0 goto label1;

        return "Active";

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.CancelledContinuation;

        if $z0 == 0 goto label2;

        return "Cancelled";

     label2:
        return "Completed";
    }

    private final kotlinx.coroutines.DisposableHandle installParentHandle()
    {
        kotlinx.coroutines.Job$Key r2;
        kotlinx.coroutines.Job r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r10;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlin.jvm.functions.Function1 $r8;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.CompletionHandlerBase $r7;
        kotlinx.coroutines.DisposableHandle $r9;
        kotlin.coroutines.CoroutineContext$Key r3;
        kotlinx.coroutines.ChildContinuation $r6;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        r3 = (kotlin.coroutines.CoroutineContext$Key) r2;

        $r4 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r3);

        r5 = (kotlinx.coroutines.Job) $r4;

        if r5 != null goto label1;

        return null;

     label1:
        $r6 = new kotlinx.coroutines.ChildContinuation;

        specialinvoke $r6.<kotlinx.coroutines.ChildContinuation: void <init>(kotlinx.coroutines.CancellableContinuationImpl)>(r0);

        $r7 = (kotlinx.coroutines.CompletionHandlerBase) $r6;

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r9 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r5, 1, 0, $r8, 2, null);

        $r10 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _parentHandle$FU>;

        staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r10, r0, null, $r9);

        return $r9;
    }

    private final void invokeOnCancellationImpl(java.lang.Object)
    {
        java.lang.Throwable r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3, r5;
        kotlinx.coroutines.CompletedExceptionally r6;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.AssertionError $r2;
        kotlinx.coroutines.internal.Segment r9;
        kotlinx.coroutines.CompletedContinuation r10;
        kotlinx.coroutines.CancelHandler r8;
        java.lang.Object $r1, $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label05;

        $z0 = $r1 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 != 0 goto label02;

        $z0 = $r1 instanceof kotlinx.coroutines.internal.Segment;

        if $z0 == 0 goto label01;

        goto label02;

     label01:
        $z0 = 0;

        goto label03;

     label02:
        $z0 = 1;

     label03:
        if $z0 == 0 goto label04;

        goto label05;

     label04:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label05:
        $r3 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

     label06:
        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $z0 = $r4 instanceof kotlinx.coroutines.Active;

        if $z0 == 0 goto label07;

        r5 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r5, r0, $r4, $r1);

        if $z0 == 0 goto label22;

        return;

     label07:
        $z0 = $r4 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = $r4 instanceof kotlinx.coroutines.internal.Segment;

     label09:
        if $z0 == 0 goto label10;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void multipleHandlersError(java.lang.Object,java.lang.Object)>($r1, $r4);

        goto label22;

     label10:
        $z0 = $r4 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label16;

        r6 = (kotlinx.coroutines.CompletedExceptionally) $r4;

        $z0 = virtualinvoke r6.<kotlinx.coroutines.CompletedExceptionally: boolean makeHandled()>();

        if $z0 != 0 goto label11;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void multipleHandlersError(java.lang.Object,java.lang.Object)>($r1, $r4);

     label11:
        $z0 = $r4 instanceof kotlinx.coroutines.CancelledContinuation;

        if $z0 == 0 goto label23;

        $z0 = $r4 instanceof kotlinx.coroutines.CompletedExceptionally;

        r7 = null;

        if $z0 == 0 goto label12;

        r6 = (kotlinx.coroutines.CompletedExceptionally) $r4;

        goto label13;

     label12:
        r6 = null;

     label13:
        if r6 == null goto label14;

        r7 = r6.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

     label14:
        $z0 = $r1 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label15;

        r8 = (kotlinx.coroutines.CancelHandler) $r1;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlinx.coroutines.CancelHandler,java.lang.Throwable)>(r8, r7);

        return;

     label15:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.internal.Segment<*>");

        r9 = (kotlinx.coroutines.internal.Segment) $r1;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void callSegmentOnCancellation(kotlinx.coroutines.internal.Segment,java.lang.Throwable)>(r9, r7);

        return;

     label16:
        $z0 = $r4 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label20;

        r10 = (kotlinx.coroutines.CompletedContinuation) $r4;

        r8 = r10.<kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CancelHandler cancelHandler>;

        if r8 == null goto label17;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void multipleHandlersError(java.lang.Object,java.lang.Object)>($r1, $r4);

     label17:
        $z0 = $r1 instanceof kotlinx.coroutines.internal.Segment;

        if $z0 == 0 goto label18;

        return;

     label18:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.CancelHandler");

        r8 = (kotlinx.coroutines.CancelHandler) $r1;

        r10 = (kotlinx.coroutines.CompletedContinuation) $r4;

        $z0 = virtualinvoke r10.<kotlinx.coroutines.CompletedContinuation: boolean getCancelled()>();

        if $z0 == 0 goto label19;

        r8 = (kotlinx.coroutines.CancelHandler) $r1;

        r10 = (kotlinx.coroutines.CompletedContinuation) $r4;

        r7 = r10.<kotlinx.coroutines.CompletedContinuation: java.lang.Throwable cancelCause>;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlinx.coroutines.CancelHandler,java.lang.Throwable)>(r8, r7);

        return;

     label19:
        r10 = (kotlinx.coroutines.CompletedContinuation) $r4;

        r8 = (kotlinx.coroutines.CancelHandler) $r1;

        r10 = staticinvoke <kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CompletedContinuation copy$default(kotlinx.coroutines.CompletedContinuation,java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,java.lang.Object)>(r10, null, r8, null, null, null, 29, null);

        r5 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r5, r0, $r4, r10);

        if $z0 == 0 goto label22;

        return;

     label20:
        $z0 = $r1 instanceof kotlinx.coroutines.internal.Segment;

        if $z0 == 0 goto label21;

        return;

     label21:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.CancelHandler");

        r8 = (kotlinx.coroutines.CancelHandler) $r1;

        r10 = new kotlinx.coroutines.CompletedContinuation;

        r8 = (kotlinx.coroutines.CancelHandler) $r1;

        specialinvoke r10.<kotlinx.coroutines.CompletedContinuation: void <init>(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, r8, null, null, null, 28, null);

        r5 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r5, r0, $r4, r10);

        if $z0 == 0 goto label22;

        return;

     label22:
        goto label06;

     label23:
        return;
    }

    private final boolean isReusable()
    {
        kotlin.coroutines.Continuation $r1;
        int $i0;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        $z0 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isReusableMode(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.internal.DispatchedContinuation<*>");

        $r2 = (kotlinx.coroutines.internal.DispatchedContinuation) $r1;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: boolean isReusable()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicIntegerFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.Integer $r4;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final kotlinx.coroutines.CancelHandler makeCancelHandler(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.CancelHandler $r2;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.InvokeOnCancel $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $z0 = $r1 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.CancelHandler) $r1;

        return $r2;

     label1:
        $r3 = new kotlinx.coroutines.InvokeOnCancel;

        specialinvoke $r3.<kotlinx.coroutines.InvokeOnCancel: void <init>(kotlin.jvm.functions.Function1)>($r1);

        $r2 = (kotlinx.coroutines.CancelHandler) $r3;

        return $r2;
    }

    private final void multipleHandlersError(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        java.lang.Object $r1, $r2;
        java.lang.StringBuilder $r4;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.String $r5;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It\'s prohibited to register multiple handlers, tried to register ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", already has ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    private final void resumeImpl(java.lang.Object, int, kotlin.jvm.functions.Function1)
    {
        java.lang.Throwable $r9;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r3, $r7;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.NotCompleted $r5;
        int $i0;
        java.lang.Object $r1, $r4, $r6;
        kotlin.KotlinNothingValueException r10;
        kotlinx.coroutines.CancelledContinuation r8;
        boolean z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        r3 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

     label1:
        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        z0 = $r4 instanceof kotlinx.coroutines.NotCompleted;

        if z0 == 0 goto label2;

        $r5 = (kotlinx.coroutines.NotCompleted) $r4;

        $r6 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object resumedState(kotlinx.coroutines.NotCompleted,java.lang.Object,int,kotlin.jvm.functions.Function1,java.lang.Object)>($r5, $r1, $i0, $r2, null);

        $r7 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r7, r0, $r4, $r6);

        if z0 == 0 goto label1;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void dispatchResume(int)>($i0);

        return;

     label2:
        z0 = $r4 instanceof kotlinx.coroutines.CancelledContinuation;

        if z0 == 0 goto label3;

        r8 = (kotlinx.coroutines.CancelledContinuation) $r4;

        z0 = virtualinvoke r8.<kotlinx.coroutines.CancelledContinuation: boolean makeResumed()>();

        if z0 == 0 goto label3;

        if $r2 == null goto label4;

        r8 = (kotlinx.coroutines.CancelledContinuation) $r4;

        $r9 = r8.<kotlinx.coroutines.CancelledContinuation: java.lang.Throwable cause>;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void callOnCancellation(kotlin.jvm.functions.Function1,java.lang.Throwable)>($r2, $r9);

        return;

     label3:
        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Void alreadyResumedError(java.lang.Object)>($r1);

        r10 = new kotlin.KotlinNothingValueException;

        specialinvoke r10.<kotlin.KotlinNothingValueException: void <init>()>();

        throw r10;

     label4:
        return;
    }

    static void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl, java.lang.Object, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r4;
        int $i0, $i1;
        java.lang.Object $r0, $r2;
        kotlin.jvm.functions.Function1 $r3;
        kotlinx.coroutines.CancellableContinuationImpl $r1;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        $i1 := @parameter4: int;

        $r0 := @parameter5: java.lang.Object;

        if $r0 != null goto label2;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $r3 = null;

     label1:
        specialinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl(java.lang.Object,int,kotlin.jvm.functions.Function1)>($r2, $i0, $r3);

        return;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: resumeImpl");

        throw $r4;
    }

    private final java.lang.Object resumedState(kotlinx.coroutines.NotCompleted, java.lang.Object, int, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        kotlin.jvm.functions.Function1 $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.AssertionError $r5;
        kotlinx.coroutines.CompletedContinuation $r6;
        kotlinx.coroutines.NotCompleted $r1;
        kotlinx.coroutines.CancelHandler $r7;
        int $i0;
        java.lang.Object $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.NotCompleted;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        $r4 := @parameter4: java.lang.Object;

        $z0 = $r2 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label09;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z0 = 1;

        if $z1 == 0 goto label04;

        if $r4 != null goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        goto label04;

     label03:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label04:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label08;

        if $r3 != null goto label05;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label07;

        goto label08;

     label07:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label08:
        goto label11;

     label09:
        $z0 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)>($i0);

        if $z0 != 0 goto label10;

        if $r4 != null goto label10;

        goto label11;

     label10:
        if $r3 != null goto label12;

        $z0 = $r1 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 != 0 goto label12;

        if $r4 == null goto label11;

        goto label12;

     label11:
        return $r2;

     label12:
        $r6 = new kotlinx.coroutines.CompletedContinuation;

        $z0 = $r1 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label13;

        $r7 = (kotlinx.coroutines.CancelHandler) $r1;

        goto label14;

     label13:
        $r7 = null;

     label14:
        specialinvoke $r6.<kotlinx.coroutines.CompletedContinuation: void <init>(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r2, $r7, $r3, $r4, null, 16, null);

        return $r6;
    }

    private final boolean tryResume()
    {
        java.lang.IllegalStateException $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1, $r4;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        r1 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU>;

     label1:
        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i1 = $i0 >> 29;

        lookupswitch($i1)
        {
            case 0: goto label4;
            case 1: goto label3;
            default: goto label2;
        };

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Already resumed";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return 0;

     label4:
        $r4 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU>;

        $i1 = $i0 & 536870911;

        $i2 = 2 << 29;

        $i1 = $i2 + $i1;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, $i1);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        goto label1;
    }

    private final kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol r11;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r4, $r8;
        kotlin.jvm.functions.Function1 $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.AssertionError r10;
        kotlinx.coroutines.CompletedContinuation r9;
        kotlinx.coroutines.NotCompleted $r6;
        int $i0;
        java.lang.Object $r1, $r2, $r5, $r7;
        boolean z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        r4 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

     label1:
        $r5 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        z0 = $r5 instanceof kotlinx.coroutines.NotCompleted;

        if z0 == 0 goto label2;

        $r6 = (kotlinx.coroutines.NotCompleted) $r5;

        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        $r7 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object resumedState(kotlinx.coroutines.NotCompleted,java.lang.Object,int,kotlin.jvm.functions.Function1,java.lang.Object)>($r6, $r1, $i0, $r3, $r2);

        $r8 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r0, $r5, $r7);

        if z0 == 0 goto label1;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        r11 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return r11;

     label2:
        z0 = $r5 instanceof kotlinx.coroutines.CompletedContinuation;

        if z0 == 0 goto label5;

        if $r2 == null goto label5;

        r9 = (kotlinx.coroutines.CompletedContinuation) $r5;

        $r7 = r9.<kotlinx.coroutines.CompletedContinuation: java.lang.Object idempotentResume>;

        if $r7 != $r2 goto label5;

        z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if z0 == 0 goto label4;

        r9 = (kotlinx.coroutines.CompletedContinuation) $r5;

        $r2 = r9.<kotlinx.coroutines.CompletedContinuation: java.lang.Object result>;

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r1);

        if z0 == 0 goto label3;

        goto label4;

     label3:
        r10 = new java.lang.AssertionError;

        specialinvoke r10.<java.lang.AssertionError: void <init>()>();

        throw r10;

     label4:
        r11 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return r11;

     label5:
        return null;
    }

    private final boolean trySuspend()
    {
        java.lang.IllegalStateException $r2;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1, $r4;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        r1 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU>;

     label1:
        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i1 = $i0 >> 29;

        lookupswitch($i1)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label2;
        };

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Already suspended";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return 0;

     label4:
        $r4 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU>;

        $i1 = $i0 & 536870911;

        $i2 = 1 << 29;

        $i1 = $i2 + $i1;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i0, $i1);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        goto label1;
    }

    private final void update$atomicfu(java.util.concurrent.atomic.AtomicIntegerFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.Integer $r4;
        int $i0, $i1;
        java.lang.Object $r3, $r5;
        java.lang.Number $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Number) $r5;

        $i1 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>($r3, $i0, $i1);

        if $z0 == 0 goto label1;

        return;
    }

    public final void callCancelHandler(kotlinx.coroutines.CancelHandler, java.lang.Throwable)
    {
        java.lang.Throwable $r2, $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.CompletionHandlerException $r5;
        kotlinx.coroutines.CancelHandler $r1;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.CancelHandler;

        $r2 := @parameter1: java.lang.Throwable;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.CancelHandler: void invoke(java.lang.Throwable)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = new kotlinx.coroutines.CompletionHandlerException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in invokeOnCancellation handler for ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r3);

        $r2 = (java.lang.Throwable) $r5;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r4, $r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void callOnCancellation(kotlin.jvm.functions.Function1, java.lang.Throwable)
    {
        java.lang.Throwable $r2, r3;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.CompletionHandlerException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: java.lang.Throwable;

     label1:
        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = new kotlinx.coroutines.CompletionHandlerException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in resume onCancellation handler for ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r3);

        $r2 = (java.lang.Throwable) $r5;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r4, $r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean cancel(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlin.coroutines.Continuation $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2, $r6;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.internal.Segment $r9;
        kotlinx.coroutines.NotCompleted $r7;
        kotlinx.coroutines.CancelHandler $r8;
        int $i0;
        java.lang.Object $r3;
        kotlinx.coroutines.CancelledContinuation r4;
        boolean z0, $z1;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

     label1:
        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        z0 = $r3 instanceof kotlinx.coroutines.NotCompleted;

        $z1 = 0;

        if z0 != 0 goto label2;

        return 0;

     label2:
        r4 = new kotlinx.coroutines.CancelledContinuation;

        $r5 = (kotlin.coroutines.Continuation) r0;

        z0 = $r3 instanceof kotlinx.coroutines.CancelHandler;

        if z0 != 0 goto label3;

        z0 = $r3 instanceof kotlinx.coroutines.internal.Segment;

        if z0 == 0 goto label4;

     label3:
        $z1 = 1;

     label4:
        specialinvoke r4.<kotlinx.coroutines.CancelledContinuation: void <init>(kotlin.coroutines.Continuation,java.lang.Throwable,boolean)>($r5, $r1, $z1);

        $r6 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r0, $r3, r4);

        if $z1 == 0 goto label1;

        $r7 = (kotlinx.coroutines.NotCompleted) $r3;

        $z1 = $r7 instanceof kotlinx.coroutines.CancelHandler;

        if $z1 == 0 goto label5;

        $r8 = (kotlinx.coroutines.CancelHandler) $r3;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlinx.coroutines.CancelHandler,java.lang.Throwable)>($r8, $r1);

        goto label6;

     label5:
        $z1 = $r7 instanceof kotlinx.coroutines.internal.Segment;

        if $z1 == 0 goto label6;

        $r9 = (kotlinx.coroutines.internal.Segment) $r3;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void callSegmentOnCancellation(kotlinx.coroutines.internal.Segment,java.lang.Throwable)>($r9, $r1);

     label6:
        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void dispatchResume(int)>($i0);

        return 1;
    }

    public void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.IllegalStateException r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r3, $r5;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.CompletedContinuation r4;
        java.lang.Object $r1;
        java.lang.String $r7;
        boolean z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        r3 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

     label1:
        $r1 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        z0 = $r1 instanceof kotlinx.coroutines.NotCompleted;

        if z0 != 0 goto label7;

        z0 = $r1 instanceof kotlinx.coroutines.CompletedExceptionally;

        if z0 == 0 goto label2;

        return;

     label2:
        z0 = $r1 instanceof kotlinx.coroutines.CompletedContinuation;

        if z0 == 0 goto label5;

        r4 = (kotlinx.coroutines.CompletedContinuation) $r1;

        z0 = virtualinvoke r4.<kotlinx.coroutines.CompletedContinuation: boolean getCancelled()>();

        z0 = z0 ^ 1;

        if z0 == 0 goto label4;

        r4 = (kotlinx.coroutines.CompletedContinuation) $r1;

        r4 = staticinvoke <kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CompletedContinuation copy$default(kotlinx.coroutines.CompletedContinuation,java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,java.lang.Object)>(r4, null, null, null, null, $r2, 15, null);

        $r5 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r0, $r1, r4);

        if z0 == 0 goto label3;

        r4 = (kotlinx.coroutines.CompletedContinuation) $r1;

        virtualinvoke r4.<kotlinx.coroutines.CompletedContinuation: void invokeHandlers(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Throwable)>(r0, $r2);

        return;

     label3:
        goto label6;

     label4:
        r6 = new java.lang.IllegalStateException;

        $r7 = "Must be called at most once";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r6;

     label5:
        $r5 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        r4 = new kotlinx.coroutines.CompletedContinuation;

        specialinvoke r4.<kotlinx.coroutines.CompletedContinuation: void <init>(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, null, null, null, $r2, 14, null);

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r0, $r1, r4);

        if z0 == 0 goto label6;

        return;

     label6:
        goto label1;

     label7:
        r6 = new java.lang.IllegalStateException;

        $r7 = "Not completed";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r6;
    }

    public void completeResume(java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r2;
        int $i0;
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r2 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void dispatchResume(int)>($i0);

        return;
    }

    public final void detachChild$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.DisposableHandle $r3;
        kotlinx.coroutines.NonDisposableHandle $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r3 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle getParentHandle()>();

        if $r3 != null goto label1;

        return;

     label1:
        interfaceinvoke $r3.<kotlinx.coroutines.DisposableHandle: void dispose()>();

        $r1 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _parentHandle$FU>;

        $r2 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r2);

        return;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r2;

     label1:
        return null;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlin.coroutines.CoroutineContext r1;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        r1 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext context>;

        return r1;
    }

    public java.lang.Throwable getContinuationCancellationCause(kotlinx.coroutines.Job)
    {
        java.lang.Throwable $r3;
        java.util.concurrent.CancellationException $r2;
        kotlinx.coroutines.Job $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        $r3 = (java.lang.Throwable) $r2;

        return $r3;
    }

    public final kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()
    {
        kotlin.coroutines.Continuation r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        r1 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        return r1;
    }

    public java.lang.Throwable getExceptionalResult$kotlinx_coroutines_core(java.lang.Object)
    {
        java.lang.Throwable $r3;
        kotlin.coroutines.Continuation r2;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r4;
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r3 = specialinvoke r0.<kotlinx.coroutines.DispatchedTask: java.lang.Throwable getExceptionalResult$kotlinx_coroutines_core(java.lang.Object)>($r1);

        if $r3 == null goto label3;

        r2 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label2;

        $z0 = r2 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r4 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) r2;

        $r3 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r3, $r4);

        goto label2;

     label2:
        return $r3;

     label3:
        return null;
    }

    public final java.lang.Object getResult()
    {
        java.lang.Throwable r4;
        kotlin.coroutines.Continuation $r5;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r6;
        kotlinx.coroutines.Job$Key $r8;
        kotlinx.coroutines.Job r11;
        kotlin.coroutines.CoroutineContext$Element $r10;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.DisposableHandle $r1;
        int i0;
        boolean $z0, $z1;
        java.util.concurrent.CancellationException $r12;
        kotlinx.coroutines.CompletedExceptionally r3;
        kotlin.coroutines.CoroutineContext $r7;
        kotlin.coroutines.CoroutineContext$Key $r9;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isReusable()>();

        $z1 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean trySuspend()>();

        if $z1 == 0 goto label03;

        $r1 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle getParentHandle()>();

        if $r1 != null goto label01;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle installParentHandle()>();

     label01:
        if $z0 == 0 goto label02;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

     label02:
        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r2;

     label03:
        if $z0 == 0 goto label04;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

     label04:
        $r2 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()>();

        $z0 = $r2 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label07;

        r3 = (kotlinx.coroutines.CompletedExceptionally) $r2;

        r4 = r3.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label06;

        $r5 = (kotlin.coroutines.Continuation) r0;

        $z0 = $r5 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label05;

        goto label06;

     label05:
        $r5 = (kotlin.coroutines.Continuation) r0;

        $r6 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r5;

        r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>(r4, $r6);

     label06:
        throw r4;

     label07:
        i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        $z0 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)>(i0);

        if $z0 == 0 goto label11;

        $r7 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r8 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r9 = (kotlin.coroutines.CoroutineContext$Key) $r8;

        $r10 = interfaceinvoke $r7.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r9);

        r11 = (kotlinx.coroutines.Job) $r10;

        if r11 == null goto label11;

        $z0 = interfaceinvoke r11.<kotlinx.coroutines.Job: boolean isActive()>();

        if $z0 != 0 goto label11;

        $r12 = interfaceinvoke r11.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        r4 = (java.lang.Throwable) $r12;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)>($r2, r4);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label09;

        $r5 = (kotlin.coroutines.Continuation) r0;

        $z0 = $r5 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label08;

        goto label09;

     label08:
        r4 = (java.lang.Throwable) $r12;

        $r5 = (kotlin.coroutines.Continuation) r0;

        $r6 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r5;

        r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>(r4, $r6);

        goto label10;

     label09:
        r4 = (java.lang.Throwable) $r12;

     label10:
        throw r4;

     label11:
        $r2 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getSuccessfulResult$kotlinx_coroutines_core(java.lang.Object)>($r2);

        return $r2;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        return null;
    }

    public final java.lang.Object getState$kotlinx_coroutines_core()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        return $r1;
    }

    public java.lang.Object getSuccessfulResult$kotlinx_coroutines_core(java.lang.Object)
    {
        kotlinx.coroutines.CompletedContinuation $r2;
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.CompletedContinuation) $r1;

        $r1 = $r2.<kotlinx.coroutines.CompletedContinuation: java.lang.Object result>;

     label1:
        return $r1;
    }

    public void initCancellability()
    {
        kotlinx.coroutines.DisposableHandle $r2;
        kotlinx.coroutines.NonDisposableHandle $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle installParentHandle()>();

        if $r2 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isCompleted()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<kotlinx.coroutines.DisposableHandle: void dispose()>();

        $r3 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _parentHandle$FU>;

        $r1 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r1);

     label2:
        return;
    }

    public void invokeOnCancellation(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.CancelHandler $r2;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.CancelHandler makeCancelHandler(kotlin.jvm.functions.Function1)>($r1);

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void invokeOnCancellationImpl(java.lang.Object)>($r2);

        return;
    }

    public void invokeOnCancellation(kotlinx.coroutines.internal.Segment, int)
    {
        java.lang.IllegalStateException $r3;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r2;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.internal.Segment $r1;
        int $i0, $i1, $i2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.internal.Segment;

        $i0 := @parameter1: int;

        r2 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU>;

     label1:
        $i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i2 = $i1 & 536870911;

        if $i2 != 536870911 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $i2 = $i1 >> 29;

        $i2 = $i2 << 29;

        $i2 = $i2 + $i0;

        $z0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void invokeOnCancellationImpl(java.lang.Object)>($r1);

        return;

     label4:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "invokeOnCancellation should be called at most once";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public boolean isActive()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()>();

        $z0 = $r1 instanceof kotlinx.coroutines.NotCompleted;

        return $z0;
    }

    public boolean isCancelled()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()>();

        $z0 = $r1 instanceof kotlinx.coroutines.CancelledContinuation;

        return $z0;
    }

    public boolean isCompleted()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()>();

        $z0 = $r1 instanceof kotlinx.coroutines.NotCompleted;

        $z0 = $z0 ^ 1;

        return $z0;
    }

    protected java.lang.String nameString()
    {
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        return "CancellableContinuation";
    }

    public final void parentCancelled$kotlinx_coroutines_core(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean cancelLater(java.lang.Throwable)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean cancel(java.lang.Throwable)>($r1);

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        return;
    }

    public final void releaseClaimedReusableContinuation$kotlinx_coroutines_core()
    {
        java.lang.Throwable $r1;
        kotlin.coroutines.Continuation r2;
        kotlinx.coroutines.CancellableContinuation $r4;
        kotlinx.coroutines.internal.DispatchedContinuation r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        r2 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = r2 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        if $z0 == 0 goto label1;

        r3 = (kotlinx.coroutines.internal.DispatchedContinuation) r2;

        goto label2;

     label1:
        r3 = null;

     label2:
        if r3 == null goto label4;

        $r4 = (kotlinx.coroutines.CancellableContinuation) r0;

        $r1 = virtualinvoke r3.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Throwable tryReleaseClaimedContinuation(kotlinx.coroutines.CancellableContinuation)>($r4);

        if $r1 != null goto label3;

        return;

     label3:
        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$kotlinx_coroutines_core()>();

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean cancel(java.lang.Throwable)>($r1);

     label4:
        return;
    }

    public final boolean resetStateReusable()
    {
        kotlinx.coroutines.Active $r8;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.AssertionError $r1;
        kotlinx.coroutines.DisposableHandle $r2;
        kotlinx.coroutines.NonDisposableHandle r3;
        kotlinx.coroutines.CompletedContinuation $r6;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label04;

        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        if $i0 != 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label04:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label08;

        $r2 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle getParentHandle()>();

        r3 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        if $r2 == r3 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label07;

        goto label08;

     label07:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label08:
        $r4 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label10;

        $z0 = $r5 instanceof kotlinx.coroutines.NotCompleted;

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label09;

        goto label10;

     label09:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label10:
        $z0 = $r5 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label11;

        $r6 = (kotlinx.coroutines.CompletedContinuation) $r5;

        $r5 = $r6.<kotlinx.coroutines.CompletedContinuation: java.lang.Object idempotentResume>;

        if $r5 == null goto label11;

        virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$kotlinx_coroutines_core()>();

        return 0;

     label11:
        $r7 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decisionAndIndex$FU>;

        $i0 = 0 << 29;

        $i0 = $i0 + 536870911;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(java.lang.Object,int)>(r0, $i0);

        $r4 = <kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r8 = <kotlinx.coroutines.Active: kotlinx.coroutines.Active INSTANCE>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r8);

        return 1;
    }

    public void resume(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        int $i0;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl(java.lang.Object,int,kotlin.jvm.functions.Function1)>($r1, $i0, $r2);

        return;
    }

    public void resumeUndispatched(kotlinx.coroutines.CoroutineDispatcher, java.lang.Object)
    {
        kotlin.coroutines.Continuation r3;
        kotlinx.coroutines.internal.DispatchedContinuation r5;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.CoroutineDispatcher $r1, $r4;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter1: java.lang.Object;

        r3 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = r3 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        $r4 = null;

        if $z0 == 0 goto label1;

        r5 = (kotlinx.coroutines.internal.DispatchedContinuation) r3;

        goto label2;

     label1:
        r5 = null;

     label2:
        if r5 == null goto label3;

        $r4 = r5.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

     label3:
        if $r4 != $r1 goto label4;

        $i0 = 4;

        goto label5;

     label4:
        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

     label5:
        staticinvoke <kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Object,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, $r2, $i0, null, 4, null);

        return;
    }

    public void resumeUndispatchedWithException(kotlinx.coroutines.CoroutineDispatcher, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        kotlin.coroutines.Continuation r4;
        kotlinx.coroutines.CompletedExceptionally $r3;
        kotlinx.coroutines.internal.DispatchedContinuation r6;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        kotlinx.coroutines.CoroutineDispatcher $r1, $r5;
        int $i0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r2 := @parameter1: java.lang.Throwable;

        r4 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = r4 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        $r5 = null;

        if $z0 == 0 goto label1;

        r6 = (kotlinx.coroutines.internal.DispatchedContinuation) r4;

        goto label2;

     label1:
        r6 = null;

     label2:
        $r3 = new kotlinx.coroutines.CompletedExceptionally;

        specialinvoke $r3.<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r2, 0, 2, null);

        if r6 == null goto label3;

        $r5 = r6.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

     label3:
        if $r5 != $r1 goto label4;

        $i0 = 4;

        goto label5;

     label4:
        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

     label5:
        staticinvoke <kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Object,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, $r3, $i0, null, 4, null);

        return;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuation $r2;
        int $i0;
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlinx.coroutines.CancellableContinuation) r0;

        $r1 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState(java.lang.Object,kotlinx.coroutines.CancellableContinuation)>($r1, $r2);

        $i0 = r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        staticinvoke <kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Object,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, $r1, $i0, null, 4, null);

        return;
    }

    public java.lang.Object takeState$kotlinx_coroutines_core()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlin.coroutines.Continuation $r3;
        java.lang.StringBuilder $r1;
        kotlinx.coroutines.CancellableContinuationImpl r0;
        java.lang.String $r2;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.String nameString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r3 = r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String toDebugString(kotlin.coroutines.Continuation)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("){");

        $r2 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.String getStateDebugRepresentation()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}@");

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.Object tryResume(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r1, $r2, null);

        return $r3;
    }

    public java.lang.Object tryResume(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        java.lang.Object $r1, $r2;
        kotlin.jvm.functions.Function1 $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $r4 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r1, $r2, $r3);

        return $r4;
    }

    public java.lang.Object tryResumeWithException(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        kotlinx.coroutines.CompletedExceptionally $r3;
        kotlinx.coroutines.CancellableContinuationImpl r0;

        r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $r3 = new kotlinx.coroutines.CompletedExceptionally;

        specialinvoke $r3.<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, 0, 2, null);

        $r2 = specialinvoke r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r3, null, null);

        return $r2;
    }
}
