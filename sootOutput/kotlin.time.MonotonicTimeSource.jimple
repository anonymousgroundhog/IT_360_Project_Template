public final class kotlin.time.MonotonicTimeSource extends java.lang.Object implements kotlin.time.TimeSource$WithComparableMarks
{
    public static final kotlin.time.MonotonicTimeSource INSTANCE;
    private static final long zero;

    static void <clinit>()
    {
        long $l0;
        kotlin.time.MonotonicTimeSource $r0;

        $r0 = new kotlin.time.MonotonicTimeSource;

        specialinvoke $r0.<kotlin.time.MonotonicTimeSource: void <init>()>();

        <kotlin.time.MonotonicTimeSource: kotlin.time.MonotonicTimeSource INSTANCE> = $r0;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        <kotlin.time.MonotonicTimeSource: long zero> = $l0;

        return;
    }

    private void <init>()
    {
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final long read()
    {
        long $l0, $l1;
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l0 = <kotlin.time.MonotonicTimeSource: long zero>;

        $l0 = $l1 - $l0;

        return $l0;
    }

    public final long adjustReading-6QKq23U(long, long)
    {
        long $l0, $l1;
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l0 = staticinvoke <kotlin.time.LongSaturatedMathKt: long saturatingAdd-pTJri5U(long,long)>($l0, $l1);

        $l0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: long constructor-impl(long)>($l0);

        return $l0;
    }

    public final long differenceBetween-fRLX17w(long, long)
    {
        long $l0, $l1;
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l0 = staticinvoke <kotlin.time.LongSaturatedMathKt: long saturatingOriginsDiff(long,long)>($l0, $l1);

        return $l0;
    }

    public final long elapsedFrom-6eNON_k(long)
    {
        long $l0, $l1;
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        $l0 := @parameter0: long;

        $l1 = specialinvoke r0.<kotlin.time.MonotonicTimeSource: long read()>();

        $l0 = staticinvoke <kotlin.time.LongSaturatedMathKt: long saturatingDiff(long,long)>($l1, $l0);

        return $l0;
    }

    public volatile kotlin.time.ComparableTimeMark markNow()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r1;
        long $l0;
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        $l0 = virtualinvoke r0.<kotlin.time.MonotonicTimeSource: long markNow-z9LOYto()>();

        $r1 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: kotlin.time.TimeSource$Monotonic$ValueTimeMark box-impl(long)>($l0);

        return $r1;
    }

    public volatile kotlin.time.TimeMark markNow()
    {
        kotlin.time.TimeSource$Monotonic$ValueTimeMark $r1;
        long $l0;
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        $l0 = virtualinvoke r0.<kotlin.time.MonotonicTimeSource: long markNow-z9LOYto()>();

        $r1 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: kotlin.time.TimeSource$Monotonic$ValueTimeMark box-impl(long)>($l0);

        return $r1;
    }

    public long markNow-z9LOYto()
    {
        long $l0;
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        $l0 = specialinvoke r0.<kotlin.time.MonotonicTimeSource: long read()>();

        $l0 = staticinvoke <kotlin.time.TimeSource$Monotonic$ValueTimeMark: long constructor-impl(long)>($l0);

        return $l0;
    }

    public java.lang.String toString()
    {
        kotlin.time.MonotonicTimeSource r0;

        r0 := @this: kotlin.time.MonotonicTimeSource;

        return "TimeSource(System.nanoTime())";
    }
}
