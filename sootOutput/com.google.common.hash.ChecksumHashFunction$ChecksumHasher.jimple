final class com.google.common.hash.ChecksumHashFunction$ChecksumHasher extends com.google.common.hash.AbstractByteHasher
{
    private final java.util.zip.Checksum checksum;
    final com.google.common.hash.ChecksumHashFunction this$0;

    private void <init>(com.google.common.hash.ChecksumHashFunction, java.util.zip.Checksum)
    {
        java.util.zip.Checksum $r1;
        com.google.common.hash.ChecksumHashFunction$ChecksumHasher r0;
        java.lang.Object $r2;
        com.google.common.hash.ChecksumHashFunction $r3;

        r0 := @this: com.google.common.hash.ChecksumHashFunction$ChecksumHasher;

        $r3 := @parameter0: com.google.common.hash.ChecksumHashFunction;

        $r1 := @parameter1: java.util.zip.Checksum;

        r0.<com.google.common.hash.ChecksumHashFunction$ChecksumHasher: com.google.common.hash.ChecksumHashFunction this$0> = $r3;

        specialinvoke r0.<com.google.common.hash.AbstractByteHasher: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.util.zip.Checksum) $r2;

        r0.<com.google.common.hash.ChecksumHashFunction$ChecksumHasher: java.util.zip.Checksum checksum> = $r1;

        return;
    }

    void <init>(com.google.common.hash.ChecksumHashFunction, java.util.zip.Checksum, com.google.common.hash.ChecksumHashFunction$1)
    {
        java.util.zip.Checksum $r2;
        com.google.common.hash.ChecksumHashFunction$ChecksumHasher r0;
        com.google.common.hash.ChecksumHashFunction$1 $r3;
        com.google.common.hash.ChecksumHashFunction $r1;

        r0 := @this: com.google.common.hash.ChecksumHashFunction$ChecksumHasher;

        $r1 := @parameter0: com.google.common.hash.ChecksumHashFunction;

        $r2 := @parameter1: java.util.zip.Checksum;

        $r3 := @parameter2: com.google.common.hash.ChecksumHashFunction$1;

        specialinvoke r0.<com.google.common.hash.ChecksumHashFunction$ChecksumHasher: void <init>(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum)>($r1, $r2);

        return;
    }

    public com.google.common.hash.HashCode hash()
    {
        java.util.zip.Checksum r1;
        com.google.common.hash.ChecksumHashFunction$ChecksumHasher r0;
        com.google.common.hash.HashCode $r3;
        int $i1;
        long $l0;
        com.google.common.hash.ChecksumHashFunction $r2;

        r0 := @this: com.google.common.hash.ChecksumHashFunction$ChecksumHasher;

        r1 = r0.<com.google.common.hash.ChecksumHashFunction$ChecksumHasher: java.util.zip.Checksum checksum>;

        $l0 = interfaceinvoke r1.<java.util.zip.Checksum: long getValue()>();

        $r2 = r0.<com.google.common.hash.ChecksumHashFunction$ChecksumHasher: com.google.common.hash.ChecksumHashFunction this$0>;

        $i1 = staticinvoke <com.google.common.hash.ChecksumHashFunction: int access$100(com.google.common.hash.ChecksumHashFunction)>($r2);

        if $i1 != 32 goto label1;

        $i1 = (int) $l0;

        $r3 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromInt(int)>($i1);

        return $r3;

     label1:
        $r3 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromLong(long)>($l0);

        return $r3;
    }

    protected void update(byte)
    {
        java.util.zip.Checksum $r1;
        com.google.common.hash.ChecksumHashFunction$ChecksumHasher r0;
        byte $b0;
        int $i1;

        r0 := @this: com.google.common.hash.ChecksumHashFunction$ChecksumHasher;

        $b0 := @parameter0: byte;

        $r1 = r0.<com.google.common.hash.ChecksumHashFunction$ChecksumHasher: java.util.zip.Checksum checksum>;

        $i1 = (int) $b0;

        interfaceinvoke $r1.<java.util.zip.Checksum: void update(int)>($i1);

        return;
    }

    protected void update(byte[], int, int)
    {
        byte[] $r1;
        java.util.zip.Checksum $r2;
        com.google.common.hash.ChecksumHashFunction$ChecksumHasher r0;
        int $i0, $i1;

        r0 := @this: com.google.common.hash.ChecksumHashFunction$ChecksumHasher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<com.google.common.hash.ChecksumHashFunction$ChecksumHasher: java.util.zip.Checksum checksum>;

        interfaceinvoke $r2.<java.util.zip.Checksum: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
}
