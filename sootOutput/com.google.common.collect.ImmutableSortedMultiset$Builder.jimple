public class com.google.common.collect.ImmutableSortedMultiset$Builder extends com.google.common.collect.ImmutableMultiset$Builder
{
    private final java.util.Comparator comparator;
    private int[] counts;
    java.lang.Object[] elements;
    private boolean forceCopyElements;
    private int length;

    public void <init>(java.util.Comparator)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object[] $r2;
        int[] $r4;
        java.lang.Object $r3;
        java.util.Comparator r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<com.google.common.collect.ImmutableMultiset$Builder: void <init>(boolean)>(1);

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.util.Comparator) $r3;

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator> = r1;

        $r2 = newarray (java.lang.Object)[4];

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements> = $r2;

        $r4 = newarray (int)[4];

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts> = $r4;

        return;
    }

    private void dedupAndCoalesce(boolean)
    {
        java.lang.Object[] r1, $r2;
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        int[] r6, $r7;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r4, $r5;
        java.util.Comparator r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $z0 := @parameter0: boolean;

        i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        if i0 != 0 goto label1;

        return;

     label1:
        r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, i0);

        r1 = $r2;

        r3 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, r3);

        i0 = 1;

        i1 = 1;

     label2:
        i2 = lengthof $r2;

        if i1 >= i2 goto label4;

        r3 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator>;

        i2 = i0 + -1;

        r4 = $r2[i2];

        $r5 = $r2[i1];

        i2 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r4, $r5);

        if i2 >= 0 goto label3;

        r4 = $r2[i1];

        $r2[i0] = r4;

        i0 = i0 + 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, i0, i1, null);

        if $z0 == 0 goto label5;

        i1 = i0 * 4;

        i2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        i2 = i2 * 3;

        if i1 <= i2 goto label5;

        i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        i2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        i2 = i2 / 2;

        i2 = i2 + 1;

        i1 = staticinvoke <com.google.common.math.IntMath: int saturatedAdd(int,int)>(i1, i2);

        r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, i1);

     label5:
        i1 = lengthof r1;

        r6 = newarray (int)[i1];

        i1 = 0;

     label6:
        i2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        if i1 >= i2 goto label9;

        $r2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        r4 = $r2[i1];

        r3 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator>;

        i2 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>(r1, 0, i0, r4, r3);

        $r7 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i3 = $r7[i1];

        if $i3 < 0 goto label7;

        $i3 = r6[i2];

        $r7 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i4 = $r7[i1];

        $i3 = $i3 + $i4;

        r6[i2] = $i3;

        goto label8;

     label7:
        $r7 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i3 = $r7[i1];

        $i3 = $i3 ^ -1;

        r6[i2] = $i3;

     label8:
        i1 = i1 + 1;

        goto label6;

     label9:
        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements> = r1;

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts> = r6;

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length> = i0;

        return;
    }

    private void dedupAndCoalesceAndDeleteEmpty()
    {
        java.lang.Object[] $r2, $r3;
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        int[] $r1, $r5;
        int i0, i1, $i2;
        java.lang.Object $r4;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: void dedupAndCoalesce(boolean)>(0);

        i0 = 0;

        i1 = 0;

     label1:
        $i2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        if i1 >= $i2 goto label3;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i2 = $r1[i1];

        if $i2 <= 0 goto label2;

        $r2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $r3 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $r4 = $r3[i1];

        $r2[i0] = $r4;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $r5 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i2 = $r5[i1];

        $r1[i0] = $i2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, i0, i1, null);

        $r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r1, i0, i1, 0);

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length> = i0;

        return;
    }

    private void maintenance()
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: void dedupAndCoalesce(boolean)>(1);

        goto label2;

     label1:
        $z0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: boolean forceCopyElements>;

        if $z0 == 0 goto label2;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $r2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $i0 = lengthof $r2;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements> = $r1;

     label2:
        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: boolean forceCopyElements> = 0;

        return;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object[] $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Object[];

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[])>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[])
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object[] $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Object[];

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[])>($r1);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object,int)>(r1, 1);

        return r0;
    }

    public transient com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[])
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object[] r1;
        int $i0, $i1;
        java.lang.Object r2;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r2 = r1[$i1];

        virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)>(r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.util.Iterator;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable)>($r1);

        return r0;
    }

    public volatile com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.util.Iterator;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator)>($r1);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable)
    {
        java.util.Iterator $r4;
        com.google.common.collect.Multiset $r2;
        java.util.Set $r3;
        com.google.common.collect.Multiset$Entry r6;
        java.lang.Iterable r1;
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Iterable;

        $z0 = r1 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label3;

        $r2 = (com.google.common.collect.Multiset) r1;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.common.collect.Multiset$Entry) $r5;

        $r5 = interfaceinvoke r6.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke r6.<com.google.common.collect.Multiset$Entry: int getCount()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object,int)>($r5, $i0);

        goto label1;

     label2:
        return r0;

     label3:
        $r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)>($r5);

        goto label4;

     label5:
        return r0;
    }

    public com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.util.Iterator r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return r0;
    }

    public volatile com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object, int)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object,int)>($r1, $i0);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object, int)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object[] $r2;
        int[] $r3;
        int $i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "occurrences");

        if $i0 != 0 goto label1;

        return r0;

     label1:
        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: void maintenance()>();

        $r2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $r2[$i1] = r1;

        $r3 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $r3[$i1] = $i0;

        $i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length> = $i0;

        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection build()
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        com.google.common.collect.ImmutableSortedMultiset $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset build()>();

        return $r1;
    }

    public volatile com.google.common.collect.ImmutableMultiset build()
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        com.google.common.collect.ImmutableSortedMultiset $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset build()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedMultiset build()
    {
        com.google.common.collect.ImmutableSortedSet $r4;
        java.lang.Object[] $r3;
        long $l2, $l4;
        com.google.common.collect.RegularImmutableSortedMultiset $r8;
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        long[] r6;
        int[] $r7;
        int i0, $i1, $i3;
        java.util.Comparator r1;
        com.google.common.collect.ImmutableSortedMultiset $r2;
        com.google.common.collect.RegularImmutableSortedSet r5;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: void dedupAndCoalesceAndDeleteEmpty()>();

        i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        if i0 != 0 goto label1;

        r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator>;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator)>(r1);

        return $r2;

     label1:
        r1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.util.Comparator comparator>;

        i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $r3 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $r4 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>(r1, i0, $r3);

        r5 = (com.google.common.collect.RegularImmutableSortedSet) $r4;

        i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        i0 = i0 + 1;

        r6 = newarray (long)[i0];

        i0 = 0;

     label2:
        $i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        if i0 >= $i1 goto label3;

        $i1 = i0 + 1;

        $l2 = r6[i0];

        $r7 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i3 = $r7[i0];

        $l4 = (long) $i3;

        $l2 = $l2 + $l4;

        r6[$i1] = $l2;

        i0 = i0 + 1;

        goto label2;

     label3:
        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: boolean forceCopyElements> = 1;

        $r8 = new com.google.common.collect.RegularImmutableSortedMultiset;

        i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        specialinvoke $r8.<com.google.common.collect.RegularImmutableSortedMultiset: void <init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)>(r5, r6, 0, i0);

        return $r8;
    }

    public volatile com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object, int)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder setCount(java.lang.Object,int)>($r1, $i0);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMultiset$Builder setCount(java.lang.Object, int)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder r0;
        java.lang.Object[] $r2;
        int[] $r3;
        int $i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset$Builder;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "count");

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: void maintenance()>();

        $r2 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: java.lang.Object[] elements>;

        $i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $r2[$i1] = r1;

        $r3 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int[] counts>;

        $i1 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $i0 = $i0 ^ -1;

        $r3[$i1] = $i0;

        $i0 = r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: int length> = $i0;

        return r0;
    }
}
