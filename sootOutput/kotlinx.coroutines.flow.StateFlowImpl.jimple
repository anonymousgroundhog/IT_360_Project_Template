final class kotlinx.coroutines.flow.StateFlowImpl extends kotlinx.coroutines.flow.internal.AbstractSharedFlow implements kotlinx.coroutines.flow.MutableStateFlow, kotlinx.coroutines.flow.CancellableFlow, kotlinx.coroutines.flow.internal.FusibleFlow
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU;
    private volatile java.lang.Object _state;
    private int sequence;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/flow/StateFlowImpl;", class "Ljava/lang/Object;", "_state");

        <kotlinx.coroutines.flow.StateFlowImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU> = $r0;

        return;
    }

    public void <init>(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kotlinx.coroutines.flow.internal.AbstractSharedFlow: void <init>()>();

        r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state> = $r1;

        return;
    }

    public static void getValue$annotations()
    {
        return;
    }

    private final boolean updateState(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Throwable $r9, $r10;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r3;
        kotlin.Unit $r6;
        kotlinx.coroutines.flow.StateFlowSlot[] $r7;
        int i0, i1, i2;
        kotlinx.coroutines.flow.StateFlowSlot r8;
        java.lang.Object $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        entermonitor r0;

     label01:
        r3 = <kotlinx.coroutines.flow.StateFlowImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r1 == null goto label03;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r1);

     label02:
        if $z0 != 0 goto label03;

        exitmonitor r0;

        return 0;

     label03:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r2);

     label04:
        if $z0 == 0 goto label05;

        exitmonitor r0;

        return 1;

     label05:
        r3 = <kotlinx.coroutines.flow.StateFlowImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r2);

        i0 = r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence>;

        i1 = i0 & 1;

        if i1 != 0 goto label16;

        i0 = i0 + 1;

        r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence> = i0;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] getSlots()>();

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label06:
        exitmonitor r0;

     label07:
        $r7 = (kotlinx.coroutines.flow.StateFlowSlot[]) $r5;

        if $r7 == null goto label10;

        i1 = lengthof $r7;

        i2 = 0;

     label08:
        if i2 >= i1 goto label10;

        r8 = $r7[i2];

        if r8 == null goto label09;

        virtualinvoke r8.<kotlinx.coroutines.flow.StateFlowSlot: void makePending()>();

     label09:
        i2 = i2 + 1;

        goto label08;

     label10:
        entermonitor r0;

     label11:
        i1 = r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence>;

        if i1 != i0 goto label13;

        i0 = i0 + 1;

        r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence> = i0;

     label12:
        exitmonitor r0;

        return 1;

     label13:
        i0 = r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence>;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] getSlots()>();

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label14:
        exitmonitor r0;

        goto label07;

     label15:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

     label16:
        i0 = i0 + 2;

     label17:
        r0.<kotlinx.coroutines.flow.StateFlowImpl: int sequence> = i0;

     label18:
        exitmonitor r0;

        return 1;

     label19:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r21;
        java.lang.IllegalStateException r7;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.Job$Key r16;
        kotlinx.coroutines.Job r10;
        kotlin.coroutines.CoroutineContext$Element $r18;
        kotlinx.coroutines.flow.SubscribedFlowCollector r14;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.flow.StateFlowImpl r0, r12;
        kotlinx.coroutines.internal.Symbol r20;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r19;
        kotlinx.coroutines.flow.StateFlowImpl$collect$1 $r3, $r4;
        kotlin.coroutines.CoroutineContext $r15;
        kotlinx.coroutines.flow.FlowCollector r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r13;
        kotlin.coroutines.CoroutineContext$Key r17;
        kotlinx.coroutines.flow.StateFlowSlot r11;
        java.lang.Object $r5, $r6, r8, r9;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.StateFlowImpl$collect$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.flow.StateFlowImpl$collect$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = $i0;

        goto label02;

     label01:
        $r3 = new kotlinx.coroutines.flow.StateFlowImpl$collect$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: void <init>(kotlinx.coroutines.flow.StateFlowImpl,kotlin.coroutines.Continuation)>(r0, $r2);

     label02:
        $r4 = $r3;

        $r5 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label13;
            case 1: goto label10;
            case 2: goto label07;
            case 3: goto label04;
            default: goto label03;
        };

     label03:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r7;

     label04:
        r8 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4>;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3>;

        r10 = (kotlinx.coroutines.Job) r9;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2>;

        r11 = (kotlinx.coroutines.flow.StateFlowSlot) r9;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1>;

        r1 = (kotlinx.coroutines.flow.FlowCollector) r9;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0>;

        r12 = (kotlinx.coroutines.flow.StateFlowImpl) r9;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label06:
        goto label20;

     label07:
        r8 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4>;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3>;

        r10 = (kotlinx.coroutines.Job) r9;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2>;

        r11 = (kotlinx.coroutines.flow.StateFlowSlot) r9;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1>;

        r1 = (kotlinx.coroutines.flow.FlowCollector) r9;

        r9 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0>;

        r12 = (kotlinx.coroutines.flow.StateFlowImpl) r9;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label09:
        goto label32;

     label10:
        r8 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2>;

        r11 = (kotlinx.coroutines.flow.StateFlowSlot) r8;

        r8 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1>;

        r1 = (kotlinx.coroutines.flow.FlowCollector) r8;

        r8 = $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0>;

        r12 = (kotlinx.coroutines.flow.StateFlowImpl) r8;

     label11:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label12:
        goto label18;

     label13:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        r12 = r0;

        $r13 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot allocateSlot()>();

        r11 = (kotlinx.coroutines.flow.StateFlowSlot) $r13;

     label14:
        $z0 = r1 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector;

     label15:
        if $z0 == 0 goto label18;

     label16:
        r14 = (kotlinx.coroutines.flow.SubscribedFlowCollector) r1;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1> = r1;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2> = r11;

        $r3.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = 1;

        $r5 = virtualinvoke r14.<kotlinx.coroutines.flow.SubscribedFlowCollector: java.lang.Object onSubscription(kotlin.coroutines.Continuation)>($r3);

     label17:
        if $r5 != $r6 goto label18;

        return $r6;

     label18:
        $r15 = interfaceinvoke $r4.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        r16 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        r17 = (kotlin.coroutines.CoroutineContext$Key) r16;

        $r18 = interfaceinvoke $r15.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>(r17);

        r10 = (kotlinx.coroutines.Job) $r18;

     label19:
        r8 = null;

     label20:
        r19 = <kotlinx.coroutines.flow.StateFlowImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r5 = virtualinvoke r19.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r12);

     label21:
        if r10 == null goto label23;

     label22:
        staticinvoke <kotlinx.coroutines.JobKt: void ensureActive(kotlinx.coroutines.Job)>(r10);

     label23:
        if r8 == null goto label26;

     label24:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r8, $r5);

     label25:
        if $z0 != 0 goto label32;

     label26:
        r20 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

     label27:
        if $r5 != r20 goto label28;

        r8 = null;

        goto label29;

     label28:
        r8 = $r5;

     label29:
        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0> = r12;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1> = r1;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2> = r11;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3> = r10;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4> = $r5;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = 2;

        r8 = interfaceinvoke r1.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(r8, $r4);

     label30:
        if r8 != $r6 goto label31;

        return $r6;

     label31:
        r8 = $r5;

     label32:
        $z0 = virtualinvoke r11.<kotlinx.coroutines.flow.StateFlowSlot: boolean takePending()>();

     label33:
        if $z0 != 0 goto label20;

     label34:
        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$0> = r12;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$1> = r1;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$2> = r11;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$3> = r10;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: java.lang.Object L$4> = r8;

        $r4.<kotlinx.coroutines.flow.StateFlowImpl$collect$1: int label> = 3;

        $r5 = virtualinvoke r11.<kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object awaitPending(kotlin.coroutines.Continuation)>($r4);

     label35:
        if $r5 != $r6 goto label20;

        return $r6;

     label36:
        r21 := @caughtexception;

        $r13 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot) r11;

        virtualinvoke r12.<kotlinx.coroutines.flow.StateFlowImpl: void freeSlot(kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)>($r13);

        throw r21;

        catch java.lang.Throwable from label05 to label06 with label36;
        catch java.lang.Throwable from label08 to label09 with label36;
        catch java.lang.Throwable from label11 to label12 with label36;
        catch java.lang.Throwable from label14 to label15 with label36;
        catch java.lang.Throwable from label16 to label17 with label36;
        catch java.lang.Throwable from label18 to label19 with label36;
        catch java.lang.Throwable from label20 to label21 with label36;
        catch java.lang.Throwable from label22 to label23 with label36;
        catch java.lang.Throwable from label24 to label25 with label36;
        catch java.lang.Throwable from label26 to label27 with label36;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label32 to label33 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    public boolean compareAndSet(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r1 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

        goto label1;

     label1:
        if $r2 != null goto label2;

        $r2 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

        goto label2;

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: boolean updateState(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $z0;
    }

    protected kotlinx.coroutines.flow.StateFlowSlot createSlot()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.StateFlowSlot $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = new kotlinx.coroutines.flow.StateFlowSlot;

        specialinvoke $r1.<kotlinx.coroutines.flow.StateFlowSlot: void <init>()>();

        return $r1;
    }

    public volatile kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot createSlot()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.StateFlowSlot $r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.StateFlowSlot createSlot()>();

        $r2 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot) $r1;

        return $r2;
    }

    protected kotlinx.coroutines.flow.StateFlowSlot[] createSlotArray(int)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        int $i0;
        kotlinx.coroutines.flow.StateFlowSlot[] $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $i0 := @parameter0: int;

        $r1 = newarray (kotlinx.coroutines.flow.StateFlowSlot)[$i0];

        return $r1;
    }

    public volatile kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] createSlotArray(int)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.StateFlowSlot[] $r1;
        kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] $r2;
        int $i0;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: kotlinx.coroutines.flow.StateFlowSlot[] createSlotArray(int)>($i0);

        $r2 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) $r1;

        return $r2;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit r3;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: void setValue(java.lang.Object)>($r1);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public kotlinx.coroutines.flow.Flow fuse(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.flow.Flow $r3;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.flow.StateFlow $r4;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = (kotlinx.coroutines.flow.StateFlow) r0;

        $r3 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.Flow fuseStateFlow(kotlinx.coroutines.flow.StateFlow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r4, $r1, $i0, $r2);

        return $r3;
    }

    public java.util.List getReplayCache()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;
        java.util.List $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object getValue()>();

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r1);

        return $r2;
    }

    public java.lang.Object getValue()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        kotlinx.coroutines.internal.Symbol r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r3;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        r1 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

        r3 = <kotlinx.coroutines.flow.StateFlowImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU>;

        $r2 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r2 != r1 goto label1;

        return null;

     label1:
        return $r2;
    }

    public void resetReplayCache()
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("MutableStateFlow.resetReplayCache is not supported");

        throw $r1;
    }

    public void setValue(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        $r1 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

        goto label1;

     label1:
        specialinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: boolean updateState(java.lang.Object,java.lang.Object)>(null, $r1);

        return;
    }

    public boolean tryEmit(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.StateFlowImpl;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<kotlinx.coroutines.flow.StateFlowImpl: void setValue(java.lang.Object)>($r1);

        return 1;
    }
}
