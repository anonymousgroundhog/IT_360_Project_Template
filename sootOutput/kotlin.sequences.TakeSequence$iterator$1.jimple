public final class kotlin.sequences.TakeSequence$iterator$1 extends java.lang.Object implements java.util.Iterator, kotlin.jvm.internal.markers.KMappedMarker
{
    private final java.util.Iterator iterator;
    private int left;

    void <init>(kotlin.sequences.TakeSequence)
    {
        kotlin.sequences.TakeSequence $r1;
        java.util.Iterator $r3;
        kotlin.sequences.Sequence $r2;
        int $i0;
        kotlin.sequences.TakeSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.TakeSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.TakeSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <kotlin.sequences.TakeSequence: int access$getCount$p(kotlin.sequences.TakeSequence)>($r1);

        r0.<kotlin.sequences.TakeSequence$iterator$1: int left> = $i0;

        $r2 = staticinvoke <kotlin.sequences.TakeSequence: kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TakeSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        r0.<kotlin.sequences.TakeSequence$iterator$1: java.util.Iterator iterator> = $r3;

        return;
    }

    public final java.util.Iterator getIterator()
    {
        kotlin.sequences.TakeSequence$iterator$1 r0;
        java.util.Iterator r1;

        r0 := @this: kotlin.sequences.TakeSequence$iterator$1;

        r1 = r0.<kotlin.sequences.TakeSequence$iterator$1: java.util.Iterator iterator>;

        return r1;
    }

    public final int getLeft()
    {
        int i0;
        kotlin.sequences.TakeSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.TakeSequence$iterator$1;

        i0 = r0.<kotlin.sequences.TakeSequence$iterator$1: int left>;

        return i0;
    }

    public boolean hasNext()
    {
        java.util.Iterator $r1;
        int $i0;
        kotlin.sequences.TakeSequence$iterator$1 r0;
        boolean $z0;

        r0 := @this: kotlin.sequences.TakeSequence$iterator$1;

        $i0 = r0.<kotlin.sequences.TakeSequence$iterator$1: int left>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<kotlin.sequences.TakeSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        java.util.Iterator $r2;
        int $i0;
        java.lang.Object $r1;
        kotlin.sequences.TakeSequence$iterator$1 r0;
        java.util.NoSuchElementException $r3;

        r0 := @this: kotlin.sequences.TakeSequence$iterator$1;

        $i0 = r0.<kotlin.sequences.TakeSequence$iterator$1: int left>;

        if $i0 == 0 goto label1;

        $i0 = r0.<kotlin.sequences.TakeSequence$iterator$1: int left>;

        $i0 = $i0 + -1;

        r0.<kotlin.sequences.TakeSequence$iterator$1: int left> = $i0;

        $r2 = r0.<kotlin.sequences.TakeSequence$iterator$1: java.util.Iterator iterator>;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        return $r1;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.sequences.TakeSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.TakeSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final void setLeft(int)
    {
        int $i0;
        kotlin.sequences.TakeSequence$iterator$1 r0;

        r0 := @this: kotlin.sequences.TakeSequence$iterator$1;

        $i0 := @parameter0: int;

        r0.<kotlin.sequences.TakeSequence$iterator$1: int left> = $i0;

        return;
    }
}
