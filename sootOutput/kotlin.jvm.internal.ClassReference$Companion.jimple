public final class kotlin.jvm.internal.ClassReference$Companion extends java.lang.Object
{

    private void <init>()
    {
        kotlin.jvm.internal.ClassReference$Companion r0;

        r0 := @this: kotlin.jvm.internal.ClassReference$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.ClassReference$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: kotlin.jvm.internal.ClassReference$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.jvm.internal.ClassReference$Companion: void <init>()>();

        return;
    }

    public final java.lang.String getClassQualifiedName(java.lang.Class)
    {
        java.util.HashMap $r3;
        kotlin.jvm.internal.ClassReference$Companion r0;
        java.lang.Class $r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.ClassReference$Companion;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "jClass");

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAnonymousClass()>();

        $r2 = null;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isLocalClass()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label4;

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label3;

        $r3 = staticinvoke <kotlin.jvm.internal.ClassReference: java.util.HashMap access$getClassFqNames$cp()>();

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r4 = (java.lang.String) $r5;

        if $r4 == null goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label3:
        if $r2 != null goto label5;

        return "kotlin.Array";

     label4:
        $r3 = staticinvoke <kotlin.jvm.internal.ClassReference: java.util.HashMap access$getClassFqNames$cp()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r2 = (java.lang.String) $r5;

        if $r2 != null goto label5;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getCanonicalName()>();

     label5:
        return $r2;
    }

    public final java.lang.String getClassSimpleName(java.lang.Class)
    {
        kotlin.jvm.internal.ClassReference$Companion r0;
        java.lang.reflect.Constructor $r6;
        java.util.Map $r7;
        java.lang.Class $r1;
        java.lang.StringBuilder $r4;
        java.lang.Object $r8;
        java.lang.String $r2, $r5;
        java.lang.reflect.Method $r3;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.ClassReference$Companion;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "jClass");

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAnonymousClass()>();

        $r2 = null;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isLocalClass()>();

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>();

        if $r3 == null goto label3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "name");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(36);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r2, $r5, null, 2, null);

        if $r5 != null goto label2;

        goto label3;

     label2:
        return $r5;

     label3:
        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>();

        if $r6 == null goto label4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "name");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(36);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r2, $r5, null, 2, null);

        return $r2;

     label4:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "name");

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>($r2, 36, null, 2, null);

        return $r2;

     label5:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label7;

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label6;

        $r7 = staticinvoke <kotlin.jvm.internal.ClassReference: java.util.Map access$getSimpleNames$cp()>();

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r5 = (java.lang.String) $r8;

        if $r5 == null goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label6:
        if $r2 != null goto label8;

        return "Array";

     label7:
        $r7 = staticinvoke <kotlin.jvm.internal.ClassReference: java.util.Map access$getSimpleNames$cp()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r2 = (java.lang.String) $r8;

        if $r2 != null goto label8;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

     label8:
        return $r2;
    }

    public final boolean isInstance(java.lang.Object, java.lang.Class)
    {
        kotlin.reflect.KClass $r7;
        kotlin.jvm.internal.ClassReference$Companion r0;
        java.lang.Integer r5;
        java.util.Map $r3;
        int $i0;
        java.lang.Object $r1, $r4;
        java.lang.Class $r2;
        java.lang.Number r6;
        boolean $z0;

        r0 := @this: kotlin.jvm.internal.ClassReference$Companion;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "jClass");

        $r3 = staticinvoke <kotlin.jvm.internal.ClassReference: java.util.Map access$getFUNCTION_CLASSES$cp()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlin.collections.Map<K of kotlin.collections.MapsKt__MapsKt.get, V of kotlin.collections.MapsKt__MapsKt.get>");

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.lang.Integer) $r4;

        if r5 == null goto label1;

        r6 = (java.lang.Number) r5;

        $i0 = virtualinvoke r6.<java.lang.Number: int intValue()>();

        $z0 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: boolean isFunctionOfArity(java.lang.Object,int)>($r1, $i0);

        return $z0;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        $r7 = staticinvoke <kotlin.jvm.JvmClassMappingKt: kotlin.reflect.KClass getKotlinClass(java.lang.Class)>($r2);

        $r2 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>($r7);

        goto label2;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>($r1);

        return $z0;
    }
}
