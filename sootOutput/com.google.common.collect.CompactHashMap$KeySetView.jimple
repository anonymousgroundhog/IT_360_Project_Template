class com.google.common.collect.CompactHashMap$KeySetView extends java.util.AbstractSet
{
    final com.google.common.collect.CompactHashMap this$0;

    void <init>(com.google.common.collect.CompactHashMap)
    {
        com.google.common.collect.CompactHashMap $r1;
        com.google.common.collect.CompactHashMap$KeySetView r0;

        r0 := @this: com.google.common.collect.CompactHashMap$KeySetView;

        $r1 := @parameter0: com.google.common.collect.CompactHashMap;

        r0.<com.google.common.collect.CompactHashMap$KeySetView: com.google.common.collect.CompactHashMap this$0> = $r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public void clear()
    {
        com.google.common.collect.CompactHashMap $r1;
        com.google.common.collect.CompactHashMap$KeySetView r0;

        r0 := @this: com.google.common.collect.CompactHashMap$KeySetView;

        $r1 = r0.<com.google.common.collect.CompactHashMap$KeySetView: com.google.common.collect.CompactHashMap this$0>;

        virtualinvoke $r1.<com.google.common.collect.CompactHashMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactHashMap $r2;
        com.google.common.collect.CompactHashMap$KeySetView r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap$KeySetView;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.CompactHashMap$KeySetView: com.google.common.collect.CompactHashMap this$0>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.CompactHashMap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r1;
        com.google.common.collect.CompactHashMap $r2;
        com.google.common.collect.CompactHashMap$KeySetView r0;

        r0 := @this: com.google.common.collect.CompactHashMap$KeySetView;

        $r2 = r0.<com.google.common.collect.CompactHashMap$KeySetView: com.google.common.collect.CompactHashMap this$0>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.CompactHashMap: java.util.Iterator keySetIterator()>();

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Map $r3;
        java.util.Set $r4;
        java.lang.Object $r1, $r5;
        com.google.common.collect.CompactHashMap r2;
        com.google.common.collect.CompactHashMap$KeySetView r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactHashMap$KeySetView;

        $r1 := @parameter0: java.lang.Object;

        r2 = r0.<com.google.common.collect.CompactHashMap$KeySetView: com.google.common.collect.CompactHashMap this$0>;

        $r3 = virtualinvoke r2.<com.google.common.collect.CompactHashMap: java.util.Map delegateOrNull()>();

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        return $z0;

     label1:
        r2 = r0.<com.google.common.collect.CompactHashMap$KeySetView: com.google.common.collect.CompactHashMap this$0>;

        $r1 = staticinvoke <com.google.common.collect.CompactHashMap: java.lang.Object access$200(com.google.common.collect.CompactHashMap,java.lang.Object)>(r2, $r1);

        $r5 = staticinvoke <com.google.common.collect.CompactHashMap: java.lang.Object access$300()>();

        if $r1 == $r5 goto label2;

        return 1;

     label2:
        return 0;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.CompactHashMap $r1;
        com.google.common.collect.CompactHashMap$KeySetView r0;

        r0 := @this: com.google.common.collect.CompactHashMap$KeySetView;

        $r1 = r0.<com.google.common.collect.CompactHashMap$KeySetView: com.google.common.collect.CompactHashMap this$0>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.CompactHashMap: int size()>();

        return $i0;
    }
}
