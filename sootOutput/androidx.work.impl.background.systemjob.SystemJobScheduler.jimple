public class androidx.work.impl.background.systemjob.SystemJobScheduler extends java.lang.Object implements androidx.work.impl.Scheduler
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.app.job.JobScheduler mJobScheduler;
    private final androidx.work.impl.background.systemjob.SystemJobInfoConverter mSystemJobInfoConverter;
    private final androidx.work.impl.WorkManagerImpl mWorkManager;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("SystemJobScheduler");

        <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG> = $r0;

        return;
    }

    public void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl)
    {
        androidx.work.impl.background.systemjob.SystemJobScheduler r0;
        android.content.Context $r1;
        android.app.job.JobScheduler $r5;
        androidx.work.impl.background.systemjob.SystemJobInfoConverter $r3;
        androidx.work.impl.WorkManagerImpl $r2;
        java.lang.Object $r4;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobScheduler;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("jobscheduler");

        $r5 = (android.app.job.JobScheduler) $r4;

        $r3 = new androidx.work.impl.background.systemjob.SystemJobInfoConverter;

        specialinvoke $r3.<androidx.work.impl.background.systemjob.SystemJobInfoConverter: void <init>(android.content.Context)>($r1);

        specialinvoke r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: void <init>(android.content.Context,androidx.work.impl.WorkManagerImpl,android.app.job.JobScheduler,androidx.work.impl.background.systemjob.SystemJobInfoConverter)>($r1, $r2, $r5, $r3);

        return;
    }

    public void <init>(android.content.Context, androidx.work.impl.WorkManagerImpl, android.app.job.JobScheduler, androidx.work.impl.background.systemjob.SystemJobInfoConverter)
    {
        androidx.work.impl.background.systemjob.SystemJobScheduler r0;
        android.content.Context $r1;
        android.app.job.JobScheduler $r3;
        androidx.work.impl.background.systemjob.SystemJobInfoConverter $r4;
        androidx.work.impl.WorkManagerImpl $r2;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobScheduler;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r3 := @parameter2: android.app.job.JobScheduler;

        $r4 := @parameter3: androidx.work.impl.background.systemjob.SystemJobInfoConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.content.Context mContext> = $r1;

        r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager> = $r2;

        r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.app.job.JobScheduler mJobScheduler> = $r3;

        r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.background.systemjob.SystemJobInfoConverter mSystemJobInfoConverter> = $r4;

        return;
    }

    public static void cancelAll(android.content.Context)
    {
        android.content.Context $r0;
        java.util.Iterator $r4;
        android.app.job.JobScheduler r2;
        java.util.List $r3;
        int $i0;
        java.lang.Object $r1;
        android.app.job.JobInfo r5;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("jobscheduler");

        r2 = (android.app.job.JobScheduler) $r1;

        if r2 == null goto label2;

        $r3 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.util.List getPendingJobs(android.content.Context,android.app.job.JobScheduler)>($r0, r2);

        if $r3 == null goto label2;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.app.job.JobInfo) $r1;

        $i0 = virtualinvoke r5.<android.app.job.JobInfo: int getId()>();

        staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: void cancelJobById(android.app.job.JobScheduler,int)>(r2, $i0);

        goto label1;

     label2:
        return;
    }

    private static void cancelJobById(android.app.job.JobScheduler, int)
    {
        java.lang.Throwable r1;
        java.lang.Object[] $r3;
        android.app.job.JobScheduler $r0;
        java.lang.Integer $r6;
        androidx.work.Logger $r4;
        java.util.Locale $r5;
        java.lang.Throwable[] $r8;
        int $i0;
        java.lang.String $r2, $r7;

        $r0 := @parameter0: android.app.job.JobScheduler;

        $i0 := @parameter1: int;

     label1:
        virtualinvoke $r0.<android.app.job.JobScheduler: void cancel(int)>($i0);

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r2 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        $r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r5, "Exception while trying to cancel job (%d)", $r3);

        $r8 = newarray (java.lang.Throwable)[1];

        $r8[0] = r1;

        virtualinvoke $r4.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable[])>($r2, $r7, $r8);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.util.List getPendingJobIds(android.content.Context, android.app.job.JobScheduler, java.lang.String)
    {
        android.content.Context $r0;
        java.util.Iterator $r5;
        android.app.job.JobScheduler $r1;
        java.lang.Integer $r9;
        java.util.ArrayList r4;
        java.util.List $r3;
        int $i0;
        java.lang.Object $r6;
        android.app.job.JobInfo r7;
        java.lang.String $r2, $r8;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.app.job.JobScheduler;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.util.List getPendingJobs(android.content.Context,android.app.job.JobScheduler)>($r0, $r1);

        if $r3 != null goto label1;

        return null;

     label1:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>(2);

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.app.job.JobInfo) $r6;

        $r8 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String getWorkSpecIdFromJobInfo(android.app.job.JobInfo)>(r7);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r7.<android.app.job.JobInfo: int getId()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        return r4;
    }

    private static java.util.List getPendingJobs(android.content.Context, android.app.job.JobScheduler)
    {
        java.lang.Throwable r4;
        android.content.Context $r0;
        java.util.ArrayList r8;
        androidx.work.Logger $r5;
        int $i0;
        android.app.job.JobInfo r12;
        java.lang.String $r6;
        boolean $z0;
        java.util.Iterator $r10;
        android.app.job.JobScheduler $r1;
        android.content.ComponentName r9, $r13;
        java.util.List r2, $r3;
        java.lang.Throwable[] r7;
        java.lang.Object $r11;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.app.job.JobScheduler;

        r2 = null;

     label1:
        $r3 = virtualinvoke $r1.<android.app.job.JobScheduler: java.util.List getAllPendingJobs()>();

     label2:
        r2 = $r3;

        goto label4;

     label3:
        r4 := @caughtexception;

        $r5 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r6 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        r7 = newarray (java.lang.Throwable)[1];

        r7[0] = r4;

        virtualinvoke $r5.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable[])>($r6, "getAllPendingJobs() is not reliable on this device.", r7);

     label4:
        if r2 != null goto label5;

        return null;

     label5:
        r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i0);

        r9 = new android.content.ComponentName;

        specialinvoke r9.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r0, class "Landroidx/work/impl/background/systemjob/SystemJobService;");

        $r10 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.app.job.JobInfo) $r11;

        $r13 = virtualinvoke r12.<android.app.job.JobInfo: android.content.ComponentName getService()>();

        $z0 = virtualinvoke r9.<android.content.ComponentName: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label6;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r12);

        goto label6;

     label7:
        return r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.String getWorkSpecIdFromJobInfo(android.app.job.JobInfo)
    {
        android.os.PersistableBundle $r1;
        android.app.job.JobInfo $r0;
        java.lang.String $r2;
        java.lang.NullPointerException $r3;
        boolean $z0;

        $r0 := @parameter0: android.app.job.JobInfo;

        $r1 = virtualinvoke $r0.<android.app.job.JobInfo: android.os.PersistableBundle getExtras()>();

        if $r1 == null goto label6;

     label1:
        $z0 = virtualinvoke $r1.<android.os.PersistableBundle: boolean containsKey(java.lang.String)>("EXTRA_WORK_SPEC_ID");

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r2 = virtualinvoke $r1.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("EXTRA_WORK_SPEC_ID");

     label4:
        return $r2;

     label5:
        $r3 := @caughtexception;

        goto label6;

     label6:
        return null;

        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public static boolean reconcileJobs(android.content.Context, androidx.work.impl.WorkManagerImpl)
    {
        java.lang.Throwable r15;
        android.content.Context $r0;
        androidx.work.impl.model.SystemIdInfoDao $r7;
        java.util.HashSet r2;
        androidx.work.Logger $r12;
        androidx.work.impl.WorkDatabase $r6;
        int $i0;
        android.app.job.JobInfo r10;
        java.lang.String $r11;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        android.app.job.JobScheduler r4;
        androidx.work.impl.model.WorkSpecDao $r14;
        java.util.List $r5, $r8;
        java.lang.Throwable[] r13;
        androidx.work.impl.WorkManagerImpl $r1;
        java.lang.Object $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: androidx.work.impl.WorkManagerImpl;

        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("jobscheduler");

        r4 = (android.app.job.JobScheduler) $r3;

        $r5 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.util.List getPendingJobs(android.content.Context,android.app.job.JobScheduler)>($r0, r4);

        $r6 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r7 = virtualinvoke $r6.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.SystemIdInfoDao systemIdInfoDao()>();

        $r8 = interfaceinvoke $r7.<androidx.work.impl.model.SystemIdInfoDao: java.util.List getWorkSpecIds()>();

        if $r5 == null goto label01;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        goto label02;

     label01:
        $i0 = 0;

     label02:
        r2 = new java.util.HashSet;

        specialinvoke r2.<java.util.HashSet: void <init>(int)>($i0);

        if $r5 == null goto label05;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label05;

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r3 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.app.job.JobInfo) $r3;

        $r11 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String getWorkSpecIdFromJobInfo(android.app.job.JobInfo)>(r10);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r11);

        if $z0 != 0 goto label04;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r11);

        goto label03;

     label04:
        $i0 = virtualinvoke r10.<android.app.job.JobInfo: int getId()>();

        staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: void cancelJobById(android.app.job.JobScheduler,int)>(r4, $i0);

        goto label03;

     label05:
        $z0 = 0;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r3 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.String) $r3;

        $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        if $z1 != 0 goto label06;

        $r12 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r11 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        r13 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r12.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>($r11, "Reconciling jobs", r13);

        $z0 = 1;

        goto label07;

     label07:
        if $z0 == 0 goto label16;

        $r6 = virtualinvoke $r1.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        virtualinvoke $r6.<androidx.work.impl.WorkDatabase: void beginTransaction()>();

     label08:
        $r14 = virtualinvoke $r6.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label10:
        if $z1 == 0 goto label13;

     label11:
        $r3 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.String) $r3;

        interfaceinvoke $r14.<androidx.work.impl.model.WorkSpecDao: int markWorkSpecScheduled(java.lang.String,long)>($r11, -1L);

     label12:
        goto label09;

     label13:
        virtualinvoke $r6.<androidx.work.impl.WorkDatabase: void setTransactionSuccessful()>();

     label14:
        virtualinvoke $r6.<androidx.work.impl.WorkDatabase: void endTransaction()>();

        return $z0;

     label15:
        r15 := @caughtexception;

        virtualinvoke $r6.<androidx.work.impl.WorkDatabase: void endTransaction()>();

        throw r15;

     label16:
        return $z0;

        catch java.lang.Throwable from label08 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public void cancel(java.lang.String)
    {
        androidx.work.impl.background.systemjob.SystemJobScheduler r0;
        android.content.Context r3;
        java.util.Iterator $r5;
        android.app.job.JobScheduler $r2;
        androidx.work.impl.model.SystemIdInfoDao $r10;
        java.lang.Integer r7;
        java.util.List $r4;
        androidx.work.impl.WorkDatabase $r9;
        int $i0;
        java.lang.Object $r6;
        androidx.work.impl.WorkManagerImpl $r8;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobScheduler;

        $r1 := @parameter0: java.lang.String;

        r3 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.content.Context mContext>;

        $r2 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.app.job.JobScheduler mJobScheduler>;

        $r4 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.util.List getPendingJobIds(android.content.Context,android.app.job.JobScheduler,java.lang.String)>(r3, $r2, $r1);

        if $r4 == null goto label3;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        $r2 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.app.job.JobScheduler mJobScheduler>;

        staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: void cancelJobById(android.app.job.JobScheduler,int)>($r2, $i0);

        goto label1;

     label2:
        $r8 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r9 = virtualinvoke $r8.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r10 = virtualinvoke $r9.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.SystemIdInfoDao systemIdInfoDao()>();

        interfaceinvoke $r10.<androidx.work.impl.model.SystemIdInfoDao: void removeSystemIdInfo(java.lang.String)>($r1);

     label3:
        return;
    }

    public boolean hasLimitedSchedulingSlots()
    {
        androidx.work.impl.background.systemjob.SystemJobScheduler r0;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobScheduler;

        return 1;
    }

    public transient void schedule(androidx.work.impl.model.WorkSpec[])
    {
        java.lang.Throwable $r24;
        android.content.Context r19;
        androidx.work.impl.model.SystemIdInfoDao $r15;
        androidx.work.impl.utils.IdGenerator r2;
        java.lang.Integer $r22;
        androidx.work.impl.model.WorkSpec r3, $r8;
        androidx.work.Logger $r9;
        androidx.work.Configuration $r17;
        androidx.work.impl.WorkDatabase $r5, $r18;
        int $i0, $i1, i2, $i3;
        java.lang.String r7, r11;
        boolean $z0;
        androidx.work.impl.background.systemjob.SystemJobScheduler r0;
        androidx.work.impl.model.WorkSpecDao $r6;
        android.app.job.JobScheduler r20;
        androidx.work.impl.model.SystemIdInfo $r16;
        java.util.List $r21;
        java.lang.Throwable[] r12;
        androidx.work.WorkInfo$State r13, r14;
        androidx.work.impl.WorkManagerImpl r4;
        java.lang.StringBuilder r10;
        java.lang.Object $r23;
        androidx.work.impl.model.WorkSpec[] $r1;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobScheduler;

        $r1 := @parameter0: androidx.work.impl.model.WorkSpec[];

        r4 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r5 = virtualinvoke r4.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        r2 = new androidx.work.impl.utils.IdGenerator;

        specialinvoke r2.<androidx.work.impl.utils.IdGenerator: void <init>(androidx.work.impl.WorkDatabase)>($r5);

        $i0 = lengthof $r1;

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label34;

        r3 = $r1[$i1];

        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void beginTransaction()>();

     label02:
        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        r7 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r8 = interfaceinvoke $r6.<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>(r7);

     label03:
        if $r8 != null goto label06;

     label04:
        $r9 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r7 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        r10 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping scheduling ");

        r11 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        r10 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r10 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it\'s no longer in the DB");

        r11 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r9.<androidx.work.Logger: void warning(java.lang.String,java.lang.String,java.lang.Throwable[])>(r7, r11, r12);

        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void setTransactionSuccessful()>();

     label05:
        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void endTransaction()>();

        goto label32;

     label06:
        r13 = $r8.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state>;

        r14 = <androidx.work.WorkInfo$State: androidx.work.WorkInfo$State ENQUEUED>;

     label07:
        if r13 == r14 goto label10;

     label08:
        $r9 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r7 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        r10 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping scheduling ");

        r11 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        r10 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r10 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it is no longer enqueued");

        r11 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r9.<androidx.work.Logger: void warning(java.lang.String,java.lang.String,java.lang.Throwable[])>(r7, r11, r12);

        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void setTransactionSuccessful()>();

     label09:
        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void endTransaction()>();

        goto label32;

     label10:
        $r15 = virtualinvoke $r5.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.SystemIdInfoDao systemIdInfoDao()>();

        r7 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r16 = interfaceinvoke $r15.<androidx.work.impl.model.SystemIdInfoDao: androidx.work.impl.model.SystemIdInfo getSystemIdInfo(java.lang.String)>(r7);

     label11:
        if $r16 == null goto label14;

     label12:
        i2 = $r16.<androidx.work.impl.model.SystemIdInfo: int systemId>;

     label13:
        goto label15;

     label14:
        r4 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r17 = virtualinvoke r4.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        i2 = virtualinvoke $r17.<androidx.work.Configuration: int getMinJobSchedulerId()>();

        r4 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r17 = virtualinvoke r4.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        $i3 = virtualinvoke $r17.<androidx.work.Configuration: int getMaxJobSchedulerId()>();

        i2 = virtualinvoke r2.<androidx.work.impl.utils.IdGenerator: int nextJobSchedulerIdWithRange(int,int)>(i2, $i3);

     label15:
        if $r16 != null goto label17;

     label16:
        $r16 = new androidx.work.impl.model.SystemIdInfo;

        r7 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        specialinvoke $r16.<androidx.work.impl.model.SystemIdInfo: void <init>(java.lang.String,int)>(r7, i2);

        r4 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r18 = virtualinvoke r4.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r15 = virtualinvoke $r18.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.SystemIdInfoDao systemIdInfoDao()>();

        interfaceinvoke $r15.<androidx.work.impl.model.SystemIdInfoDao: void insertSystemIdInfo(androidx.work.impl.model.SystemIdInfo)>($r16);

     label17:
        virtualinvoke r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: void scheduleInternal(androidx.work.impl.model.WorkSpec,int)>(r3, i2);

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

     label18:
        if $i3 != 23 goto label30;

     label19:
        r19 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.content.Context mContext>;

        r20 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.app.job.JobScheduler mJobScheduler>;

        r7 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r21 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.util.List getPendingJobIds(android.content.Context,android.app.job.JobScheduler,java.lang.String)>(r19, r20, r7);

     label20:
        if $r21 == null goto label30;

     label21:
        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        i2 = interfaceinvoke $r21.<java.util.List: int indexOf(java.lang.Object)>($r22);

     label22:
        if i2 < 0 goto label24;

     label23:
        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>(i2);

     label24:
        $z0 = interfaceinvoke $r21.<java.util.List: boolean isEmpty()>();

     label25:
        if $z0 != 0 goto label28;

     label26:
        $r23 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (java.lang.Integer) $r23;

        i2 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

     label27:
        goto label29;

     label28:
        r4 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r17 = virtualinvoke r4.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        i2 = virtualinvoke $r17.<androidx.work.Configuration: int getMinJobSchedulerId()>();

        r4 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r17 = virtualinvoke r4.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        $i3 = virtualinvoke $r17.<androidx.work.Configuration: int getMaxJobSchedulerId()>();

        i2 = virtualinvoke r2.<androidx.work.impl.utils.IdGenerator: int nextJobSchedulerIdWithRange(int,int)>(i2, $i3);

     label29:
        virtualinvoke r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: void scheduleInternal(androidx.work.impl.model.WorkSpec,int)>(r3, i2);

     label30:
        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void setTransactionSuccessful()>();

     label31:
        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void endTransaction()>();

     label32:
        $i1 = $i1 + 1;

        goto label01;

     label33:
        $r24 := @caughtexception;

        virtualinvoke $r5.<androidx.work.impl.WorkDatabase: void endTransaction()>();

        throw $r24;

     label34:
        return;

        catch java.lang.Throwable from label02 to label03 with label33;
        catch java.lang.Throwable from label04 to label05 with label33;
        catch java.lang.Throwable from label06 to label07 with label33;
        catch java.lang.Throwable from label08 to label09 with label33;
        catch java.lang.Throwable from label10 to label11 with label33;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Throwable from label14 to label15 with label33;
        catch java.lang.Throwable from label16 to label18 with label33;
        catch java.lang.Throwable from label19 to label20 with label33;
        catch java.lang.Throwable from label21 to label22 with label33;
        catch java.lang.Throwable from label23 to label25 with label33;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Throwable from label29 to label31 with label33;
    }

    public void scheduleInternal(androidx.work.impl.model.WorkSpec, int)
    {
        java.lang.Throwable r13;
        java.lang.IllegalStateException r14, $r24;
        android.content.Context r15;
        java.lang.Object[] $r8;
        androidx.work.impl.background.systemjob.SystemJobInfoConverter r2;
        java.lang.Integer $r7, $r21, $r23;
        androidx.work.impl.model.WorkSpec $r1;
        androidx.work.Logger $r4;
        androidx.work.Configuration $r22;
        java.util.Locale $r17;
        androidx.work.impl.WorkDatabase $r19;
        int $i0, $i1;
        android.app.job.JobInfo $r3;
        java.lang.String r5, r6;
        androidx.work.OutOfQuotaPolicy r11, r12;
        boolean z0;
        androidx.work.impl.background.systemjob.SystemJobScheduler r0;
        android.app.job.JobScheduler r10;
        androidx.work.impl.model.WorkSpecDao $r20;
        java.util.List $r16;
        java.lang.Throwable[] $r9;
        androidx.work.impl.WorkManagerImpl $r18;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobScheduler;

        $r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        $i0 := @parameter1: int;

        r2 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.background.systemjob.SystemJobInfoConverter mSystemJobInfoConverter>;

        $r3 = virtualinvoke r2.<androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.app.job.JobInfo convert(androidx.work.impl.model.WorkSpec,int)>($r1, $i0);

        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r5 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        r6 = $r1.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r6;

        $r8[1] = $r7;

        r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Scheduling work ID %s Job ID %s", $r8);

        $r9 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>(r5, r6, $r9);

     label01:
        r10 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.app.job.JobScheduler mJobScheduler>;

     label02:
        $i1 = virtualinvoke r10.<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>($r3);

     label03:
        if $i1 != 0 goto label17;

     label04:
        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

     label05:
        r5 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        $r8 = newarray (java.lang.Object)[1];

        r6 = $r1.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r8[0] = r6;

     label06:
        r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to schedule work ID %s", $r8);

     label07:
        $r9 = newarray (java.lang.Throwable)[0];

     label08:
        virtualinvoke $r4.<androidx.work.Logger: void warning(java.lang.String,java.lang.String,java.lang.Throwable[])>(r5, r6, $r9);

     label09:
        z0 = $r1.<androidx.work.impl.model.WorkSpec: boolean expedited>;

     label10:
        if z0 == 0 goto label17;

     label11:
        r11 = $r1.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy>;

        r12 = <androidx.work.OutOfQuotaPolicy: androidx.work.OutOfQuotaPolicy RUN_AS_NON_EXPEDITED_WORK_REQUEST>;

     label12:
        if r11 != r12 goto label17;

     label13:
        $r1.<androidx.work.impl.model.WorkSpec: boolean expedited> = 0;

        $r8 = newarray (java.lang.Object)[1];

        r5 = $r1.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        $r8[0] = r5;

     label14:
        r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Scheduling a non-expedited job (work ID %s)", $r8);

        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

     label15:
        r6 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        $r9 = newarray (java.lang.Throwable)[0];

     label16:
        virtualinvoke $r4.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>(r6, r5, $r9);

        virtualinvoke r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: void scheduleInternal(androidx.work.impl.model.WorkSpec,int)>($r1, $i0);

     label17:
        return;

     label18:
        r13 := @caughtexception;

        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r5 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r1;

        r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to schedule %s", $r8);

        $r9 = newarray (java.lang.Throwable)[1];

        $r9[0] = r13;

        virtualinvoke $r4.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable[])>(r5, r6, $r9);

        return;

     label19:
        r14 := @caughtexception;

        r15 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.content.Context mContext>;

        r10 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: android.app.job.JobScheduler mJobScheduler>;

        $r16 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobScheduler: java.util.List getPendingJobs(android.content.Context,android.app.job.JobScheduler)>(r15, r10);

        if $r16 == null goto label20;

        $i0 = interfaceinvoke $r16.<java.util.List: int size()>();

        goto label21;

     label20:
        $i0 = 0;

     label21:
        $r17 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r18 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r19 = virtualinvoke $r18.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r20 = virtualinvoke $r19.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        $r16 = interfaceinvoke $r20.<androidx.work.impl.model.WorkSpecDao: java.util.List getScheduledWork()>();

        $i0 = interfaceinvoke $r16.<java.util.List: int size()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r18 = r0.<androidx.work.impl.background.systemjob.SystemJobScheduler: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r22 = virtualinvoke $r18.<androidx.work.impl.WorkManagerImpl: androidx.work.Configuration getConfiguration()>();

        $i0 = virtualinvoke $r22.<androidx.work.Configuration: int getMaxSchedulerLimit()>();

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = $r7;

        $r8[1] = $r21;

        $r8[2] = $r23;

        r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r17, "JobScheduler 100 job limit exceeded.  We count %d WorkManager jobs in JobScheduler; we have %d tracked jobs in our DB; our Configuration limit is %d.", $r8);

        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        r6 = <androidx.work.impl.background.systemjob.SystemJobScheduler: java.lang.String TAG>;

        $r9 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r4.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable[])>(r6, r5, $r9);

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(r5, r14);

        throw $r24;

        catch java.lang.IllegalStateException from label02 to label03 with label19;
        catch java.lang.IllegalStateException from label04 to label05 with label19;
        catch java.lang.IllegalStateException from label06 to label07 with label19;
        catch java.lang.IllegalStateException from label08 to label09 with label19;
        catch java.lang.IllegalStateException from label14 to label15 with label19;
        catch java.lang.IllegalStateException from label16 to label17 with label19;
        catch java.lang.Throwable from label01 to label03 with label18;
        catch java.lang.Throwable from label04 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label17 with label18;
    }
}
