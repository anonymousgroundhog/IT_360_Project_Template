public final class kotlinx.coroutines.NonCancellable extends kotlin.coroutines.AbstractCoroutineContextElement implements kotlinx.coroutines.Job
{
    public static final kotlinx.coroutines.NonCancellable INSTANCE;
    private static final java.lang.String message;

    static void <clinit>()
    {
        kotlinx.coroutines.NonCancellable $r0;

        <kotlinx.coroutines.NonCancellable: java.lang.String message> = "NonCancellable can be used only as an argument for \'withContext\', direct usages of its API are prohibited";

        $r0 = new kotlinx.coroutines.NonCancellable;

        specialinvoke $r0.<kotlinx.coroutines.NonCancellable: void <init>()>();

        <kotlinx.coroutines.NonCancellable: kotlinx.coroutines.NonCancellable INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlin.coroutines.CoroutineContext$Key $r2;
        kotlinx.coroutines.Job$Key $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r2 = (kotlin.coroutines.CoroutineContext$Key) $r1;

        specialinvoke r0.<kotlin.coroutines.AbstractCoroutineContextElement: void <init>(kotlin.coroutines.CoroutineContext$Key)>($r2);

        return;
    }

    public static void getChildren$annotations()
    {
        return;
    }

    public static void getOnJoin$annotations()
    {
        return;
    }

    public static void getParent$annotations()
    {
        return;
    }

    public static void isActive$annotations()
    {
        return;
    }

    public static void isCancelled$annotations()
    {
        return;
    }

    public static void isCompleted$annotations()
    {
        return;
    }

    public kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)
    {
        kotlinx.coroutines.NonDisposableHandle $r2;
        kotlinx.coroutines.ChildJob $r1;
        kotlinx.coroutines.ChildHandle $r3;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 := @parameter0: kotlinx.coroutines.ChildJob;

        $r2 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        $r3 = (kotlinx.coroutines.ChildHandle) $r2;

        return $r3;
    }

    public void cancel()
    {
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel(kotlinx.coroutines.Job)>(r0);

        return;
    }

    public void cancel(java.util.concurrent.CancellationException)
    {
        java.util.concurrent.CancellationException $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        return;
    }

    public boolean cancel(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 := @parameter0: java.lang.Throwable;

        return 0;
    }

    public java.util.concurrent.CancellationException getCancellationException()
    {
        java.lang.IllegalStateException $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This job is always active");

        throw $r1;
    }

    public kotlin.sequences.Sequence getChildren()
    {
        kotlin.sequences.Sequence $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence emptySequence()>();

        return $r1;
    }

    public kotlinx.coroutines.selects.SelectClause0 getOnJoin()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This job is always active");

        throw $r1;
    }

    public kotlinx.coroutines.Job getParent()
    {
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        return null;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.DisposableHandle $r3;
        kotlinx.coroutines.NonDisposableHandle $r2;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        $r3 = (kotlinx.coroutines.DisposableHandle) $r2;

        return $r3;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean, boolean, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.DisposableHandle $r3;
        kotlinx.coroutines.NonDisposableHandle $r2;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.NonCancellable r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $r2 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        $r3 = (kotlinx.coroutines.DisposableHandle) $r2;

        return $r3;
    }

    public boolean isActive()
    {
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        return 1;
    }

    public boolean isCancelled()
    {
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        return 0;
    }

    public boolean isCompleted()
    {
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        return 0;
    }

    public java.lang.Object join(kotlin.coroutines.Continuation)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This job is always active");

        throw $r2;
    }

    public kotlinx.coroutines.Job plus(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.Job $r1;
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        $r1 := @parameter0: kotlinx.coroutines.Job;

        $r1 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.Job plus(kotlinx.coroutines.Job,kotlinx.coroutines.Job)>(r0, $r1);

        return $r1;
    }

    public boolean start()
    {
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        return 0;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.NonCancellable r0;

        r0 := @this: kotlinx.coroutines.NonCancellable;

        return "NonCancellable";
    }
}
