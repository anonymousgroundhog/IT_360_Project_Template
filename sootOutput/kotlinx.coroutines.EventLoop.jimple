public abstract class kotlinx.coroutines.EventLoop extends kotlinx.coroutines.CoroutineDispatcher
{
    private boolean shared;
    private kotlin.collections.ArrayDeque unconfinedQueue;
    private long useCount;

    public void <init>()
    {
        kotlinx.coroutines.EventLoop r0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: void <init>()>();

        return;
    }

    public static void decrementUseCount$default(kotlinx.coroutines.EventLoop, boolean, int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        int $i0;
        java.lang.Object $r0;
        kotlinx.coroutines.EventLoop $r1;
        boolean $z0;

        $r1 := @parameter0: kotlinx.coroutines.EventLoop;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        if $r0 != null goto label2;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)>($z0);

        return;

     label2:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: decrementUseCount");

        throw $r2;
    }

    private final long delta(boolean)
    {
        kotlinx.coroutines.EventLoop r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return 4294967296L;

     label1:
        return 1L;
    }

    public static void incrementUseCount$default(kotlinx.coroutines.EventLoop, boolean, int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        int $i0;
        java.lang.Object $r0;
        kotlinx.coroutines.EventLoop $r1;
        boolean $z0;

        $r1 := @parameter0: kotlinx.coroutines.EventLoop;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        if $r0 != null goto label2;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)>($z0);

        return;

     label2:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: incrementUseCount");

        throw $r2;
    }

    public final void decrementUseCount(boolean)
    {
        byte $b2;
        int $i3;
        long $l0, $l1;
        java.lang.AssertionError $r1;
        kotlinx.coroutines.EventLoop r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $z0 := @parameter0: boolean;

        $l0 = r0.<kotlinx.coroutines.EventLoop: long useCount>;

        $l1 = specialinvoke r0.<kotlinx.coroutines.EventLoop: long delta(boolean)>($z0);

        $l0 = $l0 - $l1;

        r0.<kotlinx.coroutines.EventLoop: long useCount> = $l0;

        $l0 = r0.<kotlinx.coroutines.EventLoop: long useCount>;

        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label1;

        return;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $l0 = r0.<kotlinx.coroutines.EventLoop: long useCount>;

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label5:
        $z0 = r0.<kotlinx.coroutines.EventLoop: boolean shared>;

        if $z0 == 0 goto label6;

        virtualinvoke r0.<kotlinx.coroutines.EventLoop: void shutdown()>();

     label6:
        return;
    }

    public final void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)
    {
        kotlinx.coroutines.DispatchedTask $r1;
        kotlinx.coroutines.EventLoop r0;
        kotlin.collections.ArrayDeque r2;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $r1 := @parameter0: kotlinx.coroutines.DispatchedTask;

        r2 = r0.<kotlinx.coroutines.EventLoop: kotlin.collections.ArrayDeque unconfinedQueue>;

        if r2 != null goto label1;

        r2 = new kotlin.collections.ArrayDeque;

        specialinvoke r2.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<kotlinx.coroutines.EventLoop: kotlin.collections.ArrayDeque unconfinedQueue> = r2;

     label1:
        virtualinvoke r2.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>($r1);

        return;
    }

    protected long getNextTime()
    {
        kotlinx.coroutines.EventLoop r0;
        kotlin.collections.ArrayDeque r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        r1 = r0.<kotlinx.coroutines.EventLoop: kotlin.collections.ArrayDeque unconfinedQueue>;

        if r1 != null goto label1;

        return 9223372036854775807L;

     label1:
        $z0 = virtualinvoke r1.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return 9223372036854775807L;

     label2:
        return 0L;
    }

    public final void incrementUseCount(boolean)
    {
        long $l0, $l1;
        kotlinx.coroutines.EventLoop r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $z0 := @parameter0: boolean;

        $l1 = r0.<kotlinx.coroutines.EventLoop: long useCount>;

        $l0 = specialinvoke r0.<kotlinx.coroutines.EventLoop: long delta(boolean)>($z0);

        $l0 = $l1 + $l0;

        r0.<kotlinx.coroutines.EventLoop: long useCount> = $l0;

        if $z0 != 0 goto label1;

        r0.<kotlinx.coroutines.EventLoop: boolean shared> = 1;

     label1:
        return;
    }

    public final boolean isActive()
    {
        byte $b0;
        int $i2;
        long $l1;
        kotlinx.coroutines.EventLoop r0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $l1 = r0.<kotlinx.coroutines.EventLoop: long useCount>;

        $b0 = $l1 cmp 0L;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isEmpty()
    {
        kotlinx.coroutines.EventLoop r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()>();

        return $z0;
    }

    public final boolean isUnconfinedLoopActive()
    {
        byte $b1;
        int $i3;
        long $l0, $l2;
        kotlinx.coroutines.EventLoop r0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $l0 = r0.<kotlinx.coroutines.EventLoop: long useCount>;

        $l2 = specialinvoke r0.<kotlinx.coroutines.EventLoop: long delta(boolean)>(1);

        $b1 = $l0 cmp $l2;

        $i3 = (int) $b1;

        if $i3 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isUnconfinedQueueEmpty()
    {
        kotlinx.coroutines.EventLoop r0;
        kotlin.collections.ArrayDeque $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $r1 = r0.<kotlinx.coroutines.EventLoop: kotlin.collections.ArrayDeque unconfinedQueue>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<kotlin.collections.ArrayDeque: boolean isEmpty()>();

        return $z0;

     label1:
        return 1;
    }

    public final kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)
    {
        int $i0;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        kotlinx.coroutines.EventLoop r0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $i0 := @parameter0: int;

        staticinvoke <kotlinx.coroutines.internal.LimitedDispatcherKt: void checkParallelism(int)>($i0);

        $r1 = (kotlinx.coroutines.CoroutineDispatcher) r0;

        return $r1;
    }

    public long processNextEvent()
    {
        kotlinx.coroutines.EventLoop r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()>();

        if $z0 != 0 goto label1;

        return 9223372036854775807L;

     label1:
        return 0L;
    }

    public final boolean processUnconfinedEvent()
    {
        kotlinx.coroutines.DispatchedTask $r3;
        java.lang.Object $r2;
        kotlinx.coroutines.EventLoop r0;
        kotlin.collections.ArrayDeque r1;

        r0 := @this: kotlinx.coroutines.EventLoop;

        r1 = r0.<kotlinx.coroutines.EventLoop: kotlin.collections.ArrayDeque unconfinedQueue>;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<kotlin.collections.ArrayDeque: java.lang.Object removeFirstOrNull()>();

        $r3 = (kotlinx.coroutines.DispatchedTask) $r2;

        if $r3 != null goto label2;

        return 0;

     label2:
        virtualinvoke $r3.<kotlinx.coroutines.DispatchedTask: void run()>();

        return 1;
    }

    public boolean shouldBeProcessedFromContext()
    {
        kotlinx.coroutines.EventLoop r0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        return 0;
    }

    public void shutdown()
    {
        kotlinx.coroutines.EventLoop r0;

        r0 := @this: kotlinx.coroutines.EventLoop;

        return;
    }
}
