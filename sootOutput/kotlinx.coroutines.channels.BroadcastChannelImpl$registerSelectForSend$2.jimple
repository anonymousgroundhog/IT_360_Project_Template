final class kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final java.lang.Object $element;
    final kotlinx.coroutines.selects.SelectInstance $select;
    int label;
    final kotlinx.coroutines.channels.BroadcastChannelImpl this$0;

    void <init>(kotlinx.coroutines.channels.BroadcastChannelImpl, java.lang.Object, kotlinx.coroutines.selects.SelectInstance, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.selects.SelectInstance $r3;
        kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2 r0;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BroadcastChannelImpl $r1;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2;

        $r1 := @parameter0: kotlinx.coroutines.channels.BroadcastChannelImpl;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlinx.coroutines.selects.SelectInstance;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.channels.BroadcastChannelImpl this$0> = $r1;

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: java.lang.Object $element> = $r2;

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.selects.SelectInstance $select> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.selects.SelectInstance $r4;
        kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2 r0, $r5;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BroadcastChannelImpl $r3;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = new kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2;

        $r3 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        $r1 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: java.lang.Object $element>;

        $r4 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.selects.SelectInstance $select>;

        specialinvoke $r5.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: void <init>(kotlinx.coroutines.channels.BroadcastChannelImpl,java.lang.Object,kotlinx.coroutines.selects.SelectInstance,kotlin.coroutines.Continuation)>($r3, $r1, $r4, $r2);

        $r2 = (kotlin.coroutines.Continuation) $r5;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2 r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2 r0;
        java.lang.Object $r4;
        kotlinx.coroutines.CoroutineScope $r1;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.Throwable r4, r7, r19;
        java.lang.IllegalStateException $r3;
        kotlin.coroutines.Continuation $r6;
        java.util.HashMap $r11;
        java.lang.AssertionError $r12;
        kotlinx.coroutines.channels.BroadcastChannelImpl $r5;
        kotlinx.coroutines.selects.SelectInstance $r9;
        java.util.Map $r13;
        int i0;
        kotlinx.coroutines.selects.SelectImplementation r15;
        boolean $z0, z1, $z2;
        kotlinx.coroutines.internal.Symbol $r14;
        java.util.concurrent.locks.ReentrantLock $r8;
        kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2 r0;
        java.util.concurrent.locks.Lock $r10;
        kotlin.Unit $r16;
        kotlinx.coroutines.selects.TrySelectDetailedResult $r17, $r18;
        java.lang.Object $r1, $r2;

        r0 := @this: kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: int label>;

        $z0 = 0;

        lookupswitch(i0)
        {
            case 0: goto label05;
            case 1: goto label02;
            default: goto label01;
        };

     label01:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label03:
        goto label08;

     label04:
        r4 := @caughtexception;

        goto label10;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label06:
        $r5 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        $r1 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: java.lang.Object $element>;

        $r6 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: int label> = 1;

        $r1 = virtualinvoke $r5.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Object send(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r6);

     label07:
        if $r1 != $r2 goto label08;

        return $r2;

     label08:
        z1 = 1;

        goto label12;

     label09:
        r7 := @caughtexception;

        r4 = r7;

     label10:
        $r5 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        z1 = virtualinvoke $r5.<kotlinx.coroutines.channels.BroadcastChannelImpl: boolean isClosedForSend()>();

        if z1 == 0 goto label31;

        z1 = r4 instanceof kotlinx.coroutines.channels.ClosedSendChannelException;

        if z1 != 0 goto label11;

        $r5 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        r7 = virtualinvoke $r5.<kotlinx.coroutines.channels.BroadcastChannelImpl: java.lang.Throwable getSendException()>();

        if r7 != r4 goto label31;

     label11:
        z1 = 0;

     label12:
        $r5 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        $r8 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.concurrent.locks.ReentrantLock access$getLock$p(kotlinx.coroutines.channels.BroadcastChannelImpl)>($r5);

        $r5 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.channels.BroadcastChannelImpl this$0>;

        $r9 = r0.<kotlinx.coroutines.channels.BroadcastChannelImpl$registerSelectForSend$2: kotlinx.coroutines.selects.SelectInstance $select>;

        $r10 = (java.util.concurrent.locks.Lock) $r8;

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void lock()>();

     label13:
        $z2 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

     label14:
        if $z2 == 0 goto label19;

     label15:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.HashMap access$getOnSendInternalResult$p(kotlinx.coroutines.channels.BroadcastChannelImpl)>($r5);

        $r1 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

     label16:
        if $r1 != null goto label17;

        $z0 = 1;

     label17:
        if $z0 == 0 goto label18;

        goto label19;

     label18:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label19:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.HashMap access$getOnSendInternalResult$p(kotlinx.coroutines.channels.BroadcastChannelImpl)>($r5);

        $r13 = (java.util.Map) $r11;

     label20:
        if z1 == 0 goto label23;

     label21:
        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label22:
        goto label25;

     label23:
        $r14 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

     label24:
        $r1 = $r14;

     label25:
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type kotlinx.coroutines.selects.SelectImplementation<*>");

        r15 = (kotlinx.coroutines.selects.SelectImplementation) $r9;

        r15 = (kotlinx.coroutines.selects.SelectImplementation) $r9;

        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r17 = virtualinvoke r15.<kotlinx.coroutines.selects.SelectImplementation: kotlinx.coroutines.selects.TrySelectDetailedResult trySelectDetailed(java.lang.Object,java.lang.Object)>($r5, $r16);

        $r18 = <kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult REREGISTER>;

     label26:
        if $r17 == $r18 goto label28;

     label27:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BroadcastChannelImpl: java.util.HashMap access$getOnSendInternalResult$p(kotlinx.coroutines.channels.BroadcastChannelImpl)>($r5);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r9);

     label28:
        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label29:
        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();

        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r16;

     label30:
        r19 := @caughtexception;

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r19;

     label31:
        throw r4;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label13 to label14 with label30;
        catch java.lang.Throwable from label15 to label16 with label30;
        catch java.lang.Throwable from label18 to label20 with label30;
        catch java.lang.Throwable from label21 to label22 with label30;
        catch java.lang.Throwable from label23 to label24 with label30;
        catch java.lang.Throwable from label25 to label26 with label30;
        catch java.lang.Throwable from label27 to label29 with label30;
    }
}
