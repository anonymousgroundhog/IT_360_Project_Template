class androidx.work.impl.background.systemjob.SystemJobInfoConverter extends java.lang.Object
{
    static final java.lang.String EXTRA_IS_PERIODIC;
    static final java.lang.String EXTRA_WORK_SPEC_ID;
    private static final java.lang.String TAG;
    private final android.content.ComponentName mWorkServiceComponent;

    static void <clinit>()
    {
        java.lang.String $r0;

        <androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String EXTRA_WORK_SPEC_ID> = "EXTRA_WORK_SPEC_ID";

        <androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String EXTRA_IS_PERIODIC> = "EXTRA_IS_PERIODIC";

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("SystemJobInfoConverter");

        <androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String TAG> = $r0;

        return;
    }

    void <init>(android.content.Context)
    {
        androidx.work.impl.background.systemjob.SystemJobInfoConverter r0;
        android.content.Context $r1;
        android.content.ComponentName $r2;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobInfoConverter;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r2 = new android.content.ComponentName;

        specialinvoke $r2.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r1, class "Landroidx/work/impl/background/systemjob/SystemJobService;");

        r0.<androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.content.ComponentName mWorkServiceComponent> = $r2;

        return;
    }

    private static android.app.job.JobInfo$TriggerContentUri convertContentUriTrigger(androidx.work.ContentUriTriggers$Trigger)
    {
        androidx.work.ContentUriTriggers$Trigger $r0;
        byte b0;
        android.app.job.JobInfo$TriggerContentUri $r1;
        android.net.Uri $r2;
        boolean $z0;

        $r0 := @parameter0: androidx.work.ContentUriTriggers$Trigger;

        $z0 = virtualinvoke $r0.<androidx.work.ContentUriTriggers$Trigger: boolean shouldTriggerForDescendants()>();

        if $z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        $r1 = new android.app.job.JobInfo$TriggerContentUri;

        $r2 = virtualinvoke $r0.<androidx.work.ContentUriTriggers$Trigger: android.net.Uri getUri()>();

        specialinvoke $r1.<android.app.job.JobInfo$TriggerContentUri: void <init>(android.net.Uri,int)>($r2, b0);

        return $r1;
    }

    static int convertNetworkType(androidx.work.NetworkType)
    {
        androidx.work.NetworkType $r0;
        java.lang.Object[] $r4;
        androidx.work.Logger $r2;
        int[] $r1;
        java.lang.Throwable[] $r6;
        int $i0;
        java.lang.String $r3, $r5;

        $r0 := @parameter0: androidx.work.NetworkType;

        $r1 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter$1: int[] $SwitchMap$androidx$work$NetworkType>;

        $i0 = virtualinvoke $r0.<androidx.work.NetworkType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        goto label7;

     label2:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label7;

        return 4;

     label3:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label7;

        return 3;

     label4:
        return 2;

     label5:
        return 1;

     label6:
        return 0;

     label7:
        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r3 = <androidx.work.impl.background.systemjob.SystemJobInfoConverter: java.lang.String TAG>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r0;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("API version too low. Cannot convert network type value %s", $r4);

        $r6 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>($r3, $r5, $r6);

        return 1;
    }

    static void setRequiredNetwork(android.app.job.JobInfo$Builder, androidx.work.NetworkType)
    {
        androidx.work.NetworkType $r1, r2;
        int i0;
        android.app.job.JobInfo$Builder $r0;
        android.net.NetworkRequest $r4;
        android.net.NetworkRequest$Builder r3;

        $r0 := @parameter0: android.app.job.JobInfo$Builder;

        $r1 := @parameter1: androidx.work.NetworkType;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 30 goto label1;

        r2 = <androidx.work.NetworkType: androidx.work.NetworkType TEMPORARILY_UNMETERED>;

        if $r1 != r2 goto label1;

        r3 = new android.net.NetworkRequest$Builder;

        specialinvoke r3.<android.net.NetworkRequest$Builder: void <init>()>();

        r3 = virtualinvoke r3.<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addCapability(int)>(25);

        $r4 = virtualinvoke r3.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        virtualinvoke $r0.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetwork(android.net.NetworkRequest)>($r4);

        return;

     label1:
        i0 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobInfoConverter: int convertNetworkType(androidx.work.NetworkType)>($r1);

        virtualinvoke $r0.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(i0);

        return;
    }

    android.app.job.JobInfo convert(androidx.work.impl.model.WorkSpec, int)
    {
        androidx.work.NetworkType $r6;
        androidx.work.BackoffPolicy r7, r8;
        androidx.work.Constraints r2;
        androidx.work.impl.background.systemjob.SystemJobInfoConverter r0;
        long l2, $l3;
        androidx.work.impl.model.WorkSpec $r1;
        byte b1;
        int $i0;
        android.os.PersistableBundle $r16;
        android.app.job.JobInfo $r15;
        java.lang.String $r3;
        boolean $z0, $z1;
        androidx.work.ContentUriTriggers$Trigger r13;
        java.util.Iterator $r11;
        android.content.ComponentName r5;
        android.app.job.JobInfo$TriggerContentUri $r14;
        java.util.Set $r10;
        androidx.work.ContentUriTriggers $r9;
        java.lang.Object $r12;
        android.app.job.JobInfo$Builder r4, $r17;

        r0 := @this: androidx.work.impl.background.systemjob.SystemJobInfoConverter;

        $r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        $i0 := @parameter1: int;

        r2 = $r1.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints>;

        $r16 = new android.os.PersistableBundle;

        specialinvoke $r16.<android.os.PersistableBundle: void <init>()>();

        $r3 = $r1.<androidx.work.impl.model.WorkSpec: java.lang.String id>;

        virtualinvoke $r16.<android.os.PersistableBundle: void putString(java.lang.String,java.lang.String)>("EXTRA_WORK_SPEC_ID", $r3);

        $z0 = virtualinvoke $r1.<androidx.work.impl.model.WorkSpec: boolean isPeriodic()>();

        virtualinvoke $r16.<android.os.PersistableBundle: void putBoolean(java.lang.String,boolean)>("EXTRA_IS_PERIODIC", $z0);

        $r17 = new android.app.job.JobInfo$Builder;

        r5 = r0.<androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.content.ComponentName mWorkServiceComponent>;

        specialinvoke $r17.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>($i0, r5);

        $z0 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresCharging()>();

        r4 = virtualinvoke $r17.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>($z0);

        $z0 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresDeviceIdle()>();

        r4 = virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>($z0);

        r4 = virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExtras(android.os.PersistableBundle)>($r16);

        $r6 = virtualinvoke r2.<androidx.work.Constraints: androidx.work.NetworkType getRequiredNetworkType()>();

        staticinvoke <androidx.work.impl.background.systemjob.SystemJobInfoConverter: void setRequiredNetwork(android.app.job.JobInfo$Builder,androidx.work.NetworkType)>(r4, $r6);

        $z0 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresDeviceIdle()>();

        if $z0 != 0 goto label03;

        r7 = $r1.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy>;

        r8 = <androidx.work.BackoffPolicy: androidx.work.BackoffPolicy LINEAR>;

        if r7 != r8 goto label01;

        b1 = 0;

        goto label02;

     label01:
        b1 = 1;

     label02:
        l2 = $r1.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration>;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setBackoffCriteria(long,int)>(l2, b1);

     label03:
        l2 = virtualinvoke $r1.<androidx.work.impl.model.WorkSpec: long calculateNextRunTime()>();

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = l2 - $l3;

        l2 = staticinvoke <java.lang.Math: long max(long,long)>(l2, 0L);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 > 28 goto label04;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>(l2);

        goto label06;

     label04:
        b1 = l2 cmp 0L;

        $i0 = (int) b1;

        if $i0 <= 0 goto label05;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>(l2);

        goto label06;

     label05:
        $z0 = $r1.<androidx.work.impl.model.WorkSpec: boolean expedited>;

        if $z0 != 0 goto label06;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setImportantWhileForeground(boolean)>(1);

     label06:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label09;

        $z0 = virtualinvoke r2.<androidx.work.Constraints: boolean hasContentUriTriggers()>();

        if $z0 == 0 goto label09;

        $r9 = virtualinvoke r2.<androidx.work.Constraints: androidx.work.ContentUriTriggers getContentUriTriggers()>();

        $r10 = virtualinvoke $r9.<androidx.work.ContentUriTriggers: java.util.Set getTriggers()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (androidx.work.ContentUriTriggers$Trigger) $r12;

        $r14 = staticinvoke <androidx.work.impl.background.systemjob.SystemJobInfoConverter: android.app.job.JobInfo$TriggerContentUri convertContentUriTrigger(androidx.work.ContentUriTriggers$Trigger)>(r13);

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder addTriggerContentUri(android.app.job.JobInfo$TriggerContentUri)>($r14);

        goto label07;

     label08:
        l2 = virtualinvoke r2.<androidx.work.Constraints: long getTriggerContentUpdateDelay()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setTriggerContentUpdateDelay(long)>(l2);

        l2 = virtualinvoke r2.<androidx.work.Constraints: long getTriggerMaxContentDelay()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setTriggerContentMaxDelay(long)>(l2);

     label09:
        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPersisted(boolean)>(0);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label10;

        $z0 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresBatteryNotLow()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresBatteryNotLow(boolean)>($z0);

        $z0 = virtualinvoke r2.<androidx.work.Constraints: boolean requiresStorageNotLow()>();

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresStorageNotLow(boolean)>($z0);

     label10:
        $i0 = $r1.<androidx.work.impl.model.WorkSpec: int runAttemptCount>;

        if $i0 <= 0 goto label11;

        $z0 = 1;

        goto label12;

     label11:
        $z0 = 0;

     label12:
        $z1 = staticinvoke <androidx.core.os.BuildCompat: boolean isAtLeastS()>();

        if $z1 == 0 goto label13;

        $z1 = $r1.<androidx.work.impl.model.WorkSpec: boolean expedited>;

        if $z1 == 0 goto label13;

        if $z0 != 0 goto label13;

        virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExpedited(boolean)>(1);

     label13:
        $r15 = virtualinvoke r4.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        return $r15;
    }
}
