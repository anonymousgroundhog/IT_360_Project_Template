public final class kotlin.time.DurationKt extends java.lang.Object
{
    public static final long MAX_MILLIS;
    public static final long MAX_NANOS;
    private static final long MAX_NANOS_IN_MILLIS;
    public static final int NANOS_IN_MILLIS;

    public static final long access$durationOf(long, int)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOf(long,int)>($l0, $i1);

        return $l0;
    }

    public static final long access$durationOfMillis(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfMillis(long)>($l0);

        return $l0;
    }

    public static final long access$durationOfMillisNormalized(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfMillisNormalized(long)>($l0);

        return $l0;
    }

    public static final long access$durationOfNanos(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfNanos(long)>($l0);

        return $l0;
    }

    public static final long access$durationOfNanosNormalized(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfNanosNormalized(long)>($l0);

        return $l0;
    }

    public static final long access$millisToNanos(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.DurationKt: long millisToNanos(long)>($l0);

        return $l0;
    }

    public static final long access$nanosToMillis(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = staticinvoke <kotlin.time.DurationKt: long nanosToMillis(long)>($l0);

        return $l0;
    }

    public static final long access$parseDuration(java.lang.String, boolean)
    {
        long $l0;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $l0 = staticinvoke <kotlin.time.DurationKt: long parseDuration(java.lang.String,boolean)>($r0, $z0);

        return $l0;
    }

    private static final long durationOf(long, int)
    {
        int $i1;
        long $l0, $l2;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = $l0 << 1;

        $l0 = (long) $i1;

        $l0 = $l2 + $l0;

        $l0 = staticinvoke <kotlin.time.Duration: long constructor-impl(long)>($l0);

        return $l0;
    }

    private static final long durationOfMillis(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = $l0 << 1;

        $l0 = $l0 + 1L;

        $l0 = staticinvoke <kotlin.time.Duration: long constructor-impl(long)>($l0);

        return $l0;
    }

    private static final long durationOfMillisNormalized(long)
    {
        long $l0;
        kotlin.ranges.LongRange $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018426L, 4611686018426L);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <kotlin.time.DurationKt: long millisToNanos(long)>($l0);

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfNanos(long)>($l0);

        return $l0;

     label1:
        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceIn(long,long,long)>($l0, -4611686018427387903L, 4611686018427387903L);

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfMillis(long)>($l0);

        return $l0;
    }

    private static final long durationOfNanos(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        $l0 = $l0 << 1;

        $l0 = staticinvoke <kotlin.time.Duration: long constructor-impl(long)>($l0);

        return $l0;
    }

    private static final long durationOfNanosNormalized(long)
    {
        long $l0;
        kotlin.ranges.LongRange $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018426999999L, 4611686018426999999L);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfNanos(long)>($l0);

        return $l0;

     label1:
        $l0 = staticinvoke <kotlin.time.DurationKt: long nanosToMillis(long)>($l0);

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfMillis(long)>($l0);

        return $l0;
    }

    public static final long getDays(double)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long getDays(int)
    {
        int $i0;
        long $l1;
        kotlin.time.DurationUnit $r0;

        $i0 := @parameter0: int;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>;

        $l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i0, $r0);

        return $l1;
    }

    public static final long getDays(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getDays$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getDays$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getDays$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    public static final long getHours(double)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long getHours(int)
    {
        int $i0;
        long $l1;
        kotlin.time.DurationUnit $r0;

        $i0 := @parameter0: int;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>;

        $l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i0, $r0);

        return $l1;
    }

    public static final long getHours(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getHours$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getHours$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getHours$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    public static final long getMicroseconds(double)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long getMicroseconds(int)
    {
        int $i0;
        long $l1;
        kotlin.time.DurationUnit $r0;

        $i0 := @parameter0: int;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>;

        $l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i0, $r0);

        return $l1;
    }

    public static final long getMicroseconds(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getMicroseconds$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getMicroseconds$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getMicroseconds$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    public static final long getMilliseconds(double)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long getMilliseconds(int)
    {
        int $i0;
        long $l1;
        kotlin.time.DurationUnit $r0;

        $i0 := @parameter0: int;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i0, $r0);

        return $l1;
    }

    public static final long getMilliseconds(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getMilliseconds$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getMilliseconds$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getMilliseconds$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    public static final long getMinutes(double)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long getMinutes(int)
    {
        int $i0;
        long $l1;
        kotlin.time.DurationUnit $r0;

        $i0 := @parameter0: int;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>;

        $l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i0, $r0);

        return $l1;
    }

    public static final long getMinutes(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getMinutes$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getMinutes$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getMinutes$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    public static final long getNanoseconds(double)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long getNanoseconds(int)
    {
        int $i0;
        long $l1;
        kotlin.time.DurationUnit $r0;

        $i0 := @parameter0: int;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i0, $r0);

        return $l1;
    }

    public static final long getNanoseconds(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getNanoseconds$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getNanoseconds$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getNanoseconds$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    public static final long getSeconds(double)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r0);

        return $l0;
    }

    public static final long getSeconds(int)
    {
        int $i0;
        long $l1;
        kotlin.time.DurationUnit $r0;

        $i0 := @parameter0: int;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        $l1 = staticinvoke <kotlin.time.DurationKt: long toDuration(int,kotlin.time.DurationUnit)>($i0, $r0);

        return $l1;
    }

    public static final long getSeconds(long)
    {
        long $l0;
        kotlin.time.DurationUnit $r0;

        $l0 := @parameter0: long;

        $r0 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l0, $r0);

        return $l0;
    }

    public static void getSeconds$annotations(double)
    {
        double $d0;

        $d0 := @parameter0: double;

        return;
    }

    public static void getSeconds$annotations(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void getSeconds$annotations(long)
    {
        long $l0;

        $l0 := @parameter0: long;

        return;
    }

    private static final long millisToNanos(long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 = (long) 1000000;

        $l0 = $l1 * $l0;

        return $l0;
    }

    private static final long nanosToMillis(long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 = (long) 1000000;

        $l0 = $l0 / $l1;

        return $l0;
    }

    private static final long parseDuration(java.lang.String, boolean)
    {
        kotlin.ranges.CharRange $r13;
        long $l3, l4;
        java.lang.Enum r8;
        int $i0, i1, i2, i6;
        java.lang.String $r0, r3, r4, $r6, $r10;
        boolean $z0, z1, z2, z3;
        double $d0;
        java.lang.CharSequence r2;
        kotlin.time.DurationUnit r5, $r7, r9;
        char $c5;
        java.lang.IllegalArgumentException $r12;
        kotlin.time.Duration$Companion r1;
        java.lang.StringBuilder $r11, $r14;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = $i0;

        if $i0 == 0 goto label58;

        i2 = 0;

        r1 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        $l3 = virtualinvoke r1.<kotlin.time.Duration$Companion: long getZERO-UwyO8pc()>();

        l4 = $l3;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        i6 = (int) $c5;

        if i6 != 43 goto label02;

     label01:
        z1 = 1;

        goto label04;

     label02:
        i6 = (int) $c5;

        if i6 != 45 goto label03;

        goto label01;

     label03:
        z1 = 0;

     label04:
        if z1 == 0 goto label05;

        i2 = 1;

     label05:
        i6 = i2;

        if i2 <= 0 goto label06;

        z1 = 1;

        goto label07;

     label06:
        z1 = 0;

     label07:
        z2 = z1;

        if z1 == 0 goto label08;

        r2 = (java.lang.CharSequence) $r0;

        z1 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>(r2, 45, 0, 2, null);

        if z1 == 0 goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        z1 = z3;

        if $i0 <= i6 goto label57;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i6);

        i2 = (int) $c5;

        if i2 != 80 goto label28;

        i6 = i6 + 1;

        if i6 == $i0 goto label27;

        $z0 = 0;

        r5 = null;

     label10:
        if i6 >= i1 goto label26;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i6);

        $i0 = (int) $c5;

        if $i0 != 84 goto label12;

        if $z0 != 0 goto label11;

        i6 = i6 + 1;

        if i6 == i1 goto label11;

        $z0 = 1;

        goto label10;

     label11:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label12:
        $r6 = $r0;

        i2 = i6;

     label13:
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if i2 >= $i0 goto label17;

        $c5 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(i2);

        $r13 = new kotlin.ranges.CharRange;

        $i0 = i1;

        specialinvoke $r13.<kotlin.ranges.CharRange: void <init>(char,char)>(48, 57);

        z2 = virtualinvoke $r13.<kotlin.ranges.CharRange: boolean contains(char)>($c5);

        if z2 != 0 goto label15;

        r2 = (java.lang.CharSequence) "+-.";

        z2 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>(r2, $c5, 0, 2, null);

        if z2 == 0 goto label14;

        goto label15;

     label14:
        z2 = 0;

        goto label16;

     label15:
        z2 = 1;

     label16:
        if z2 == 0 goto label18;

        i2 = i2 + 1;

        i1 = $i0;

        goto label13;

     label17:
        $i0 = i1;

     label18:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.String");

        $r6 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i6, i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        r2 = (java.lang.CharSequence) $r6;

        i1 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i1 != 0 goto label19;

        z2 = 1;

        goto label20;

     label19:
        z2 = 0;

     label20:
        if z2 != 0 goto label25;

        i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        i6 = i6 + i1;

        r2 = (java.lang.CharSequence) $r0;

        if i6 < 0 goto label24;

        i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>(r2);

        if i6 > i1 goto label24;

        $c5 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i6);

        i6 = i6 + 1;

        $r7 = staticinvoke <kotlin.time.DurationUnitKt: kotlin.time.DurationUnit durationUnitByIsoChar(char,boolean)>($c5, $z0);

        if r5 == null goto label22;

        r8 = (java.lang.Enum) $r7;

        i1 = virtualinvoke r5.<kotlin.time.DurationUnit: int compareTo(java.lang.Enum)>(r8);

        if i1 <= 0 goto label21;

        goto label22;

     label21:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected order of duration components");

        throw $r12;

     label22:
        r5 = $r7;

        r2 = (java.lang.CharSequence) $r6;

        i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>(r2, 46, 0, 0, 6, null);

        r9 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        if $r7 != r9 goto label23;

        if i1 <= 0 goto label23;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type java.lang.String");

        $r10 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $l3 = staticinvoke <kotlin.time.DurationKt: long parseOverLongIsoComponent(java.lang.String)>($r10);

        $l3 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l3, $r7);

        l4 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l4, $l3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type java.lang.String");

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "this as java.lang.String).substring(startIndex)");

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r6);

        $l3 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r7);

        l4 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l4, $l3);

        i1 = $i0;

        goto label10;

     label23:
        $l3 = staticinvoke <kotlin.time.DurationKt: long parseOverLongIsoComponent(java.lang.String)>($r6);

        $l3 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l3, $r7);

        l4 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l4, $l3);

        i1 = $i0;

        goto label10;

     label24:
        $r12 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing unit for value ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r0 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r12;

     label25:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label26:
        goto label54;

     label27:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label28:
        r3 = "Infinity";

        z1 = z3;

        if $z0 != 0 goto label56;

        i1 = $i0 - i6;

        i2 = virtualinvoke r3.<java.lang.String: int length()>();

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i2);

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>($r0, i6, "Infinity", 0, i1, 1);

        if $z0 == 0 goto label29;

        r1 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        l4 = virtualinvoke r1.<kotlin.time.Duration$Companion: long getINFINITE-UwyO8pc()>();

        goto label54;

     label29:
        r5 = null;

        z3 = 0;

        if z2 != 0 goto label30;

        $z0 = 1;

        goto label31;

     label30:
        $z0 = 0;

     label31:
        if z2 == 0 goto label33;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i6);

        i1 = (int) $c5;

        if i1 != 40 goto label33;

        r2 = (java.lang.CharSequence) $r0;

        $c5 = staticinvoke <kotlin.text.StringsKt: char last(java.lang.CharSequence)>(r2);

        i1 = (int) $c5;

        if i1 != 41 goto label33;

        $z0 = 1;

        i6 = i6 + 1;

        $i0 = $i0 + -1;

        if i6 == $i0 goto label32;

        l4 = $l3;

        goto label34;

     label32:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No components");

        throw $r12;

     label33:
        l4 = $l3;

     label34:
        if i6 >= $i0 goto label54;

        if z3 == 0 goto label39;

        if $z0 == 0 goto label39;

     label35:
        i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i6 >= i1 goto label38;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i6);

        i1 = (int) $c5;

        if i1 != 32 goto label36;

        z2 = 1;

        goto label37;

     label36:
        z2 = 0;

     label37:
        if z2 == 0 goto label38;

        i6 = i6 + 1;

        goto label35;

     label38:
        goto label39;

     label39:
        r3 = $r0;

        i1 = i6;

     label40:
        i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if i1 >= i2 goto label44;

        $c5 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i1);

        $r13 = new kotlin.ranges.CharRange;

        specialinvoke $r13.<kotlin.ranges.CharRange: void <init>(char,char)>(48, 57);

        z2 = virtualinvoke $r13.<kotlin.ranges.CharRange: boolean contains(char)>($c5);

        if z2 != 0 goto label42;

        i2 = (int) $c5;

        if i2 != 46 goto label41;

        goto label42;

     label41:
        z2 = 0;

        goto label43;

     label42:
        z2 = 1;

     label43:
        if z2 == 0 goto label44;

        i1 = i1 + 1;

        goto label40;

     label44:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.String");

        r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i6, i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        r2 = (java.lang.CharSequence) r3;

        i1 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i1 != 0 goto label45;

        z2 = 1;

        goto label46;

     label45:
        z2 = 0;

     label46:
        if z2 != 0 goto label53;

        i1 = virtualinvoke r3.<java.lang.String: int length()>();

        i6 = i6 + i1;

        r4 = $r0;

        i1 = i6;

     label47:
        i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if i1 >= i2 goto label48;

        $c5 = virtualinvoke r4.<java.lang.String: char charAt(int)>(i1);

        $r13 = new kotlin.ranges.CharRange;

        specialinvoke $r13.<kotlin.ranges.CharRange: void <init>(char,char)>(97, 122);

        z2 = virtualinvoke $r13.<kotlin.ranges.CharRange: boolean contains(char)>($c5);

        if z2 == 0 goto label48;

        i1 = i1 + 1;

        goto label47;

     label48:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.String");

        r4 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i6, i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        i1 = virtualinvoke r4.<java.lang.String: int length()>();

        i6 = i6 + i1;

        $r7 = staticinvoke <kotlin.time.DurationUnitKt: kotlin.time.DurationUnit durationUnitByShortName(java.lang.String)>(r4);

        if r5 == null goto label50;

        r8 = (java.lang.Enum) $r7;

        i1 = virtualinvoke r5.<kotlin.time.DurationUnit: int compareTo(java.lang.Enum)>(r8);

        if i1 <= 0 goto label49;

        goto label50;

     label49:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unexpected order of duration components");

        throw $r12;

     label50:
        r5 = $r7;

        r2 = (java.lang.CharSequence) r3;

        i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>(r2, 46, 0, 0, 6, null);

        if i1 <= 0 goto label52;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r3, "null cannot be cast to non-null type java.lang.String");

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

        $l3 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l3, $r7);

        l4 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l4, $l3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r3, "null cannot be cast to non-null type java.lang.String");

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this as java.lang.String).substring(startIndex)");

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r3);

        $l3 = staticinvoke <kotlin.time.DurationKt: long toDuration(double,kotlin.time.DurationUnit)>($d0, $r7);

        l4 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l4, $l3);

        if i6 < $i0 goto label51;

        z3 = 1;

        goto label34;

     label51:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fractional component must be last");

        throw $r12;

     label52:
        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r3);

        $l3 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l3, $r7);

        l4 = staticinvoke <kotlin.time.Duration: long plus-LRDsOJo(long,long)>(l4, $l3);

        z3 = 1;

        goto label34;

     label53:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label54:
        if z1 == 0 goto label55;

        l4 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>(l4);

     label55:
        return l4;

     label56:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label57:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No components");

        throw $r12;

     label58:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The string is empty");

        throw $r12;
    }

    private static final long parseOverLongIsoComponent(java.lang.String)
    {
        kotlin.ranges.CharRange $r7;
        java.lang.CharSequence $r1;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        char $c2;
        long $l3;
        java.lang.Iterable $r2;
        kotlin.collections.IntIterator r5;
        int $i0, i1;
        java.lang.String $r0;
        boolean $z0;
        kotlin.ranges.IntRange $r6;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

        if $i0 <= 0 goto label1;

        $r1 = (java.lang.CharSequence) "+-";

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r1, $c2, 0, 2, null);

        if $z0 == 0 goto label1;

        i1 = 1;

     label1:
        $i0 = $i0 - i1;

        if $i0 <= 16 goto label7;

        $r6 = new kotlin.ranges.IntRange;

        $r1 = (java.lang.CharSequence) $r0;

        $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

        specialinvoke $r6.<kotlin.ranges.IntRange: void <init>(int,int)>(i1, $i0);

        $r2 = (java.lang.Iterable) $r6;

        $z0 = $r2 instanceof java.util.Collection;

        if $z0 == 0 goto label2;

        $r3 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $z0 = 1;

        goto label5;

     label2:
        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r5 = (kotlin.collections.IntIterator) $r4;

        i1 = virtualinvoke r5.<kotlin.collections.IntIterator: int nextInt()>();

        $r7 = new kotlin.ranges.CharRange;

        specialinvoke $r7.<kotlin.ranges.CharRange: void <init>(char,char)>(48, 57);

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = virtualinvoke $r7.<kotlin.ranges.CharRange: boolean contains(char)>($c2);

        if $z0 != 0 goto label3;

        $z0 = 0;

        goto label5;

     label4:
        $z0 = 1;

     label5:
        if $z0 == 0 goto label7;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        i1 = (int) $c2;

        if i1 != 45 goto label6;

        return -9223372036854775808L;

     label6:
        return 9223372036854775807L;

     label7:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r0, "+", 0, 2, null);

        if $z0 == 0 goto label8;

        $r0 = staticinvoke <kotlin.text.StringsKt: java.lang.String drop(java.lang.String,int)>($r0, 1);

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

        return $l3;

     label8:
        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

        return $l3;
    }

    private static final int skipWhile(java.lang.String, int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        char $c2;
        java.lang.Character $r2;
        int $i0, $i1;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i0;
    }

    private static final java.lang.String substringWhile(java.lang.String, int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        char $c3;
        java.lang.Character $r2;
        int $i0, i1, $i2;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        i1 = $i0;

     label1:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i1 >= $i2 goto label2;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i1);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.String");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    private static final long times-kIfJnKk(double, long)
    {
        long $l0;
        double $d0;

        $d0 := @parameter0: double;

        $l0 := @parameter1: long;

        $l0 = staticinvoke <kotlin.time.Duration: long times-UwyO8pc(long,double)>($l0, $d0);

        return $l0;
    }

    private static final long times-mvk6XK0(int, long)
    {
        int $i0;
        long $l1;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l1 = staticinvoke <kotlin.time.Duration: long times-UwyO8pc(long,int)>($l1, $i0);

        return $l1;
    }

    public static final long toDuration(double, kotlin.time.DurationUnit)
    {
        kotlin.time.DurationUnit $r0, r1;
        long $l0;
        kotlin.ranges.LongRange r2;
        java.lang.IllegalArgumentException r3;
        java.lang.String $r4;
        double $d0, $d1;
        boolean $z0;

        $d0 := @parameter0: double;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "unit");

        r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $d1 = staticinvoke <kotlin.time.DurationUnitKt: double convertDurationUnit(double,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>($d0, $r0, r1);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label2;

        $l0 = staticinvoke <kotlin.math.MathKt: long roundToLong(double)>($d1);

        r2 = new kotlin.ranges.LongRange;

        specialinvoke r2.<kotlin.ranges.LongRange: void <init>(long,long)>(-4611686018426999999L, 4611686018426999999L);

        $z0 = virtualinvoke r2.<kotlin.ranges.LongRange: boolean contains(long)>($l0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfNanos(long)>($l0);

        return $l0;

     label1:
        r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $d0 = staticinvoke <kotlin.time.DurationUnitKt: double convertDurationUnit(double,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>($d0, $r0, r1);

        $l0 = staticinvoke <kotlin.math.MathKt: long roundToLong(double)>($d0);

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfMillisNormalized(long)>($l0);

        return $l0;

     label2:
        r3 = new java.lang.IllegalArgumentException;

        $r4 = "Duration value cannot be NaN.";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r3;
    }

    public static final long toDuration(int, kotlin.time.DurationUnit)
    {
        java.lang.Enum $r2;
        kotlin.time.DurationUnit $r0, $r1;
        int $i0, $i1;
        long $l2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "unit");

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        $r2 = (java.lang.Enum) $r1;

        $i1 = virtualinvoke $r0.<kotlin.time.DurationUnit: int compareTo(java.lang.Enum)>($r2);

        if $i1 > 0 goto label1;

        $l2 = (long) $i0;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $l2 = staticinvoke <kotlin.time.DurationUnitKt: long convertDurationUnitOverflow(long,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>($l2, $r0, $r1);

        $l2 = staticinvoke <kotlin.time.DurationKt: long durationOfNanos(long)>($l2);

        return $l2;

     label1:
        $l2 = (long) $i0;

        $l2 = staticinvoke <kotlin.time.DurationKt: long toDuration(long,kotlin.time.DurationUnit)>($l2, $r0);

        return $l2;
    }

    public static final long toDuration(long, kotlin.time.DurationUnit)
    {
        kotlin.time.DurationUnit $r0, $r1;
        long $l0, $l1, $l2;
        kotlin.ranges.LongRange $r2;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "unit");

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $l1 = staticinvoke <kotlin.time.DurationUnitKt: long convertDurationUnitOverflow(long,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>(4611686018426999999L, $r1, $r0);

        $r2 = new kotlin.ranges.LongRange;

        $l2 = neg $l1;

        specialinvoke $r2.<kotlin.ranges.LongRange: void <init>(long,long)>($l2, $l1);

        $z0 = virtualinvoke $r2.<kotlin.ranges.LongRange: boolean contains(long)>($l0);

        if $z0 == 0 goto label1;

        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationUnitKt: long convertDurationUnitOverflow(long,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>($l0, $r0, $r1);

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfNanos(long)>($l0);

        return $l0;

     label1:
        $r1 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        $l0 = staticinvoke <kotlin.time.DurationUnitKt: long convertDurationUnit(long,kotlin.time.DurationUnit,kotlin.time.DurationUnit)>($l0, $r0, $r1);

        $l0 = staticinvoke <kotlin.ranges.RangesKt: long coerceIn(long,long,long)>($l0, -4611686018427387903L, 4611686018427387903L);

        $l0 = staticinvoke <kotlin.time.DurationKt: long durationOfMillis(long)>($l0);

        return $l0;
    }

    public static void <clinit>()
    {
        <kotlin.time.DurationKt: int NANOS_IN_MILLIS> = 1000000;

        <kotlin.time.DurationKt: long MAX_NANOS_IN_MILLIS> = 4611686018426L;

        <kotlin.time.DurationKt: long MAX_NANOS> = 4611686018426999999L;

        <kotlin.time.DurationKt: long MAX_MILLIS> = 4611686018427387903L;

        return;
    }
}
