final class kotlinx.coroutines.flow.SubscribedSharedFlow extends java.lang.Object implements kotlinx.coroutines.flow.SharedFlow
{
    private final kotlin.jvm.functions.Function2 action;
    private final kotlinx.coroutines.flow.SharedFlow sharedFlow;

    public void <init>(kotlinx.coroutines.flow.SharedFlow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.SharedFlow $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.flow.SubscribedSharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.SubscribedSharedFlow;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.SubscribedSharedFlow: kotlinx.coroutines.flow.SharedFlow sharedFlow> = $r1;

        r0.<kotlinx.coroutines.flow.SubscribedSharedFlow: kotlin.jvm.functions.Function2 action> = $r2;

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1 $r4;
        java.lang.IllegalStateException r7;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.SubscribedSharedFlow r0;
        kotlinx.coroutines.flow.SubscribedFlowCollector $r8;
        kotlin.jvm.functions.Function2 $r9;
        kotlinx.coroutines.flow.SharedFlow $r1;
        kotlinx.coroutines.flow.FlowCollector r2;
        int $i0;
        java.lang.Object $r5, $r6;
        kotlin.KotlinNothingValueException r10;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.SubscribedSharedFlow;

        r2 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r3 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r3 instanceof kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1) $r3;

        $i0 = $r4.<kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r4.<kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1: int label>;

        $i0 = $i0 - -2147483648;

        $r4.<kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1: int label> = $i0;

        goto label2;

     label1:
        $r4 = new kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1;

        specialinvoke $r4.<kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1: void <init>(kotlinx.coroutines.flow.SubscribedSharedFlow,kotlin.coroutines.Continuation)>(r0, $r3);

     label2:
        $r5 = $r4.<kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r4.<kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label4;
            default: goto label3;
        };

     label3:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r7;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        goto label6;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        $r1 = r0.<kotlinx.coroutines.flow.SubscribedSharedFlow: kotlinx.coroutines.flow.SharedFlow sharedFlow>;

        $r8 = new kotlinx.coroutines.flow.SubscribedFlowCollector;

        $r9 = r0.<kotlinx.coroutines.flow.SubscribedSharedFlow: kotlin.jvm.functions.Function2 action>;

        specialinvoke $r8.<kotlinx.coroutines.flow.SubscribedFlowCollector: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlin.jvm.functions.Function2)>(r2, $r9);

        r2 = (kotlinx.coroutines.flow.FlowCollector) $r8;

        $r4.<kotlinx.coroutines.flow.SubscribedSharedFlow$collect$1: int label> = 1;

        $r5 = interfaceinvoke $r1.<kotlinx.coroutines.flow.SharedFlow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>(r2, $r4);

        if $r5 != $r6 goto label6;

        return $r6;

     label6:
        r10 = new kotlin.KotlinNothingValueException;

        specialinvoke r10.<kotlin.KotlinNothingValueException: void <init>()>();

        throw r10;
    }

    public java.util.List getReplayCache()
    {
        kotlinx.coroutines.flow.SharedFlow $r2;
        java.util.List $r1;
        kotlinx.coroutines.flow.SubscribedSharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.SubscribedSharedFlow;

        $r2 = r0.<kotlinx.coroutines.flow.SubscribedSharedFlow: kotlinx.coroutines.flow.SharedFlow sharedFlow>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.flow.SharedFlow: java.util.List getReplayCache()>();

        return $r1;
    }
}
