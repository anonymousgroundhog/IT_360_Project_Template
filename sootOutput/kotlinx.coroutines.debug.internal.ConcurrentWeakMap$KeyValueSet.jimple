final class kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet extends kotlin.collections.AbstractMutableSet
{
    private final kotlin.jvm.functions.Function2 factory;
    final kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0;

    public void <init>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet r0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.ConcurrentWeakMap;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0> = $r1;

        specialinvoke r0.<kotlin.collections.AbstractMutableSet: void <init>()>();

        r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet: kotlin.jvm.functions.Function2 factory> = $r2;

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlin.KotlinNothingValueException $r2;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet r0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt: java.lang.Void access$noImpl()>();

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;
    }

    public int getSize()
    {
        int $i0;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r1;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet r0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet;

        $r1 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0>;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap: int size()>();

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core $r4;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap $r2;
        java.util.Iterator $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r3;
        kotlin.jvm.functions.Function2 $r5;
        kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet r0;

        r0 := @this: kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet;

        $r1 = staticinvoke <kotlinx.coroutines.debug.internal.ConcurrentWeakMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getCore$FU$p()>();

        $r2 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet: kotlinx.coroutines.debug.internal.ConcurrentWeakMap this$0>;

        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) $r3;

        $r5 = r0.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$KeyValueSet: kotlin.jvm.functions.Function2 factory>;

        $r6 = virtualinvoke $r4.<kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core: java.util.Iterator keyValueIterator(kotlin.jvm.functions.Function2)>($r5);

        return $r6;
    }
}
