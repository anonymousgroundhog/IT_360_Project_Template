public abstract class kotlin.collections.AbstractCollection extends java.lang.Object implements java.util.Collection, kotlin.jvm.internal.markers.KMappedMarker
{

    protected void <init>()
    {
        kotlin.collections.AbstractCollection r0;

        r0 := @this: kotlin.collections.AbstractCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.collections.AbstractCollection r0;
        java.lang.Object $r1;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.collections.AbstractCollection r0;
        java.util.Collection $r1;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        kotlin.collections.AbstractCollection r0;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Iterator $r4;
        java.util.Collection $r3;
        kotlin.collections.AbstractCollection r0;
        java.lang.Object $r1, $r5;
        java.lang.Iterable $r2;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Iterable) r0;

        $z0 = $r2 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r1);

        if $z0 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection $r1;
        kotlin.collections.AbstractCollection r0;
        java.lang.Object $r4;
        java.lang.Iterable $r2;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r2 = (java.lang.Iterable) $r1;

        $r1 = (java.util.Collection) $r2;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke r0.<kotlin.collections.AbstractCollection: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }

    public abstract int getSize();

    public boolean isEmpty()
    {
        int $i0;
        kotlin.collections.AbstractCollection r0;

        r0 := @this: kotlin.collections.AbstractCollection;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractCollection: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract java.util.Iterator iterator();

    public boolean remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.collections.AbstractCollection r0;
        java.lang.Object $r1;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.collections.AbstractCollection r0;
        java.util.Collection $r1;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        kotlin.collections.AbstractCollection r0;
        java.util.Collection $r1;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        int $i0;
        kotlin.collections.AbstractCollection r0;

        r0 := @this: kotlin.collections.AbstractCollection;

        $i0 = virtualinvoke r0.<kotlin.collections.AbstractCollection: int getSize()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        kotlin.collections.AbstractCollection r0;
        java.lang.Object[] $r1;
        java.util.Collection $r2;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r2 = (java.util.Collection) r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r2);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.collections.AbstractCollection r0;
        java.lang.Object[] $r1;
        java.util.Collection $r2;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r2 = (java.util.Collection) r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.CharSequence $r3, $r4, $r5;
        kotlin.collections.AbstractCollection r0;
        kotlin.collections.AbstractCollection$toString$1 $r6;
        kotlin.jvm.functions.Function1 $r7;
        java.lang.Iterable $r2;
        java.lang.String $r1;

        r0 := @this: kotlin.collections.AbstractCollection;

        $r2 = (java.lang.Iterable) r0;

        $r3 = (java.lang.CharSequence) ", ";

        $r4 = (java.lang.CharSequence) "[";

        $r5 = (java.lang.CharSequence) "]";

        $r6 = new kotlin.collections.AbstractCollection$toString$1;

        specialinvoke $r6.<kotlin.collections.AbstractCollection$toString$1: void <init>(kotlin.collections.AbstractCollection)>(r0);

        $r7 = (kotlin.jvm.functions.Function1) $r6;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, $r3, $r4, $r5, 0, null, $r7, 24, null);

        return $r1;
    }
}
