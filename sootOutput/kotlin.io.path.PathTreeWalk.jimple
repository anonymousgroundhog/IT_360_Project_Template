public final class kotlin.io.path.PathTreeWalk extends java.lang.Object implements kotlin.sequences.Sequence
{
    private final kotlin.io.path.PathWalkOption[] options;
    private final java.nio.file.Path start;

    public void <init>(java.nio.file.Path, kotlin.io.path.PathWalkOption[])
    {
        kotlin.io.path.PathWalkOption[] $r2;
        java.nio.file.Path $r1;
        kotlin.io.path.PathTreeWalk r0;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: kotlin.io.path.PathWalkOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "start");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.io.path.PathTreeWalk: java.nio.file.Path start> = $r1;

        r0.<kotlin.io.path.PathTreeWalk: kotlin.io.path.PathWalkOption[] options> = $r2;

        return;
    }

    public static final boolean access$getFollowLinks(kotlin.io.path.PathTreeWalk)
    {
        kotlin.io.path.PathTreeWalk $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.io.path.PathTreeWalk;

        $z0 = specialinvoke $r0.<kotlin.io.path.PathTreeWalk: boolean getFollowLinks()>();

        return $z0;
    }

    public static final boolean access$getIncludeDirectories(kotlin.io.path.PathTreeWalk)
    {
        kotlin.io.path.PathTreeWalk $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.io.path.PathTreeWalk;

        $z0 = specialinvoke $r0.<kotlin.io.path.PathTreeWalk: boolean getIncludeDirectories()>();

        return $z0;
    }

    public static final java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)
    {
        java.nio.file.LinkOption[] $r1;
        kotlin.io.path.PathTreeWalk $r0;

        $r0 := @parameter0: kotlin.io.path.PathTreeWalk;

        $r1 = specialinvoke $r0.<kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] getLinkOptions()>();

        return $r1;
    }

    public static final java.nio.file.Path access$getStart$p(kotlin.io.path.PathTreeWalk)
    {
        java.nio.file.Path r1;
        kotlin.io.path.PathTreeWalk $r0;

        $r0 := @parameter0: kotlin.io.path.PathTreeWalk;

        r1 = $r0.<kotlin.io.path.PathTreeWalk: java.nio.file.Path start>;

        return r1;
    }

    private final java.util.Iterator bfsIterator()
    {
        java.util.Iterator $r1;
        kotlin.io.path.PathTreeWalk r0;
        kotlin.io.path.PathTreeWalk$bfsIterator$1 $r2;
        kotlin.jvm.functions.Function2 $r3;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r2 = new kotlin.io.path.PathTreeWalk$bfsIterator$1;

        specialinvoke $r2.<kotlin.io.path.PathTreeWalk$bfsIterator$1: void <init>(kotlin.io.path.PathTreeWalk,kotlin.coroutines.Continuation)>(r0, null);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.util.Iterator iterator(kotlin.jvm.functions.Function2)>($r3);

        return $r1;
    }

    private final java.util.Iterator dfsIterator()
    {
        java.util.Iterator $r1;
        kotlin.io.path.PathTreeWalk r0;
        kotlin.jvm.functions.Function2 $r3;
        kotlin.io.path.PathTreeWalk$dfsIterator$1 $r2;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r2 = new kotlin.io.path.PathTreeWalk$dfsIterator$1;

        specialinvoke $r2.<kotlin.io.path.PathTreeWalk$dfsIterator$1: void <init>(kotlin.io.path.PathTreeWalk,kotlin.coroutines.Continuation)>(r0, null);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        $r1 = staticinvoke <kotlin.sequences.SequencesKt: java.util.Iterator iterator(kotlin.jvm.functions.Function2)>($r3);

        return $r1;
    }

    private final boolean getFollowLinks()
    {
        kotlin.io.path.PathWalkOption[] $r2;
        kotlin.io.path.PathTreeWalk r0;
        kotlin.io.path.PathWalkOption $r1;
        boolean $z0;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r2 = r0.<kotlin.io.path.PathTreeWalk: kotlin.io.path.PathWalkOption[] options>;

        $r1 = <kotlin.io.path.PathWalkOption: kotlin.io.path.PathWalkOption FOLLOW_LINKS>;

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(java.lang.Object[],java.lang.Object)>($r2, $r1);

        return $z0;
    }

    private final boolean getIncludeDirectories()
    {
        kotlin.io.path.PathWalkOption[] $r2;
        kotlin.io.path.PathTreeWalk r0;
        kotlin.io.path.PathWalkOption $r1;
        boolean $z0;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r2 = r0.<kotlin.io.path.PathTreeWalk: kotlin.io.path.PathWalkOption[] options>;

        $r1 = <kotlin.io.path.PathWalkOption: kotlin.io.path.PathWalkOption INCLUDE_DIRECTORIES>;

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(java.lang.Object[],java.lang.Object)>($r2, $r1);

        return $z0;
    }

    private final java.nio.file.LinkOption[] getLinkOptions()
    {
        kotlin.io.path.LinkFollowing $r1;
        java.nio.file.LinkOption[] $r2;
        kotlin.io.path.PathTreeWalk r0;
        boolean $z0;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r1 = <kotlin.io.path.LinkFollowing: kotlin.io.path.LinkFollowing INSTANCE>;

        $z0 = specialinvoke r0.<kotlin.io.path.PathTreeWalk: boolean getFollowLinks()>();

        $r2 = virtualinvoke $r1.<kotlin.io.path.LinkFollowing: java.nio.file.LinkOption[] toLinkOptions(boolean)>($z0);

        return $r2;
    }

    private final boolean isBFS()
    {
        kotlin.io.path.PathWalkOption[] $r2;
        kotlin.io.path.PathTreeWalk r0;
        kotlin.io.path.PathWalkOption $r1;
        boolean $z0;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r2 = r0.<kotlin.io.path.PathTreeWalk: kotlin.io.path.PathWalkOption[] options>;

        $r1 = <kotlin.io.path.PathWalkOption: kotlin.io.path.PathWalkOption BREADTH_FIRST>;

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(java.lang.Object[],java.lang.Object)>($r2, $r1);

        return $z0;
    }

    private final java.lang.Object yieldIfNeeded(kotlin.sequences.SequenceScope, kotlin.io.path.PathNode, kotlin.io.path.DirectoryEntriesReader, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r5;
        java.lang.Object[] $r9;
        kotlin.io.path.PathNode $r2;
        java.nio.file.LinkOption $r6;
        java.nio.file.FileSystemLoopException $r11;
        kotlin.io.path.PathTreeWalk r0;
        int $i0;
        java.lang.String $r12;
        java.nio.file.Path $r7;
        kotlin.sequences.SequenceScope $r1;
        boolean $z0;
        java.nio.file.LinkOption[] $r8;
        kotlin.jvm.functions.Function1 $r4;
        java.util.List $r10;
        kotlin.Unit r13;
        kotlin.io.path.DirectoryEntriesReader $r3;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $r1 := @parameter0: kotlin.sequences.SequenceScope;

        $r2 := @parameter1: kotlin.io.path.PathNode;

        $r3 := @parameter2: kotlin.io.path.DirectoryEntriesReader;

        $r4 := @parameter3: kotlin.jvm.functions.Function1;

        $r5 := @parameter4: kotlin.coroutines.Continuation;

        $r7 = virtualinvoke $r2.<kotlin.io.path.PathNode: java.nio.file.Path getPath()>();

        $r8 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)>(r0);

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, $i0);

        $r8 = (java.nio.file.LinkOption[]) $r9;

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, $i0);

        $r8 = (java.nio.file.LinkOption[]) $r9;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r7, $r8);

        if $z0 == 0 goto label4;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalkKt: boolean access$createsCycle(kotlin.io.path.PathNode)>($r2);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalk: boolean access$getIncludeDirectories(kotlin.io.path.PathTreeWalk)>(r0);

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        virtualinvoke $r1.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r7, $r5);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

     label1:
        $r8 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)>(r0);

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, $i0);

        $r8 = (java.nio.file.LinkOption[]) $r9;

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, $i0);

        $r8 = (java.nio.file.LinkOption[]) $r9;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r7, $r8);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke $r3.<kotlin.io.path.DirectoryEntriesReader: java.util.List readEntries(kotlin.io.path.PathNode)>($r2);

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r10);

     label2:
        goto label5;

     label3:
        $r11 = new java.nio.file.FileSystemLoopException;

        $r12 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.nio.file.FileSystemLoopException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label4:
        $r8 = newarray (java.nio.file.LinkOption)[1];

        $r6 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        $r8[0] = $r6;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r8, 1);

        $r8 = (java.nio.file.LinkOption[]) $r9;

        $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>($r7, $r8);

        if $z0 == 0 goto label5;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        virtualinvoke $r1.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>($r7, $r5);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r13;

     label5:
        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r13;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r1;
        kotlin.io.path.PathTreeWalk r0;
        boolean $z0;

        r0 := @this: kotlin.io.path.PathTreeWalk;

        $z0 = specialinvoke r0.<kotlin.io.path.PathTreeWalk: boolean isBFS()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<kotlin.io.path.PathTreeWalk: java.util.Iterator bfsIterator()>();

        return $r1;

     label1:
        $r1 = specialinvoke r0.<kotlin.io.path.PathTreeWalk: java.util.Iterator dfsIterator()>();

        return $r1;
    }
}
