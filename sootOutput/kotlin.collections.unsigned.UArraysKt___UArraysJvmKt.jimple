class kotlin.collections.unsigned.UArraysKt___UArraysJvmKt extends java.lang.Object
{

    public void <init>()
    {
        kotlin.collections.unsigned.UArraysKt___UArraysJvmKt r0;

        r0 := @this: kotlin.collections.unsigned.UArraysKt___UArraysJvmKt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.util.List asList--ajY-9A(int[])
    {
        java.util.List $r2;
        kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$1 $r1;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asList");

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$1;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$1: void <init>(int[])>($r0);

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public static final java.util.List asList-GBYM_sE(byte[])
    {
        byte[] $r0;
        kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3 $r1;
        java.util.List $r2;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asList");

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$3: void <init>(byte[])>($r0);

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public static final java.util.List asList-QwZRm1k(long[])
    {
        kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$2 $r1;
        java.util.List $r2;
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asList");

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$2;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$2: void <init>(long[])>($r0);

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public static final java.util.List asList-rL5Bavg(short[])
    {
        kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$4 $r1;
        java.util.List $r2;
        short[] $r0;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asList");

        $r1 = new kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$4;

        specialinvoke $r1.<kotlin.collections.unsigned.UArraysKt___UArraysJvmKt$asList$4: void <init>(short[])>($r0);

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    public static final int binarySearch-2fe2U9s(int[], int, int, int)
    {
        int[] $r0;
        kotlin.collections.AbstractList$Companion r1;
        int $i0, $i1, $i2, i3, $i4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$binarySearch");

        r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i4 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        virtualinvoke r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i1, $i2, $i4);

        $i2 = $i2 + -1;

     label1:
        if $i1 > $i2 goto label4;

        $i4 = $i1 + $i2;

        $i4 = $i4 >>> 1;

        i3 = $r0[$i4];

        i3 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>(i3, $i0);

        if i3 >= 0 goto label2;

        $i1 = $i4 + 1;

        goto label1;

     label2:
        if i3 <= 0 goto label3;

        $i2 = $i4 + -1;

        goto label1;

     label3:
        return $i4;

     label4:
        $i0 = $i1 + 1;

        $i0 = neg $i0;

        return $i0;
    }

    public static int binarySearch-2fe2U9s$default(int[], int, int, int, int, java.lang.Object)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

     label2:
        $i0 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int binarySearch-2fe2U9s(int[],int,int,int)>($r0, $i0, $i1, $i2);

        return $i0;
    }

    public static final int binarySearch-EtDCXyQ(short[], short, int, int)
    {
        kotlin.collections.AbstractList$Companion r1;
        short $s0;
        int $i1, $i2, $i3, i4, $i5;
        short[] $r0;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$binarySearch");

        r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i3 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        virtualinvoke r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i1, $i2, $i3);

        i4 = (int) $s0;

        $i3 = 65535 & i4;

        $i2 = $i2 + -1;

     label1:
        if $i1 > $i2 goto label4;

        i4 = $i1 + $i2;

        i4 = i4 >>> 1;

        $s0 = $r0[i4];

        $i5 = (int) $s0;

        $i5 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i5, $i3);

        if $i5 >= 0 goto label2;

        $i1 = i4 + 1;

        goto label1;

     label2:
        if $i5 <= 0 goto label3;

        $i2 = i4 + -1;

        goto label1;

     label3:
        return i4;

     label4:
        $i1 = $i1 + 1;

        $i1 = neg $i1;

        return $i1;
    }

    public static int binarySearch-EtDCXyQ$default(short[], short, int, int, int, java.lang.Object)
    {
        short $s0;
        int $i1, $i2, $i3, $i4;
        java.lang.Object $r1;
        short[] $r0;

        $r0 := @parameter0: short[];

        $s0 := @parameter1: short;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i2 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

     label2:
        $i1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int binarySearch-EtDCXyQ(short[],short,int,int)>($r0, $s0, $i1, $i2);

        return $i1;
    }

    public static final int binarySearch-K6DWlUc(long[], long, int, int)
    {
        kotlin.collections.AbstractList$Companion r1;
        long $l0, l3;
        long[] $r0;
        int $i1, $i2, $i4, $i5;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$binarySearch");

        r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i4 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        virtualinvoke r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i1, $i2, $i4);

        $i2 = $i2 + -1;

     label1:
        if $i1 > $i2 goto label4;

        $i4 = $i1 + $i2;

        $i4 = $i4 >>> 1;

        l3 = $r0[$i4];

        $i5 = staticinvoke <kotlin.UnsignedKt: int ulongCompare(long,long)>(l3, $l0);

        if $i5 >= 0 goto label2;

        $i1 = $i4 + 1;

        goto label1;

     label2:
        if $i5 <= 0 goto label3;

        $i2 = $i4 + -1;

        goto label1;

     label3:
        return $i4;

     label4:
        $i1 = $i1 + 1;

        $i1 = neg $i1;

        return $i1;
    }

    public static int binarySearch-K6DWlUc$default(long[], long, int, int, int, java.lang.Object)
    {
        long[] $r0;
        int $i1, $i2, $i3, $i4;
        long $l0;
        java.lang.Object $r1;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i2 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

     label2:
        $i1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int binarySearch-K6DWlUc(long[],long,int,int)>($r0, $l0, $i1, $i2);

        return $i1;
    }

    public static final int binarySearch-WpHrYlw(byte[], byte, int, int)
    {
        byte[] $r0;
        kotlin.collections.AbstractList$Companion r1;
        short s4;
        byte $b0;
        int $i1, $i2, $i3, $i5, $i6;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$binarySearch");

        r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i3 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        virtualinvoke r1.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i1, $i2, $i3);

        s4 = (short) $b0;

        s4 = s4 & 255;

        $i2 = $i2 + -1;

     label1:
        if $i1 > $i2 goto label4;

        $i3 = $i1 + $i2;

        $i3 = $i3 >>> 1;

        $b0 = $r0[$i3];

        $i5 = (int) $b0;

        $i6 = (int) s4;

        $i5 = staticinvoke <kotlin.UnsignedKt: int uintCompare(int,int)>($i5, $i6);

        if $i5 >= 0 goto label2;

        $i1 = $i3 + 1;

        goto label1;

     label2:
        if $i5 <= 0 goto label3;

        $i2 = $i3 + -1;

        goto label1;

     label3:
        return $i3;

     label4:
        $i1 = $i1 + 1;

        $i1 = neg $i1;

        return $i1;
    }

    public static int binarySearch-WpHrYlw$default(byte[], byte, int, int, int, java.lang.Object)
    {
        byte[] $r0;
        byte $b0;
        int $i1, $i2, $i3, $i4;
        java.lang.Object $r1;

        $r0 := @parameter0: byte[];

        $b0 := @parameter1: byte;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label1;

        $i1 = 0;

     label1:
        $i3 = $i3 & 4;

        if $i3 == 0 goto label2;

        $i2 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

     label2:
        $i1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: int binarySearch-WpHrYlw(byte[],byte,int,int)>($r0, $b0, $i1, $i2);

        return $i1;
    }

    private static final byte elementAt-PpDY95g(byte[], int)
    {
        int $i0;
        byte[] $r0;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$elementAt");

        $b1 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i0);

        return $b1;
    }

    private static final short elementAt-nggk6HY(short[], int)
    {
        int $i0;
        short $s1;
        short[] $r0;

        $r0 := @parameter0: short[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$elementAt");

        $s1 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i0);

        return $s1;
    }

    private static final int elementAt-qFRl0hI(int[], int)
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$elementAt");

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        return $i0;
    }

    private static final long elementAt-r7IrZao(long[], int)
    {
        int $i0;
        long $l1;
        long[] $r0;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$elementAt");

        $l1 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i0);

        return $l1;
    }

    public static final kotlin.UInt max--ajY-9A(int[])
    {
        kotlin.UInt $r1;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UInt maxOrNull--ajY-9A(int[])>($r0);

        return $r1;
    }

    public static final kotlin.UByte max-GBYM_sE(byte[])
    {
        byte[] $r0;
        kotlin.UByte $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UByte maxOrNull-GBYM_sE(byte[])>($r0);

        return $r1;
    }

    public static final kotlin.ULong max-QwZRm1k(long[])
    {
        long[] $r0;
        kotlin.ULong $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.ULong maxOrNull-QwZRm1k(long[])>($r0);

        return $r1;
    }

    public static final kotlin.UShort max-rL5Bavg(short[])
    {
        short[] $r0;
        kotlin.UShort $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$max");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UShort maxOrNull-rL5Bavg(short[])>($r0);

        return $r1;
    }

    private static final kotlin.UByte maxBy-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte $b0, $b1;
        kotlin.collections.IntIterator $r6;
        kotlin.UByte $r2;
        int $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $b1 = $b0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label4;

        $b1 = $b0;

        $r4 = $r7;

        goto label4;
    }

    private static final kotlin.ULong maxBy-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        long $l0, $l1;
        kotlin.ULong $r2;
        long[] $r0;
        kotlin.collections.IntIterator $r6;
        int $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $l1 = $l0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label4;

        $l1 = $l0;

        $r4 = $r7;

        goto label4;
    }

    private static final kotlin.UInt maxBy-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.UInt $r2;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.collections.IntIterator $r6;
        int[] $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $i1 = $i0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label4;

        $i1 = $i0;

        $r4 = $r7;

        goto label4;
    }

    private static final kotlin.UShort maxBy-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        short $s0, $s1;
        kotlin.UShort $r2;
        kotlin.collections.IntIterator $r6;
        int $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        short[] $r0;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $s1 = $s0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 >= 0 goto label4;

        $s1 = $s0;

        $r4 = $r7;

        goto label4;
    }

    public static final kotlin.UByte maxWith-XMRcp5o(byte[], java.util.Comparator)
    {
        byte[] $r0;
        java.util.Comparator $r1;
        kotlin.UByte $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UByte maxWithOrNull-XMRcp5o(byte[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.UInt maxWith-YmdZ_VM(int[], java.util.Comparator)
    {
        java.util.Comparator $r1;
        kotlin.UInt $r2;
        int[] $r0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UInt maxWithOrNull-YmdZ_VM(int[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.UShort maxWith-eOHTfZs(short[], java.util.Comparator)
    {
        short[] $r0;
        kotlin.UShort $r2;
        java.util.Comparator $r1;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UShort maxWithOrNull-eOHTfZs(short[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.ULong maxWith-zrEWJaI(long[], java.util.Comparator)
    {
        long[] $r0;
        java.util.Comparator $r1;
        kotlin.ULong $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$maxWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.ULong maxWithOrNull-zrEWJaI(long[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.UInt min--ajY-9A(int[])
    {
        kotlin.UInt $r1;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UInt minOrNull--ajY-9A(int[])>($r0);

        return $r1;
    }

    public static final kotlin.UByte min-GBYM_sE(byte[])
    {
        byte[] $r0;
        kotlin.UByte $r1;

        $r0 := @parameter0: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UByte minOrNull-GBYM_sE(byte[])>($r0);

        return $r1;
    }

    public static final kotlin.ULong min-QwZRm1k(long[])
    {
        long[] $r0;
        kotlin.ULong $r1;

        $r0 := @parameter0: long[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.ULong minOrNull-QwZRm1k(long[])>($r0);

        return $r1;
    }

    public static final kotlin.UShort min-rL5Bavg(short[])
    {
        short[] $r0;
        kotlin.UShort $r1;

        $r0 := @parameter0: short[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$min");

        $r1 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UShort minOrNull-rL5Bavg(short[])>($r0);

        return $r1;
    }

    private static final kotlin.UByte minBy-JOV_ifY(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte $b0, $b1;
        kotlin.collections.IntIterator $r6;
        kotlin.UByte $r2;
        int $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UByteArray: boolean isEmpty-impl(byte[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, 0);

        $b1 = $b0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(byte[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $b0 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label4;

        $b1 = $b0;

        $r4 = $r7;

        goto label4;
    }

    private static final kotlin.ULong minBy-MShoTSo(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        long $l0, $l1;
        kotlin.ULong $r2;
        long[] $r0;
        kotlin.collections.IntIterator $r6;
        int $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.ULongArray: boolean isEmpty-impl(long[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, 0);

        $l1 = $l0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(long[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $l0 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label4;

        $l1 = $l0;

        $r4 = $r7;

        goto label4;
    }

    private static final kotlin.UInt minBy-jgv0xPQ(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.UInt $r2;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.collections.IntIterator $r6;
        int[] $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UIntArray: boolean isEmpty-impl(int[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, 0);

        $i1 = $i0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(int[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $i0 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i0);

        $r2 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label4;

        $i1 = $i0;

        $r4 = $r7;

        goto label4;
    }

    private static final kotlin.UShort minBy-xTcfx_M(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        short $s0, $s1;
        kotlin.UShort $r2;
        kotlin.collections.IntIterator $r6;
        int $i2;
        java.lang.Object $r3;
        java.lang.Comparable $r4, $r7;
        short[] $r0;
        boolean $z0;
        kotlin.ranges.IntRange $r5;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minBy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $z0 = staticinvoke <kotlin.UShortArray: boolean isEmpty-impl(short[])>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, 0);

        $s1 = $s0;

        $i2 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(short[])>($r0);

        if $i2 != 0 goto label3;

     label2:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s1);

        return $r2;

     label3:
        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Comparable) $r3;

        $r5 = new kotlin.ranges.IntRange;

        specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i2);

        $r6 = virtualinvoke $r5.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label4:
        $z0 = virtualinvoke $r6.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke $r6.<kotlin.collections.IntIterator: int nextInt()>();

        $s0 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i2);

        $r2 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s0);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r7 = (java.lang.Comparable) $r3;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        if $i2 <= 0 goto label4;

        $s1 = $s0;

        $r4 = $r7;

        goto label4;
    }

    public static final kotlin.UByte minWith-XMRcp5o(byte[], java.util.Comparator)
    {
        byte[] $r0;
        java.util.Comparator $r1;
        kotlin.UByte $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UByte minWithOrNull-XMRcp5o(byte[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.UInt minWith-YmdZ_VM(int[], java.util.Comparator)
    {
        java.util.Comparator $r1;
        kotlin.UInt $r2;
        int[] $r0;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UInt minWithOrNull-YmdZ_VM(int[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.UShort minWith-eOHTfZs(short[], java.util.Comparator)
    {
        short[] $r0;
        kotlin.UShort $r2;
        java.util.Comparator $r1;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.UShort minWithOrNull-eOHTfZs(short[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static final kotlin.ULong minWith-zrEWJaI(long[], java.util.Comparator)
    {
        long[] $r0;
        java.util.Comparator $r1;
        kotlin.ULong $r2;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$minWith");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = staticinvoke <kotlin.collections.unsigned.UArraysKt: kotlin.ULong minWithOrNull-zrEWJaI(long[],java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    private static final java.math.BigDecimal sumOfBigDecimal(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.math.BigDecimal $r2, r3;
        byte $b2;
        kotlin.UByte $r4;
        int $i0, $i1;
        java.lang.Object $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigDecimal) $r5;

        r3 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static final java.math.BigDecimal sumOfBigDecimal(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.UInt $r4;
        kotlin.jvm.functions.Function1 $r1;
        java.math.BigDecimal $r2, r3;
        int[] $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigDecimal) $r5;

        r3 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static final java.math.BigDecimal sumOfBigDecimal(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        long $l2;
        kotlin.ULong $r4;
        java.math.BigDecimal $r2, r3;
        long[] $r0;
        int $i0, $i1;
        java.lang.Object $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigDecimal) $r5;

        r3 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static final java.math.BigDecimal sumOfBigDecimal(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        java.math.BigDecimal $r2, r3;
        short $s2;
        kotlin.UShort $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        short[] $r0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigDecimal) $r5;

        r3 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static final java.math.BigInteger sumOfBigInteger(byte[], kotlin.jvm.functions.Function1)
    {
        byte[] $r0;
        kotlin.jvm.functions.Function1 $r1;
        byte $b2;
        kotlin.UByte $r4;
        int $i0, $i1;
        java.math.BigInteger $r2, r3;
        java.lang.Object $r5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.UByteArray: int getSize-impl(byte[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = staticinvoke <kotlin.UByteArray: byte get-w2LRezQ(byte[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UByte: kotlin.UByte box-impl(byte)>($b2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigInteger) $r5;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static final java.math.BigInteger sumOfBigInteger(int[], kotlin.jvm.functions.Function1)
    {
        kotlin.UInt $r4;
        kotlin.jvm.functions.Function1 $r1;
        int[] $r0;
        int $i0, $i1, $i2;
        java.math.BigInteger $r2, r3;
        java.lang.Object $r5;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.UIntArray: int getSize-impl(int[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = staticinvoke <kotlin.UIntArray: int get-pVg5ArA(int[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UInt: kotlin.UInt box-impl(int)>($i2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigInteger) $r5;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static final java.math.BigInteger sumOfBigInteger(long[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        long $l2;
        kotlin.ULong $r4;
        long[] $r0;
        int $i0, $i1;
        java.math.BigInteger $r2, r3;
        java.lang.Object $r5;

        $r0 := @parameter0: long[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.ULongArray: int getSize-impl(long[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $l2 = staticinvoke <kotlin.ULongArray: long get-s-VKNKU(long[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.ULong: kotlin.ULong box-impl(long)>($l2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigInteger) $r5;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static final java.math.BigInteger sumOfBigInteger(short[], kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        short $s2;
        kotlin.UShort $r4;
        int $i0, $i1;
        java.math.BigInteger $r2, r3;
        java.lang.Object $r5;
        short[] $r0;

        $r0 := @parameter0: short[];

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$sumOf");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        r3 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "valueOf(this.toLong())");

        $i0 = staticinvoke <kotlin.UShortArray: int getSize-impl(short[])>($r0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $s2 = staticinvoke <kotlin.UShortArray: short get-Mh2AYeg(short[],int)>($r0, $i1);

        $r4 = staticinvoke <kotlin.UShort: kotlin.UShort box-impl(short)>($s2);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r2 = (java.math.BigInteger) $r5;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "this.add(other)");

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r3;
    }
}
