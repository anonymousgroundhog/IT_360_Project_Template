final class kotlinx.coroutines.scheduling.UnlimitedIoScheduler extends kotlinx.coroutines.CoroutineDispatcher
{
    public static final kotlinx.coroutines.scheduling.UnlimitedIoScheduler INSTANCE;

    static void <clinit>()
    {
        kotlinx.coroutines.scheduling.UnlimitedIoScheduler $r0;

        $r0 = new kotlinx.coroutines.scheduling.UnlimitedIoScheduler;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.UnlimitedIoScheduler: void <init>()>();

        <kotlinx.coroutines.scheduling.UnlimitedIoScheduler: kotlinx.coroutines.scheduling.UnlimitedIoScheduler INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.scheduling.UnlimitedIoScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.UnlimitedIoScheduler;

        specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: void <init>()>();

        return;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.UnlimitedIoScheduler r0;
        kotlinx.coroutines.scheduling.DefaultScheduler $r3;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;
        kotlinx.coroutines.scheduling.TaskContext $r4;

        r0 := @this: kotlinx.coroutines.scheduling.UnlimitedIoScheduler;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 = <kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE>;

        $r4 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext BlockingContext>;

        virtualinvoke $r3.<kotlinx.coroutines.scheduling.DefaultScheduler: void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r2, $r4, 0);

        return;
    }

    public void dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.UnlimitedIoScheduler r0;
        kotlinx.coroutines.scheduling.DefaultScheduler $r3;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;
        kotlinx.coroutines.scheduling.TaskContext $r4;

        r0 := @this: kotlinx.coroutines.scheduling.UnlimitedIoScheduler;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 = <kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE>;

        $r4 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext BlockingContext>;

        virtualinvoke $r3.<kotlinx.coroutines.scheduling.DefaultScheduler: void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r2, $r4, 1);

        return;
    }

    public kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)
    {
        kotlinx.coroutines.scheduling.UnlimitedIoScheduler r0;
        int $i0, $i1;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        r0 := @this: kotlinx.coroutines.scheduling.UnlimitedIoScheduler;

        $i0 := @parameter0: int;

        staticinvoke <kotlinx.coroutines.internal.LimitedDispatcherKt: void checkParallelism(int)>($i0);

        $i1 = <kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE>;

        if $i0 < $i1 goto label1;

        $r1 = (kotlinx.coroutines.CoroutineDispatcher) r0;

        return $r1;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)>($i0);

        return $r1;
    }
}
