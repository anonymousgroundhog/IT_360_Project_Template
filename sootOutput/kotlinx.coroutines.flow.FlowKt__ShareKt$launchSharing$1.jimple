final class kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final java.lang.Object $initialValue;
    final kotlinx.coroutines.flow.MutableSharedFlow $shared;
    final kotlinx.coroutines.flow.SharingStarted $started;
    final kotlinx.coroutines.flow.Flow $upstream;
    int label;

    void <init>(kotlinx.coroutines.flow.SharingStarted, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.MutableSharedFlow, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r2;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0;
        kotlin.coroutines.Continuation $r5;
        kotlinx.coroutines.flow.SharingStarted $r1;
        kotlinx.coroutines.flow.MutableSharedFlow $r3;
        java.lang.Object $r4;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharingStarted;

        $r2 := @parameter1: kotlinx.coroutines.flow.Flow;

        $r3 := @parameter2: kotlinx.coroutines.flow.MutableSharedFlow;

        $r4 := @parameter3: java.lang.Object;

        $r5 := @parameter4: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started> = $r1;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream> = $r2;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared> = $r3;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object $initialValue> = $r4;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r5);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r4;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0, $r6;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.SharingStarted $r3;
        kotlinx.coroutines.flow.MutableSharedFlow $r5;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r6 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r3 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r4 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r5 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object $initialValue>;

        specialinvoke $r6.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: void <init>(kotlinx.coroutines.flow.SharingStarted,kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r4, $r5, $r1, $r2);

        $r2 = (kotlin.coroutines.Continuation) $r6;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0;
        kotlin.coroutines.Continuation $r4;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.CoroutineScope $r1;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.IllegalStateException $r4;
        kotlin.coroutines.Continuation $r11;
        kotlinx.coroutines.flow.SharingStarted $r6, $r8;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 $r15;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1 $r13;
        int i0;
        kotlinx.coroutines.flow.StateFlow $r12;
        kotlinx.coroutines.flow.MutableSharedFlow $r1;
        kotlin.jvm.functions.Function2 $r14;
        kotlinx.coroutines.flow.SharingStarted$Companion $r7;
        kotlinx.coroutines.flow.Flow $r9, $r16;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1 r0, r5;
        kotlin.Unit r17;
        kotlinx.coroutines.flow.FlowCollector $r10;
        java.lang.Object $r2, $r3;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label>;

        lookupswitch(i0)
        {
            case 0: goto label06;
            case 1: goto label05;
            case 2: goto label04;
            case 3: goto label03;
            case 4: goto label02;
            default: goto label01;
        };

     label01:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r4;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        goto label12;

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        goto label10;

     label04:
        r5 = r0;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        goto label09;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        goto label07;

     label06:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        r5 = r0;

        $r6 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r7 = <kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.SharingStarted$Companion Companion>;

        $r8 = virtualinvoke $r7.<kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted getEagerly()>();

        if $r6 != $r8 goto label08;

        $r9 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r10 = (kotlinx.coroutines.flow.FlowCollector) $r1;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 1;

        $r2 = interfaceinvoke $r9.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r10, $r11);

        if $r2 != $r3 goto label07;

        return $r3;

     label07:
        goto label12;

     label08:
        $r6 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r7 = <kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.SharingStarted$Companion Companion>;

        $r8 = virtualinvoke $r7.<kotlinx.coroutines.flow.SharingStarted$Companion: kotlinx.coroutines.flow.SharingStarted getLazily()>();

        if $r6 != $r8 goto label11;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r12 = interfaceinvoke $r1.<kotlinx.coroutines.flow.MutableSharedFlow: kotlinx.coroutines.flow.StateFlow getSubscriptionCount()>();

        $r9 = (kotlinx.coroutines.flow.Flow) $r12;

        $r13 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1;

        specialinvoke $r13.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1: void <init>(kotlin.coroutines.Continuation)>(null);

        $r14 = (kotlin.jvm.functions.Function2) $r13;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 2;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object first(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r9, $r14, $r11);

        if $r2 != $r3 goto label09;

        return $r3;

     label09:
        $r9 = r5.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r1 = r5.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r10 = (kotlinx.coroutines.flow.FlowCollector) $r1;

        $r11 = (kotlin.coroutines.Continuation) r5;

        r5.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 3;

        $r2 = interfaceinvoke $r9.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r10, $r11);

        if $r2 != $r3 goto label10;

        return $r3;

     label10:
        goto label12;

     label11:
        $r6 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.SharingStarted $started>;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r12 = interfaceinvoke $r1.<kotlinx.coroutines.flow.MutableSharedFlow: kotlinx.coroutines.flow.StateFlow getSubscriptionCount()>();

        $r9 = interfaceinvoke $r6.<kotlinx.coroutines.flow.SharingStarted: kotlinx.coroutines.flow.Flow command(kotlinx.coroutines.flow.StateFlow)>($r12);

        $r9 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow distinctUntilChanged(kotlinx.coroutines.flow.Flow)>($r9);

        $r15 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r16 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.Flow $upstream>;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r2 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: java.lang.Object $initialValue>;

        specialinvoke $r15.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: void <init>(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,java.lang.Object,kotlin.coroutines.Continuation)>($r16, $r1, $r2, null);

        $r14 = (kotlin.jvm.functions.Function2) $r15;

        $r11 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1: int label> = 4;

        $r2 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object collectLatest(kotlinx.coroutines.flow.Flow,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r9, $r14, $r11);

        if $r2 != $r3 goto label12;

        return $r3;

     label12:
        r17 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r17;
    }
}
