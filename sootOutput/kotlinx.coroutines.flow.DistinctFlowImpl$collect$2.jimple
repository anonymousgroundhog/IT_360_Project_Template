final class kotlinx.coroutines.flow.DistinctFlowImpl$collect$2 extends java.lang.Object implements kotlinx.coroutines.flow.FlowCollector
{
    final kotlinx.coroutines.flow.FlowCollector $collector;
    final kotlin.jvm.internal.Ref$ObjectRef $previousKey;
    final kotlinx.coroutines.flow.DistinctFlowImpl this$0;

    void <init>(kotlinx.coroutines.flow.DistinctFlowImpl, kotlin.jvm.internal.Ref$ObjectRef, kotlinx.coroutines.flow.FlowCollector)
    {
        kotlinx.coroutines.flow.DistinctFlowImpl $r1;
        kotlinx.coroutines.flow.DistinctFlowImpl$collect$2 r0;
        kotlinx.coroutines.flow.FlowCollector $r3;
        kotlin.jvm.internal.Ref$ObjectRef $r2;

        r0 := @this: kotlinx.coroutines.flow.DistinctFlowImpl$collect$2;

        $r1 := @parameter0: kotlinx.coroutines.flow.DistinctFlowImpl;

        $r2 := @parameter1: kotlin.jvm.internal.Ref$ObjectRef;

        $r3 := @parameter2: kotlinx.coroutines.flow.FlowCollector;

        r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlinx.coroutines.flow.DistinctFlowImpl this$0> = $r1;

        r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlin.jvm.internal.Ref$ObjectRef $previousKey> = $r2;

        r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlinx.coroutines.flow.FlowCollector $collector> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException r7;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.DistinctFlowImpl r8;
        int $i0;
        java.lang.Boolean $r14;
        boolean $z0;
        kotlin.jvm.internal.Ref$ObjectRef $r10;
        kotlinx.coroutines.internal.Symbol $r12;
        kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1 $r3, $r4;
        kotlin.jvm.functions.Function1 r9;
        kotlin.jvm.functions.Function2 $r13;
        kotlin.Unit r16;
        kotlinx.coroutines.flow.DistinctFlowImpl$collect$2 r0;
        kotlinx.coroutines.flow.FlowCollector r15;
        java.lang.Object r1, $r5, $r6, $r11;

        r0 := @this: kotlinx.coroutines.flow.DistinctFlowImpl$collect$2;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r3.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1: int label> = $i0;

        goto label2;

     label1:
        $r3 = new kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1;

        specialinvoke $r3.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1: void <init>(kotlinx.coroutines.flow.DistinctFlowImpl$collect$2,kotlin.coroutines.Continuation)>(r0, $r2);

     label2:
        $r4 = $r3;

        $r5 = $r3.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label4;
            default: goto label3;
        };

     label3:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r7;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        goto label6;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        r8 = r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlinx.coroutines.flow.DistinctFlowImpl this$0>;

        r9 = r8.<kotlinx.coroutines.flow.DistinctFlowImpl: kotlin.jvm.functions.Function1 keySelector>;

        $r5 = interfaceinvoke r9.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        $r10 = r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlin.jvm.internal.Ref$ObjectRef $previousKey>;

        $r11 = $r10.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r12 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

        if $r11 == $r12 goto label7;

        r8 = r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlinx.coroutines.flow.DistinctFlowImpl this$0>;

        $r13 = r8.<kotlinx.coroutines.flow.DistinctFlowImpl: kotlin.jvm.functions.Function2 areEquivalent>;

        $r10 = r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlin.jvm.internal.Ref$ObjectRef $previousKey>;

        $r11 = $r10.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r11 = interfaceinvoke $r13.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r11, $r5);

        $r14 = (java.lang.Boolean) $r11;

        $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label6;

        goto label7;

     label6:
        r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r16;

     label7:
        $r10 = r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlin.jvm.internal.Ref$ObjectRef $previousKey>;

        $r10.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r5;

        r15 = r0.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2: kotlinx.coroutines.flow.FlowCollector $collector>;

        $r4.<kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1: int label> = 1;

        r1 = interfaceinvoke r15.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r4);

        if r1 != $r6 goto label6;

        return $r6;
    }
}
