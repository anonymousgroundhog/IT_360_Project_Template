public class androidx.work.impl.WorkDatabasePathHelper extends java.lang.Object
{
    private static final java.lang.String[] DATABASE_EXTRA_FILES;
    private static final java.lang.String TAG;
    private static final java.lang.String WORK_DATABASE_NAME;

    static void <clinit>()
    {
        java.lang.String[] $r1;
        java.lang.String $r0;

        <androidx.work.impl.WorkDatabasePathHelper: java.lang.String WORK_DATABASE_NAME> = "androidx.work.workdb";

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("WrkDbPathHelper");

        <androidx.work.impl.WorkDatabasePathHelper: java.lang.String TAG> = $r0;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "-journal";

        $r1[1] = "-shm";

        $r1[2] = "-wal";

        <androidx.work.impl.WorkDatabasePathHelper: java.lang.String[] DATABASE_EXTRA_FILES> = $r1;

        return;
    }

    private void <init>()
    {
        androidx.work.impl.WorkDatabasePathHelper r0;

        r0 := @this: androidx.work.impl.WorkDatabasePathHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.File getDatabasePath(android.content.Context)
    {
        int $i0;
        android.content.Context $r0;
        java.io.File $r1;

        $r0 := @parameter0: android.content.Context;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 23 goto label1;

        $r1 = staticinvoke <androidx.work.impl.WorkDatabasePathHelper: java.io.File getDefaultDatabasePath(android.content.Context)>($r0);

        return $r1;

     label1:
        $r1 = staticinvoke <androidx.work.impl.WorkDatabasePathHelper: java.io.File getNoBackupPath(android.content.Context,java.lang.String)>($r0, "androidx.work.workdb");

        return $r1;
    }

    public static java.io.File getDefaultDatabasePath(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>("androidx.work.workdb");

        return $r1;
    }

    private static java.io.File getNoBackupPath(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.io.File $r2, $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.io.File;

        $r3 = virtualinvoke $r0.<android.content.Context: java.io.File getNoBackupFilesDir()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r1);

        return $r2;
    }

    public static java.lang.String getWorkDatabaseName()
    {
        return "androidx.work.workdb";
    }

    public static void migrateDatabase(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Object[] r10;
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.io.File $r1, r9;
        androidx.work.Logger $r2;
        java.lang.Throwable[] r4;
        java.util.Map $r5;
        int i0;
        java.lang.Object $r8;
        java.lang.String $r3, $r11;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.work.impl.WorkDatabasePathHelper: java.io.File getDefaultDatabasePath(android.content.Context)>($r0);

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 23 goto label5;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r3 = <androidx.work.impl.WorkDatabasePathHelper: java.lang.String TAG>;

        r4 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>($r3, "Migrating WorkDatabase to the no-backup directory", r4);

        $r5 = staticinvoke <androidx.work.impl.WorkDatabasePathHelper: java.util.Map migrationPaths(android.content.Context)>($r0);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.io.File) $r8;

        $r8 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r9 = (java.io.File) $r8;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        if r9 == null goto label1;

        $z0 = virtualinvoke r9.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        r10 = newarray (java.lang.Object)[1];

        r10[0] = r9;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Over-writing contents of %s", r10);

        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r11 = <androidx.work.impl.WorkDatabasePathHelper: java.lang.String TAG>;

        r4 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.<androidx.work.Logger: void warning(java.lang.String,java.lang.String,java.lang.Throwable[])>($r11, $r3, r4);

     label2:
        $z0 = virtualinvoke $r1.<java.io.File: boolean renameTo(java.io.File)>(r9);

        if $z0 == 0 goto label3;

        r10 = newarray (java.lang.Object)[2];

        r10[0] = $r1;

        r10[1] = r9;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Migrated %s to %s", r10);

        goto label4;

     label3:
        r10 = newarray (java.lang.Object)[2];

        r10[0] = $r1;

        r10[1] = r9;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Renaming %s to %s failed", r10);

     label4:
        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r11 = <androidx.work.impl.WorkDatabasePathHelper: java.lang.String TAG>;

        r4 = newarray (java.lang.Throwable)[0];

        virtualinvoke $r2.<androidx.work.Logger: void debug(java.lang.String,java.lang.String,java.lang.Throwable[])>($r11, $r3, r4);

        goto label1;

     label5:
        return;
    }

    public static java.util.Map migrationPaths(android.content.Context)
    {
        android.content.Context $r0;
        java.util.HashMap r1;
        java.lang.String[] $r2;
        java.io.File r4, $r5, $r6, r9;
        int $i0, $i1;
        java.lang.StringBuilder r7;
        java.lang.String r3, $r8;

        $r0 := @parameter0: android.content.Context;

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label2;

        $r5 = staticinvoke <androidx.work.impl.WorkDatabasePathHelper: java.io.File getDefaultDatabasePath(android.content.Context)>($r0);

        $r6 = staticinvoke <androidx.work.impl.WorkDatabasePathHelper: java.io.File getDatabasePath(android.content.Context)>($r0);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r2 = <androidx.work.impl.WorkDatabasePathHelper: java.lang.String[] DATABASE_EXTRA_FILES>;

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r3 = $r2[$i1];

        r4 = new java.io.File;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.io.File: void <init>(java.lang.String)>($r8);

        r9 = new java.io.File;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.io.File: java.lang.String getPath()>();

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.io.File: void <init>(java.lang.String)>(r3);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r9);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r1;
    }
}
