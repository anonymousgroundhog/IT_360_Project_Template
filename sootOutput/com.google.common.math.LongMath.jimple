public final class com.google.common.math.LongMath extends java.lang.Object
{
    static final long FLOOR_SQRT_MAX_LONG;
    static final long MAX_POWER_OF_SQRT2_UNSIGNED;
    static final long MAX_SIGNED_POWER_OF_TWO;
    private static final int SIEVE_30;
    static final int[] biggestBinomials;
    static final int[] biggestSimpleBinomials;
    static final long[] factorials;
    static final long[] halfPowersOf10;
    static final byte[] maxLog10ForLeadingZeros;
    private static final long[][] millerRabinBaseSets;
    static final long[] powersOf10;

    static void <clinit>()
    {
        long[][] $r9;
        byte[] $r5;
        long[] $r0, $r1, $r2, $r3, $r4, $r7, $r8;
        int[] $r6;

        <com.google.common.math.LongMath: int SIEVE_30> = -545925251;

        <com.google.common.math.LongMath: long MAX_SIGNED_POWER_OF_TWO> = 4611686018427387904L;

        <com.google.common.math.LongMath: long MAX_POWER_OF_SQRT2_UNSIGNED> = -5402926248376769404L;

        <com.google.common.math.LongMath: long FLOOR_SQRT_MAX_LONG> = 3037000499L;

        $r5 = newarray (byte)[64];

        $r5[0] = 19;

        $r5[1] = 18;

        $r5[2] = 18;

        $r5[3] = 18;

        $r5[4] = 18;

        $r5[5] = 17;

        $r5[6] = 17;

        $r5[7] = 17;

        $r5[8] = 16;

        $r5[9] = 16;

        $r5[10] = 16;

        $r5[11] = 15;

        $r5[12] = 15;

        $r5[13] = 15;

        $r5[14] = 15;

        $r5[15] = 14;

        $r5[16] = 14;

        $r5[17] = 14;

        $r5[18] = 13;

        $r5[19] = 13;

        $r5[20] = 13;

        $r5[21] = 12;

        $r5[22] = 12;

        $r5[23] = 12;

        $r5[24] = 12;

        $r5[25] = 11;

        $r5[26] = 11;

        $r5[27] = 11;

        $r5[28] = 10;

        $r5[29] = 10;

        $r5[30] = 10;

        $r5[31] = 9;

        $r5[32] = 9;

        $r5[33] = 9;

        $r5[34] = 9;

        $r5[35] = 8;

        $r5[36] = 8;

        $r5[37] = 8;

        $r5[38] = 7;

        $r5[39] = 7;

        $r5[40] = 7;

        $r5[41] = 6;

        $r5[42] = 6;

        $r5[43] = 6;

        $r5[44] = 6;

        $r5[45] = 5;

        $r5[46] = 5;

        $r5[47] = 5;

        $r5[48] = 4;

        $r5[49] = 4;

        $r5[50] = 4;

        $r5[51] = 3;

        $r5[52] = 3;

        $r5[53] = 3;

        $r5[54] = 3;

        $r5[55] = 2;

        $r5[56] = 2;

        $r5[57] = 2;

        $r5[58] = 1;

        $r5[59] = 1;

        $r5[60] = 1;

        $r5[61] = 0;

        $r5[62] = 0;

        $r5[63] = 0;

        <com.google.common.math.LongMath: byte[] maxLog10ForLeadingZeros> = $r5;

        $r0 = newarray (long)[19];

        $r0[0] = 1L;

        $r0[1] = 10L;

        $r0[2] = 100L;

        $r0[3] = 1000L;

        $r0[4] = 10000L;

        $r0[5] = 100000L;

        $r0[6] = 1000000L;

        $r0[7] = 10000000L;

        $r0[8] = 100000000L;

        $r0[9] = 1000000000L;

        $r0[10] = 10000000000L;

        $r0[11] = 100000000000L;

        $r0[12] = 1000000000000L;

        $r0[13] = 10000000000000L;

        $r0[14] = 100000000000000L;

        $r0[15] = 1000000000000000L;

        $r0[16] = 10000000000000000L;

        $r0[17] = 100000000000000000L;

        $r0[18] = 1000000000000000000L;

        <com.google.common.math.LongMath: long[] powersOf10> = $r0;

        $r0 = newarray (long)[19];

        $r0[0] = 3L;

        $r0[1] = 31L;

        $r0[2] = 316L;

        $r0[3] = 3162L;

        $r0[4] = 31622L;

        $r0[5] = 316227L;

        $r0[6] = 3162277L;

        $r0[7] = 31622776L;

        $r0[8] = 316227766L;

        $r0[9] = 3162277660L;

        $r0[10] = 31622776601L;

        $r0[11] = 316227766016L;

        $r0[12] = 3162277660168L;

        $r0[13] = 31622776601683L;

        $r0[14] = 316227766016837L;

        $r0[15] = 3162277660168379L;

        $r0[16] = 31622776601683793L;

        $r0[17] = 316227766016837933L;

        $r0[18] = 3162277660168379331L;

        <com.google.common.math.LongMath: long[] halfPowersOf10> = $r0;

        $r0 = newarray (long)[21];

        $r0[0] = 1L;

        $r0[1] = 1L;

        $r0[2] = 2L;

        $r0[3] = 6L;

        $r0[4] = 24L;

        $r0[5] = 120L;

        $r0[6] = 720L;

        $r0[7] = 5040L;

        $r0[8] = 40320L;

        $r0[9] = 362880L;

        $r0[10] = 3628800L;

        $r0[11] = 39916800L;

        $r0[12] = 479001600L;

        $r0[13] = 6227020800L;

        $r0[14] = 87178291200L;

        $r0[15] = 1307674368000L;

        $r0[16] = 20922789888000L;

        $r0[17] = 355687428096000L;

        $r0[18] = 6402373705728000L;

        $r0[19] = 121645100408832000L;

        $r0[20] = 2432902008176640000L;

        <com.google.common.math.LongMath: long[] factorials> = $r0;

        $r6 = newarray (int)[34];

        $r6[0] = 2147483647;

        $r6[1] = 2147483647;

        $r6[2] = 2147483647;

        $r6[3] = 3810779;

        $r6[4] = 121977;

        $r6[5] = 16175;

        $r6[6] = 4337;

        $r6[7] = 1733;

        $r6[8] = 887;

        $r6[9] = 534;

        $r6[10] = 361;

        $r6[11] = 265;

        $r6[12] = 206;

        $r6[13] = 169;

        $r6[14] = 143;

        $r6[15] = 125;

        $r6[16] = 111;

        $r6[17] = 101;

        $r6[18] = 94;

        $r6[19] = 88;

        $r6[20] = 83;

        $r6[21] = 79;

        $r6[22] = 76;

        $r6[23] = 74;

        $r6[24] = 72;

        $r6[25] = 70;

        $r6[26] = 69;

        $r6[27] = 68;

        $r6[28] = 67;

        $r6[29] = 67;

        $r6[30] = 66;

        $r6[31] = 66;

        $r6[32] = 66;

        $r6[33] = 66;

        <com.google.common.math.LongMath: int[] biggestBinomials> = $r6;

        $r6 = newarray (int)[31];

        $r6[0] = 2147483647;

        $r6[1] = 2147483647;

        $r6[2] = 2147483647;

        $r6[3] = 2642246;

        $r6[4] = 86251;

        $r6[5] = 11724;

        $r6[6] = 3218;

        $r6[7] = 1313;

        $r6[8] = 684;

        $r6[9] = 419;

        $r6[10] = 287;

        $r6[11] = 214;

        $r6[12] = 169;

        $r6[13] = 139;

        $r6[14] = 119;

        $r6[15] = 105;

        $r6[16] = 95;

        $r6[17] = 87;

        $r6[18] = 81;

        $r6[19] = 76;

        $r6[20] = 73;

        $r6[21] = 70;

        $r6[22] = 68;

        $r6[23] = 66;

        $r6[24] = 64;

        $r6[25] = 63;

        $r6[26] = 62;

        $r6[27] = 62;

        $r6[28] = 61;

        $r6[29] = 61;

        $r6[30] = 61;

        <com.google.common.math.LongMath: int[] biggestSimpleBinomials> = $r6;

        $r7 = newarray (long)[2];

        $r7[0] = 291830L;

        $r7[1] = 126401071349994536L;

        $r0 = newarray (long)[3];

        $r0[0] = 885594168L;

        $r0[1] = 725270293939359937L;

        $r0[2] = 3569819667048198375L;

        $r1 = newarray (long)[4];

        $r1[0] = 273919523040L;

        $r1[1] = 15L;

        $r1[2] = 7363882082L;

        $r1[3] = 992620450144556L;

        $r2 = newarray (long)[5];

        $r2[0] = 47636622961200L;

        $r2[1] = 2L;

        $r2[2] = 2570940L;

        $r2[3] = 211991001L;

        $r2[4] = 3749873356L;

        $r3 = newarray (long)[6];

        $r3[0] = 7999252175582850L;

        $r3[1] = 2L;

        $r3[2] = 4130806001517L;

        $r3[3] = 149795463772692060L;

        $r3[4] = 186635894390467037L;

        $r3[5] = 3967304179347715805L;

        $r4 = newarray (long)[7];

        $r4[0] = 585226005592931976L;

        $r4[1] = 2L;

        $r4[2] = 123635709730000L;

        $r4[3] = 9233062284813009L;

        $r4[4] = 43835965440333360L;

        $r4[5] = 761179012939631437L;

        $r4[6] = 1263739024124850375L;

        $r8 = newarray (long)[8];

        $r8[0] = 9223372036854775807L;

        $r8[1] = 2L;

        $r8[2] = 325L;

        $r8[3] = 9375L;

        $r8[4] = 28178L;

        $r8[5] = 450775L;

        $r8[6] = 9780504L;

        $r8[7] = 1795265022L;

        $r9 = newarray (long[])[7];

        $r9[0] = $r7;

        $r9[1] = $r0;

        $r9[2] = $r1;

        $r9[3] = $r2;

        $r9[4] = $r3;

        $r9[5] = $r4;

        $r9[6] = $r8;

        <com.google.common.math.LongMath: long[][] millerRabinBaseSets> = $r9;

        return;
    }

    private void <init>()
    {
        com.google.common.math.LongMath r0;

        r0 := @this: com.google.common.math.LongMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long binomial(int, int)
    {
        long l1, l5, l6, l9;
        long[] r0;
        int[] r1;
        int $i0, i2, i3, i4, i7, i8;
        boolean z0;
        java.math.RoundingMode $r2;

        i2 := @parameter0: int;

        $i0 := @parameter1: int;

        i3 = $i0;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i2);

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", $i0);

        if $i0 > i2 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>(z0, "k (%s) > n (%s)", $i0, i2);

        i4 = i2 >> 1;

        if $i0 <= i4 goto label03;

        i3 = i2 - $i0;

     label03:
        lookupswitch(i3)
        {
            case 0: goto label06;
            case 1: goto label05;
            default: goto label04;
        };

     label04:
        r0 = <com.google.common.math.LongMath: long[] factorials>;

        $i0 = lengthof r0;

        if i2 >= $i0 goto label07;

        r0 = <com.google.common.math.LongMath: long[] factorials>;

        l1 = r0[i2];

        r0 = <com.google.common.math.LongMath: long[] factorials>;

        l5 = r0[i3];

        r0 = <com.google.common.math.LongMath: long[] factorials>;

        i2 = i2 - i3;

        l6 = r0[i2];

        l5 = l5 * l6;

        l1 = l1 / l5;

        return l1;

     label05:
        l1 = (long) i2;

        return l1;

     label06:
        return 1L;

     label07:
        r1 = <com.google.common.math.LongMath: int[] biggestBinomials>;

        $i0 = lengthof r1;

        if i3 >= $i0 goto label16;

        r1 = <com.google.common.math.LongMath: int[] biggestBinomials>;

        $i0 = r1[i3];

        if i2 <= $i0 goto label08;

        goto label16;

     label08:
        r1 = <com.google.common.math.LongMath: int[] biggestSimpleBinomials>;

        $i0 = lengthof r1;

        if i3 >= $i0 goto label11;

        r1 = <com.google.common.math.LongMath: int[] biggestSimpleBinomials>;

        $i0 = r1[i3];

        if i2 > $i0 goto label11;

        $i0 = i2 + -1;

        l1 = (long) i2;

        i2 = 2;

     label09:
        if i2 > i3 goto label10;

        l5 = (long) $i0;

        l1 = l1 * l5;

        l5 = (long) i2;

        l1 = l1 / l5;

        $i0 = $i0 + -1;

        i2 = i2 + 1;

        goto label09;

     label10:
        return l1;

     label11:
        l1 = (long) i2;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i0 = staticinvoke <com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>(l1, $r2);

        l1 = (long) i2;

        i7 = $i0;

        i2 = i2 + -1;

        l5 = 1L;

        i4 = 2;

        l6 = 1L;

     label12:
        if i4 > i3 goto label15;

        i8 = i7 + $i0;

        if i8 >= 63 goto label13;

        l9 = (long) i2;

        l1 = l1 * l9;

        l9 = (long) i4;

        l5 = l5 * l9;

        i7 = i7 + $i0;

        i8 = i4;

        goto label14;

     label13:
        i8 = i4;

        l6 = staticinvoke <com.google.common.math.LongMath: long multiplyFraction(long,long,long)>(l6, l1, l5);

        i7 = $i0;

        l1 = (long) i2;

        l5 = (long) i4;

     label14:
        i4 = i8 + 1;

        i2 = i2 + -1;

        goto label12;

     label15:
        l1 = staticinvoke <com.google.common.math.LongMath: long multiplyFraction(long,long,long)>(l6, l1, l5);

        return l1;

     label16:
        return 9223372036854775807L;
    }

    public static long ceilingPowerOfTwo(long)
    {
        byte $b1;
        int $i2;
        long $l0;
        java.lang.StringBuilder $r0, $r2;
        java.lang.ArithmeticException $r3;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l0);

        $b1 = $l0 cmp 4611686018427387904L;

        $i2 = (int) $b1;

        if $i2 > 0 goto label1;

        $l0 = $l0 - 1L;

        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $i2 = neg $i2;

        $l0 = 1L << $i2;

        return $l0;

     label1:
        $r3 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(70);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ceilingPowerOfTwo(");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not representable as a long");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public static long checkedAdd(long, long)
    {
        long $l0, $l1, l2, $l4;
        byte $b3;
        int $i5;
        boolean $z0, $z1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 + $l1;

        $l4 = $l0 ^ $l1;

        $z0 = 1;

        $b3 = $l4 cmp 0L;

        $i5 = (int) $b3;

        if $i5 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l4 = $l0 ^ l2;

        $b3 = $l4 cmp 0L;

        $i5 = (int) $b3;

        if $i5 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>($z0, "checkedAdd", $l0, $l1);

        return l2;
    }

    public static long checkedMultiply(long, long)
    {
        long $l0, $l1, l4, $l6;
        byte $b2;
        int i3, $i5;
        boolean $z0, $z1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        i3 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        l4 = $l0 ^ -1L;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l4);

        i3 = i3 + $i5;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l1);

        i3 = i3 + $i5;

        l4 = $l1 ^ -1L;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l4);

        i3 = i3 + $i5;

        if i3 <= 65 goto label01;

        $l0 = $l0 * $l1;

        return $l0;

     label01:
        if i3 < 64 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>($z0, "checkedMultiply", $l0, $l1);

        $b2 = $l0 cmp 0L;

        i3 = (int) $b2;

        if i3 < 0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        $b2 = $l1 cmp -9223372036854775808L;

        if $b2 == 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        $z0 = $z0 | $z1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>($z0, "checkedMultiply", $l0, $l1);

        l4 = $l0 * $l1;

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label09;

        $l6 = l4 / $l0;

        $b2 = $l6 cmp $l1;

        if $b2 != 0 goto label08;

        goto label09;

     label08:
        $z0 = 0;

        goto label10;

     label09:
        $z0 = 1;

     label10:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>($z0, "checkedMultiply", $l0, $l1);

        return l4;
    }

    public static long checkedPow(long, int)
    {
        long $l0, l4, l5;
        java.lang.AssertionError $r0;
        byte b2;
        int $i1, i3;
        boolean z0, $z1;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i1);

        b2 = $l0 cmp -2L;

        i3 = (int) b2;

        if i3 < 0 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        b2 = $l0 cmp 2L;

        i3 = (int) b2;

        if i3 > 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        z0 = z0 & $z1;

        if z0 == 0 goto label17;

        i3 = (int) $l0;

        lookupswitch(i3)
        {
            case -2: goto label13;
            case -1: goto label12;
            case 0: goto label10;
            case 1: goto label09;
            case 2: goto label06;
            default: goto label05;
        };

     label05:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label06:
        if $i1 >= 63 goto label07;

        z0 = 1;

        goto label08;

     label07:
        z0 = 0;

     label08:
        l4 = (long) $i1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>(z0, "checkedPow", $l0, l4);

        $l0 = 1L << $i1;

        return $l0;

     label09:
        return 1L;

     label10:
        if $i1 != 0 goto label11;

        return 1L;

     label11:
        return 0L;

     label12:
        $i1 = $i1 & 1;

        if $i1 != 0 goto label26;

        return 1L;

     label13:
        if $i1 >= 64 goto label14;

        z0 = 1;

        goto label15;

     label14:
        z0 = 0;

     label15:
        l4 = (long) $i1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>(z0, "checkedPow", $l0, l4);

        i3 = $i1 & 1;

        if i3 != 0 goto label16;

        $l0 = 1L << $i1;

        return $l0;

     label16:
        $l0 = -1L << $i1;

        return $l0;

     label17:
        l4 = 1L;

     label18:
        lookupswitch($i1)
        {
            case 0: goto label21;
            case 1: goto label20;
            default: goto label19;
        };

     label19:
        i3 = $i1 & 1;

        if i3 == 0 goto label22;

        l4 = staticinvoke <com.google.common.math.LongMath: long checkedMultiply(long,long)>(l4, $l0);

        goto label22;

     label20:
        $l0 = staticinvoke <com.google.common.math.LongMath: long checkedMultiply(long,long)>(l4, $l0);

        return $l0;

     label21:
        return l4;

     label22:
        $i1 = $i1 >> 1;

        if $i1 <= 0 goto label25;

        b2 = -3037000499L cmp $l0;

        i3 = (int) b2;

        if i3 > 0 goto label23;

        b2 = $l0 cmp 3037000499L;

        i3 = (int) b2;

        if i3 > 0 goto label23;

        z0 = 1;

        goto label24;

     label23:
        z0 = 0;

     label24:
        l5 = (long) $i1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>(z0, "checkedPow", $l0, l5);

        $l0 = $l0 * $l0;

        goto label18;

     label25:
        goto label18;

     label26:
        return -1L;
    }

    public static long checkedSubtract(long, long)
    {
        long $l0, $l1, l2, $l4;
        byte $b3;
        int $i5;
        boolean $z0, $z1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 - $l1;

        $l4 = $l0 ^ $l1;

        $z0 = 1;

        $b3 = $l4 cmp 0L;

        $i5 = (int) $b3;

        if $i5 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l4 = $l0 ^ l2;

        $b3 = $l4 cmp 0L;

        $i5 = (int) $b3;

        if $i5 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean,java.lang.String,long,long)>($z0, "checkedSubtract", $l0, $l1);

        return l2;
    }

    public static long divide(long, long, java.math.RoundingMode)
    {
        long $l0, $l1, l2, l3;
        java.lang.AssertionError $r3;
        byte $b4;
        int[] $r1;
        int i5, $i6;
        java.math.RoundingMode $r0, $r2;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: java.math.RoundingMode;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        l2 = $l0 / $l1;

        l3 = $l1 * l2;

        l3 = $l0 - l3;

        $b4 = l3 cmp 0L;

        if $b4 != 0 goto label01;

        return l2;

     label01:
        $l0 = $l0 ^ $l1;

        $l0 = $l0 >> 63;

        i5 = (int) $l0;

        $z0 = 1;

        i5 = i5 | 1;

        $r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i6 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i6 = $r1[$i6];

        lookupswitch($i6)
        {
            case 1: goto label16;
            case 2: goto label19;
            case 3: goto label13;
            case 4: goto label12;
            case 5: goto label09;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label03:
        $l0 = staticinvoke <java.lang.Math: long abs(long)>(l3);

        $l1 = staticinvoke <java.lang.Math: long abs(long)>($l1);

        $l1 = $l1 - $l0;

        $l0 = $l0 - $l1;

        $b4 = $l0 cmp 0L;

        if $b4 != 0 goto label06;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        if $r0 == $r2 goto label05;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        if $r0 != $r2 goto label04;

        $l0 = 1L & l2;

        $b4 = $l0 cmp 0L;

        if $b4 == 0 goto label04;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        goto label20;

     label06:
        $b4 = $l0 cmp 0L;

        $i6 = (int) $b4;

        if $i6 <= 0 goto label07;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        goto label20;

     label09:
        if i5 <= 0 goto label10;

        goto label11;

     label10:
        $z0 = 0;

     label11:
        goto label20;

     label12:
        $z0 = 1;

        goto label20;

     label13:
        if i5 >= 0 goto label14;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        goto label20;

     label16:
        $b4 = l3 cmp 0L;

        if $b4 != 0 goto label17;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label19:
        $z0 = 0;

     label20:
        if $z0 == 0 goto label21;

        $l0 = (long) i5;

        $l0 = $l0 + l2;

        return $l0;

     label21:
        return l2;
    }

    public static long factorial(int)
    {
        long[] $r0;
        int $i0, $i1;
        long $l2;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i0);

        $r0 = <com.google.common.math.LongMath: long[] factorials>;

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label1;

        $r0 = <com.google.common.math.LongMath: long[] factorials>;

        $l2 = $r0[$i0];

        return $l2;

     label1:
        return 9223372036854775807L;
    }

    static boolean fitsInInt(long)
    {
        byte $b1;
        int $i2;
        long $l0, $l3;

        $l0 := @parameter0: long;

        $i2 = (int) $l0;

        $l3 = (long) $i2;

        $b1 = $l3 cmp $l0;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static long floorPowerOfTwo(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l0);

        $i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $i1 = 63 - $i1;

        $l0 = 1L << $i1;

        return $l0;
    }

    public static long gcd(long, long)
    {
        byte b2;
        int $i3, $i5, $i6;
        long l0, $l1, l4;

        l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("a", l0);

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("b", $l1);

        b2 = l0 cmp 0L;

        if b2 != 0 goto label1;

        return $l1;

     label1:
        b2 = $l1 cmp 0L;

        if b2 != 0 goto label2;

        return l0;

     label2:
        $i3 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l0);

        l4 = l0 >> $i3;

        $i5 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l1);

        l0 = $l1 >> $i5;

     label3:
        b2 = l4 cmp l0;

        if b2 == 0 goto label4;

        l4 = l4 - l0;

        $l1 = l4 >> 63;

        $l1 = $l1 & l4;

        l4 = l4 - $l1;

        l4 = l4 - $l1;

        l0 = l0 + $l1;

        $i6 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l4);

        l4 = l4 >> $i6;

        goto label3;

     label4:
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i5);

        l0 = l4 << $i3;

        return l0;
    }

    public static boolean isPowerOfTwo(long)
    {
        byte $b1;
        int $i3;
        long $l0, $l2;
        boolean $z0, $z1;

        $l0 := @parameter0: long;

        $z0 = 1;

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l2 = $l0 - 1L;

        $l0 = $l2 & $l0;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z0 & $z1;

        return $z0;
    }

    public static boolean isPrime(long)
    {
        long[][] r1;
        long $l0, l3;
        java.lang.AssertionError $r2;
        long[] r0;
        byte $b1;
        int $i2, $i4, $i5;
        boolean $z0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 2L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label01;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("n", $l0);

        return 0;

     label01:
        $b1 = $l0 cmp 66L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label02;

        $i2 = (int) $l0;

        $i2 = $i2 + -2;

        $l0 = 722865708377213483L >> $i2;

        $l0 = $l0 & 1L;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label12;

        return 1;

     label02:
        l3 = $l0 % 30L;

        $i2 = (int) l3;

        $i2 = 1 << $i2;

        $i2 = $i2 & -545925251;

        if $i2 == 0 goto label03;

        return 0;

     label03:
        l3 = $l0 % 7L;

        $b1 = l3 cmp 0L;

        if $b1 == 0 goto label12;

        l3 = $l0 % 11L;

        $b1 = l3 cmp 0L;

        if $b1 == 0 goto label12;

        l3 = $l0 % 13L;

        $b1 = l3 cmp 0L;

        if $b1 != 0 goto label04;

        return 0;

     label04:
        $b1 = $l0 cmp 289L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label05;

        return 1;

     label05:
        r1 = <com.google.common.math.LongMath: long[][] millerRabinBaseSets>;

        $i2 = lengthof r1;

        $i4 = 0;

     label06:
        if $i4 >= $i2 goto label11;

        r0 = r1[$i4];

        l3 = r0[0];

        $b1 = $l0 cmp l3;

        $i5 = (int) $b1;

        if $i5 > 0 goto label10;

        $i2 = 1;

     label07:
        $i4 = lengthof r0;

        if $i2 >= $i4 goto label09;

        l3 = r0[$i2];

        $z0 = staticinvoke <com.google.common.math.LongMath$MillerRabinTester: boolean test(long,long)>(l3, $l0);

        if $z0 != 0 goto label08;

        return 0;

     label08:
        $i2 = $i2 + 1;

        goto label07;

     label09:
        return 1;

     label10:
        $i4 = $i4 + 1;

        goto label06;

     label11:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label12:
        return 0;
    }

    static int lessThanBranchFree(long, long)
    {
        int $i2;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l0 = $l0 - $l1;

        $l0 = $l0 ^ -1L;

        $l0 = $l0 ^ -1L;

        $l0 = $l0 >>> 63;

        $i2 = (int) $l0;

        return $i2;
    }

    public static int log10(long, java.math.RoundingMode)
    {
        long $l0, l1;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b4;
        int[] $r2;
        int $i2, $i3;
        java.math.RoundingMode $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l0);

        $i2 = staticinvoke <com.google.common.math.LongMath: int log10Floor(long)>($l0);

        $r1 = <com.google.common.math.LongMath: long[] powersOf10>;

        l1 = $r1[$i2];

        $r2 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i3 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i3 = $r2[$i3];

        lookupswitch($i3)
        {
            case 1: goto label4;
            case 2: goto label7;
            case 3: goto label7;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r1 = <com.google.common.math.LongMath: long[] halfPowersOf10>;

        l1 = $r1[$i2];

        $i3 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l1, $l0);

        $i2 = $i3 + $i2;

        return $i2;

     label3:
        $i3 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l1, $l0);

        $i2 = $i3 + $i2;

        return $i2;

     label4:
        $b4 = $l0 cmp l1;

        if $b4 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label7:
        return $i2;
    }

    static int log10Floor(long)
    {
        byte[] r0;
        long[] $r1;
        byte b3;
        int $i2, $i4;
        long $l0, $l1;

        $l0 := @parameter0: long;

        r0 = <com.google.common.math.LongMath: byte[] maxLog10ForLeadingZeros>;

        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        b3 = r0[$i2];

        $r1 = <com.google.common.math.LongMath: long[] powersOf10>;

        $i2 = (int) b3;

        $l1 = $r1[$i2];

        $i2 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>($l0, $l1);

        $i4 = (int) b3;

        $i2 = $i4 - $i2;

        return $i2;
    }

    public static int log2(long, java.math.RoundingMode)
    {
        long $l0, l2;
        java.lang.AssertionError r2;
        int[] r1;
        int i1, $i3;
        java.math.RoundingMode $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l0);

        r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        i1 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        i1 = r1[i1];

        lookupswitch(i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        r2 = new java.lang.AssertionError;

        specialinvoke r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw r2;

     label2:
        i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        l2 = -5402926248376769404L >>> i1;

        i1 = 63 - i1;

        $i3 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l2, $l0);

        i1 = $i3 + i1;

        return i1;

     label3:
        $l0 = $l0 - 1L;

        i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        i1 = 64 - i1;

        return i1;

     label4:
        $z0 = staticinvoke <com.google.common.math.LongMath: boolean isPowerOfTwo(long)>($l0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label5:
        i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        i1 = 63 - i1;

        return i1;
    }

    public static long mean(long, long)
    {
        long $l0, $l1, $l2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 = $l0 & $l1;

        $l0 = $l0 ^ $l1;

        $l0 = $l0 >> 1;

        $l0 = $l2 + $l0;

        return $l0;
    }

    public static int mod(long, int)
    {
        int $i1;
        long $l0, $l2;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l2 = (long) $i1;

        $l0 = staticinvoke <com.google.common.math.LongMath: long mod(long,long)>($l0, $l2);

        $i1 = (int) $l0;

        return $i1;
    }

    public static long mod(long, long)
    {
        byte $b2;
        int $i3;
        long $l0, $l1;
        java.lang.ArithmeticException $r0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

        $l0 = $l0 % $l1;

        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        return $l0;

     label1:
        $l0 = $l0 + $l1;

        return $l0;

     label2:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Modulus must be positive");

        throw $r0;
    }

    static long multiplyFraction(long, long, long)
    {
        byte $b4;
        long $l0, $l1, $l2, $l3;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $l3 := @parameter2: long;

        $b4 = $l2 cmp 1L;

        if $b4 != 0 goto label1;

        $l2 = $l0 / $l3;

        return $l2;

     label1:
        $l1 = staticinvoke <com.google.common.math.LongMath: long gcd(long,long)>($l2, $l3);

        $l2 = $l2 / $l1;

        $l3 = $l3 / $l1;

        $l0 = $l0 / $l3;

        $l2 = $l0 * $l2;

        return $l2;
    }

    public static long pow(long, int)
    {
        byte $b2;
        int $i1, i3;
        long $l0, l4, $l5;
        java.lang.AssertionError $r0;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i1);

        $b2 = -2L cmp $l0;

        i3 = (int) $b2;

        if i3 > 0 goto label11;

        $b2 = $l0 cmp 2L;

        i3 = (int) $b2;

        if i3 > 0 goto label11;

        i3 = (int) $l0;

        lookupswitch(i3)
        {
            case -2: goto label08;
            case -1: goto label06;
            case 0: goto label04;
            case 1: goto label03;
            case 2: goto label02;
            default: goto label01;
        };

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        if $i1 >= 64 goto label18;

        $l0 = 1L << $i1;

        return $l0;

     label03:
        return 1L;

     label04:
        if $i1 != 0 goto label05;

        return 1L;

     label05:
        return 0L;

     label06:
        $i1 = $i1 & 1;

        if $i1 != 0 goto label07;

        return 1L;

     label07:
        return -1L;

     label08:
        if $i1 >= 64 goto label10;

        i3 = $i1 & 1;

        if i3 != 0 goto label09;

        $l0 = 1L << $i1;

        return $l0;

     label09:
        $l0 = 1L << $i1;

        $l0 = neg $l0;

        return $l0;

     label10:
        return 0L;

     label11:
        l4 = 1L;

     label12:
        lookupswitch($i1)
        {
            case 0: goto label15;
            case 1: goto label14;
            default: goto label13;
        };

     label13:
        i3 = $i1 & 1;

        if i3 != 0 goto label16;

        $l5 = 1L;

        goto label17;

     label14:
        $l0 = l4 * $l0;

        return $l0;

     label15:
        return l4;

     label16:
        $l5 = $l0;

     label17:
        l4 = l4 * $l5;

        $l0 = $l0 * $l0;

        $i1 = $i1 >> 1;

        goto label12;

     label18:
        return 0L;
    }

    public static double roundToDouble(long, java.math.RoundingMode)
    {
        long $l0, l1, l5, l6;
        java.lang.AssertionError $r2;
        byte b2;
        int[] r1;
        int i3, $i4;
        java.math.RoundingMode $r0;
        double d0, d1, d2;
        boolean z0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.math.RoundingMode;

        d0 = (double) $l0;

        l1 = (long) d0;

        b2 = l1 cmp 9223372036854775807L;

        if b2 != 0 goto label01;

        i3 = -1;

        goto label02;

     label01:
        i3 = staticinvoke <com.google.common.primitives.Longs: int compare(long,long)>($l0, l1);

     label02:
        r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i4 = r1[$i4];

        lookupswitch($i4)
        {
            case 1: goto label30;
            case 2: goto label26;
            case 3: goto label24;
            case 4: goto label20;
            case 5: goto label18;
            case 6: goto label04;
            case 7: goto label04;
            case 8: goto label04;
            default: goto label03;
        };

     label03:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw $r2;

     label04:
        if i3 < 0 goto label05;

        d1 = d0;

        d0 = staticinvoke <java.lang.Math: double nextUp(double)>(d0);

        d2 = d0;

        d0 = staticinvoke <java.lang.Math: double ceil(double)>(d0);

        l5 = (long) d0;

        goto label06;

     label05:
        d2 = d0;

        l5 = l1;

        d0 = staticinvoke <com.google.common.math.DoubleUtils: double nextDown(double)>(d0);

        d1 = d0;

        d0 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        l1 = (long) d0;

     label06:
        l1 = $l0 - l1;

        l6 = l5 - $l0;

        b2 = l5 cmp 9223372036854775807L;

        if b2 != 0 goto label07;

        l5 = l6 + 1L;

        goto label08;

     label07:
        l5 = l6;

     label08:
        i3 = staticinvoke <com.google.common.primitives.Longs: int compare(long,long)>(l1, l5);

        if i3 >= 0 goto label09;

        return d1;

     label09:
        if i3 <= 0 goto label10;

        return d2;

     label10:
        r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        i3 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        i3 = r1[i3];

        lookupswitch(i3)
        {
            case 6: goto label16;
            case 7: goto label14;
            case 8: goto label12;
            default: goto label11;
        };

     label11:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw $r2;

     label12:
        $l0 = staticinvoke <com.google.common.math.DoubleUtils: long getSignificand(double)>(d1);

        $l0 = $l0 & 1L;

        b2 = $l0 cmp 0L;

        if b2 != 0 goto label13;

        return d1;

     label13:
        return d2;

     label14:
        b2 = $l0 cmp 0L;

        i3 = (int) b2;

        if i3 < 0 goto label15;

        return d2;

     label15:
        return d1;

     label16:
        b2 = $l0 cmp 0L;

        i3 = (int) b2;

        if i3 < 0 goto label17;

        return d1;

     label17:
        return d2;

     label18:
        if i3 > 0 goto label19;

        return d0;

     label19:
        d1 = staticinvoke <java.lang.Math: double nextUp(double)>(d0);

        return d1;

     label20:
        b2 = $l0 cmp 0L;

        $i4 = (int) b2;

        if $i4 < 0 goto label22;

        if i3 > 0 goto label21;

        return d0;

     label21:
        d1 = staticinvoke <java.lang.Math: double nextUp(double)>(d0);

        return d1;

     label22:
        if i3 < 0 goto label23;

        return d0;

     label23:
        d1 = staticinvoke <com.google.common.math.DoubleUtils: double nextDown(double)>(d0);

        return d1;

     label24:
        if i3 < 0 goto label25;

        return d0;

     label25:
        d1 = staticinvoke <com.google.common.math.DoubleUtils: double nextDown(double)>(d0);

        return d1;

     label26:
        b2 = $l0 cmp 0L;

        $i4 = (int) b2;

        if $i4 < 0 goto label28;

        if i3 < 0 goto label27;

        return d0;

     label27:
        d1 = staticinvoke <com.google.common.math.DoubleUtils: double nextDown(double)>(d0);

        return d1;

     label28:
        if i3 > 0 goto label29;

        return d0;

     label29:
        d1 = staticinvoke <java.lang.Math: double nextUp(double)>(d0);

        return d1;

     label30:
        if i3 != 0 goto label31;

        z0 = 1;

        goto label32;

     label31:
        z0 = 0;

     label32:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>(z0);

        return d0;
    }

    public static long saturatedAdd(long, long)
    {
        byte $b3;
        int $i4;
        long $l0, $l1, l2;
        boolean $z0, $z1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 + $l1;

        $l1 = $l0 ^ $l1;

        $z0 = 1;

        $b3 = $l1 cmp 0L;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l0 = $l0 ^ l2;

        $b3 = $l0 cmp 0L;

        $i4 = (int) $b3;

        if $i4 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        if $z0 == 0 goto label5;

        return l2;

     label5:
        $l0 = l2 >>> 63;

        $l0 = $l0 ^ 1L;

        $l0 = $l0 + 9223372036854775807L;

        return $l0;
    }

    public static long saturatedMultiply(long, long)
    {
        long $l0, $l1, l4, l6;
        byte $b2;
        int $i3, $i5;
        boolean $z0, z1, $z2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $i3 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        l4 = $l0 ^ -1L;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l4);

        $i3 = $i3 + $i5;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l1);

        $i3 = $i3 + $i5;

        l4 = $l1 ^ -1L;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l4);

        $i3 = $i3 + $i5;

        if $i3 <= 65 goto label01;

        $l0 = $l0 * $l1;

        return $l0;

     label01:
        l4 = $l0 ^ $l1;

        l4 = l4 >>> 63;

        l4 = l4 + 9223372036854775807L;

        $z0 = 1;

        if $i3 >= 64 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $b2 = $l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label06;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        $z0 = $z0 & $z2;

        z1 = z1 | $z0;

        if z1 == 0 goto label08;

        return l4;

     label08:
        l6 = $l0 * $l1;

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label10;

        $l0 = l6 / $l0;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label09;

        return l6;

     label09:
        return l4;

     label10:
        return l6;
    }

    public static long saturatedPow(long, int)
    {
        long $l0, l4, l5, $l6;
        java.lang.AssertionError $r0;
        byte b2;
        int $i1, i3;
        boolean z0, $z1;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i1);

        b2 = $l0 cmp -2L;

        i3 = (int) b2;

        if i3 < 0 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        b2 = $l0 cmp 2L;

        i3 = (int) b2;

        if i3 > 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        z0 = z0 & $z1;

        if z0 == 0 goto label15;

        i3 = (int) $l0;

        lookupswitch(i3)
        {
            case -2: goto label12;
            case -1: goto label11;
            case 0: goto label09;
            case 1: goto label08;
            case 2: goto label06;
            default: goto label05;
        };

     label05:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label06:
        if $i1 < 63 goto label07;

        return 9223372036854775807L;

     label07:
        $l0 = 1L << $i1;

        return $l0;

     label08:
        return 1L;

     label09:
        if $i1 != 0 goto label10;

        return 1L;

     label10:
        return 0L;

     label11:
        $i1 = $i1 & 1;

        if $i1 != 0 goto label26;

        return 1L;

     label12:
        if $i1 < 64 goto label13;

        $i1 = $i1 & 1;

        $l0 = (long) $i1;

        $l0 = $l0 + 9223372036854775807L;

        return $l0;

     label13:
        i3 = $i1 & 1;

        if i3 != 0 goto label14;

        $l0 = 1L << $i1;

        return $l0;

     label14:
        $l0 = -1L << $i1;

        return $l0;

     label15:
        l4 = 1L;

        l5 = $l0 >>> 63;

        i3 = $i1 & 1;

        $l6 = (long) i3;

        l5 = l5 & $l6;

        l5 = l5 + 9223372036854775807L;

     label16:
        lookupswitch($i1)
        {
            case 0: goto label19;
            case 1: goto label18;
            default: goto label17;
        };

     label17:
        i3 = $i1 & 1;

        if i3 == 0 goto label20;

        l4 = staticinvoke <com.google.common.math.LongMath: long saturatedMultiply(long,long)>(l4, $l0);

        goto label20;

     label18:
        $l0 = staticinvoke <com.google.common.math.LongMath: long saturatedMultiply(long,long)>(l4, $l0);

        return $l0;

     label19:
        return l4;

     label20:
        $i1 = $i1 >> 1;

        if $i1 <= 0 goto label16;

        b2 = -3037000499L cmp $l0;

        i3 = (int) b2;

        if i3 <= 0 goto label21;

        z0 = 1;

        goto label22;

     label21:
        z0 = 0;

     label22:
        b2 = $l0 cmp 3037000499L;

        i3 = (int) b2;

        if i3 <= 0 goto label23;

        $z1 = 1;

        goto label24;

     label23:
        $z1 = 0;

     label24:
        z0 = z0 | $z1;

        if z0 == 0 goto label25;

        return l5;

     label25:
        $l0 = $l0 * $l0;

        goto label16;

     label26:
        return -1L;
    }

    public static long saturatedSubtract(long, long)
    {
        byte $b3;
        int $i4;
        long $l0, $l1, l2;
        boolean $z0, $z1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l0 - $l1;

        $l1 = $l0 ^ $l1;

        $z0 = 1;

        $b3 = $l1 cmp 0L;

        $i4 = (int) $b3;

        if $i4 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l0 = $l0 ^ l2;

        $b3 = $l0 cmp 0L;

        $i4 = (int) $b3;

        if $i4 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        if $z0 == 0 goto label5;

        return l2;

     label5:
        $l0 = l2 >>> 63;

        $l0 = $l0 ^ 1L;

        $l0 = $l0 + 9223372036854775807L;

        return $l0;
    }

    public static long sqrt(long, java.math.RoundingMode)
    {
        long $l0, l1, l3;
        java.lang.AssertionError $r2;
        byte b4;
        int[] r1;
        int i2;
        java.math.RoundingMode $r0;
        boolean $z0;
        double d0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("x", $l0);

        $z0 = staticinvoke <com.google.common.math.LongMath: boolean fitsInInt(long)>($l0);

        if $z0 == 0 goto label01;

        i2 = (int) $l0;

        i2 = staticinvoke <com.google.common.math.IntMath: int sqrt(int,java.math.RoundingMode)>(i2, $r0);

        $l0 = (long) i2;

        return $l0;

     label01:
        d0 = (double) $l0;

        d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        l3 = (long) d0;

        l1 = l3 * l3;

        r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        i2 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        i2 = r1[i2];

        $z0 = 1;

        lookupswitch(i2)
        {
            case 1: goto label10;
            case 2: goto label08;
            case 3: goto label08;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        b4 = $l0 cmp l1;

        i2 = (int) b4;

        if i2 >= 0 goto label04;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        l1 = (long) $z0;

        l3 = l3 - l1;

        l1 = l3 * l3;

        l1 = l1 + l3;

        i2 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l1, $l0);

        $l0 = (long) i2;

        $l0 = $l0 + l3;

        return $l0;

     label06:
        b4 = $l0 cmp l1;

        i2 = (int) b4;

        if i2 <= 0 goto label07;

        $l0 = 1L + l3;

        return $l0;

     label07:
        return l3;

     label08:
        b4 = $l0 cmp l1;

        i2 = (int) b4;

        if i2 >= 0 goto label09;

        $l0 = l3 - 1L;

        return $l0;

     label09:
        return l3;

     label10:
        b4 = l1 cmp $l0;

        if b4 != 0 goto label11;

        goto label12;

     label11:
        $z0 = 0;

     label12:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

        return l3;
    }
}
