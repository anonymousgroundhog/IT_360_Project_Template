class com.google.common.collect.StandardTable$Column extends com.google.common.collect.Maps$ViewCachingAbstractMap
{
    final java.lang.Object columnKey;
    final com.google.common.collect.StandardTable this$0;

    void <init>(com.google.common.collect.StandardTable, java.lang.Object)
    {
        com.google.common.collect.StandardTable$Column r0;
        java.lang.Object r1;
        com.google.common.collect.StandardTable $r2;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        $r2 := @parameter0: com.google.common.collect.StandardTable;

        r1 := @parameter1: java.lang.Object;

        r0.<com.google.common.collect.StandardTable$Column: com.google.common.collect.StandardTable this$0> = $r2;

        specialinvoke r0.<com.google.common.collect.Maps$ViewCachingAbstractMap: void <init>()>();

        r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey> = r1;

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.common.collect.StandardTable $r3;
        com.google.common.collect.StandardTable$Column r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.google.common.collect.StandardTable$Column: com.google.common.collect.StandardTable this$0>;

        $r2 = r0.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey>;

        $z0 = virtualinvoke $r3.<com.google.common.collect.StandardTable: boolean contains(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $z0;
    }

    java.util.Set createEntrySet()
    {
        com.google.common.collect.StandardTable$Column r0;
        com.google.common.collect.StandardTable$Column$EntrySet $r1;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        $r1 = new com.google.common.collect.StandardTable$Column$EntrySet;

        specialinvoke $r1.<com.google.common.collect.StandardTable$Column$EntrySet: void <init>(com.google.common.collect.StandardTable$Column,com.google.common.collect.StandardTable$1)>(r0, null);

        return $r1;
    }

    java.util.Set createKeySet()
    {
        com.google.common.collect.StandardTable$Column r0;
        com.google.common.collect.StandardTable$Column$KeySet $r1;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        $r1 = new com.google.common.collect.StandardTable$Column$KeySet;

        specialinvoke $r1.<com.google.common.collect.StandardTable$Column$KeySet: void <init>(com.google.common.collect.StandardTable$Column)>(r0);

        return $r1;
    }

    java.util.Collection createValues()
    {
        com.google.common.collect.StandardTable$Column r0;
        com.google.common.collect.StandardTable$Column$Values $r1;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        $r1 = new com.google.common.collect.StandardTable$Column$Values;

        specialinvoke $r1.<com.google.common.collect.StandardTable$Column$Values: void <init>(com.google.common.collect.StandardTable$Column)>(r0);

        return $r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.StandardTable $r3;
        com.google.common.collect.StandardTable$Column r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.google.common.collect.StandardTable$Column: com.google.common.collect.StandardTable this$0>;

        $r2 = r0.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.StandardTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable $r4;
        com.google.common.collect.StandardTable$Column r0;
        java.lang.Object r1, r2, $r3;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<com.google.common.collect.StandardTable$Column: com.google.common.collect.StandardTable this$0>;

        $r3 = r0.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey>;

        r1 = virtualinvoke $r4.<com.google.common.collect.StandardTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, $r3, r2);

        return r1;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.common.collect.StandardTable $r3;
        com.google.common.collect.StandardTable$Column r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.google.common.collect.StandardTable$Column: com.google.common.collect.StandardTable this$0>;

        $r2 = r0.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.StandardTable: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    boolean removeFromColumnIf(com.google.common.base.Predicate)
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        com.google.common.collect.StandardTable$Column r0;
        java.util.Set $r4;
        com.google.common.base.Predicate r1;
        com.google.common.collect.StandardTable r2;
        java.util.Map r3;
        java.lang.Object $r6, $r8;
        boolean z0, $z1;

        r0 := @this: com.google.common.collect.StandardTable$Column;

        r1 := @parameter0: com.google.common.base.Predicate;

        z0 = 0;

        r2 = r0.<com.google.common.collect.StandardTable$Column: com.google.common.collect.StandardTable this$0>;

        r3 = r2.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = (java.util.Map) $r6;

        $r6 = r0.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey>;

        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r6 == null goto label1;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>($r8, $r6);

        $z1 = interfaceinvoke r1.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>(r7);

        if $z1 == 0 goto label1;

        $r6 = r0.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        z0 = 1;

        $z1 = interfaceinvoke r3.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return z0;
    }
}
