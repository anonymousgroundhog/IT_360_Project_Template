public final class kotlinx.coroutines.internal.ThreadLocalElement extends java.lang.Object implements kotlinx.coroutines.ThreadContextElement
{
    private final kotlin.coroutines.CoroutineContext$Key key;
    private final java.lang.ThreadLocal threadLocal;
    private final java.lang.Object value;

    public void <init>(java.lang.Object, java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal $r2;
        kotlin.coroutines.CoroutineContext$Key $r4;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.ThreadLocalKey $r3;
        kotlinx.coroutines.internal.ThreadLocalElement r0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.ThreadLocal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.Object value> = $r1;

        r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.ThreadLocal threadLocal> = $r2;

        $r3 = new kotlinx.coroutines.internal.ThreadLocalKey;

        $r2 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.ThreadLocal threadLocal>;

        specialinvoke $r3.<kotlinx.coroutines.internal.ThreadLocalKey: void <init>(java.lang.ThreadLocal)>($r2);

        $r4 = (kotlin.coroutines.CoroutineContext$Key) $r3;

        r0.<kotlinx.coroutines.internal.ThreadLocalElement: kotlin.coroutines.CoroutineContext$Key key> = $r4;

        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        java.lang.Object $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.internal.ThreadLocalElement r0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r1 = staticinvoke <kotlinx.coroutines.ThreadContextElement$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.ThreadContextElement,java.lang.Object,kotlin.jvm.functions.Function2)>(r0, $r1, $r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.CoroutineContext$Element $r3;
        kotlin.coroutines.CoroutineContext$Key $r1, $r2;
        kotlinx.coroutines.internal.ThreadLocalElement r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.ThreadLocalElement: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r0, "null cannot be cast to non-null type E of kotlinx.coroutines.internal.ThreadLocalElement.get");

        $r3 = (kotlin.coroutines.CoroutineContext$Element) r0;

        return $r3;

     label1:
        return null;
    }

    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        kotlin.coroutines.CoroutineContext$Key r1;
        kotlinx.coroutines.internal.ThreadLocalElement r0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        r1 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: kotlin.coroutines.CoroutineContext$Key key>;

        return r1;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.EmptyCoroutineContext $r3;
        kotlin.coroutines.CoroutineContext$Key $r1, $r2;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.internal.ThreadLocalElement r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.internal.ThreadLocalElement: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        $r3 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r3;

        return $r4;

     label1:
        $r4 = (kotlin.coroutines.CoroutineContext) r0;

        return $r4;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.internal.ThreadLocalElement r0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = staticinvoke <kotlinx.coroutines.ThreadContextElement$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext)>(r0, $r1);

        return $r1;
    }

    public void restoreThreadContext(kotlin.coroutines.CoroutineContext, java.lang.Object)
    {
        java.lang.ThreadLocal $r3;
        java.lang.Object $r2;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.internal.ThreadLocalElement r0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.ThreadLocal threadLocal>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.ThreadLocal $r3;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.String $r4;
        kotlinx.coroutines.internal.ThreadLocalElement r0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ThreadLocal(value=");

        $r2 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.Object value>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", threadLocal = ");

        $r3 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.ThreadLocal threadLocal>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)
    {
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3, $r4;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.internal.ThreadLocalElement r0;

        r0 := @this: kotlinx.coroutines.internal.ThreadLocalElement;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.ThreadLocal threadLocal>;

        $r4 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.ThreadLocal threadLocal>;

        $r3 = r0.<kotlinx.coroutines.internal.ThreadLocalElement: java.lang.Object value>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>($r3);

        return $r4;
    }
}
