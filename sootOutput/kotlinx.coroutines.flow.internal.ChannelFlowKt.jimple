public final class kotlinx.coroutines.flow.internal.ChannelFlowKt extends java.lang.Object
{

    public static final kotlinx.coroutines.flow.FlowCollector access$withUndispatchedContextCollector(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $r0 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowKt: kotlinx.coroutines.flow.FlowCollector withUndispatchedContextCollector(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext)>($r0, $r1);

        return $r0;
    }

    public static final kotlinx.coroutines.flow.internal.ChannelFlow asChannelFlow(kotlinx.coroutines.flow.Flow)
    {
        kotlinx.coroutines.flow.Flow $r0;
        kotlinx.coroutines.flow.internal.ChannelFlow $r1;
        boolean $z0;
        kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl $r2;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $z0 = $r0 instanceof kotlinx.coroutines.flow.internal.ChannelFlow;

        if $z0 == 0 goto label1;

        $r1 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        if $r1 != null goto label3;

        $r2 = new kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl;

        specialinvoke $r2.<kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl: void <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, null, 0, null, 14, null);

        $r1 = (kotlinx.coroutines.flow.internal.ChannelFlow) $r2;

     label3:
        return $r1;
    }

    public static final java.lang.Object withContextUndispatched(kotlin.coroutines.CoroutineContext, java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r8;
        kotlin.coroutines.Continuation $r4, $r6;
        kotlinx.coroutines.flow.internal.StackFrameContinuation $r5;
        kotlin.jvm.functions.Function2 $r3;
        kotlin.coroutines.CoroutineContext $r0;
        java.lang.Object $r1, $r2, $r7;

        $r0 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: kotlin.jvm.functions.Function2;

        $r4 := @parameter4: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r2);

     label1:
        $r5 = new kotlinx.coroutines.flow.internal.StackFrameContinuation;

        specialinvoke $r5.<kotlinx.coroutines.flow.internal.StackFrameContinuation: void <init>(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)>($r4, $r0);

        $r6 = (kotlin.coroutines.Continuation) $r5;

        $r7 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r3, 2);

        $r3 = (kotlin.jvm.functions.Function2) $r7;

        $r1 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r1, $r6);

     label2:
        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r2);

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r2 goto label4;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r4);

        return $r1;

     label3:
        $r8 := @caughtexception;

        staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)>($r0, $r2);

        throw $r8;

     label4:
        return $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object withContextUndispatched$default(kotlin.coroutines.CoroutineContext, java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation, int, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r2;
        int $i0;
        java.lang.Object $r0, $r3, $r5;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.coroutines.CoroutineContext $r4;

        $r4 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r0 := @parameter1: java.lang.Object;

        $r5 := @parameter2: java.lang.Object;

        $r1 := @parameter3: kotlin.jvm.functions.Function2;

        $r2 := @parameter4: kotlin.coroutines.Continuation;

        $i0 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        $r5 = staticinvoke <kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)>($r4);

     label1:
        $r0 = staticinvoke <kotlinx.coroutines.flow.internal.ChannelFlowKt: java.lang.Object withContextUndispatched(kotlin.coroutines.CoroutineContext,java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r4, $r0, $r5, $r1, $r2);

        return $r0;
    }

    private static final kotlinx.coroutines.flow.FlowCollector withUndispatchedContextCollector(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.flow.FlowCollector $r0;
        kotlinx.coroutines.flow.internal.UndispatchedContextCollector $r2;
        kotlin.coroutines.CoroutineContext $r1;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $z0 = $r0 instanceof kotlinx.coroutines.flow.internal.SendingCollector;

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = $r0 instanceof kotlinx.coroutines.flow.internal.NopCollector;

     label2:
        if $z0 == 0 goto label3;

        return $r0;

     label3:
        $r2 = new kotlinx.coroutines.flow.internal.UndispatchedContextCollector;

        specialinvoke $r2.<kotlinx.coroutines.flow.internal.UndispatchedContextCollector: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext)>($r0, $r1);

        $r0 = (kotlinx.coroutines.flow.FlowCollector) $r2;

        return $r0;
    }
}
