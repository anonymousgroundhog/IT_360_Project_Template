class com.google.common.collect.CompactLinkedHashSet extends com.google.common.collect.CompactHashSet
{
    private static final int ENDPOINT;
    private transient int firstEntry;
    private transient int lastEntry;
    private transient int[] predecessor;
    private transient int[] successor;

    void <init>()
    {
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        specialinvoke r0.<com.google.common.collect.CompactHashSet: void <init>()>();

        return;
    }

    void <init>(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.CompactHashSet: void <init>(int)>($i0);

        return;
    }

    public static com.google.common.collect.CompactLinkedHashSet create()
    {
        com.google.common.collect.CompactLinkedHashSet $r0;

        $r0 = new com.google.common.collect.CompactLinkedHashSet;

        specialinvoke $r0.<com.google.common.collect.CompactLinkedHashSet: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.CompactLinkedHashSet create(java.util.Collection)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = staticinvoke <com.google.common.collect.CompactLinkedHashSet: com.google.common.collect.CompactLinkedHashSet createWithExpectedSize(int)>($i0);

        virtualinvoke $r1.<com.google.common.collect.CompactLinkedHashSet: boolean addAll(java.util.Collection)>(r0);

        return $r1;
    }

    public static transient com.google.common.collect.CompactLinkedHashSet create(java.lang.Object[])
    {
        int i0;
        java.lang.Object[] r0;
        com.google.common.collect.CompactLinkedHashSet $r1;

        r0 := @parameter0: java.lang.Object[];

        i0 = lengthof r0;

        $r1 = staticinvoke <com.google.common.collect.CompactLinkedHashSet: com.google.common.collect.CompactLinkedHashSet createWithExpectedSize(int)>(i0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r0);

        return $r1;
    }

    public static com.google.common.collect.CompactLinkedHashSet createWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.collect.CompactLinkedHashSet;

        specialinvoke $r0.<com.google.common.collect.CompactLinkedHashSet: void <init>(int)>($i0);

        return $r0;
    }

    private int getPredecessor(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requirePredecessors()>();

        $i0 = $r1[$i0];

        $i0 = $i0 + -1;

        return $i0;
    }

    private int[] requirePredecessors()
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactLinkedHashSet r0;
        int[] $r2;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $r2 = r0.<com.google.common.collect.CompactLinkedHashSet: int[] predecessor>;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r2 = (int[]) $r1;

        return $r2;
    }

    private int[] requireSuccessors()
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactLinkedHashSet r0;
        int[] $r2;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $r2 = r0.<com.google.common.collect.CompactLinkedHashSet: int[] successor>;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r2 = (int[]) $r1;

        return $r2;
    }

    private void setPredecessor(int, int)
    {
        int[] $r1;
        int $i0, $i1;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requirePredecessors()>();

        $i1 = $i1 + 1;

        $r1[$i0] = $i1;

        return;
    }

    private void setSucceeds(int, int)
    {
        int $i0, $i1;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != -2 goto label1;

        r0.<com.google.common.collect.CompactLinkedHashSet: int firstEntry> = $i1;

        goto label2;

     label1:
        specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: void setSuccessor(int,int)>($i0, $i1);

     label2:
        if $i1 != -2 goto label3;

        r0.<com.google.common.collect.CompactLinkedHashSet: int lastEntry> = $i0;

        return;

     label3:
        specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: void setPredecessor(int,int)>($i1, $i0);

        return;
    }

    private void setSuccessor(int, int)
    {
        int[] $r1;
        int $i0, $i1;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requireSuccessors()>();

        $i1 = $i1 + 1;

        $r1[$i0] = $i1;

        return;
    }

    int adjustAfterRemove(int, int)
    {
        int $i0, $i1, $i2;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int size()>();

        if $i0 < $i2 goto label1;

        return $i1;

     label1:
        return $i0;
    }

    int allocArrays()
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 = specialinvoke r0.<com.google.common.collect.CompactHashSet: int allocArrays()>();

        $r1 = newarray (int)[$i0];

        r0.<com.google.common.collect.CompactLinkedHashSet: int[] predecessor> = $r1;

        $r1 = newarray (int)[$i0];

        r0.<com.google.common.collect.CompactLinkedHashSet: int[] successor> = $r1;

        return $i0;
    }

    public void clear()
    {
        int[] $r1;
        int $i0;
        com.google.common.collect.CompactLinkedHashSet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashSet: boolean needsAllocArrays()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.common.collect.CompactLinkedHashSet: int firstEntry> = -2;

        r0.<com.google.common.collect.CompactLinkedHashSet: int lastEntry> = -2;

        $r1 = r0.<com.google.common.collect.CompactLinkedHashSet: int[] predecessor>;

        if $r1 == null goto label2;

        $r1 = r0.<com.google.common.collect.CompactLinkedHashSet: int[] successor>;

        if $r1 == null goto label2;

        $r1 = r0.<com.google.common.collect.CompactLinkedHashSet: int[] predecessor>;

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int size()>();

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r1, 0, $i0, 0);

        $r1 = r0.<com.google.common.collect.CompactLinkedHashSet: int[] successor>;

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int size()>();

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r1, 0, $i0, 0);

     label2:
        specialinvoke r0.<com.google.common.collect.CompactHashSet: void clear()>();

        return;
    }

    java.util.Set convertToHashFloodingResistantImplementation()
    {
        java.util.Set $r1;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashSet: java.util.Set convertToHashFloodingResistantImplementation()>();

        r0.<com.google.common.collect.CompactLinkedHashSet: int[] predecessor> = null;

        r0.<com.google.common.collect.CompactLinkedHashSet: int[] successor> = null;

        return $r1;
    }

    int firstEntryIndex()
    {
        int i0;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        i0 = r0.<com.google.common.collect.CompactLinkedHashSet: int firstEntry>;

        return i0;
    }

    int getSuccessor(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requireSuccessors()>();

        $i0 = $r1[$i0];

        $i0 = $i0 + -1;

        return $i0;
    }

    void init(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.CompactHashSet: void init(int)>($i0);

        r0.<com.google.common.collect.CompactLinkedHashSet: int firstEntry> = -2;

        r0.<com.google.common.collect.CompactLinkedHashSet: int lastEntry> = -2;

        return;
    }

    void insertEntry(int, java.lang.Object, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.Object r1;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke r0.<com.google.common.collect.CompactHashSet: void insertEntry(int,java.lang.Object,int,int)>($i0, r1, $i1, $i2);

        $i1 = r0.<com.google.common.collect.CompactLinkedHashSet: int lastEntry>;

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: void setSucceeds(int,int)>($i1, $i0);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: void setSucceeds(int,int)>($i0, -2);

        return;
    }

    void moveLastEntry(int, int)
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int size()>();

        $i2 = $i2 + -1;

        specialinvoke r0.<com.google.common.collect.CompactHashSet: void moveLastEntry(int,int)>($i0, $i1);

        $i1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int getPredecessor(int)>($i0);

        $i3 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int getSuccessor(int)>($i0);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: void setSucceeds(int,int)>($i1, $i3);

        if $i0 >= $i2 goto label1;

        $i1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int getPredecessor(int)>($i2);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: void setSucceeds(int,int)>($i1, $i0);

        $i1 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int getSuccessor(int)>($i2);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: void setSucceeds(int,int)>($i0, $i1);

     label1:
        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requirePredecessors()>();

        $r1[$i2] = 0;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requireSuccessors()>();

        $r1[$i2] = 0;

        return;
    }

    void resizeEntries(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashSet r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.CompactHashSet: void resizeEntries(int)>($i0);

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requirePredecessors()>();

        $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0);

        r0.<com.google.common.collect.CompactLinkedHashSet: int[] predecessor> = $r1;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashSet: int[] requireSuccessors()>();

        $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0);

        r0.<com.google.common.collect.CompactLinkedHashSet: int[] successor> = $r1;

        return;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] $r1;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        $r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection)>(r0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.google.common.collect.CompactLinkedHashSet r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashSet;

        r1 := @parameter0: java.lang.Object[];

        r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[])>(r0, r1);

        return r1;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.CompactLinkedHashSet: int ENDPOINT> = -2;

        return;
    }
}
