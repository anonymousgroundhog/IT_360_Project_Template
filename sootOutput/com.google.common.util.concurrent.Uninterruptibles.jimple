public final class com.google.common.util.concurrent.Uninterruptibles extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.util.concurrent.Uninterruptibles r0;

        r0 := @this: com.google.common.util.concurrent.Uninterruptibles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ExecutorService $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $z0 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: boolean awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)>($r0, 9223372036854775807L, $r1);

        staticinvoke <com.google.common.base.Verify: void verify(boolean)>($z0);

        return;
    }

    public static boolean awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable r4;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException r3;
        java.lang.Thread $r2;
        java.util.concurrent.ExecutorService $r0;
        boolean z0, $z1;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 = 0;

     label01:
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $z1 = interfaceinvoke $r0.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label07:
        if z0 == 0 goto label13;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $z1;

     label08:
        r3 := @caughtexception;

        z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        r4 := @caughtexception;

        if z0 == 0 goto label12;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label12:
        throw r4;

     label13:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static void awaitUninterruptibly(java.util.concurrent.CountDownLatch)
    {
        java.lang.Throwable r2;
        java.util.concurrent.CountDownLatch $r0;
        java.lang.InterruptedException r3;
        java.lang.Thread $r1;
        boolean z0;

        $r0 := @parameter0: java.util.concurrent.CountDownLatch;

        z0 = 0;

     label1:
        virtualinvoke $r0.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        if z0 == 0 goto label6;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

        return;

     label3:
        r2 := @caughtexception;

        if z0 == 0 goto label4;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label4:
        throw r2;

     label5:
        r3 := @caughtexception;

        z0 = 1;

        goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable r4;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.CountDownLatch $r0;
        java.lang.InterruptedException r3;
        java.lang.Thread $r2;
        boolean z0, $z1;

        $r0 := @parameter0: java.util.concurrent.CountDownLatch;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 = 0;

     label01:
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $z1 = virtualinvoke $r0.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label07:
        if z0 == 0 goto label13;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $z1;

     label08:
        r3 := @caughtexception;

        z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        r4 := @caughtexception;

        if z0 == 0 goto label12;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label12:
        throw r4;

     label13:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static boolean awaitUninterruptibly(java.util.concurrent.locks.Condition, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable r4;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.locks.Condition $r0;
        java.lang.InterruptedException r3;
        java.lang.Thread $r2;
        boolean z0, $z1;

        $r0 := @parameter0: java.util.concurrent.locks.Condition;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 = 0;

     label01:
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $z1 = interfaceinvoke $r0.<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label07:
        if z0 == 0 goto label13;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $z1;

     label08:
        r3 := @caughtexception;

        z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        r4 := @caughtexception;

        if z0 == 0 goto label12;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label12:
        throw r4;

     label13:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static java.lang.Object getUninterruptibly(java.util.concurrent.Future) throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable r3;
        java.util.concurrent.Future r0;
        java.lang.InterruptedException r4;
        java.lang.Thread $r2;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0: java.util.concurrent.Future;

        z0 = 0;

     label1:
        $r1 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        if z0 == 0 goto label6;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $r1;

     label3:
        r3 := @caughtexception;

        if z0 == 0 goto label4;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label4:
        throw r3;

     label5:
        r4 := @caughtexception;

        z0 = 1;

        goto label1;

     label6:
        return $r1;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object getUninterruptibly(java.util.concurrent.Future, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable r5;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.Future r0;
        java.lang.InterruptedException r4;
        java.lang.Thread $r3;
        java.lang.Object $r2;
        boolean z0;

        r0 := @parameter0: java.util.concurrent.Future;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 = 0;

     label01:
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $r2 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label07:
        if z0 == 0 goto label13;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        return $r2;

     label08:
        r4 := @caughtexception;

        z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        r5 := @caughtexception;

        if z0 == 0 goto label12;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label12:
        throw r5;

     label13:
        return $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static void joinUninterruptibly(java.lang.Thread)
    {
        java.lang.Throwable r1;
        java.lang.InterruptedException r2;
        java.lang.Thread $r0;
        boolean z0;

        $r0 := @parameter0: java.lang.Thread;

        z0 = 0;

     label1:
        virtualinvoke $r0.<java.lang.Thread: void join()>();

     label2:
        if z0 == 0 goto label6;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

        return;

     label3:
        r1 := @caughtexception;

        if z0 == 0 goto label4;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

     label4:
        throw r1;

     label5:
        r2 := @caughtexception;

        z0 = 1;

        goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable r3;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException r2;
        java.lang.Thread $r0;
        boolean z0;

        $r0 := @parameter0: java.lang.Thread;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        z0 = 0;

     label01:
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        virtualinvoke $r1.<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>($r0, $l0);

     label07:
        if z0 == 0 goto label13;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

        return;

     label08:
        r2 := @caughtexception;

        z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        r3 := @caughtexception;

        if z0 == 0 goto label12;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

     label12:
        throw r3;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static void putUninterruptibly(java.util.concurrent.BlockingQueue, java.lang.Object)
    {
        java.lang.Throwable r3;
        java.lang.InterruptedException r4;
        java.lang.Thread $r2;
        java.util.concurrent.BlockingQueue r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: java.util.concurrent.BlockingQueue;

        r1 := @parameter1: java.lang.Object;

        z0 = 0;

     label1:
        interfaceinvoke r0.<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>(r1);

     label2:
        if z0 == 0 goto label6;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return;

     label3:
        r3 := @caughtexception;

        if z0 == 0 goto label4;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label4:
        throw r3;

     label5:
        r4 := @caughtexception;

        z0 = 1;

        goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void sleepUninterruptibly(long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable r3;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r0;
        java.lang.InterruptedException r2;
        java.lang.Thread $r1;
        boolean z0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.util.concurrent.TimeUnit;

        z0 = 0;

     label01:
        $l1 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        virtualinvoke $r0.<java.util.concurrent.TimeUnit: void sleep(long)>($l0);

     label07:
        if z0 == 0 goto label13;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

        return;

     label08:
        r2 := @caughtexception;

        z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        r3 := @caughtexception;

        if z0 == 0 goto label12;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label12:
        throw r3;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static java.lang.Object takeUninterruptibly(java.util.concurrent.BlockingQueue)
    {
        java.lang.Throwable r3;
        java.lang.InterruptedException r4;
        java.lang.Thread $r2;
        java.util.concurrent.BlockingQueue r0;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0: java.util.concurrent.BlockingQueue;

        z0 = 0;

     label1:
        $r1 = interfaceinvoke r0.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

     label2:
        if z0 == 0 goto label6;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $r1;

     label3:
        r3 := @caughtexception;

        if z0 == 0 goto label4;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label4:
        throw r3;

     label5:
        r4 := @caughtexception;

        z0 = 1;

        goto label1;

     label6:
        return $r1;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable r4;
        java.util.concurrent.Semaphore $r0;
        long $l1, $l2, $l3;
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException r3;
        java.lang.Thread $r2;
        int $i0;
        boolean z0, $z1;

        $r0 := @parameter0: java.util.concurrent.Semaphore;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r1 := @parameter3: java.util.concurrent.TimeUnit;

        z0 = 0;

     label01:
        $l2 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

     label02:
        $l1 = $l2;

     label03:
        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l2 = $l3 + $l2;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $z1 = virtualinvoke $r0.<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>($i0, $l1, $r1);

     label07:
        if z0 == 0 goto label13;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $z1;

     label08:
        r3 := @caughtexception;

        z0 = 1;

     label09:
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l1 = $l2 - $l1;

        goto label05;

     label11:
        r4 := @caughtexception;

        if z0 == 0 goto label12;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label12:
        throw r4;

     label13:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.Semaphore $r0;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.Semaphore;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,long,java.util.concurrent.TimeUnit)>($r0, 1, $l0, $r1);

        return $z0;
    }

    public static boolean tryLockUninterruptibly(java.util.concurrent.locks.Lock, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable r4;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.locks.Lock $r0;
        java.lang.InterruptedException r3;
        java.lang.Thread $r2;
        boolean z0, $z1;

        $r0 := @parameter0: java.util.concurrent.locks.Lock;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 = 0;

     label01:
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $z1 = interfaceinvoke $r0.<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label07:
        if z0 == 0 goto label13;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $z1;

     label08:
        r3 := @caughtexception;

        z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        r4 := @caughtexception;

        if z0 == 0 goto label12;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label12:
        throw r4;

     label13:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }
}
