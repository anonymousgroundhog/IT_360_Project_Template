public final class kotlinx.coroutines.flow.SubscribedFlowCollector extends java.lang.Object implements kotlinx.coroutines.flow.FlowCollector
{
    private final kotlin.jvm.functions.Function2 action;
    private final kotlinx.coroutines.flow.FlowCollector collector;

    public void <init>(kotlinx.coroutines.flow.FlowCollector, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.SubscribedFlowCollector r0;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.flow.FlowCollector $r1;

        r0 := @this: kotlinx.coroutines.flow.SubscribedFlowCollector;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector> = $r1;

        r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlin.jvm.functions.Function2 action> = $r2;

        return;
    }

    public java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.FlowCollector $r3;
        kotlinx.coroutines.flow.SubscribedFlowCollector r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.flow.SubscribedFlowCollector;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        $r1 = interfaceinvoke $r3.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        return $r1;
    }

    public final java.lang.Object onSubscription(kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r13;
        java.lang.IllegalStateException $r6;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1 $r2, $r3;
        kotlinx.coroutines.flow.SubscribedFlowCollector r0, r9;
        int $i0;
        boolean $z0;
        kotlin.jvm.functions.Function2 $r12;
        kotlin.coroutines.CoroutineContext $r11;
        kotlinx.coroutines.flow.internal.SafeCollector r8;
        kotlin.Unit r14;
        kotlinx.coroutines.flow.FlowCollector $r10;
        java.lang.Object $r4, $r5, r7;

        r0 := @this: kotlinx.coroutines.flow.SubscribedFlowCollector;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1;

        if $z0 == 0 goto label01;

        $r2 = (kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1) $r1;

        $i0 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label>;

        $i0 = $i0 - -2147483648;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label> = $i0;

        goto label02;

     label01:
        $r2 = new kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1;

        specialinvoke $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: void <init>(kotlinx.coroutines.flow.SubscribedFlowCollector,kotlin.coroutines.Continuation)>(r0, $r1);

     label02:
        $r3 = $r2;

        $r4 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label08;
            case 1: goto label05;
            case 2: goto label04;
            default: goto label03;
        };

     label03:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r6;

     label04:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label12;

     label05:
        r7 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$1>;

        r8 = (kotlinx.coroutines.flow.internal.SafeCollector) r7;

        r7 = $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$0>;

        r9 = (kotlinx.coroutines.flow.SubscribedFlowCollector) r7;

     label06:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

     label07:
        goto label11;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        r9 = r0;

        r8 = new kotlinx.coroutines.flow.internal.SafeCollector;

        $r10 = r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        $r11 = interfaceinvoke $r2.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        specialinvoke r8.<kotlinx.coroutines.flow.internal.SafeCollector: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext)>($r10, $r11);

     label09:
        $r12 = r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlin.jvm.functions.Function2 action>;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$0> = r0;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$1> = r8;

        $r2.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label> = 1;

        $r4 = interfaceinvoke $r12.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r8, $r2);

     label10:
        if $r4 != $r5 goto label11;

        return $r5;

     label11:
        virtualinvoke r8.<kotlinx.coroutines.flow.internal.SafeCollector: void releaseIntercepted()>();

        $r10 = r9.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        $z0 = $r10 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector;

        if $z0 == 0 goto label12;

        $r10 = r9.<kotlinx.coroutines.flow.SubscribedFlowCollector: kotlinx.coroutines.flow.FlowCollector collector>;

        r0 = (kotlinx.coroutines.flow.SubscribedFlowCollector) $r10;

        $r3.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$0> = null;

        $r3.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: java.lang.Object L$1> = null;

        $r3.<kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1: int label> = 2;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.SubscribedFlowCollector: java.lang.Object onSubscription(kotlin.coroutines.Continuation)>($r3);

        if $r4 != $r5 goto label12;

        return $r5;

     label12:
        r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r14;

     label13:
        $r13 := @caughtexception;

        virtualinvoke r8.<kotlinx.coroutines.flow.internal.SafeCollector: void releaseIntercepted()>();

        throw $r13;

        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
    }
}
