class androidx.work.impl.utils.SerialExecutor$Task extends java.lang.Object implements java.lang.Runnable
{
    final java.lang.Runnable mRunnable;
    final androidx.work.impl.utils.SerialExecutor mSerialExecutor;

    void <init>(androidx.work.impl.utils.SerialExecutor, java.lang.Runnable)
    {
        androidx.work.impl.utils.SerialExecutor $r1;
        java.lang.Runnable $r2;
        androidx.work.impl.utils.SerialExecutor$Task r0;

        r0 := @this: androidx.work.impl.utils.SerialExecutor$Task;

        $r1 := @parameter0: androidx.work.impl.utils.SerialExecutor;

        $r2 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutor$Task: androidx.work.impl.utils.SerialExecutor mSerialExecutor> = $r1;

        r0.<androidx.work.impl.utils.SerialExecutor$Task: java.lang.Runnable mRunnable> = $r2;

        return;
    }

    public void run()
    {
        java.lang.Throwable $r3;
        androidx.work.impl.utils.SerialExecutor $r1;
        java.lang.Runnable $r2;
        androidx.work.impl.utils.SerialExecutor$Task r0;

        r0 := @this: androidx.work.impl.utils.SerialExecutor$Task;

     label1:
        $r2 = r0.<androidx.work.impl.utils.SerialExecutor$Task: java.lang.Runnable mRunnable>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label2:
        $r1 = r0.<androidx.work.impl.utils.SerialExecutor$Task: androidx.work.impl.utils.SerialExecutor mSerialExecutor>;

        virtualinvoke $r1.<androidx.work.impl.utils.SerialExecutor: void scheduleNext()>();

        return;

     label3:
        $r3 := @caughtexception;

        $r1 = r0.<androidx.work.impl.utils.SerialExecutor$Task: androidx.work.impl.utils.SerialExecutor mSerialExecutor>;

        virtualinvoke $r1.<androidx.work.impl.utils.SerialExecutor: void scheduleNext()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
