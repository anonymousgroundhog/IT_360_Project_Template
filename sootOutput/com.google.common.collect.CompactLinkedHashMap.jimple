class com.google.common.collect.CompactLinkedHashMap extends com.google.common.collect.CompactHashMap
{
    private static final int ENDPOINT;
    private final boolean accessOrder;
    private transient int firstEntry;
    private transient int lastEntry;
    transient long[] links;

    void <init>()
    {
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void <init>(int)>(3);

        return;
    }

    void <init>(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void <init>(int,boolean)>($i0, 0);

        return;
    }

    void <init>(int, boolean)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void <init>(int)>($i0);

        r0.<com.google.common.collect.CompactLinkedHashMap: boolean accessOrder> = $z0;

        return;
    }

    public static com.google.common.collect.CompactLinkedHashMap create()
    {
        com.google.common.collect.CompactLinkedHashMap $r0;

        $r0 = new com.google.common.collect.CompactLinkedHashMap;

        specialinvoke $r0.<com.google.common.collect.CompactLinkedHashMap: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.CompactLinkedHashMap createWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashMap $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.collect.CompactLinkedHashMap;

        specialinvoke $r0.<com.google.common.collect.CompactLinkedHashMap: void <init>(int)>($i0);

        return $r0;
    }

    private int getPredecessor(int)
    {
        int $i0;
        long $l1;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $l1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: long link(int)>($i0);

        $l1 = $l1 >>> 32;

        $i0 = (int) $l1;

        $i0 = $i0 + -1;

        return $i0;
    }

    private long link(int)
    {
        long[] $r1;
        int $i0;
        long $l1;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: long[] requireLinks()>();

        $l1 = $r1[$i0];

        return $l1;
    }

    private long[] requireLinks()
    {
        java.lang.Object $r1;
        com.google.common.collect.CompactLinkedHashMap r0;
        long[] $r2;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $r2 = r0.<com.google.common.collect.CompactLinkedHashMap: long[] links>;

        $r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r2 = (long[]) $r1;

        return $r2;
    }

    private void setLink(int, long)
    {
        long[] $r1;
        int $i0;
        long $l1;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: long[] requireLinks()>();

        $r1[$i0] = $l1;

        return;
    }

    private void setPredecessor(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: long link(int)>($i0);

        $l3 = -4294967296L ^ -1L;

        $l2 = $l2 & $l3;

        $i1 = $i1 + 1;

        $l3 = (long) $i1;

        $l3 = $l3 << 32;

        $l2 = $l2 | $l3;

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setLink(int,long)>($i0, $l2);

        return;
    }

    private void setSucceeds(int, int)
    {
        int $i0, $i1;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != -2 goto label1;

        r0.<com.google.common.collect.CompactLinkedHashMap: int firstEntry> = $i1;

        goto label2;

     label1:
        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSuccessor(int,int)>($i0, $i1);

     label2:
        if $i1 != -2 goto label3;

        r0.<com.google.common.collect.CompactLinkedHashMap: int lastEntry> = $i0;

        return;

     label3:
        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setPredecessor(int,int)>($i1, $i0);

        return;
    }

    private void setSuccessor(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: long link(int)>($i0);

        $l3 = 4294967295L ^ -1L;

        $l2 = $l2 & $l3;

        $i1 = $i1 + 1;

        $l3 = (long) $i1;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setLink(int,long)>($i0, $l2);

        return;
    }

    void accessEntry(int)
    {
        int $i0, $i1, $i2;
        com.google.common.collect.CompactLinkedHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $z0 = r0.<com.google.common.collect.CompactLinkedHashMap: boolean accessOrder>;

        if $z0 == 0 goto label1;

        $i1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int getPredecessor(int)>($i0);

        $i2 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int getSuccessor(int)>($i0);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i1, $i2);

        $i1 = r0.<com.google.common.collect.CompactLinkedHashMap: int lastEntry>;

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i1, $i0);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i0, -2);

        virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void incrementModCount()>();

     label1:
        return;
    }

    int adjustAfterRemove(int, int)
    {
        int $i0, $i1, $i2;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int size()>();

        if $i0 < $i2 goto label1;

        return $i1;

     label1:
        return $i0;
    }

    int allocArrays()
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashMap r0;
        long[] $r1;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 = specialinvoke r0.<com.google.common.collect.CompactHashMap: int allocArrays()>();

        $r1 = newarray (long)[$i0];

        r0.<com.google.common.collect.CompactLinkedHashMap: long[] links> = $r1;

        return $i0;
    }

    public void clear()
    {
        long[] $r1;
        int $i0;
        com.google.common.collect.CompactLinkedHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: boolean needsAllocArrays()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.common.collect.CompactLinkedHashMap: int firstEntry> = -2;

        r0.<com.google.common.collect.CompactLinkedHashMap: int lastEntry> = -2;

        $r1 = r0.<com.google.common.collect.CompactLinkedHashMap: long[] links>;

        if $r1 == null goto label2;

        $r1 = r0.<com.google.common.collect.CompactLinkedHashMap: long[] links>;

        $i0 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int size()>();

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r1, 0, $i0, 0L);

     label2:
        specialinvoke r0.<com.google.common.collect.CompactHashMap: void clear()>();

        return;
    }

    java.util.Map convertToHashFloodingResistantImplementation()
    {
        com.google.common.collect.CompactLinkedHashMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $r1 = specialinvoke r0.<com.google.common.collect.CompactHashMap: java.util.Map convertToHashFloodingResistantImplementation()>();

        r0.<com.google.common.collect.CompactLinkedHashMap: long[] links> = null;

        return $r1;
    }

    java.util.Map createHashFloodingResistantDelegate(int)
    {
        java.util.LinkedHashMap $r1;
        int $i0;
        com.google.common.collect.CompactLinkedHashMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $r1 = new java.util.LinkedHashMap;

        $z0 = r0.<com.google.common.collect.CompactLinkedHashMap: boolean accessOrder>;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float,boolean)>($i0, 1.0F, $z0);

        return $r1;
    }

    int firstEntryIndex()
    {
        int i0;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        i0 = r0.<com.google.common.collect.CompactLinkedHashMap: int firstEntry>;

        return i0;
    }

    int getSuccessor(int)
    {
        int $i0;
        long $l1;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $l1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: long link(int)>($i0);

        $i0 = (int) $l1;

        $i0 = $i0 + -1;

        return $i0;
    }

    void init(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void init(int)>($i0);

        r0.<com.google.common.collect.CompactLinkedHashMap: int firstEntry> = -2;

        r0.<com.google.common.collect.CompactLinkedHashMap: int lastEntry> = -2;

        return;
    }

    void insertEntry(int, java.lang.Object, java.lang.Object, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.Object r1, r2;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void insertEntry(int,java.lang.Object,java.lang.Object,int,int)>($i0, r1, r2, $i1, $i2);

        $i1 = r0.<com.google.common.collect.CompactLinkedHashMap: int lastEntry>;

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i1, $i0);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i0, -2);

        return;
    }

    void moveLastEntry(int, int)
    {
        int $i0, $i1, $i2, $i3;
        com.google.common.collect.CompactLinkedHashMap r0;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int size()>();

        $i2 = $i2 + -1;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void moveLastEntry(int,int)>($i0, $i1);

        $i1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int getPredecessor(int)>($i0);

        $i3 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int getSuccessor(int)>($i0);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i1, $i3);

        if $i0 >= $i2 goto label1;

        $i1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int getPredecessor(int)>($i2);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i1, $i0);

        $i1 = virtualinvoke r0.<com.google.common.collect.CompactLinkedHashMap: int getSuccessor(int)>($i2);

        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setSucceeds(int,int)>($i0, $i1);

     label1:
        specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: void setLink(int,long)>($i2, 0L);

        return;
    }

    void resizeEntries(int)
    {
        int $i0;
        com.google.common.collect.CompactLinkedHashMap r0;
        long[] $r1;

        r0 := @this: com.google.common.collect.CompactLinkedHashMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.CompactHashMap: void resizeEntries(int)>($i0);

        $r1 = specialinvoke r0.<com.google.common.collect.CompactLinkedHashMap: long[] requireLinks()>();

        $r1 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r1, $i0);

        r0.<com.google.common.collect.CompactLinkedHashMap: long[] links> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.CompactLinkedHashMap: int ENDPOINT> = -2;

        return;
    }
}
