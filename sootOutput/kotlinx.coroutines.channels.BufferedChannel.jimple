public class kotlinx.coroutines.channels.BufferedChannel extends java.lang.Object implements kotlinx.coroutines.channels.Channel
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater _closeCause$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater bufferEnd$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater closeHandler$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU;
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU;
    private volatile java.lang.Object _closeCause;
    private volatile long bufferEnd;
    private volatile java.lang.Object bufferEndSegment;
    private final int capacity;
    private volatile java.lang.Object closeHandler;
    private volatile long completedExpandBuffersAndPauseFlag;
    public final kotlin.jvm.functions.Function1 onUndeliveredElement;
    private final kotlin.jvm.functions.Function3 onUndeliveredElementReceiveCancellationConstructor;
    private volatile java.lang.Object receiveSegment;
    private volatile long receivers;
    private volatile java.lang.Object sendSegment;
    private volatile long sendersAndCloseStatus;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", "sendersAndCloseStatus");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", "receivers");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", "bufferEnd");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater bufferEnd$FU> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", "completedExpandBuffersAndPauseFlag");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", class "Ljava/lang/Object;", "sendSegment");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", class "Ljava/lang/Object;", "receiveSegment");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", class "Ljava/lang/Object;", "bufferEndSegment");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", class "Ljava/lang/Object;", "_closeCause");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _closeCause$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/channels/BufferedChannel;", class "Ljava/lang/Object;", "closeHandler");

        <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater closeHandler$FU> = $r1;

        return;
    }

    public void <init>(int, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol $r6;
        kotlin.jvm.functions.Function3 $r5;
        kotlinx.coroutines.channels.ChannelSegment r2, $r3;
        kotlin.jvm.functions.Function1 $r1;
        long $l1;
        java.lang.IllegalArgumentException $r9;
        kotlinx.coroutines.channels.BufferedChannel$onUndeliveredElementReceiveCancellationConstructor$1$1 $r4;
        int $i0;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel: int capacity> = $i0;

        r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement> = $r1;

        $i0 = r0.<kotlinx.coroutines.channels.BufferedChannel: int capacity>;

        if $i0 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label7;

        $i0 = r0.<kotlinx.coroutines.channels.BufferedChannel: int capacity>;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$initialBufferEnd(int)>($i0);

        r0.<kotlinx.coroutines.channels.BufferedChannel: long bufferEnd> = $l1;

        $l1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel: long completedExpandBuffersAndPauseFlag> = $l1;

        r2 = new kotlinx.coroutines.channels.ChannelSegment;

        specialinvoke r2.<kotlinx.coroutines.channels.ChannelSegment: void <init>(long,kotlinx.coroutines.channels.ChannelSegment,kotlinx.coroutines.channels.BufferedChannel,int)>(0L, null, r0, 3);

        r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendSegment> = r2;

        r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveSegment> = r2;

        z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isRendezvousOrUnlimited()>();

        if z0 == 0 goto label3;

        r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.channels.ChannelSegment access$getNULL_SEGMENT$p()>();

        $r3 = r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r2, "null cannot be cast to non-null type kotlinx.coroutines.channels.ChannelSegment<E of kotlinx.coroutines.channels.BufferedChannel>");

        goto label4;

     label3:
        $r3 = r2;

     label4:
        r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object bufferEndSegment> = $r3;

        $r1 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r1 == null goto label5;

        $r4 = new kotlinx.coroutines.channels.BufferedChannel$onUndeliveredElementReceiveCancellationConstructor$1$1;

        specialinvoke $r4.<kotlinx.coroutines.channels.BufferedChannel$onUndeliveredElementReceiveCancellationConstructor$1$1: void <init>(kotlinx.coroutines.channels.BufferedChannel)>(r0);

        $r5 = (kotlin.jvm.functions.Function3) $r4;

        goto label6;

     label5:
        $r5 = null;

     label6:
        r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function3 onUndeliveredElementReceiveCancellationConstructor> = $r5;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_CLOSE_CAUSE$p()>();

        r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object _closeCause> = $r6;

        return;

     label7:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid channel capacity: ");

        $i0 = r0.<kotlinx.coroutines.channels.BufferedChannel: int capacity>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", should be >=0");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r9;
    }

    public void <init>(int, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $i0 := @parameter0: int;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $i1 := @parameter2: int;

        $r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = null;

     label1:
        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void <init>(int,kotlin.jvm.functions.Function1)>($i0, $r2);

        return;
    }

    public static final kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel, long, kotlinx.coroutines.channels.ChannelSegment)
    {
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter1: long;

        $r1 := @parameter2: kotlinx.coroutines.channels.ChannelSegment;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment findSegmentReceive(long,kotlinx.coroutines.channels.ChannelSegment)>($l0, $r1);

        return $r1;
    }

    public static final kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel, long, kotlinx.coroutines.channels.ChannelSegment)
    {
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter1: long;

        $r1 := @parameter2: kotlinx.coroutines.channels.ChannelSegment;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment findSegmentSend(long,kotlinx.coroutines.channels.ChannelSegment)>($l0, $r1);

        return $r1;
    }

    public static final java.lang.Throwable access$getReceiveException(kotlinx.coroutines.channels.BufferedChannel)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getReceiveException()>();

        return $r1;
    }

    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;

        r0 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        return r0;
    }

    public static final java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;

        r0 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        return r0;
    }

    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;

        r0 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        return r0;
    }

    public static final java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;

        r0 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        return r0;
    }

    public static final boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel, long)
    {
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter1: long;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForSend0(long)>($l0);

        return $z0;
    }

    public static final void access$onClosedReceiveCatchingOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.channels.BufferedChannel $r0;
        kotlinx.coroutines.CancellableContinuation $r1;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedReceiveCatchingOnNoWaiterSuspend(kotlinx.coroutines.CancellableContinuation)>($r1);

        return;
    }

    public static final void access$onClosedReceiveOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.channels.BufferedChannel $r0;
        kotlinx.coroutines.CancellableContinuation $r1;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedReceiveOnNoWaiterSuspend(kotlinx.coroutines.CancellableContinuation)>($r1);

        return;
    }

    public static final java.lang.Object access$onClosedSend(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object onClosedSend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        return $r1;
    }

    public static final void access$onClosedSendOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, kotlinx.coroutines.CancellableContinuation)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BufferedChannel $r0;
        kotlinx.coroutines.CancellableContinuation $r2;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlinx.coroutines.CancellableContinuation;

        specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedSendOnNoWaiterSuspend(java.lang.Object,kotlinx.coroutines.CancellableContinuation)>($r1, $r2);

        return;
    }

    public static final void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.Waiter, kotlinx.coroutines.channels.ChannelSegment, int)
    {
        kotlinx.coroutines.Waiter $r1;
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.Waiter;

        $r2 := @parameter2: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter3: int;

        specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: void prepareReceiverForSuspension(kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>($r1, $r2, $i0);

        return;
    }

    public static final void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.Waiter, kotlinx.coroutines.channels.ChannelSegment, int)
    {
        kotlinx.coroutines.Waiter $r1;
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.Waiter;

        $r2 := @parameter2: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter3: int;

        specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: void prepareSenderForSuspension(kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>($r1, $r2, $i0);

        return;
    }

    public static final java.lang.Object access$processResultSelectReceive(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object processResultSelectReceive(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    public static final java.lang.Object access$processResultSelectReceiveCatching(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object processResultSelectReceiveCatching(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    public static final java.lang.Object access$processResultSelectReceiveOrNull(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object processResultSelectReceiveOrNull(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    public static final java.lang.Object access$processResultSelectSend(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object processResultSelectSend(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r1;
    }

    public static final java.lang.Object access$receiveCatchingOnNoWaiterSuspend-GKJJFZk(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.channels.ChannelSegment, int, long, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        $l1 := @parameter3: long;

        $r2 := @parameter4: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveCatchingOnNoWaiterSuspend-GKJJFZk(kotlinx.coroutines.channels.ChannelSegment,int,long,kotlin.coroutines.Continuation)>($r1, $i0, $l1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$receiveOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.channels.ChannelSegment, int, long, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        $l1 := @parameter3: long;

        $r2 := @parameter4: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment,int,long,kotlin.coroutines.Continuation)>($r1, $i0, $l1, $r2);

        return $r3;
    }

    public static final void access$registerSelectForReceive(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.selects.SelectInstance, java.lang.Object)
    {
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;
        kotlinx.coroutines.selects.SelectInstance $r1;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.selects.SelectInstance;

        $r2 := @parameter2: java.lang.Object;

        specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: void registerSelectForReceive(kotlinx.coroutines.selects.SelectInstance,java.lang.Object)>($r1, $r2);

        return;
    }

    public static final java.lang.Object access$sendOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r3;
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        java.lang.Object $r2;
        long $l1;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $l1 := @parameter4: long;

        $r3 := @parameter5: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,kotlin.coroutines.Continuation)>($r1, $i0, $r2, $l1, $r3);

        return $r2;
    }

    public static final java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.channels.ChannelSegment, int, long, java.lang.Object)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        $l1 := @parameter3: long;

        $r2 := @parameter4: java.lang.Object;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object updateCellReceive(kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r1, $i0, $l1, $r2);

        return $r2;
    }

    public static final int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, java.lang.Object, boolean)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        java.lang.Object $r2, $r3;
        long $l1;
        kotlinx.coroutines.channels.BufferedChannel $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $l1 := @parameter4: long;

        $r3 := @parameter5: java.lang.Object;

        $z0 := @parameter6: boolean;

        $i0 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: int updateCellSend(kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>($r1, $i0, $r2, $l1, $r3, $z0);

        return $i0;
    }

    private final boolean bufferOrRendezvousSend(long)
    {
        byte $b2;
        int $i3;
        long $l0, $l1, $l4;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $l1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 < 0 goto label2;

        $l1 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $i3 = r0.<kotlinx.coroutines.channels.BufferedChannel: int capacity>;

        $l4 = (long) $i3;

        $l1 = $l1 + $l4;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private final void cancelSuspendedReceiveRequests(kotlinx.coroutines.channels.ChannelSegment, long)
    {
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l0, l2, $l4;
        java.util.ArrayList r8;
        byte $b5;
        int i1, $i3;
        boolean z0;
        kotlinx.coroutines.internal.Symbol $r4;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r7;
        kotlinx.coroutines.channels.WaiterEB r5;
        kotlinx.coroutines.Waiter r6;
        java.lang.Object $r2, $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $l0 := @parameter1: long;

        $r2 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object constructor-impl$default(java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

     label01:
        if $r1 == null goto label10;

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        i1 = i1 - 1;

     label02:
        if -1 >= i1 goto label09;

        l2 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i3 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) $i3;

        l2 = l2 * $l4;

        $l4 = (long) i1;

        l2 = l2 + $l4;

        $b5 = l2 cmp $l0;

        $i3 = (int) $b5;

        if $i3 < 0 goto label10;

     label03:
        $r3 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>(i1);

        if $r3 == null goto label07;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        if $r3 != $r4 goto label04;

        goto label07;

     label04:
        z0 = $r3 instanceof kotlinx.coroutines.channels.WaiterEB;

        if z0 == 0 goto label05;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>(i1, $r3, $r4);

        if z0 == 0 goto label03;

        r5 = (kotlinx.coroutines.channels.WaiterEB) $r3;

        r6 = r5.<kotlinx.coroutines.channels.WaiterEB: kotlinx.coroutines.Waiter waiter>;

        $r2 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object plus-FjFbRPM(java.lang.Object,java.lang.Object)>($r2, r6);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>(i1, 1);

        goto label08;

     label05:
        z0 = $r3 instanceof kotlinx.coroutines.Waiter;

        if z0 == 0 goto label06;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>(i1, $r3, $r4);

        if z0 == 0 goto label03;

        $r2 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object plus-FjFbRPM(java.lang.Object,java.lang.Object)>($r2, $r3);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>(i1, 1);

        goto label08;

     label06:
        goto label08;

     label07:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>(i1, $r3, $r4);

        if z0 == 0 goto label03;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

     label08:
        i1 = i1 + -1;

        goto label02;

     label09:
        $r7 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) $r7;

        goto label01;

     label10:
        if $r2 == null goto label13;

        z0 = $r2 instanceof java.util.ArrayList;

        if z0 != 0 goto label11;

        r6 = (kotlinx.coroutines.Waiter) $r2;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void resumeReceiverOnClosedChannel(kotlinx.coroutines.Waiter)>(r6);

        goto label13;

     label11:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type java.util.ArrayList<E of kotlinx.coroutines.internal.InlineList>{ kotlin.collections.TypeAliasesKt.ArrayList<E of kotlinx.coroutines.internal.InlineList> }");

        r8 = (java.util.ArrayList) $r2;

        i1 = virtualinvoke r8.<java.util.ArrayList: int size()>();

        i1 = i1 - 1;

     label12:
        if -1 >= i1 goto label13;

        $r2 = virtualinvoke r8.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r6 = (kotlinx.coroutines.Waiter) $r2;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void resumeReceiverOnClosedChannel(kotlinx.coroutines.Waiter)>(r6);

        i1 = i1 + -1;

        goto label12;

     label13:
        return;
    }

    private final kotlinx.coroutines.channels.ChannelSegment closeLinkedList()
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        kotlinx.coroutines.channels.ChannelSegment r5, $r6;
        long $l0, $l1;
        byte $b2;
        int $i3;
        java.lang.Object $r2, r3, $r4;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r3 = $r2;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        $r4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (kotlinx.coroutines.channels.ChannelSegment) $r4;

        $l0 = r5.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $r6 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $l1 = $r6.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label1;

        r3 = r5;

     label1:
        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $l0 = r5.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $r6 = (kotlinx.coroutines.channels.ChannelSegment) r3;

        $l1 = $r6.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

        r3 = r5;

     label2:
        r7 = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) r3;

        r7 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: kotlinx.coroutines.internal.ConcurrentLinkedListNode close(kotlinx.coroutines.internal.ConcurrentLinkedListNode)>(r7);

        r5 = (kotlinx.coroutines.channels.ChannelSegment) r7;

        return r5;
    }

    private final void completeCancel(long)
    {
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment completeClose(long)>($l0);

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void removeUnprocessedElements(kotlinx.coroutines.channels.ChannelSegment)>($r1);

        return;
    }

    private final kotlinx.coroutines.channels.ChannelSegment completeClose(long)
    {
        byte $b1;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l0, $l2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $r1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment closeLinkedList()>();

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isConflatedDropOldest()>();

        if $z0 == 0 goto label1;

        $l2 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long markAllEmptyCellsAsClosed(kotlinx.coroutines.channels.ChannelSegment)>($r1);

        $b1 = $l2 cmp -1L;

        if $b1 == 0 goto label1;

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void dropFirstElementUntilTheSpecifiedCellIsInTheBuffer(long)>($l2);

     label1:
        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void cancelSuspendedReceiveRequests(kotlinx.coroutines.channels.ChannelSegment,long)>($r1, $l0);

        return $r1;
    }

    private final void completeCloseOrCancel()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForSend()>();

        return;
    }

    private final void expandBuffer()
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        kotlinx.coroutines.channels.ChannelSegment r3, $r6;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r4;
        long $l0, l2, $l3;
        byte b4;
        int i1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isRendezvousOrUnlimited()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

     label2:
        r4 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater bufferEnd$FU>;

        $l0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l2 = (long) i1;

        l2 = $l0 / l2;

        $l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        b4 = $l3 cmp $l0;

        i1 = (int) b4;

        if i1 > 0 goto label4;

        $l0 = r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        b4 = $l0 cmp l2;

        i1 = (int) b4;

        if i1 >= 0 goto label3;

        $r5 = virtualinvoke r3.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        if $r5 == null goto label3;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void moveSegmentBufferEndToSpecifiedOrLast(long,kotlinx.coroutines.channels.ChannelSegment)>(l2, r3);

     label3:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void incCompletedExpandBufferAttempts$default(kotlinx.coroutines.channels.BufferedChannel,long,int,java.lang.Object)>(r0, 0L, 1, null);

        return;

     label4:
        $l3 = r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        b4 = $l3 cmp l2;

        if b4 == 0 goto label6;

        $r6 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment findSegmentBufferEnd(long,kotlinx.coroutines.channels.ChannelSegment,long)>(l2, r3, $l0);

        if $r6 != null goto label5;

        goto label2;

     label5:
        r3 = $r6;

        goto label6;

     label6:
        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l2 = (long) i1;

        l2 = $l0 % l2;

        i1 = (int) l2;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean updateCellExpandBuffer(kotlinx.coroutines.channels.ChannelSegment,int,long)>(r3, i1, $l0);

        if $z0 == 0 goto label7;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void incCompletedExpandBufferAttempts$default(kotlinx.coroutines.channels.BufferedChannel,long,int,java.lang.Object)>(r0, 0L, 1, null);

        return;

     label7:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void incCompletedExpandBufferAttempts$default(kotlinx.coroutines.channels.BufferedChannel,long,int,java.lang.Object)>(r0, 0L, 1, null);

        goto label2;
    }

    private final kotlinx.coroutines.channels.ChannelSegment findSegmentBufferEnd(long, kotlinx.coroutines.channels.ChannelSegment, long)
    {
        kotlinx.coroutines.channels.ChannelSegment $r1, $r9;
        long $l0, $l1, l3, l4;
        java.lang.AssertionError $r11;
        kotlinx.coroutines.internal.Segment r5, r8;
        byte $b2;
        kotlin.reflect.KFunction $r3;
        int i5;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r10;
        kotlin.jvm.functions.Function2 r4;
        java.lang.Object $r6, $r7;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $l1 := @parameter2: long;

        r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlin.reflect.KFunction createSegmentFunction()>();

        r4 = (kotlin.jvm.functions.Function2) $r3;

     label01:
        r5 = (kotlinx.coroutines.internal.Segment) $r1;

        $r6 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment,long,kotlin.jvm.functions.Function2)>(r5, $l0, r4);

        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r6);

        $z1 = 0;

        if $z0 != 0 goto label09;

        r5 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r6);

     label02:
        $r7 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (kotlinx.coroutines.internal.Segment) $r7;

        l3 = r8.<kotlinx.coroutines.internal.Segment: long id>;

        l4 = r5.<kotlinx.coroutines.internal.Segment: long id>;

        $b2 = l3 cmp l4;

        i5 = (int) $b2;

        if i5 < 0 goto label03;

        $z0 = 1;

        goto label06;

     label03:
        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label04;

        $z0 = 0;

        goto label06;

     label04:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, r8, r5);

        if $z0 == 0 goto label07;

        $z0 = virtualinvoke r8.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label05;

        virtualinvoke r8.<kotlinx.coroutines.internal.Segment: void remove()>();

     label05:
        $z0 = 1;

     label06:
        if $z0 == 0 goto label01;

        goto label09;

     label07:
        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label08;

        virtualinvoke r5.<kotlinx.coroutines.internal.Segment: void remove()>();

     label08:
        goto label02;

     label09:
        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r6);

        $r9 = null;

        if $z0 == 0 goto label10;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void completeCloseOrCancel()>();

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void moveSegmentBufferEndToSpecifiedOrLast(long,kotlinx.coroutines.channels.ChannelSegment)>($l0, $r1);

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void incCompletedExpandBufferAttempts$default(kotlinx.coroutines.channels.BufferedChannel,long,int,java.lang.Object)>(r0, 0L, 1, null);

        goto label17;

     label10:
        r5 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r6);

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) r5;

        l3 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b2 = l3 cmp $l0;

        i5 = (int) $b2;

        if i5 <= 0 goto label13;

        r10 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater bufferEnd$FU>;

        $l0 = $l1 + 1L;

        l3 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        i5 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l4 = (long) i5;

        l3 = l3 * l4;

        $z1 = virtualinvoke r10.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, l3);

        if $z1 == 0 goto label11;

        $l0 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        i5 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l3 = (long) i5;

        $l0 = $l0 * l3;

        $l0 = $l0 - $l1;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void incCompletedExpandBufferAttempts(long)>($l0);

        goto label12;

     label11:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void incCompletedExpandBufferAttempts$default(kotlinx.coroutines.channels.BufferedChannel,long,int,java.lang.Object)>(r0, 0L, 1, null);

     label12:
        goto label17;

     label13:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label16;

        $l1 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label14;

        $z1 = 1;

     label14:
        if $z1 == 0 goto label15;

        goto label16;

     label15:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label16:
        $r9 = $r1;

     label17:
        return $r9;
    }

    private final kotlinx.coroutines.channels.ChannelSegment findSegmentReceive(long, kotlinx.coroutines.channels.ChannelSegment)
    {
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l0, $l2, l3;
        java.lang.AssertionError $r9;
        kotlinx.coroutines.internal.Segment r5, r8;
        byte $b1;
        kotlin.reflect.KFunction $r3;
        int $i4;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        kotlin.jvm.functions.Function2 r4;
        java.lang.Object $r6, $r7;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlin.reflect.KFunction createSegmentFunction()>();

        r4 = (kotlin.jvm.functions.Function2) $r3;

     label01:
        r5 = (kotlinx.coroutines.internal.Segment) $r1;

        $r6 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment,long,kotlin.jvm.functions.Function2)>(r5, $l0, r4);

        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r6);

        if $z0 != 0 goto label10;

        r5 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r6);

     label02:
        $r7 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (kotlinx.coroutines.internal.Segment) $r7;

        $l2 = r8.<kotlinx.coroutines.internal.Segment: long id>;

        l3 = r5.<kotlinx.coroutines.internal.Segment: long id>;

        $b1 = $l2 cmp l3;

        $i4 = (int) $b1;

        if $i4 < 0 goto label03;

        $z0 = 1;

        goto label06;

     label03:
        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label04;

        $z0 = 0;

        goto label06;

     label04:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, r8, r5);

        if $z0 == 0 goto label08;

        $z0 = virtualinvoke r8.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label05;

        virtualinvoke r8.<kotlinx.coroutines.internal.Segment: void remove()>();

     label05:
        $z0 = 1;

     label06:
        if $z0 == 0 goto label07;

        goto label10;

     label07:
        goto label01;

     label08:
        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label09;

        virtualinvoke r5.<kotlinx.coroutines.internal.Segment: void remove()>();

     label09:
        goto label02;

     label10:
        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r6);

        if $z0 == 0 goto label12;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void completeCloseOrCancel()>();

        $l0 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i4;

        $l0 = $l0 * $l2;

        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b1 = $l0 cmp $l2;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label11;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label11:
        $r1 = null;

        goto label23;

     label12:
        r5 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r6);

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) r5;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isRendezvousOrUnlimited()>();

        if $z0 != 0 goto label17;

        $l2 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l3 = (long) $i4;

        $l2 = $l2 / l3;

        $b1 = $l0 cmp $l2;

        $i4 = (int) $b1;

        if $i4 > 0 goto label17;

        r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

     label13:
        $r6 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (kotlinx.coroutines.internal.Segment) $r6;

        $l2 = r5.<kotlinx.coroutines.internal.Segment: long id>;

        r8 = (kotlinx.coroutines.internal.Segment) $r1;

        l3 = r8.<kotlinx.coroutines.internal.Segment: long id>;

        $b1 = $l2 cmp l3;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label17;

        r8 = (kotlinx.coroutines.internal.Segment) $r1;

        $z0 = virtualinvoke r8.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label17;

        r8 = (kotlinx.coroutines.internal.Segment) $r1;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, r5, r8);

        if $z0 == 0 goto label15;

        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label14;

        virtualinvoke r5.<kotlinx.coroutines.internal.Segment: void remove()>();

     label14:
        goto label17;

     label15:
        r5 = (kotlinx.coroutines.internal.Segment) $r1;

        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label16;

        r5 = (kotlinx.coroutines.internal.Segment) $r1;

        virtualinvoke r5.<kotlinx.coroutines.internal.Segment: void remove()>();

     label16:
        goto label13;

     label17:
        $l2 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b1 = $l2 cmp $l0;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label19;

        $l0 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i4;

        $l0 = $l0 * $l2;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void updateReceiversCounterIfLower(long)>($l0);

        $l0 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i4;

        $l0 = $l0 * $l2;

        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b1 = $l0 cmp $l2;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label18;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label18:
        $r1 = null;

        goto label23;

     label19:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label23;

        $l2 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b1 = $l2 cmp $l0;

        if $b1 != 0 goto label20;

        $z0 = 1;

        goto label21;

     label20:
        $z0 = 0;

     label21:
        if $z0 == 0 goto label22;

        goto label23;

     label22:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label23:
        return $r1;
    }

    private final kotlinx.coroutines.channels.ChannelSegment findSegmentSend(long, kotlinx.coroutines.channels.ChannelSegment)
    {
        kotlinx.coroutines.channels.ChannelSegment $r1, r9;
        long $l0, $l2, l3;
        java.lang.AssertionError $r10;
        kotlinx.coroutines.internal.Segment r5, r8;
        byte $b1;
        kotlin.reflect.KFunction $r3;
        int $i4;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        kotlin.jvm.functions.Function2 r4;
        java.lang.Object $r6, $r7;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlin.reflect.KFunction createSegmentFunction()>();

        r4 = (kotlin.jvm.functions.Function2) $r3;

     label01:
        r5 = (kotlinx.coroutines.internal.Segment) $r1;

        $r6 = staticinvoke <kotlinx.coroutines.internal.ConcurrentLinkedListKt: java.lang.Object findSegmentInternal(kotlinx.coroutines.internal.Segment,long,kotlin.jvm.functions.Function2)>(r5, $l0, r4);

        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r6);

        if $z0 != 0 goto label10;

        r5 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r6);

     label02:
        $r7 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (kotlinx.coroutines.internal.Segment) $r7;

        $l2 = r8.<kotlinx.coroutines.internal.Segment: long id>;

        l3 = r5.<kotlinx.coroutines.internal.Segment: long id>;

        $b1 = $l2 cmp l3;

        $i4 = (int) $b1;

        if $i4 < 0 goto label03;

        $z0 = 1;

        goto label06;

     label03:
        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label04;

        $z0 = 0;

        goto label06;

     label04:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, r8, r5);

        if $z0 == 0 goto label08;

        $z0 = virtualinvoke r8.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label05;

        virtualinvoke r8.<kotlinx.coroutines.internal.Segment: void remove()>();

     label05:
        $z0 = 1;

     label06:
        if $z0 == 0 goto label07;

        goto label10;

     label07:
        goto label01;

     label08:
        $z0 = virtualinvoke r5.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label09;

        virtualinvoke r5.<kotlinx.coroutines.internal.Segment: void remove()>();

     label09:
        goto label02;

     label10:
        $z0 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: boolean isClosed-impl(java.lang.Object)>($r6);

        r9 = null;

        if $z0 == 0 goto label12;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void completeCloseOrCancel()>();

        $l0 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i4;

        $l0 = $l0 * $l2;

        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b1 = $l0 cmp $l2;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label11;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label11:
        goto label19;

     label12:
        r5 = staticinvoke <kotlinx.coroutines.internal.SegmentOrClosed: kotlinx.coroutines.internal.Segment getSegment-impl(java.lang.Object)>($r6);

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) r5;

        $l2 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b1 = $l2 cmp $l0;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label14;

        $l0 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i4;

        $l0 = $l0 * $l2;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void updateSendersCounterIfLower(long)>($l0);

        $l0 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i4;

        $l0 = $l0 * $l2;

        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b1 = $l0 cmp $l2;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label13;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label13:
        goto label19;

     label14:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label18;

        $l2 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b1 = $l2 cmp $l0;

        if $b1 != 0 goto label15;

        $z0 = 1;

        goto label16;

     label15:
        $z0 = 0;

     label16:
        if $z0 == 0 goto label17;

        goto label18;

     label17:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label18:
        r9 = $r1;

     label19:
        return r9;
    }

    private final java.lang.Object getAndUpdate$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4, $r5;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, $r4, $r5);

        if $z0 == 0 goto label1;

        return $r4;
    }

    private final long getBufferEndCounter()
    {
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater bufferEnd$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        return $l0;
    }

    public static void getOnReceive$annotations()
    {
        return;
    }

    public static void getOnReceiveCatching$annotations()
    {
        return;
    }

    public static void getOnReceiveOrNull$annotations()
    {
        return;
    }

    public static void getOnSend$annotations()
    {
        return;
    }

    private static void getOnUndeliveredElementReceiveCancellationConstructor$annotations()
    {
        return;
    }

    private final java.lang.Throwable getReceiveException()
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.channels.ClosedReceiveChannelException $r2;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        if $r1 != null goto label1;

        $r2 = new kotlinx.coroutines.channels.ClosedReceiveChannelException;

        specialinvoke $r2.<kotlinx.coroutines.channels.ClosedReceiveChannelException: void <init>(java.lang.String)>("Channel was closed");

        $r1 = (java.lang.Throwable) $r2;

     label1:
        return $r1;
    }

    private final void incCompletedExpandBufferAttempts(long)
    {
        byte $b1;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, $l0);

        $l0 = $l0 & 4611686018427387904L;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label6;

     label3:
        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l0 = $l0 & 4611686018427387904L;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 != 0 goto label3;

     label6:
        return;
    }

    static void incCompletedExpandBufferAttempts$default(kotlinx.coroutines.channels.BufferedChannel, long, int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        int $i1;
        java.lang.Object $r0;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel $r1;

        $r1 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        if $r0 != null goto label2;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $l0 = 1L;

     label1:
        specialinvoke $r1.<kotlinx.coroutines.channels.BufferedChannel: void incCompletedExpandBufferAttempts(long)>($l0);

        return;

     label2:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: incCompletedExpandBufferAttempts");

        throw $r2;
    }

    private final void invokeCloseHandler()
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.Throwable $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        kotlin.jvm.functions.Function1 r5;
        java.lang.Object $r2, $r4;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater closeHandler$FU>;

     label1:
        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r2 != null goto label2;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getCLOSE_HANDLER_CLOSED$p()>();

        goto label3;

     label2:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getCLOSE_HANDLER_INVOKED$p()>();

     label3:
        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r0, $r2, $r3);

        if $z0 == 0 goto label1;

        if $r2 != null goto label4;

        return;

     label4:
        $r4 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r2, 1);

        r5 = (kotlin.jvm.functions.Function1) $r4;

        r5 = (kotlin.jvm.functions.Function1) $r2;

        $r6 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        interfaceinvoke r5.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        return;
    }

    private final boolean isCellNonEmpty(kotlinx.coroutines.channels.ChannelSegment, int, long)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1, $l2;
        byte $b3;
        int $i0;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

     label01:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        if $r2 == null goto label10;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        if $r2 != $r3 goto label02;

        goto label10;

     label02:
        $r3 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        if $r2 != $r3 goto label03;

        return 1;

     label03:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        if $r2 != $r3 goto label04;

        return 0;

     label04:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r2 != $r3 goto label05;

        return 0;

     label05:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        if $r2 != $r3 goto label06;

        return 0;

     label06:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        if $r2 != $r3 goto label07;

        return 0;

     label07:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        if $r2 != $r3 goto label08;

        return 1;

     label08:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_RCV$p()>();

        if $r2 != $r3 goto label09;

        return 0;

     label09:
        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label11;

        return 1;

     label10:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r2, $r3);

        if $z0 == 0 goto label01;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

     label11:
        return 0;
    }

    private final boolean isClosed(long, boolean)
    {
        java.lang.IllegalStateException $r3;
        long $l0, $l1;
        int $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        $l1 = $l0 >> 60;

        $i2 = (int) $l1;

        lookupswitch($i2)
        {
            case 0: goto label4;
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected close status: ");

        $l0 = $l0 >> 60;

        $i2 = (int) $l0;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        $l0 = $l0 & 1152921504606846975L;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void completeCancel(long)>($l0);

        return 1;

     label3:
        $l0 = $l0 & 1152921504606846975L;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment completeClose(long)>($l0);

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean hasElements$kotlinx_coroutines_core()>();

        if $z0 != 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        return 1;
    }

    public static void isClosedForReceive$annotations()
    {
        return;
    }

    private final boolean isClosedForReceive0(long)
    {
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosed(long,boolean)>($l0, 1);

        return $z0;
    }

    public static void isClosedForSend$annotations()
    {
        return;
    }

    private final boolean isClosedForSend0(long)
    {
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosed(long,boolean)>($l0, 0);

        return $z0;
    }

    public static void isEmpty$annotations()
    {
        return;
    }

    private final boolean isRendezvousOrUnlimited()
    {
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;
        byte $b1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicLongFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.lang.Long $r4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final long markAllEmptyCellsAsClosed(kotlinx.coroutines.channels.ChannelSegment)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r4;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long l2, $l4;
        byte $b0;
        int i1, $i3;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

     label1:
        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        i1 = i1 + -1;

     label2:
        if -1 >= i1 goto label8;

        l2 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i3 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) $i3;

        l2 = l2 * $l4;

        $l4 = (long) i1;

        l2 = l2 + $l4;

        $l4 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b0 = l2 cmp $l4;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label3;

        return -1L;

     label3:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>(i1);

        if $r2 == null goto label6;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        if $r2 != $r3 goto label4;

        goto label6;

     label4:
        $r3 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        if $r2 != $r3 goto label5;

        return l2;

     label5:
        goto label7;

     label6:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>(i1, $r2, $r3);

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

     label7:
        i1 = i1 + -1;

        goto label2;

     label8:
        $r4 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) $r4;

        if $r1 != null goto label9;

        return -1L;

     label9:
        goto label1;
    }

    private final void markCancellationStarted()
    {
        int $i2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1;
        long $l0, $l1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

     label1:
        $l0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = $l0 >> 60;

        $i2 = (int) $l1;

        if $i2 != 0 goto label2;

        $l1 = $l0 & 1152921504606846975L;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructSendersAndCloseStatus(long,int)>($l1, 1);

        $z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

     label2:
        return;
    }

    private final void markCancelled()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1;
        long $l0, $l1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

     label1:
        $l0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = $l0 & 1152921504606846975L;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructSendersAndCloseStatus(long,int)>($l1, 3);

        $z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        return;
    }

    private final void markClosed()
    {
        int $i2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1;
        long $l0, $l1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

     label1:
        $l0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = $l0 >> 60;

        $i2 = (int) $l1;

        lookupswitch($i2)
        {
            case 0: goto label4;
            case 1: goto label3;
            default: goto label2;
        };

     label2:
        return;

     label3:
        $l1 = 1152921504606846975L & $l0;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructSendersAndCloseStatus(long,int)>($l1, 3);

        goto label5;

     label4:
        $l1 = 1152921504606846975L & $l0;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructSendersAndCloseStatus(long,int)>($l1, 2);

     label5:
        $z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        return;
    }

    private final void moveSegmentBufferEndToSpecifiedOrLast(long, kotlinx.coroutines.channels.ChannelSegment)
    {
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r4;
        kotlinx.coroutines.channels.ChannelSegment $r1, r3;
        long $l0, l2;
        kotlinx.coroutines.internal.Segment r6, $r7;
        byte $b1;
        int $i3;
        java.lang.Object $r5;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

     label01:
        l2 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b1 = l2 cmp $l0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label03;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        if r3 != null goto label02;

        goto label03;

     label02:
        $r1 = r3;

        goto label01;

     label03:
        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean isRemoved()>();

        if $z0 == 0 goto label05;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        if r3 != null goto label04;

        goto label05;

     label04:
        $r1 = r3;

        goto label03;

     label05:
        r4 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

     label06:
        $r5 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (kotlinx.coroutines.internal.Segment) $r5;

        $l0 = r6.<kotlinx.coroutines.internal.Segment: long id>;

        $r7 = (kotlinx.coroutines.internal.Segment) $r1;

        l2 = $r7.<kotlinx.coroutines.internal.Segment: long id>;

        $z0 = 1;

        $b1 = $l0 cmp l2;

        $i3 = (int) $b1;

        if $i3 < 0 goto label07;

        goto label09;

     label07:
        $r7 = (kotlinx.coroutines.internal.Segment) $r1;

        $z1 = virtualinvoke $r7.<kotlinx.coroutines.internal.Segment: boolean tryIncPointers$kotlinx_coroutines_core()>();

        if $z1 != 0 goto label08;

        $z0 = 0;

        goto label09;

     label08:
        $r7 = (kotlinx.coroutines.internal.Segment) $r1;

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r4, r0, r6, $r7);

        if $z1 == 0 goto label10;

        $z1 = virtualinvoke r6.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z1 == 0 goto label09;

        virtualinvoke r6.<kotlinx.coroutines.internal.Segment: void remove()>();

     label09:
        if $z0 == 0 goto label03;

        return;

     label10:
        r6 = (kotlinx.coroutines.internal.Segment) $r1;

        $z0 = virtualinvoke r6.<kotlinx.coroutines.internal.Segment: boolean decPointers$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label11;

        r6 = (kotlinx.coroutines.internal.Segment) $r1;

        virtualinvoke r6.<kotlinx.coroutines.internal.Segment: void remove()>();

     label11:
        goto label06;
    }

    private final void onClosedReceiveCatchingOnNoWaiterSuspend(kotlinx.coroutines.CancellableContinuation)
    {
        java.lang.Throwable $r5;
        kotlin.coroutines.Continuation $r2;
        kotlin.Result$Companion $r3;
        kotlinx.coroutines.channels.ChannelResult $r7;
        kotlinx.coroutines.channels.ChannelResult$Companion $r4;
        kotlinx.coroutines.CancellableContinuation $r1;
        java.lang.Object $r6;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r2 = (kotlin.coroutines.Continuation) $r1;

        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        $r6 = virtualinvoke $r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r5);

        $r7 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r6);

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r7);

        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r6);

        return;
    }

    private final void onClosedReceiveOnNoWaiterSuspend(kotlinx.coroutines.CancellableContinuation)
    {
        java.lang.Throwable $r4;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.CancellableContinuation $r1;
        kotlin.Result$Companion $r3;
        java.lang.Object $r5;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r2 = (kotlin.coroutines.Continuation) $r1;

        $r3 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r4 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getReceiveException()>();

        $r5 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r4);

        $r5 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r5);

        interfaceinvoke $r2.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r5);

        return;
    }

    private final void onClosedSelectOnReceive(kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.internal.Symbol $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.selects.SelectInstance $r1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r2);

        return;
    }

    private final void onClosedSelectOnSend(java.lang.Object, kotlinx.coroutines.selects.SelectInstance)
    {
        kotlinx.coroutines.internal.Symbol $r5;
        kotlinx.coroutines.selects.SelectInstance $r2;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function1 $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlin.coroutines.CoroutineContext $r4;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.coroutines.selects.SelectInstance;

        $r3 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: kotlin.coroutines.CoroutineContext getContext()>();

        staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: void callUndeliveredElement(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r3, $r1, $r4);

     label1:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        interfaceinvoke $r2.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r5);

        return;
    }

    private final java.lang.Object onClosedSend(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r8, $r9;
        kotlin.coroutines.Continuation $r2, $r4;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r11;
        kotlin.Result$Companion $r10;
        kotlinx.coroutines.internal.UndeliveredElementException $r7;
        kotlin.jvm.functions.Function1 r6;
        kotlinx.coroutines.CancellableContinuationImpl r3;
        kotlin.Unit r13;
        kotlinx.coroutines.CancellableContinuation r5;
        java.lang.Object $r1, $r12;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r3 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        specialinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r4, 1);

        virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r5 = (kotlinx.coroutines.CancellableContinuation) r3;

        r6 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if r6 == null goto label4;

        $r7 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException$default(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException,int,java.lang.Object)>(r6, $r1, null, 2, null);

        if $r7 == null goto label4;

        $r8 = (java.lang.Throwable) $r7;

        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

        staticinvoke <kotlin.ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)>($r8, $r9);

        $r4 = (kotlin.coroutines.Continuation) r5;

        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label2;

        $z0 = $r4 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r8 = (java.lang.Throwable) $r7;

        $r11 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r4;

        $r8 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r8, $r11);

        goto label3;

     label2:
        $r8 = (java.lang.Throwable) $r7;

     label3:
        $r1 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r8);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        goto label7;

     label4:
        $r4 = (kotlin.coroutines.Continuation) r5;

        $r8 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label6;

        $z0 = $r4 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label5;

        goto label6;

     label5:
        $r11 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r4;

        $r8 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r8, $r11);

        goto label6;

     label6:
        $r1 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r8);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

     label7:
        $r1 = virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r12 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r12 goto label8;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label8:
        $r12 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r12 goto label9;

        return $r1;

     label9:
        r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r13;
    }

    private final void onClosedSendOnNoWaiterSuspend(java.lang.Object, kotlinx.coroutines.CancellableContinuation)
    {
        java.lang.Throwable $r6, r7;
        kotlin.coroutines.Continuation $r5, $r8;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r9;
        kotlin.Result$Companion $r10;
        kotlin.jvm.functions.Function1 $r3;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.CancellableContinuation $r2;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $r3 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r2.<kotlinx.coroutines.CancellableContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: void callUndeliveredElement(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r3, $r1, $r4);

     label1:
        $r5 = (kotlin.coroutines.Continuation) $r2;

        $r6 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

        r7 = $r6;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label3;

        $r8 = (kotlin.coroutines.Continuation) $r2;

        $z0 = $r8 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r8 = (kotlin.coroutines.Continuation) $r2;

        $r9 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r8;

        r7 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r6, $r9);

     label3:
        $r10 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r1 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>(r7);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r1);

        interfaceinvoke $r5.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        return;
    }

    private final void prepareReceiverForSuspension(kotlinx.coroutines.Waiter, kotlinx.coroutines.channels.ChannelSegment, int)
    {
        kotlinx.coroutines.Waiter $r1;
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.internal.Segment $r3;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.Waiter;

        $r2 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onReceiveEnqueued()>();

        $r3 = (kotlinx.coroutines.internal.Segment) $r2;

        interfaceinvoke $r1.<kotlinx.coroutines.Waiter: void invokeOnCancellation(kotlinx.coroutines.internal.Segment,int)>($r3, $i0);

        return;
    }

    private final void prepareSenderForSuspension(kotlinx.coroutines.Waiter, kotlinx.coroutines.channels.ChannelSegment, int)
    {
        kotlinx.coroutines.Waiter $r1;
        int $i0, $i1;
        kotlinx.coroutines.channels.ChannelSegment $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.internal.Segment $r3;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.Waiter;

        $r2 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        $r3 = (kotlinx.coroutines.internal.Segment) $r2;

        $i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $i0 = $i1 + $i0;

        interfaceinvoke $r1.<kotlinx.coroutines.Waiter: void invokeOnCancellation(kotlinx.coroutines.internal.Segment,int)>($r3, $i0);

        return;
    }

    private final java.lang.Object processResultSelectReceive(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.Throwable $r4;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r2 == $r3 goto label1;

        return $r2;

     label1:
        $r4 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getReceiveException()>();

        throw $r4;
    }

    private final java.lang.Object processResultSelectReceiveCatching(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.Throwable $r5;
        kotlinx.coroutines.channels.ChannelResult $r6;
        kotlinx.coroutines.channels.ChannelResult$Companion $r4;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r2 != $r3 goto label1;

        $r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r5 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        $r1 = virtualinvoke $r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r5);

        goto label2;

     label1:
        $r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r1 = virtualinvoke $r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r2);

     label2:
        $r6 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r1);

        return $r6;
    }

    private final java.lang.Object processResultSelectReceiveOrNull(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.Throwable $r4;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r2 != $r3 goto label2;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        if $r4 != null goto label1;

        return null;

     label1:
        $r4 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getReceiveException()>();

        throw $r4;

     label2:
        return $r2;
    }

    private final java.lang.Object processResultSelectSend(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.lang.Throwable $r4;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r2 == $r3 goto label1;

        return r0;

     label1:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

        throw $r4;
    }

    static java.lang.Object receive$suspendImpl(kotlinx.coroutines.channels.BufferedChannel, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r9;
        java.lang.IllegalStateException $r10;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.channels.ChannelSegment r4, $r6;
        long $l0, l2, l3;
        byte $b4;
        int i1;
        java.lang.String r8;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r4 = (kotlinx.coroutines.channels.ChannelSegment) $r3;

     label1:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 != 0 goto label8;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>($r0);

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l2 = (long) i1;

        l2 = $l0 / l2;

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l3 = (long) i1;

        l3 = $l0 % l3;

        i1 = (int) l3;

        l3 = r4.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = l3 cmp l2;

        if $b4 == 0 goto label3;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>($r0, l2, r4);

        if $r6 != null goto label2;

        goto label1;

     label2:
        r4 = $r6;

        goto label3;

     label3:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r0, r4, i1, $l0, null);

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r3 == $r7 goto label7;

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r3 != $r7 goto label5;

        l2 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b4 = $l0 cmp l2;

        i1 = (int) $b4;

        if i1 >= 0 goto label4;

        virtualinvoke r4.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label4:
        goto label1;

     label5:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r3 != $r7 goto label6;

        $r3 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment,int,long,kotlin.coroutines.Continuation)>(r4, i1, $l0, $r1);

        return $r3;

     label6:
        virtualinvoke r4.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        return $r3;

     label7:
        $r10 = new java.lang.IllegalStateException;

        r8 = "unexpected";

        r8 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r8);

        throw $r10;

     label8:
        $r9 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getReceiveException()>();

        $r9 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r9);

        throw $r9;
    }

    static java.lang.Object receiveCatching-JP2dKIU$suspendImpl(kotlinx.coroutines.channels.BufferedChannel, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r9;
        java.lang.IllegalStateException $r16;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.channels.ChannelResult$Companion r8;
        kotlinx.coroutines.channels.ChannelSegment r7, $r11;
        long $l2, l3, $l4;
        byte $b0;
        int $i1;
        java.lang.String r14;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r12;
        kotlinx.coroutines.channels.ChannelResult r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1 $r2, $r15;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r10;
        java.lang.Object $r3, $r4, $r13;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1;

        if $z0 == 0 goto label01;

        $r2 = (kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1) $r1;

        $i1 = $r2.<kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1: int label>;

        $i1 = $i1 & -2147483648;

        if $i1 == 0 goto label01;

        $i1 = $r2.<kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1: int label>;

        $i1 = $i1 - -2147483648;

        $r2.<kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1: int label> = $i1;

        goto label02;

     label01:
        $r15 = new kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1;

        specialinvoke $r15.<kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1: void <init>(kotlinx.coroutines.channels.BufferedChannel,kotlin.coroutines.Continuation)>($r0, $r1);

        $r2 = $r15;

     label02:
        $r3 = $r2.<kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1: java.lang.Object result>;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i1 = $r2.<kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1: int label>;

        lookupswitch($i1)
        {
            case 0: goto label05;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r16;

     label04:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        r5 = (kotlinx.coroutines.channels.ChannelResult) $r3;

        $r3 = virtualinvoke r5.<kotlinx.coroutines.channels.ChannelResult: java.lang.Object unbox-impl()>();

        goto label11;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r3 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r7 = (kotlinx.coroutines.channels.ChannelSegment) $r3;

     label06:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label07;

        r8 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r9 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        $r4 = virtualinvoke r8.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r9);

        return $r4;

     label07:
        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l2 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>($r0);

        $i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l3 = (long) $i1;

        l3 = $l2 / l3;

        $i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) $i1;

        $l4 = $l2 % $l4;

        $i1 = (int) $l4;

        $l4 = r7.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b0 = $l4 cmp l3;

        if $b0 == 0 goto label09;

        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>($r0, l3, r7);

        if $r11 != null goto label08;

        goto label06;

     label08:
        r7 = $r11;

     label09:
        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r0, r7, $i1, $l2, null);

        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r3 == $r12 goto label14;

        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r3 != $r12 goto label10;

        l3 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b0 = $l2 cmp l3;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label06;

        virtualinvoke r7.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        goto label06;

     label10:
        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r3 != $r12 goto label12;

        $r2.<kotlinx.coroutines.channels.BufferedChannel$receiveCatching$1: int label> = 1;

        $r13 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveCatchingOnNoWaiterSuspend-GKJJFZk(kotlinx.coroutines.channels.ChannelSegment,int,long,kotlin.coroutines.Continuation)>(r7, $i1, $l2, $r2);

        $r3 = $r13;

        if $r13 != $r4 goto label11;

        return $r4;

     label11:
        $r4 = $r3;

        goto label13;

     label12:
        virtualinvoke r7.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r8 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r4 = virtualinvoke r8.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r3);

     label13:
        return $r4;

     label14:
        $r16 = new java.lang.IllegalStateException;

        r14 = "unexpected";

        r14 = virtualinvoke r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r14);

        throw $r16;
    }

    private final java.lang.Object receiveCatchingOnNoWaiterSuspend-GKJJFZk(kotlinx.coroutines.channels.ChannelSegment, int, long, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r20;
        java.lang.IllegalStateException $r22;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.ChannelResult$Companion r13;
        kotlinx.coroutines.channels.ChannelSegment $r1, $r12;
        long $l0, $l3, l5;
        kotlinx.coroutines.CancellableContinuationImpl $r6;
        byte b4;
        int i1, i2;
        java.lang.String $r18;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r8;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r9;
        kotlinx.coroutines.channels.ChannelResult $r15;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r11;
        kotlin.jvm.functions.Function1 r16;
        kotlin.coroutines.CoroutineContext $r17;
        kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1 $r3, $r21;
        kotlinx.coroutines.Waiter $r7;
        kotlinx.coroutines.CancellableContinuation r10;
        kotlinx.coroutines.channels.ReceiveCatching $r23;
        java.lang.Object $r4, $r5, $r14, $r19;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        i1 := @parameter1: int;

        $l0 := @parameter2: long;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1;

        if $z0 == 0 goto label01;

        $r3 = (kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1) $r2;

        i2 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: int label>;

        i2 = i2 & -2147483648;

        if i2 == 0 goto label01;

        i2 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: int label>;

        i2 = i2 - -2147483648;

        $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: int label> = i2;

        goto label02;

     label01:
        $r21 = new kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1;

        $r3 = $r21;

        specialinvoke $r21.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: void <init>(kotlinx.coroutines.channels.BufferedChannel,kotlin.coroutines.Continuation)>(r0, $r2);

     label02:
        $r4 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i2 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: int label>;

        lookupswitch(i2)
        {
            case 0: goto label05;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r22;

     label04:
        $l0 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: long J$0>;

        i1 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: int I$0>;

        $r5 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: java.lang.Object L$1>;

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) $r5;

        $r5 = $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: java.lang.Object L$0>;

        r0 = (kotlinx.coroutines.channels.BufferedChannel) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label69;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: java.lang.Object L$0> = r0;

        $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: java.lang.Object L$1> = $r1;

        $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: int I$0> = i1;

        $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: long J$0> = $l0;

        $r3.<kotlinx.coroutines.channels.BufferedChannel$receiveCatchingOnNoWaiterSuspend$1: int label> = 1;

        $r2 = (kotlin.coroutines.Continuation) $r3;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r6 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r2);

     label06:
        $r23 = new kotlinx.coroutines.channels.ReceiveCatching;

     label07:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlinx.coroutines.CancellableContinuationImpl<kotlinx.coroutines.channels.ChannelResult<E of kotlinx.coroutines.channels.BufferedChannel.receiveCatchingOnNoWaiterSuspend_GKJJFZk$lambda$35>>");

        specialinvoke $r23.<kotlinx.coroutines.channels.ReceiveCatching: void <init>(kotlinx.coroutines.CancellableContinuationImpl)>($r6);

        $r7 = (kotlinx.coroutines.Waiter) $r23;

     label08:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, $r1, i1, $l0, $r7);

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

     label09:
        if $r4 != $r8 goto label12;

     label10:
        $r7 = (kotlinx.coroutines.Waiter) $r23;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r7, $r1, i1);

     label11:
        goto label67;

     label12:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

     label13:
        if $r4 != $r8 goto label61;

     label14:
        $l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

     label15:
        b4 = $l0 cmp $l3;

        i1 = (int) b4;

        if i1 >= 0 goto label17;

     label16:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label17:
        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) $r4;

     label18:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

     label19:
        if $z0 == 0 goto label22;

     label20:
        r10 = (kotlinx.coroutines.CancellableContinuation) $r6;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$onClosedReceiveCatchingOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.CancellableContinuation)>(r0, r10);

     label21:
        goto label67;

     label22:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l0 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label23:
        $l3 = (long) i1;

     label24:
        $l3 = $l0 / $l3;

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label25:
        l5 = (long) i1;

     label26:
        l5 = $l0 % l5;

     label27:
        i1 = (int) l5;

     label28:
        l5 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

     label29:
        b4 = l5 cmp $l3;

        if b4 == 0 goto label33;

     label30:
        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l3, $r1);

     label31:
        if $r12 != null goto label32;

        goto label18;

     label32:
        $r1 = $r12;

     label33:
        $r7 = (kotlinx.coroutines.Waiter) $r23;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, $r1, i1, $l0, $r7);

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

     label34:
        if $r4 != $r8 goto label43;

     label35:
        $r7 = (kotlinx.coroutines.Waiter) $r23;

        $z0 = $r7 instanceof kotlinx.coroutines.Waiter;

     label36:
        if $z0 == 0 goto label39;

     label37:
        $r7 = (kotlinx.coroutines.Waiter) $r23;

     label38:
        goto label40;

     label39:
        $r7 = null;

     label40:
        if $r7 == null goto label42;

     label41:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r7, $r1, i1);

     label42:
        goto label57;

     label43:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

     label44:
        if $r4 != $r8 goto label49;

     label45:
        $l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

     label46:
        b4 = $l0 cmp $l3;

        i1 = (int) b4;

        if i1 >= 0 goto label18;

     label47:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label48:
        goto label18;

     label49:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

     label50:
        if $r4 == $r8 goto label58;

     label51:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r13 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r14 = virtualinvoke r13.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r4);

        $r15 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r14);

        r16 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

     label52:
        if r16 == null goto label55;

     label53:
        $r17 = virtualinvoke $r6.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r16 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>(r16, $r4, $r17);

     label54:
        goto label56;

     label55:
        r16 = null;

     label56:
        virtualinvoke $r6.<kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r15, r16);

     label57:
        goto label67;

     label58:
        $r22 = new java.lang.IllegalStateException;

     label59:
        $r18 = "unexpected";

     label60:
        $r18 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r22;

     label61:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r13 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r14 = virtualinvoke r13.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r4);

        $r15 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r14);

        r16 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

     label62:
        if r16 == null goto label65;

     label63:
        $r17 = virtualinvoke $r6.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r16 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>(r16, $r4, $r17);

     label64:
        goto label66;

     label65:
        r16 = null;

     label66:
        virtualinvoke $r6.<kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r15, r16);

     label67:
        $r14 = virtualinvoke $r6.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r4 = $r14;

        $r19 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r14 != $r19 goto label68;

        $r2 = (kotlin.coroutines.Continuation) $r3;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label68:
        if $r14 != $r5 goto label69;

        return $r5;

     label69:
        $r15 = (kotlinx.coroutines.channels.ChannelResult) $r4;

        $r5 = virtualinvoke $r15.<kotlinx.coroutines.channels.ChannelResult: java.lang.Object unbox-impl()>();

        return $r5;

     label70:
        $r20 := @caughtexception;

        goto label72;

     label71:
        $r20 := @caughtexception;

     label72:
        virtualinvoke $r6.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw $r20;

        catch java.lang.Throwable from label06 to label07 with label71;
        catch java.lang.Throwable from label07 to label08 with label71;
        catch java.lang.Throwable from label08 to label09 with label70;
        catch java.lang.Throwable from label10 to label11 with label70;
        catch java.lang.Throwable from label12 to label13 with label70;
        catch java.lang.Throwable from label14 to label15 with label70;
        catch java.lang.Throwable from label16 to label19 with label70;
        catch java.lang.Throwable from label20 to label21 with label70;
        catch java.lang.Throwable from label22 to label23 with label70;
        catch java.lang.Throwable from label24 to label25 with label70;
        catch java.lang.Throwable from label26 to label27 with label70;
        catch java.lang.Throwable from label28 to label29 with label70;
        catch java.lang.Throwable from label30 to label31 with label70;
        catch java.lang.Throwable from label33 to label34 with label70;
        catch java.lang.Throwable from label35 to label36 with label70;
        catch java.lang.Throwable from label37 to label38 with label70;
        catch java.lang.Throwable from label41 to label42 with label70;
        catch java.lang.Throwable from label43 to label44 with label70;
        catch java.lang.Throwable from label45 to label46 with label70;
        catch java.lang.Throwable from label47 to label48 with label70;
        catch java.lang.Throwable from label49 to label50 with label70;
        catch java.lang.Throwable from label51 to label52 with label70;
        catch java.lang.Throwable from label53 to label54 with label70;
        catch java.lang.Throwable from label56 to label57 with label70;
        catch java.lang.Throwable from label58 to label59 with label70;
        catch java.lang.Throwable from label60 to label62 with label70;
        catch java.lang.Throwable from label63 to label64 with label70;
        catch java.lang.Throwable from label66 to label67 with label70;
    }

    private final java.lang.Object receiveImpl(java.lang.Object, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function3, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function3)
    {
        kotlinx.coroutines.channels.ChannelSegment r8, $r10;
        long l0, $l2, $l3;
        java.lang.Integer $r13;
        byte $b4;
        java.lang.Long $r14;
        int i1;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r11;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        kotlin.jvm.functions.Function3 $r3, $r5;
        kotlin.jvm.functions.Function1 $r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r9;
        kotlin.jvm.functions.Function0 $r4;
        kotlinx.coroutines.Waiter $r12;
        java.lang.Object $r1, $r7;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: kotlin.jvm.functions.Function3;

        $r4 := @parameter3: kotlin.jvm.functions.Function0;

        $r5 := @parameter4: kotlin.jvm.functions.Function3;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (kotlinx.coroutines.channels.ChannelSegment) $r7;

     label01:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label02;

        $r1 = interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label02:
        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l2 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l0 = (long) i1;

        l0 = $l2 / l0;

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) i1;

        $l3 = $l2 % $l3;

        i1 = (int) $l3;

        $l3 = r8.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = $l3 cmp l0;

        if $b4 == 0 goto label04;

        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, l0, r8);

        if $r10 != null goto label03;

        goto label01;

     label03:
        r8 = $r10;

        goto label04;

     label04:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, r8, i1, $l2, $r1);

        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r7 != $r11 goto label08;

        $z0 = $r1 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label05;

        $r12 = (kotlinx.coroutines.Waiter) $r1;

        goto label06;

     label05:
        $r12 = null;

     label06:
        if $r12 == null goto label07;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r12, r8, i1);

     label07:
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1 = interfaceinvoke $r3.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r8, $r13, $r14);

        return $r1;

     label08:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r7 != $r11 goto label10;

        l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b4 = $l2 cmp l0;

        i1 = (int) $b4;

        if i1 >= 0 goto label09;

        virtualinvoke r8.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label09:
        goto label01;

     label10:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r7 != $r11 goto label11;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r8, $r13, $r14);

        return $r1;

     label11:
        virtualinvoke r8.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r1 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

        return $r1;
    }

    static java.lang.Object receiveImpl$default(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function3, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function3, int, java.lang.Object)
    {
        kotlinx.coroutines.channels.ChannelSegment r9, $r11;
        long l2, $l3, $l4;
        kotlinx.coroutines.channels.BufferedChannel$receiveImpl$1 r7;
        java.lang.Integer $r14;
        byte $b1;
        java.lang.Long $r15;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r12;
        java.lang.UnsupportedOperationException $r16;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r8;
        kotlin.jvm.functions.Function3 $r3, r5;
        kotlin.jvm.functions.Function1 $r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r10;
        kotlin.jvm.functions.Function0 $r4;
        kotlinx.coroutines.Waiter $r13;
        java.lang.Object $r1, $r6;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.jvm.functions.Function3;

        $r4 := @parameter4: kotlin.jvm.functions.Function0;

        r5 := @parameter5: kotlin.jvm.functions.Function3;

        $i0 := @parameter6: int;

        $r6 := @parameter7: java.lang.Object;

        if $r6 != null goto label13;

        $i0 = $i0 & 16;

        if $i0 == 0 goto label01;

        r7 = <kotlinx.coroutines.channels.BufferedChannel$receiveImpl$1: kotlinx.coroutines.channels.BufferedChannel$receiveImpl$1 INSTANCE>;

        r5 = (kotlin.jvm.functions.Function3) r7;

        goto label01;

     label01:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r6 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r9 = (kotlinx.coroutines.channels.ChannelSegment) $r6;

     label02:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label03;

        $r1 = interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label03:
        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l3 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>($r0);

        $i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l2 = (long) $i0;

        l2 = $l3 / l2;

        $i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) $i0;

        $l4 = $l3 % $l4;

        $i0 = (int) $l4;

        $l4 = r9.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b1 = $l4 cmp l2;

        if $b1 == 0 goto label05;

        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>($r0, l2, r9);

        if $r11 != null goto label04;

        goto label02;

     label04:
        r9 = $r11;

        goto label05;

     label05:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r0, r9, $i0, $l3, $r1);

        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r6 != $r12 goto label09;

        $z0 = $r1 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label06;

        $r13 = (kotlinx.coroutines.Waiter) $r1;

        goto label07;

     label06:
        $r13 = null;

     label07:
        if $r13 == null goto label08;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>($r0, $r13, r9, $i0);

     label08:
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r1 = interfaceinvoke $r3.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r9, $r14, $r15);

        return $r1;

     label09:
        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r6 != $r12 goto label11;

        l2 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b1 = $l3 cmp l2;

        $i0 = (int) $b1;

        if $i0 >= 0 goto label10;

        virtualinvoke r9.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label10:
        goto label02;

     label11:
        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r6 != $r12 goto label12;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r1 = interfaceinvoke r5.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>(r9, $r14, $r15);

        return $r1;

     label12:
        virtualinvoke r9.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r1 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        return $r1;

     label13:
        $r16 = new java.lang.UnsupportedOperationException;

        specialinvoke $r16.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: receiveImpl");

        throw $r16;
    }

    private final void receiveImplOnNoWaiter(kotlinx.coroutines.channels.ChannelSegment, int, long, kotlinx.coroutines.Waiter, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        java.lang.IllegalStateException $r12;
        kotlinx.coroutines.channels.ChannelSegment $r1, $r9;
        long $l1, $l2, $l4;
        byte b3;
        int $i0;
        java.lang.String r11;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r7;
        kotlin.jvm.functions.Function1 $r3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r8;
        kotlin.jvm.functions.Function0 $r4;
        kotlinx.coroutines.Waiter $r2;
        kotlin.Unit $r10;
        java.lang.Object $r5;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r2 := @parameter3: kotlinx.coroutines.Waiter;

        $r3 := @parameter4: kotlin.jvm.functions.Function1;

        $r4 := @parameter5: kotlin.jvm.functions.Function0;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, $r1, $i0, $l1, $r2);

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r5 != $r6 goto label01;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r2, $r1, $i0);

        return;

     label01:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r5 != $r6 goto label15;

        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        b3 = $l1 cmp $l2;

        $i0 = (int) b3;

        if $i0 >= 0 goto label02;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label02:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r5 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) $r5;

     label03:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label04;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label13;

     label04:
        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l1 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l2 = (long) $i0;

        $l2 = $l1 / $l2;

        $i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) $i0;

        $l4 = $l1 % $l4;

        $i0 = (int) $l4;

        $l4 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        b3 = $l4 cmp $l2;

        if b3 == 0 goto label06;

        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l2, $r1);

        if $r9 != null goto label05;

        goto label03;

     label05:
        $r1 = $r9;

        goto label06;

     label06:
        $r9 = $r1;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, $r1, $i0, $l1, $r2);

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r5 != $r6 goto label10;

        $z0 = $r2 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label07;

        goto label08;

     label07:
        $r2 = null;

     label08:
        if $r2 == null goto label09;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r2, $r9, $i0);

     label09:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label13;

     label10:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r5 != $r6 goto label12;

        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        b3 = $l1 cmp $l2;

        $i0 = (int) b3;

        if $i0 >= 0 goto label11;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label11:
        $r1 = $r9;

        goto label03;

     label12:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r5 == $r6 goto label14;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

     label13:
        return;

     label14:
        $r12 = new java.lang.IllegalStateException;

        r11 = "unexpected";

        r11 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r11);

        throw $r12;

     label15:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        interfaceinvoke $r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        return;
    }

    private final java.lang.Object receiveOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment, int, long, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r8;
        java.lang.IllegalStateException $r18;
        kotlin.coroutines.Continuation $r2, $r3;
        kotlinx.coroutines.channels.ChannelSegment r1, $r13, $r14;
        long l1, $l2, $l4;
        kotlinx.coroutines.CancellableContinuationImpl $r4;
        byte $b3;
        int i0;
        java.lang.String r17;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r10;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r12;
        kotlin.jvm.functions.Function1 r15;
        kotlin.coroutines.CoroutineContext $r16;
        kotlinx.coroutines.Waiter $r5;
        kotlinx.coroutines.CancellableContinuation $r11;
        java.lang.Object $r6, $r9;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        $r4 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r3);

     label01:
        $r5 = (kotlinx.coroutines.Waiter) $r4;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, r1, i0, l1, $r5);

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

     label02:
        if $r6 != $r7 goto label09;

     label03:
        $r5 = (kotlinx.coroutines.Waiter) $r4;

     label04:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r5, r1, i0);

     label05:
        goto label61;

     label06:
        r8 := @caughtexception;

        goto label08;

     label07:
        r8 := @caughtexception;

     label08:
        goto label65;

     label09:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

     label10:
        $r9 = null;

        if $r6 != $r7 goto label56;

     label11:
        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

     label12:
        $b3 = l1 cmp $l2;

        i0 = (int) $b3;

        if i0 >= 0 goto label14;

     label13:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label14:
        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r6 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (kotlinx.coroutines.channels.ChannelSegment) $r6;

     label15:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

     label16:
        if $z0 == 0 goto label19;

     label17:
        $r11 = (kotlinx.coroutines.CancellableContinuation) $r4;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$onClosedReceiveOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.CancellableContinuation)>(r0, $r11);

     label18:
        goto label61;

     label19:
        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        l1 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label20:
        $l2 = (long) i0;

     label21:
        $l2 = l1 / $l2;

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label22:
        $l4 = (long) i0;

     label23:
        $l4 = l1 % $l4;

     label24:
        i0 = (int) $l4;

     label25:
        $l4 = r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

     label26:
        $b3 = $l4 cmp $l2;

        if $b3 == 0 goto label30;

     label27:
        $r13 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l2, r1);

     label28:
        $r14 = $r13;

        if $r13 != null goto label29;

        goto label15;

     label29:
        goto label31;

     label30:
        $r14 = r1;

     label31:
        $r5 = (kotlinx.coroutines.Waiter) $r4;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, $r14, i0, l1, $r5);

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

     label32:
        if $r6 != $r7 goto label39;

     label33:
        $r5 = (kotlinx.coroutines.Waiter) $r4;

        $z0 = $r5 instanceof kotlinx.coroutines.Waiter;

     label34:
        if $z0 == 0 goto label36;

     label35:
        $r9 = (kotlinx.coroutines.Waiter) $r4;

     label36:
        if $r9 == null goto label38;

     label37:
        $r5 = (kotlinx.coroutines.Waiter) $r9;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r5, $r14, i0);

     label38:
        goto label52;

     label39:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

     label40:
        if $r6 != $r7 goto label45;

     label41:
        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

     label42:
        $b3 = l1 cmp $l2;

        i0 = (int) $b3;

        if i0 >= 0 goto label44;

     label43:
        virtualinvoke $r14.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label44:
        r1 = $r14;

        goto label15;

     label45:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

     label46:
        if $r6 == $r7 goto label53;

     label47:
        virtualinvoke $r14.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r15 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

     label48:
        if r15 == null goto label51;

     label49:
        $r16 = virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r15 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>(r15, $r6, $r16);

     label50:
        $r9 = r15;

     label51:
        r15 = (kotlin.jvm.functions.Function1) $r9;

        virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r6, r15);

     label52:
        goto label61;

     label53:
        $r18 = new java.lang.IllegalStateException;

     label54:
        r17 = "unexpected";

     label55:
        r17 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r17);

        throw $r18;

     label56:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r15 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

     label57:
        if r15 == null goto label60;

     label58:
        $r16 = virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r15 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>(r15, $r6, $r16);

     label59:
        $r9 = r15;

     label60:
        r15 = (kotlin.jvm.functions.Function1) $r9;

        virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r6, r15);

     label61:
        $r9 = virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r9 != $r6 goto label62;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label62:
        return $r9;

     label63:
        r8 := @caughtexception;

        goto label65;

     label64:
        r8 := @caughtexception;

     label65:
        virtualinvoke $r4.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw r8;

        catch java.lang.Throwable from label01 to label02 with label64;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label64;
        catch java.lang.Throwable from label11 to label12 with label64;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label14 to label16 with label64;
        catch java.lang.Throwable from label17 to label18 with label06;
        catch java.lang.Throwable from label19 to label20 with label64;
        catch java.lang.Throwable from label21 to label22 with label64;
        catch java.lang.Throwable from label23 to label24 with label63;
        catch java.lang.Throwable from label25 to label26 with label63;
        catch java.lang.Throwable from label27 to label28 with label63;
        catch java.lang.Throwable from label31 to label32 with label63;
        catch java.lang.Throwable from label33 to label34 with label63;
        catch java.lang.Throwable from label35 to label36 with label63;
        catch java.lang.Throwable from label37 to label38 with label63;
        catch java.lang.Throwable from label39 to label40 with label63;
        catch java.lang.Throwable from label41 to label42 with label63;
        catch java.lang.Throwable from label43 to label44 with label63;
        catch java.lang.Throwable from label45 to label46 with label63;
        catch java.lang.Throwable from label47 to label48 with label63;
        catch java.lang.Throwable from label49 to label50 with label63;
        catch java.lang.Throwable from label51 to label52 with label63;
        catch java.lang.Throwable from label53 to label54 with label63;
        catch java.lang.Throwable from label55 to label57 with label63;
        catch java.lang.Throwable from label58 to label59 with label63;
        catch java.lang.Throwable from label60 to label61 with label63;
    }

    private final void registerSelectForReceive(kotlinx.coroutines.selects.SelectInstance, java.lang.Object)
    {
        java.lang.IllegalStateException $r10;
        kotlinx.coroutines.channels.ChannelSegment r4, $r6;
        long l0, $l2, $l3;
        kotlinx.coroutines.selects.SelectInstance $r1;
        byte $b4;
        int i1;
        java.lang.String $r9;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;
        kotlinx.coroutines.Waiter $r8;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

     label01:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label02;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedSelectOnReceive(kotlinx.coroutines.selects.SelectInstance)>($r1);

        return;

     label02:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l0 = (long) i1;

        l0 = $l2 / l0;

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) i1;

        $l3 = $l2 % $l3;

        i1 = (int) $l3;

        $l3 = r4.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = $l3 cmp l0;

        if $b4 == 0 goto label04;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, l0, r4);

        if $r6 != null goto label03;

        goto label01;

     label03:
        r4 = $r6;

        goto label04;

     label04:
        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, r4, i1, $l2, $r1);

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r2 != $r7 goto label08;

        $z0 = $r1 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label05;

        $r8 = (kotlinx.coroutines.Waiter) $r1;

        goto label06;

     label05:
        $r8 = null;

     label06:
        if $r8 == null goto label07;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r8, r4, i1);

     label07:
        goto label11;

     label08:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r2 != $r7 goto label10;

        l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b4 = $l2 cmp l0;

        i1 = (int) $b4;

        if i1 >= 0 goto label09;

        virtualinvoke r4.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label09:
        goto label01;

     label10:
        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r2 == $r7 goto label12;

        virtualinvoke r4.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r2);

     label11:
        return;

     label12:
        $r10 = new java.lang.IllegalStateException;

        $r9 = "unexpected";

        $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r10;
    }

    private final void removeUnprocessedElements(kotlinx.coroutines.channels.ChannelSegment)
    {
        kotlinx.coroutines.internal.UndeliveredElementException r3;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long l1, l3;
        java.util.ArrayList r10;
        byte $b4;
        int i0, i2;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r6;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r9;
        kotlinx.coroutines.channels.WaiterEB r7;
        kotlin.jvm.functions.Function1 r2;
        kotlinx.coroutines.Waiter r8;
        java.lang.Object $r4, $r5;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        r2 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        r3 = null;

        $r4 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object constructor-impl$default(java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

     label01:
        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        i0 = i0 - 1;

     label02:
        if -1 >= i0 goto label15;

        l1 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        l3 = (long) i2;

        l1 = l1 * l3;

        l3 = (long) i0;

        l1 = l1 + l3;

     label03:
        $r5 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>(i0);

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        if $r5 == $r6 goto label16;

        $r6 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        if $r5 != $r6 goto label05;

        l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b4 = l1 cmp l3;

        i2 = (int) $b4;

        if i2 < 0 goto label16;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>(i0, $r5, $r6);

        if $z0 == 0 goto label03;

        if r2 == null goto label04;

        $r5 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>(i0);

        r3 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException)>(r2, $r5, r3);

     label04:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>(i0);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        goto label14;

     label05:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        if $r5 == $r6 goto label13;

        if $r5 != null goto label06;

        goto label13;

     label06:
        $z0 = $r5 instanceof kotlinx.coroutines.Waiter;

        if $z0 != 0 goto label09;

        $z0 = $r5 instanceof kotlinx.coroutines.channels.WaiterEB;

        if $z0 == 0 goto label07;

        goto label09;

     label07:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        if $r5 == $r6 goto label16;

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_RCV$p()>();

        if $r5 != $r6 goto label08;

        goto label16;

     label08:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        if $r5 == $r6 goto label03;

        goto label14;

     label09:
        l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b4 = l1 cmp l3;

        i2 = (int) $b4;

        if i2 < 0 goto label16;

        $z0 = $r5 instanceof kotlinx.coroutines.channels.WaiterEB;

        if $z0 == 0 goto label10;

        r7 = (kotlinx.coroutines.channels.WaiterEB) $r5;

        r8 = r7.<kotlinx.coroutines.channels.WaiterEB: kotlinx.coroutines.Waiter waiter>;

        goto label11;

     label10:
        r8 = (kotlinx.coroutines.Waiter) $r5;

     label11:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>(i0, $r5, $r6);

        if $z0 == 0 goto label03;

        if r2 == null goto label12;

        $r5 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>(i0);

        r3 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException)>(r2, $r5, r3);

     label12:
        $r4 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object plus-FjFbRPM(java.lang.Object,java.lang.Object)>($r4, r8);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>(i0);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        goto label14;

     label13:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>(i0, $r5, $r6);

        if $z0 == 0 goto label03;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

     label14:
        i0 = i0 + -1;

        goto label02;

     label15:
        $r9 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) $r9;

        if $r1 != null goto label21;

     label16:
        if $r4 == null goto label19;

        $z0 = $r4 instanceof java.util.ArrayList;

        if $z0 != 0 goto label17;

        r8 = (kotlinx.coroutines.Waiter) $r4;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void resumeSenderOnCancelledChannel(kotlinx.coroutines.Waiter)>(r8);

        goto label19;

     label17:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type java.util.ArrayList<E of kotlinx.coroutines.internal.InlineList>{ kotlin.collections.TypeAliasesKt.ArrayList<E of kotlinx.coroutines.internal.InlineList> }");

        r10 = (java.util.ArrayList) $r4;

        i0 = virtualinvoke r10.<java.util.ArrayList: int size()>();

        i0 = i0 - 1;

     label18:
        if -1 >= i0 goto label19;

        $r4 = virtualinvoke r10.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r8 = (kotlinx.coroutines.Waiter) $r4;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void resumeSenderOnCancelledChannel(kotlinx.coroutines.Waiter)>(r8);

        i0 = i0 + -1;

        goto label18;

     label19:
        if r3 != null goto label20;

        return;

     label20:
        throw r3;

     label21:
        goto label01;
    }

    private final void resumeReceiverOnClosedChannel(kotlinx.coroutines.Waiter)
    {
        kotlinx.coroutines.Waiter $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.Waiter;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void resumeWaiterOnClosedChannel(kotlinx.coroutines.Waiter,boolean)>($r1, 1);

        return;
    }

    private final void resumeSenderOnCancelledChannel(kotlinx.coroutines.Waiter)
    {
        kotlinx.coroutines.Waiter $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.Waiter;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void resumeWaiterOnClosedChannel(kotlinx.coroutines.Waiter,boolean)>($r1, 0);

        return;
    }

    private final void resumeWaiterOnClosedChannel(kotlinx.coroutines.Waiter, boolean)
    {
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r16;
        kotlin.coroutines.Continuation $r4;
        kotlin.Result$Companion $r5;
        kotlinx.coroutines.channels.ChannelResult$Companion $r11;
        kotlinx.coroutines.CancellableContinuationImpl $r10;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator $r13;
        kotlinx.coroutines.selects.SelectInstance $r14;
        java.lang.Boolean $r6;
        java.lang.String $r18;
        boolean $z0, $z1;
        kotlinx.coroutines.internal.Symbol $r15;
        kotlinx.coroutines.channels.ChannelResult $r12;
        kotlinx.coroutines.Waiter $r1;
        kotlinx.coroutines.CancellableContinuation $r3;
        kotlinx.coroutines.channels.ReceiveCatching $r9;
        java.lang.Object $r7;
        java.lang.StringBuilder $r17;
        kotlinx.coroutines.channels.BufferedChannel$SendBroadcast $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.Waiter;

        $z0 := @parameter1: boolean;

        $z1 = $r1 instanceof kotlinx.coroutines.channels.BufferedChannel$SendBroadcast;

        if $z1 == 0 goto label1;

        $r2 = (kotlinx.coroutines.channels.BufferedChannel$SendBroadcast) $r1;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.channels.BufferedChannel$SendBroadcast: kotlinx.coroutines.CancellableContinuation getCont()>();

        $r4 = (kotlin.coroutines.Continuation) $r3;

        $r5 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r7 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r7);

        return;

     label1:
        $z1 = $r1 instanceof kotlinx.coroutines.CancellableContinuation;

        if $z1 == 0 goto label4;

        $r4 = (kotlin.coroutines.Continuation) $r1;

        $r5 = <kotlin.Result: kotlin.Result$Companion Companion>;

        if $z0 == 0 goto label2;

        $r8 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getReceiveException()>();

        goto label3;

     label2:
        $r8 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

     label3:
        $r7 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r8);

        $r7 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r7);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r7);

        return;

     label4:
        $z0 = $r1 instanceof kotlinx.coroutines.channels.ReceiveCatching;

        if $z0 == 0 goto label5;

        $r9 = (kotlinx.coroutines.channels.ReceiveCatching) $r1;

        $r10 = $r9.<kotlinx.coroutines.channels.ReceiveCatching: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r4 = (kotlin.coroutines.Continuation) $r10;

        $r5 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r11 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r8 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        $r7 = virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r8);

        $r12 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r7);

        $r7 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r12);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r7);

        return;

     label5:
        $z0 = $r1 instanceof kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        if $z0 == 0 goto label6;

        $r13 = (kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator) $r1;

        virtualinvoke $r13.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void tryResumeHasNextOnClosedChannel()>();

        return;

     label6:
        $z0 = $r1 instanceof kotlinx.coroutines.selects.SelectInstance;

        if $z0 == 0 goto label7;

        $r14 = (kotlinx.coroutines.selects.SelectInstance) $r1;

        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        interfaceinvoke $r14.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect(java.lang.Object,java.lang.Object)>(r0, $r15);

        return;

     label7:
        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected waiter: ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r16;
    }

    static java.lang.Object send$suspendImpl(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.ChannelSegment r5, $r7;
        long $l0, $l1, $l3;
        java.lang.AssertionError $r9;
        byte $b4;
        int $i2, $i5;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r6;
        kotlin.Unit r8;
        java.lang.Object $r1, $r4;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r5 = (kotlinx.coroutines.channels.ChannelSegment) $r4;

     label01:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>($r0);

        $l1 = $l0 & 1152921504606846975L;

        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>($r0, $l0);

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l0 = (long) $i2;

        $l0 = $l1 / $l0;

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) $i2;

        $l3 = $l1 % $l3;

        $i2 = (int) $l3;

        $l3 = r5.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = $l3 cmp $l0;

        if $b4 == 0 goto label04;

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>($r0, $l0, r5);

        if $r7 != null goto label03;

        if $z0 == 0 goto label01;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object onClosedSend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r4 goto label02;

        return $r1;

     label02:
        goto label18;

     label03:
        r5 = $r7;

        goto label04;

     label04:
        $i5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>($r0, r5, $i2, $r1, $l1, null, $z0);

        lookupswitch($i5)
        {
            case 0: goto label17;
            case 1: goto label16;
            case 2: goto label12;
            case 3: goto label10;
            case 4: goto label07;
            case 5: goto label06;
            default: goto label05;
        };

     label05:
        goto label19;

     label06:
        virtualinvoke r5.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        goto label19;

     label07:
        $l0 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b4 = $l1 cmp $l0;

        $i2 = (int) $b4;

        if $i2 >= 0 goto label08;

        virtualinvoke r5.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label08:
        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object onClosedSend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r4 goto label09;

        return $r1;

     label09:
        goto label18;

     label10:
        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,kotlin.coroutines.Continuation)>(r5, $i2, $r1, $l1, $r2);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r4 goto label11;

        return $r1;

     label11:
        goto label18;

     label12:
        if $z0 == 0 goto label14;

        virtualinvoke r5.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object onClosedSend(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r4 goto label13;

        return $r1;

     label13:
        goto label18;

     label14:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 != 0 goto label15;

        goto label18;

     label15:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label16:
        goto label18;

     label17:
        virtualinvoke r5.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label18:
        r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r8;

     label19:
        goto label01;
    }

    static java.lang.Object sendBroadcast$suspendImpl(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException $r19;
        kotlin.coroutines.Continuation $r2, $r4;
        kotlin.Result$Companion $r14;
        kotlinx.coroutines.channels.ChannelSegment r11, $r13;
        long $l0, $l1, l3;
        kotlinx.coroutines.CancellableContinuationImpl r3, r5;
        byte $b4;
        int $i2, $i5;
        java.lang.Boolean $r15;
        java.lang.String r17;
        boolean z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r9;
        kotlin.jvm.functions.Function1 r7;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r12;
        kotlinx.coroutines.Waiter r18;
        kotlinx.coroutines.CancellableContinuation r6;
        java.lang.Object $r1, $r10;
        kotlinx.coroutines.channels.BufferedChannel$SendBroadcast r8, $r16;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        r5 = new kotlinx.coroutines.CancellableContinuationImpl;

        r3 = r5;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r2);

        specialinvoke r5.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r4, 1);

        virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r6 = (kotlinx.coroutines.CancellableContinuation) r3;

        r7 = $r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if r7 != null goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        if z0 == 0 goto label22;

        $r16 = new kotlinx.coroutines.channels.BufferedChannel$SendBroadcast;

        specialinvoke $r16.<kotlinx.coroutines.channels.BufferedChannel$SendBroadcast: void <init>(kotlinx.coroutines.CancellableContinuation)>(r6);

        r8 = $r16;

        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r10 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r11 = (kotlinx.coroutines.channels.ChannelSegment) $r10;

     label03:
        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l0 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>($r0);

        $l1 = $l0 & 1152921504606846975L;

        z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>($r0, $l0);

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l0 = (long) $i2;

        $l0 = $l1 / $l0;

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        r3 = r5;

        l3 = (long) $i2;

        l3 = $l1 % l3;

        $i2 = (int) l3;

        l3 = r11.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = l3 cmp $l0;

        if $b4 == 0 goto label06;

        $r13 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>($r0, $l0, r11);

        if $r13 != null goto label05;

        if z0 == 0 goto label04;

        $r4 = (kotlin.coroutines.Continuation) r6;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(0);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        goto label19;

     label04:
        goto label03;

     label05:
        r11 = $r13;

        goto label06;

     label06:
        $r16 = r8;

        $i5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>($r0, r11, $i2, $r1, $l1, r8, z0);

        lookupswitch($i5)
        {
            case 0: goto label18;
            case 1: goto label17;
            case 2: goto label12;
            case 3: goto label11;
            case 4: goto label09;
            case 5: goto label08;
            default: goto label07;
        };

     label07:
        goto label21;

     label08:
        virtualinvoke r11.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        goto label21;

     label09:
        $l0 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b4 = $l1 cmp $l0;

        $i2 = (int) $b4;

        if $i2 >= 0 goto label10;

        virtualinvoke r11.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label10:
        $r4 = (kotlin.coroutines.Continuation) r6;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(0);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        goto label19;

     label11:
        $r19 = new java.lang.IllegalStateException;

        r17 = "unexpected";

        r17 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r17);

        throw $r19;

     label12:
        if z0 == 0 goto label13;

        virtualinvoke r11.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        $r4 = (kotlin.coroutines.Continuation) r6;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(0);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        goto label19;

     label13:
        z0 = r8 instanceof kotlinx.coroutines.Waiter;

        if z0 == 0 goto label14;

        r18 = (kotlinx.coroutines.Waiter) r8;

        goto label15;

     label14:
        r18 = null;

     label15:
        if r18 == null goto label16;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>($r0, r18, r11, $i2);

     label16:
        goto label19;

     label17:
        $r4 = (kotlin.coroutines.Continuation) r6;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(1);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

        goto label19;

     label18:
        virtualinvoke r11.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r4 = (kotlin.coroutines.Continuation) r6;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(1);

        $r1 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r1);

     label19:
        $r1 = virtualinvoke r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r10 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r1 != $r10 goto label20;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label20:
        return $r1;

     label21:
        r8 = $r16;

        r5 = r3;

        goto label03;

     label22:
        $r19 = new java.lang.IllegalStateException;

        r17 = "the `onUndeliveredElement` feature is unsupported for `sendBroadcast(e)`";

        r17 = virtualinvoke r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r17);

        throw $r19;
    }

    public static java.lang.Object sendImpl$default(kotlinx.coroutines.channels.BufferedChannel, java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function4, int, java.lang.Object)
    {
        kotlinx.coroutines.channels.BufferedChannel$sendImpl$1 r8;
        kotlinx.coroutines.channels.ChannelSegment r10, $r12;
        long $l1, $l2, $l3;
        java.lang.Integer $r13;
        byte $b4;
        java.lang.Long $r14;
        int i0, $i5;
        boolean $z0;
        java.lang.UnsupportedOperationException $r16;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r9;
        kotlin.jvm.functions.Function4 r7;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r11;
        kotlin.jvm.functions.Function2 $r4;
        kotlin.jvm.functions.Function0 $r3, $r5;
        kotlinx.coroutines.Waiter r15;
        java.lang.Object $r1, $r2, $r6;
        kotlinx.coroutines.channels.BufferedChannel $r0;

        $r0 := @parameter0: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: kotlin.jvm.functions.Function0;

        $r4 := @parameter4: kotlin.jvm.functions.Function2;

        $r5 := @parameter5: kotlin.jvm.functions.Function0;

        r7 := @parameter6: kotlin.jvm.functions.Function4;

        i0 := @parameter7: int;

        $r6 := @parameter8: java.lang.Object;

        if $r6 != null goto label19;

        i0 = i0 & 32;

        if i0 == 0 goto label01;

        r8 = <kotlinx.coroutines.channels.BufferedChannel$sendImpl$1: kotlinx.coroutines.channels.BufferedChannel$sendImpl$1 INSTANCE>;

        r7 = (kotlin.jvm.functions.Function4) r8;

        goto label01;

     label01:
        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r6 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r0);

        r10 = (kotlinx.coroutines.channels.ChannelSegment) $r6;

     label02:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l1 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>($r0);

        $l2 = $l1 & 1152921504606846975L;

        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>($r0, $l1);

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l1 = (long) i0;

        $l1 = $l2 / $l1;

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) i0;

        $l3 = $l2 % $l3;

        i0 = (int) $l3;

        $l3 = r10.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = $l3 cmp $l1;

        if $b4 == 0 goto label04;

        $r12 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>($r0, $l1, r10);

        if $r12 != null goto label03;

        if $z0 == 0 goto label02;

        $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label03:
        r10 = $r12;

        goto label04;

     label04:
        $i5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>($r0, r10, i0, $r1, $l2, $r2, $z0);

        lookupswitch($i5)
        {
            case 0: goto label17;
            case 1: goto label16;
            case 2: goto label10;
            case 3: goto label09;
            case 4: goto label07;
            case 5: goto label06;
            default: goto label05;
        };

     label05:
        goto label18;

     label06:
        virtualinvoke r10.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        goto label18;

     label07:
        $l1 = virtualinvoke $r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b4 = $l2 cmp $l1;

        i0 = (int) $b4;

        if i0 >= 0 goto label08;

        virtualinvoke r10.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label08:
        $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label09:
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1 = interfaceinvoke r7.<kotlin.jvm.functions.Function4: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r10, $r13, $r1, $r14);

        return $r1;

     label10:
        $r12 = r10;

        if $z0 == 0 goto label11;

        virtualinvoke r10.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label11:
        $z0 = $r2 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label12;

        r15 = (kotlinx.coroutines.Waiter) $r2;

        goto label13;

     label12:
        r15 = null;

     label13:
        if r15 == null goto label14;

        $i5 = i0;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>($r0, r15, $r12, i0);

        goto label15;

     label14:
        $i5 = i0;

     label15:
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1 = interfaceinvoke $r4.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r12, $r13);

        return $r1;

     label16:
        $r1 = interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label17:
        virtualinvoke r10.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r1 = interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label18:
        goto label02;

     label19:
        $r16 = new java.lang.UnsupportedOperationException;

        specialinvoke $r16.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: sendImpl");

        throw $r16;
    }

    private final void sendImplOnNoWaiter(kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, kotlinx.coroutines.Waiter, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function0)
    {
        java.lang.IllegalStateException $r12;
        kotlinx.coroutines.channels.ChannelSegment $r1, $r10;
        long $l1, $l3, $l4;
        byte $b5;
        int $i0, $i2;
        java.lang.String $r6;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r7;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r9;
        kotlin.jvm.functions.Function0 $r4, $r5;
        kotlinx.coroutines.Waiter $r3;
        kotlin.Unit r11;
        java.lang.Object $r2, $r8;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.Object;

        $l1 := @parameter3: long;

        $r3 := @parameter4: kotlinx.coroutines.Waiter;

        $r4 := @parameter5: kotlin.jvm.functions.Function0;

        $r5 := @parameter6: kotlin.jvm.functions.Function0;

        $i2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>(r0, $r1, $i0, $r2, $l1, $r3, 0);

        $r6 = "unexpected";

        lookupswitch($i2)
        {
            case 0: goto label25;
            case 1: goto label24;
            case 2: goto label23;
            case 3: goto label01;
            case 4: goto label21;
            case 5: goto label02;
            default: goto label01;
        };

     label01:
        $r12 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r12;

     label02:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r1 = (kotlinx.coroutines.channels.ChannelSegment) $r8;

     label03:
        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l3 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $l1 = $l3 & 1152921504606846975L;

        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>(r0, $l3);

        $i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) $i0;

        $l3 = $l1 / $l3;

        $i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) $i0;

        $l4 = $l1 % $l4;

        $i0 = (int) $l4;

        $l4 = $r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b5 = $l4 cmp $l3;

        if $b5 == 0 goto label05;

        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l3, $r1);

        if $r10 != null goto label04;

        if $z0 == 0 goto label03;

        interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label19;

     label04:
        goto label06;

     label05:
        $r10 = $r1;

     label06:
        $r1 = $r10;

        $i2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>(r0, $r10, $i0, $r2, $l1, $r3, $z0);

        lookupswitch($i2)
        {
            case 0: goto label18;
            case 1: goto label17;
            case 2: goto label12;
            case 3: goto label11;
            case 4: goto label09;
            case 5: goto label08;
            default: goto label07;
        };

     label07:
        $r1 = $r10;

        goto label20;

     label08:
        virtualinvoke $r10.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r1 = $r10;

        goto label20;

     label09:
        $l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b5 = $l1 cmp $l3;

        $i0 = (int) $b5;

        if $i0 >= 0 goto label10;

        virtualinvoke $r10.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label10:
        interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label19;

     label11:
        $r12 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r12;

     label12:
        if $z0 == 0 goto label13;

        virtualinvoke $r10.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label19;

     label13:
        $z0 = $r3 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label14;

        goto label15;

     label14:
        $r3 = null;

     label15:
        if $r3 == null goto label16;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r3, $r1, $i0);

        goto label16;

     label16:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label19;

     label17:
        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label19;

     label18:
        virtualinvoke $r10.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label19:
        return;

     label20:
        goto label03;

     label21:
        $l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b5 = $l1 cmp $l3;

        $i0 = (int) $b5;

        if $i0 >= 0 goto label22;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label22:
        interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;

     label23:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r3, $r1, $i0);

        return;

     label24:
        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;

     label25:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    private final java.lang.Object sendOnNoWaiterSuspend(kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r13;
        java.lang.IllegalStateException $r16;
        kotlin.coroutines.Continuation $r3, $r4;
        kotlin.Result$Companion $r14;
        kotlinx.coroutines.channels.ChannelSegment r1, $r11;
        long l1, $l3, $l4;
        kotlinx.coroutines.CancellableContinuationImpl $r5;
        byte $b5;
        int i0, $i2;
        java.lang.String $r7;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r8;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r10;
        kotlinx.coroutines.Waiter r6;
        kotlin.Unit $r15;
        kotlinx.coroutines.CancellableContinuation r12;
        java.lang.Object r2, $r9;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        l1 := @parameter3: long;

        $r3 := @parameter4: kotlin.coroutines.Continuation;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r3);

        $r5 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r4);

     label01:
        r6 = (kotlinx.coroutines.Waiter) $r5;

     label02:
        $i2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>(r0, r1, i0, r2, l1, r6, 0);

     label03:
        $r7 = "unexpected";

        lookupswitch($i2)
        {
            case 0: goto label67;
            case 1: goto label65;
            case 2: goto label61;
            case 3: goto label04;
            case 4: goto label56;
            case 5: goto label06;
            default: goto label04;
        };

     label04:
        $r16 = new java.lang.IllegalStateException;

     label05:
        goto label72;

     label06:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (kotlinx.coroutines.channels.ChannelSegment) $r9;

     label07:
        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l3 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

     label08:
        l1 = $l3 & 1152921504606846975L;

     label09:
        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>(r0, $l3);

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label10:
        $l3 = (long) i0;

     label11:
        $l3 = l1 / $l3;

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label12:
        $l4 = (long) i0;

     label13:
        $l4 = l1 % $l4;

     label14:
        i0 = (int) $l4;

     label15:
        $l4 = r1.<kotlinx.coroutines.channels.ChannelSegment: long id>;

     label16:
        $b5 = $l4 cmp $l3;

        if $b5 == 0 goto label23;

     label17:
        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l3, r1);

     label18:
        if $r11 != null goto label21;

        if $z0 == 0 goto label07;

     label19:
        r12 = (kotlinx.coroutines.CancellableContinuation) $r5;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$onClosedSendOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel,java.lang.Object,kotlinx.coroutines.CancellableContinuation)>(r0, r2, r12);

     label20:
        goto label68;

     label21:
        goto label24;

     label22:
        r13 := @caughtexception;

        goto label76;

     label23:
        $r11 = r1;

     label24:
        r6 = (kotlinx.coroutines.Waiter) $r5;

     label25:
        r1 = $r11;

     label26:
        $i2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>(r0, $r11, i0, r2, l1, r6, $z0);

     label27:
        lookupswitch($i2)
        {
            case 0: goto label52;
            case 1: goto label50;
            case 2: goto label38;
            case 3: goto label36;
            case 4: goto label31;
            case 5: goto label29;
            default: goto label28;
        };

     label28:
        r1 = $r11;

        goto label54;

     label29:
        virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label30:
        r1 = $r11;

        goto label54;

     label31:
        $l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

     label32:
        $b5 = l1 cmp $l3;

        i0 = (int) $b5;

        if i0 >= 0 goto label34;

     label33:
        virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label34:
        r12 = (kotlinx.coroutines.CancellableContinuation) $r5;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$onClosedSendOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel,java.lang.Object,kotlinx.coroutines.CancellableContinuation)>(r0, r2, r12);

     label35:
        goto label68;

     label36:
        $r16 = new java.lang.IllegalStateException;

     label37:
        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label38:
        if $z0 == 0 goto label41;

     label39:
        virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        r12 = (kotlinx.coroutines.CancellableContinuation) $r5;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$onClosedSendOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel,java.lang.Object,kotlinx.coroutines.CancellableContinuation)>(r0, r2, r12);

     label40:
        goto label68;

     label41:
        r6 = (kotlinx.coroutines.Waiter) $r5;

        $z0 = r6 instanceof kotlinx.coroutines.Waiter;

     label42:
        if $z0 == 0 goto label45;

     label43:
        r6 = (kotlinx.coroutines.Waiter) $r5;

     label44:
        goto label46;

     label45:
        r6 = null;

     label46:
        if r6 == null goto label49;

     label47:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, r6, r1, i0);

     label48:
        goto label49;

     label49:
        goto label68;

     label50:
        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>(r2);

     label51:
        goto label68;

     label52:
        virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>(r2);

     label53:
        goto label68;

     label54:
        goto label07;

     label55:
        r13 := @caughtexception;

        goto label74;

     label56:
        $l3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

     label57:
        $b5 = l1 cmp $l3;

        i0 = (int) $b5;

        if i0 >= 0 goto label59;

     label58:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label59:
        r12 = (kotlinx.coroutines.CancellableContinuation) $r5;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$onClosedSendOnNoWaiterSuspend(kotlinx.coroutines.channels.BufferedChannel,java.lang.Object,kotlinx.coroutines.CancellableContinuation)>(r0, r2, r12);

     label60:
        goto label68;

     label61:
        r6 = (kotlinx.coroutines.Waiter) $r5;

     label62:
        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, r6, r1, i0);

     label63:
        goto label68;

     label64:
        r13 := @caughtexception;

        goto label76;

     label65:
        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>(r2);

     label66:
        goto label68;

     label67:
        virtualinvoke r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r14 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        r2 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r15);

        interfaceinvoke $r4.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>(r2);

     label68:
        r2 = virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if r2 != $r9 goto label69;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r3);

     label69:
        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if r2 != $r9 goto label70;

        return r2;

     label70:
        $r15 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r15;

     label71:
        r13 := @caughtexception;

        goto label76;

     label72:
        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label73:
        r13 := @caughtexception;

     label74:
        goto label76;

     label75:
        r13 := @caughtexception;

     label76:
        virtualinvoke $r5.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation$kotlinx_coroutines_core()>();

        throw r13;

        catch java.lang.Throwable from label01 to label02 with label75;
        catch java.lang.Throwable from label02 to label03 with label73;
        catch java.lang.Throwable from label04 to label05 with label71;
        catch java.lang.Throwable from label06 to label08 with label55;
        catch java.lang.Throwable from label09 to label10 with label55;
        catch java.lang.Throwable from label11 to label12 with label55;
        catch java.lang.Throwable from label13 to label14 with label55;
        catch java.lang.Throwable from label15 to label16 with label55;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label24 to label25 with label55;
        catch java.lang.Throwable from label26 to label27 with label64;
        catch java.lang.Throwable from label29 to label30 with label64;
        catch java.lang.Throwable from label31 to label32 with label64;
        catch java.lang.Throwable from label33 to label35 with label64;
        catch java.lang.Throwable from label36 to label37 with label64;
        catch java.lang.Throwable from label37 to label38 with label64;
        catch java.lang.Throwable from label39 to label40 with label64;
        catch java.lang.Throwable from label41 to label42 with label64;
        catch java.lang.Throwable from label43 to label44 with label64;
        catch java.lang.Throwable from label47 to label48 with label64;
        catch java.lang.Throwable from label50 to label51 with label64;
        catch java.lang.Throwable from label52 to label53 with label64;
        catch java.lang.Throwable from label56 to label57 with label64;
        catch java.lang.Throwable from label58 to label60 with label64;
        catch java.lang.Throwable from label61 to label62 with label64;
        catch java.lang.Throwable from label62 to label63 with label71;
        catch java.lang.Throwable from label65 to label66 with label71;
        catch java.lang.Throwable from label67 to label68 with label71;
        catch java.lang.Throwable from label72 to label73 with label71;
    }

    private final boolean shouldSendSuspend(long)
    {
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForSend0(long)>($l0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $l0 = $l0 & 1152921504606846975L;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean bufferOrRendezvousSend(long)>($l0);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    private final boolean tryResumeReceiver(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r15;
        kotlinx.coroutines.channels.ChannelResult$Companion $r9;
        kotlinx.coroutines.CancellableContinuationImpl $r7;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator $r13;
        kotlinx.coroutines.selects.SelectInstance $r4;
        java.lang.String $r17;
        boolean $z0;
        kotlinx.coroutines.channels.ChannelResult $r11;
        kotlin.jvm.functions.Function1 $r3, $r5;
        kotlin.coroutines.CoroutineContext $r12;
        kotlinx.coroutines.CancellableContinuation $r8, $r14;
        kotlinx.coroutines.channels.ReceiveCatching $r6;
        java.lang.Object $r1, $r2, $r10;
        java.lang.StringBuilder $r16;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.selects.SelectInstance;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.selects.SelectInstance) $r1;

        $z0 = interfaceinvoke $r4.<kotlinx.coroutines.selects.SelectInstance: boolean trySelect(java.lang.Object,java.lang.Object)>(r0, $r2);

        return $z0;

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.channels.ReceiveCatching;

        $r5 = null;

        if $z0 == 0 goto label3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.channels.ReceiveCatching<E of kotlinx.coroutines.channels.BufferedChannel>");

        $r6 = (kotlinx.coroutines.channels.ReceiveCatching) $r1;

        $r6 = (kotlinx.coroutines.channels.ReceiveCatching) $r1;

        $r7 = $r6.<kotlinx.coroutines.channels.ReceiveCatching: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r8 = (kotlinx.coroutines.CancellableContinuation) $r7;

        $r9 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r10 = virtualinvoke $r9.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r2);

        $r11 = staticinvoke <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult box-impl(java.lang.Object)>($r10);

        $r3 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r3 == null goto label2;

        $r6 = (kotlinx.coroutines.channels.ReceiveCatching) $r1;

        $r7 = $r6.<kotlinx.coroutines.channels.ReceiveCatching: kotlinx.coroutines.CancellableContinuationImpl cont>;

        $r12 = virtualinvoke $r7.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r3, $r2, $r12);

     label2:
        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: boolean access$tryResume0(kotlinx.coroutines.CancellableContinuation,java.lang.Object,kotlin.jvm.functions.Function1)>($r8, $r11, $r5);

        return $z0;

     label3:
        $z0 = $r1 instanceof kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        if $z0 == 0 goto label4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.channels.BufferedChannel.BufferedChannelIterator<E of kotlinx.coroutines.channels.BufferedChannel>");

        $r13 = (kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator) $r1;

        $r13 = (kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator) $r1;

        $z0 = virtualinvoke $r13.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: boolean tryResumeHasNext(java.lang.Object)>($r2);

        return $z0;

     label4:
        $z0 = $r1 instanceof kotlinx.coroutines.CancellableContinuation;

        if $z0 == 0 goto label6;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.CancellableContinuation<E of kotlinx.coroutines.channels.BufferedChannel>");

        $r8 = (kotlinx.coroutines.CancellableContinuation) $r1;

        $r8 = (kotlinx.coroutines.CancellableContinuation) $r1;

        $r3 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r3 == null goto label5;

        $r14 = (kotlinx.coroutines.CancellableContinuation) $r1;

        $r12 = interfaceinvoke $r14.<kotlinx.coroutines.CancellableContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r5 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r3, $r2, $r12);

     label5:
        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: boolean access$tryResume0(kotlinx.coroutines.CancellableContinuation,java.lang.Object,kotlin.jvm.functions.Function1)>($r8, $r2, $r5);

        return $z0;

     label6:
        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected receiver type: ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r15;
    }

    private final boolean tryResumeSender(java.lang.Object, kotlinx.coroutines.channels.ChannelSegment, int)
    {
        java.lang.IllegalStateException r10;
        kotlinx.coroutines.channels.ChannelSegment $r2;
        kotlin.Unit $r4;
        kotlinx.coroutines.CancellableContinuation r3;
        kotlinx.coroutines.selects.TrySelectDetailedResult $r6, $r7;
        int $i0;
        java.lang.Boolean $r9;
        java.lang.Object $r1;
        java.lang.StringBuilder $r11;
        kotlinx.coroutines.channels.BufferedChannel$SendBroadcast r8;
        java.lang.String $r12;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.selects.SelectImplementation r5;
        boolean z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter2: int;

        z0 = $r1 instanceof kotlinx.coroutines.CancellableContinuation;

        if z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.CancellableContinuation<kotlin.Unit>");

        r3 = (kotlinx.coroutines.CancellableContinuation) $r1;

        r3 = (kotlinx.coroutines.CancellableContinuation) $r1;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: boolean tryResume0$default(kotlinx.coroutines.CancellableContinuation,java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r3, $r4, null, 2, null);

        return z0;

     label1:
        z0 = $r1 instanceof kotlinx.coroutines.selects.SelectInstance;

        if z0 == 0 goto label4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.selects.SelectImplementation<*>");

        r5 = (kotlinx.coroutines.selects.SelectImplementation) $r1;

        r5 = (kotlinx.coroutines.selects.SelectImplementation) $r1;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke r5.<kotlinx.coroutines.selects.SelectImplementation: kotlinx.coroutines.selects.TrySelectDetailedResult trySelectDetailed(java.lang.Object,java.lang.Object)>(r0, $r4);

        $r7 = <kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult REREGISTER>;

        if $r6 != $r7 goto label2;

        virtualinvoke $r2.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

     label2:
        $r7 = <kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult SUCCESSFUL>;

        if $r6 != $r7 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        z0 = $r1 instanceof kotlinx.coroutines.channels.BufferedChannel$SendBroadcast;

        if z0 == 0 goto label5;

        r8 = (kotlinx.coroutines.channels.BufferedChannel$SendBroadcast) $r1;

        r3 = virtualinvoke r8.<kotlinx.coroutines.channels.BufferedChannel$SendBroadcast: kotlinx.coroutines.CancellableContinuation getCont()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: boolean tryResume0$default(kotlinx.coroutines.CancellableContinuation,java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r3, $r9, null, 2, null);

        return z0;

     label5:
        r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected waiter: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw r10;
    }

    private final void update$atomicfu(java.util.concurrent.atomic.AtomicLongFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        long $l0, $l1;
        java.lang.Long $r4;
        java.lang.Object $r3, $r5;
        kotlinx.coroutines.channels.BufferedChannel r0;
        java.lang.Number $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (java.lang.Number) $r5;

        $l1 = virtualinvoke $r6.<java.lang.Number: long longValue()>();

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>($r3, $l0, $l1);

        if $z0 == 0 goto label1;

        return;
    }

    private final boolean updateCellExpandBuffer(kotlinx.coroutines.channels.ChannelSegment, int, long)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1, $l3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        byte $b2;
        int $i0, $i4;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        $z0 = $r2 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label2;

        $r3 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $l3 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $b2 = $l1 cmp $l3;

        $i4 = (int) $b2;

        if $i4 < 0 goto label2;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r2, $r4);

        if $z0 == 0 goto label2;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean tryResumeSender(java.lang.Object,kotlinx.coroutines.channels.ChannelSegment,int)>($r2, $r1, $i0);

        if $z0 == 0 goto label1;

        $r4 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r4);

        return 1;

     label1:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r4);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>($i0, 0);

        return 0;

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean updateCellExpandBufferSlow(kotlinx.coroutines.channels.ChannelSegment,int,long)>($r1, $i0, $l1);

        return $z0;
    }

    private final boolean updateCellExpandBufferSlow(kotlinx.coroutines.channels.ChannelSegment, int, long)
    {
        java.lang.IllegalStateException $r10;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1, $l2;
        byte $b3;
        int $i0, $i4;
        java.lang.String $r7;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r5;
        kotlinx.coroutines.channels.WaiterEB $r8;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        kotlinx.coroutines.Waiter $r4;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r9;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

     label01:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        $z0 = $r2 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label04;

        $r3 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $b3 = $l1 cmp $l2;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label02;

        $r8 = new kotlinx.coroutines.channels.WaiterEB;

        $r4 = (kotlinx.coroutines.Waiter) $r2;

        specialinvoke $r8.<kotlinx.coroutines.channels.WaiterEB: void <init>(kotlinx.coroutines.Waiter)>($r4);

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r2, $r8);

        if $z0 == 0 goto label01;

        return 1;

     label02:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r2, $r5);

        if $z0 == 0 goto label01;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean tryResumeSender(java.lang.Object,kotlinx.coroutines.channels.ChannelSegment,int)>($r2, $r1, $i0);

        if $z0 == 0 goto label03;

        $r5 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r5);

        return 1;

     label03:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r5);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>($i0, 0);

        return 0;

     label04:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        if $r2 != $r5 goto label05;

        return 0;

     label05:
        if $r2 != null goto label06;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r2, $r5);

        if $z0 == 0 goto label01;

        return 1;

     label06:
        $r5 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        if $r2 != $r5 goto label07;

        return 1;

     label07:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        if $r2 == $r5 goto label11;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        if $r2 == $r5 goto label11;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        if $r2 != $r5 goto label08;

        return 1;

     label08:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r2 != $r5 goto label09;

        return 1;

     label09:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_RCV$p()>();

        if $r2 != $r5 goto label10;

        goto label01;

     label10:
        $r10 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected cell state: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label11:
        return 1;
    }

    private final java.lang.Object updateCellReceive(kotlinx.coroutines.channels.ChannelSegment, int, long, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r5;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1, $l2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4;
        byte $b3;
        int $i0, $i4;
        java.lang.Object $r2, $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r2 := @parameter3: java.lang.Object;

        $r3 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        if $r3 != null goto label2;

        $r4 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l2 = $l2 & 1152921504606846975L;

        $b3 = $l1 cmp $l2;

        $i4 = (int) $b3;

        if $i4 < 0 goto label3;

        if $r2 != null goto label1;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        return $r5;

     label1:
        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r3, $r2);

        if $z0 == 0 goto label3;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        return $r5;

     label2:
        $r5 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        if $r3 != $r5 goto label3;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r3, $r5);

        if $z0 == 0 goto label3;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object retrieveElement$kotlinx_coroutines_core(int)>($i0);

        return $r2;

     label3:
        $r2 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object updateCellReceiveSlow(kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r1, $i0, $l1, $r2);

        return $r2;
    }

    private final java.lang.Object updateCellReceiveSlow(kotlinx.coroutines.channels.ChannelSegment, int, long, java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        kotlinx.coroutines.channels.WaiterEB r5;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1, $l2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r6;
        byte $b3;
        int $i0, $i4;
        java.lang.Object $r2, $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0, z1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r2 := @parameter3: java.lang.Object;

     label01:
        $r3 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        if $r3 == null goto label11;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        if $r3 != $r4 goto label02;

        goto label11;

     label02:
        $r4 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        if $r3 != $r4 goto label03;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r3, $r4);

        if $z0 == 0 goto label01;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object retrieveElement$kotlinx_coroutines_core(int)>($i0);

        return $r2;

     label03:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        if $r3 != $r4 goto label04;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        return $r4;

     label04:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        if $r3 != $r4 goto label05;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        return $r4;

     label05:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r3 != $r4 goto label06;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        return $r4;

     label06:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        if $r3 == $r4 goto label01;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_RCV$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r3, $r4);

        if $z0 == 0 goto label01;

        $z0 = $r3 instanceof kotlinx.coroutines.channels.WaiterEB;

        z1 = $r3 instanceof kotlinx.coroutines.channels.WaiterEB;

        if z1 == 0 goto label07;

        r5 = (kotlinx.coroutines.channels.WaiterEB) $r3;

        $r2 = r5.<kotlinx.coroutines.channels.WaiterEB: kotlinx.coroutines.Waiter waiter>;

        goto label08;

     label07:
        $r2 = $r3;

     label08:
        z1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean tryResumeSender(java.lang.Object,kotlinx.coroutines.channels.ChannelSegment,int)>($r2, $r1, $i0);

        if z1 == 0 goto label09;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r4);

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object retrieveElement$kotlinx_coroutines_core(int)>($i0);

        return $r2;

     label09:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r4);

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>($i0, 0);

        if $z0 == 0 goto label10;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

     label10:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        return $r4;

     label11:
        r6 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l2 = virtualinvoke r6.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l2 = $l2 & 1152921504606846975L;

        $b3 = $l1 cmp $l2;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label12;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r3, $r4);

        if $z0 == 0 goto label01;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        return $r4;

     label12:
        if $r2 != null goto label13;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        return $r4;

     label13:
        $z0 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r3, $r2);

        if $z0 == 0 goto label01;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void expandBuffer()>();

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        return $r4;
    }

    private final int updateCellSend(kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, java.lang.Object, boolean)
    {
        kotlinx.coroutines.internal.Symbol $r5;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1;
        int $i0;
        java.lang.Object $r2, $r3, $r4;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.Object;

        $l1 := @parameter3: long;

        $r3 := @parameter4: java.lang.Object;

        $z0 := @parameter5: boolean;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void storeElement$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r2);

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: int updateCellSendSlow(kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>($r1, $i0, $r2, $l1, $r3, $z0);

        return $i0;

     label1:
        $r4 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        if $r4 != null goto label4;

        $z1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean bufferOrRendezvousSend(long)>($l1);

        if $z1 == 0 goto label2;

        $r5 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        $z1 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, null, $r5);

        if $z1 == 0 goto label7;

        return 1;

     label2:
        if $r3 != null goto label3;

        return 3;

     label3:
        $z1 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, null, $r3);

        if $z1 == 0 goto label7;

        return 2;

     label4:
        $z1 = $r4 instanceof kotlinx.coroutines.Waiter;

        if $z1 == 0 goto label7;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean tryResumeReceiver(java.lang.Object,java.lang.Object)>($r4, $r2);

        if $z0 == 0 goto label5;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r5);

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onReceiveDequeued()>();

        return 0;

     label5:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getAndSetState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r5);

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        if $r2 == $r5 goto label6;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>($i0, 1);

     label6:
        return 5;

     label7:
        $i0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: int updateCellSendSlow(kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>($r1, $i0, $r2, $l1, $r3, $z0);

        return $i0;
    }

    private final int updateCellSendSlow(kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, java.lang.Object, boolean)
    {
        kotlinx.coroutines.internal.Symbol $r5;
        kotlinx.coroutines.channels.WaiterEB $r7;
        kotlinx.coroutines.channels.ChannelSegment $r1;
        long $l1;
        java.lang.AssertionError $r6;
        int $i0;
        java.lang.Object $r2, $r3, $r4;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.Object;

        $l1 := @parameter3: long;

        $r3 := @parameter4: java.lang.Object;

        $z0 := @parameter5: boolean;

     label01:
        $r4 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        if $r4 != null goto label05;

        $z1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean bufferOrRendezvousSend(long)>($l1);

        if $z1 == 0 goto label02;

        if $z0 != 0 goto label02;

        $r5 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        $z1 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, null, $r5);

        if $z1 == 0 goto label01;

        return 1;

     label02:
        if $z0 == 0 goto label03;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        $z1 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, null, $r5);

        if $z1 == 0 goto label01;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>($i0, 0);

        return 4;

     label03:
        if $r3 != null goto label04;

        return 3;

     label04:
        $z1 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, null, $r3);

        if $z1 == 0 goto label01;

        return 2;

     label05:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        if $r4 != $r5 goto label06;

        $r5 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        $z1 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r4, $r5);

        if $z1 == 0 goto label01;

        return 1;

     label06:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        if $r4 != $r5 goto label07;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        return 5;

     label07:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        if $r4 != $r5 goto label08;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        return 5;

     label08:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r4 != $r5 goto label09;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void completeCloseOrCancel()>();

        return 4;

     label09:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label14;

        $z0 = $r4 instanceof kotlinx.coroutines.Waiter;

        if $z0 != 0 goto label11;

        $z0 = $r4 instanceof kotlinx.coroutines.channels.WaiterEB;

        if $z0 == 0 goto label10;

        goto label11;

     label10:
        $z0 = 0;

        goto label12;

     label11:
        $z0 = 1;

     label12:
        if $z0 == 0 goto label13;

        goto label14;

     label13:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label14:
        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        $z0 = $r4 instanceof kotlinx.coroutines.channels.WaiterEB;

        if $z0 == 0 goto label15;

        $r7 = (kotlinx.coroutines.channels.WaiterEB) $r4;

        $r3 = $r7.<kotlinx.coroutines.channels.WaiterEB: kotlinx.coroutines.Waiter waiter>;

        goto label16;

     label15:
        $r3 = $r4;

     label16:
        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean tryResumeReceiver(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z0 == 0 goto label17;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void setState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r5);

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onReceiveDequeued()>();

        return 0;

     label17:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getAndSetState$kotlinx_coroutines_core(int,java.lang.Object)>($i0, $r5);

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        if $r2 == $r5 goto label18;

        virtualinvoke $r1.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>($i0, 1);

     label18:
        return 5;
    }

    private final void updateReceiversCounterIfLower(long)
    {
        long $l0, $l1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1, $r2;
        byte $b2;
        int $i3;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

     label1:
        $l1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 < 0 goto label2;

        return;

     label2:
        $r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l1, $l0);

        if $z0 == 0 goto label3;

        return;

     label3:
        goto label1;
    }

    private final void updateSendersCounterIfLower(long)
    {
        long $l0, $l1, $l2, $l4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1, $r2;
        byte $b3;
        int $i5;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

     label1:
        $l1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l2 = $l1 & 1152921504606846975L;

        $b3 = $l2 cmp $l0;

        $i5 = (int) $b3;

        if $i5 < 0 goto label2;

        return;

     label2:
        $l4 = $l1 >> 60;

        $i5 = (int) $l4;

        $l2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructSendersAndCloseStatus(long,int)>($l2, $i5);

        $r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l1, $l2);

        if $z0 == 0 goto label3;

        return;

     label3:
        goto label1;
    }

    public final void cancel()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)>(null);

        return;
    }

    public final void cancel(java.util.concurrent.CancellationException)
    {
        java.lang.Throwable $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        java.util.concurrent.CancellationException $r1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)>($r2);

        return;
    }

    public final boolean cancel(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)>($r1);

        return $z0;
    }

    public boolean cancelImpl$kotlinx_coroutines_core(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        java.util.concurrent.CancellationException $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Throwable;

        if $r1 != null goto label1;

        $r2 = new java.util.concurrent.CancellationException;

        specialinvoke $r2.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Channel was cancelled");

        $r1 = (java.lang.Throwable) $r2;

        goto label1;

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean closeOrCancelImpl(java.lang.Throwable,boolean)>($r1, 1);

        return $z0;
    }

    public final void checkSegmentStructureInvariants()
    {
        java.lang.IllegalStateException $r16;
        java.lang.Object[] $r6;
        kotlinx.coroutines.channels.ChannelSegment $r3, $r11;
        long $l0, $l1;
        java.lang.Iterable $r8;
        java.util.ArrayList $r17;
        byte $b2;
        int i3, $i4, $i5;
        java.lang.String $r5;
        java.util.NoSuchElementException $r18;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol r14;
        java.util.Iterator $r10;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r13;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.util.Collection r9;
        java.util.List $r7;
        java.lang.Object $r2, $r12;
        java.lang.StringBuilder $r4, $r15;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isRendezvousOrUnlimited()>();

        if $z0 == 0 goto label04;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.channels.ChannelSegment access$getNULL_SEGMENT$p()>();

        if $r2 != $r3 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label07;

     label03:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bufferEndSegment must be NULL_SEGMENT for rendezvous and unlimited channels; they do not manipulate it.\nChannel state: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label04:
        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $l0 = $r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $l1 = $r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b2 = $l0 cmp $l1;

        i3 = (int) $b2;

        if i3 > 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label47;

     label07:
        $r6 = newarray (kotlinx.coroutines.channels.ChannelSegment)[3];

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r6[0] = $r2;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r6[1] = $r2;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r6[2] = $r2;

        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r6);

        $r8 = (java.lang.Iterable) $r7;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r9 = (java.util.Collection) $r17;

        $r10 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r2 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.channels.ChannelSegment access$getNULL_SEGMENT$p()>();

        if $r3 == $r11 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        if $z0 == 0 goto label08;

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        goto label08;

     label11:
        $r7 = (java.util.List) r9;

        $r8 = (java.lang.Iterable) $r7;

        $r10 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label46;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r2 = $r12;

        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label12;

        goto label15;

     label12:
        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r12;

        $l0 = $r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

     label13:
        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r12;

        $l1 = $r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b2 = $l0 cmp $l1;

        i3 = (int) $b2;

        if i3 <= 0 goto label14;

        $r2 = $r12;

        $l0 = $l1;

     label14:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label13;

     label15:
        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $r13 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

        if $r13 != null goto label16;

        $z0 = 1;

        goto label17;

     label16:
        $z0 = 0;

     label17:
        if $z0 == 0 goto label45;

     label18:
        $r13 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        if $r13 == null goto label48;

        $r13 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        $r11 = (kotlinx.coroutines.channels.ChannelSegment) $r13;

        $r13 = virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

        if $r13 == null goto label20;

        $r13 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        $r11 = (kotlinx.coroutines.channels.ChannelSegment) $r13;

        $r13 = virtualinvoke $r11.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

        if $r13 != $r3 goto label19;

        goto label20;

     label19:
        $z0 = 0;

        goto label21;

     label20:
        $z0 = 1;

     label21:
        if $z0 == 0 goto label44;

        i3 = 0;

        $i4 = 0;

        $i5 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label22:
        if $i4 >= $i5 goto label38;

        $r2 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i4);

        r14 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r14);

        if $z0 != 0 goto label37;

        $z0 = $r2 instanceof kotlinx.coroutines.Waiter;

        if $z0 != 0 goto label37;

        r14 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r14);

        if $z0 == 0 goto label23;

        $z0 = 1;

        goto label24;

     label23:
        r14 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r14);

     label24:
        if $z0 == 0 goto label25;

        $z0 = 1;

        goto label26;

     label25:
        r14 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r14);

     label26:
        $r5 = "Check failed.";

        if $z0 == 0 goto label30;

        $r2 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>($i4);

        if $r2 != null goto label27;

        $z0 = 1;

        goto label28;

     label27:
        $z0 = 0;

     label28:
        if $z0 == 0 goto label29;

        i3 = i3 + 1;

        goto label37;

     label29:
        $r16 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label30:
        r14 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r14);

        if $z0 == 0 goto label31;

        $z0 = 1;

        goto label32;

     label31:
        r14 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, r14);

     label32:
        if $z0 == 0 goto label36;

        $r2 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>($i4);

        if $r2 != null goto label33;

        $z0 = 1;

        goto label34;

     label33:
        $z0 = 0;

     label34:
        if $z0 == 0 goto label35;

        goto label37;

     label35:
        $r16 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label36:
        $r16 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected segment cell state: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\nChannel state: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label37:
        $i4 = $i4 + 1;

        goto label22;

     label38:
        $i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        if i3 != $i4 goto label43;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r3 == $r2 goto label40;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r3 == $r2 goto label40;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        if $r3 != $r2 goto label39;

        goto label40;

     label39:
        $z0 = 0;

        goto label41;

     label40:
        $z0 = 1;

     label41:
        if $z0 == 0 goto label42;

        goto label43;

     label42:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logically removed segment is reachable.\nChannel state: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label43:
        $r13 = virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13);

        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r13;

        goto label18;

     label44:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The `segment.next.prev === segment` invariant is violated.\nChannel state: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label45:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All processed segments should be unreachable from the data structure, but the `prev` link of the leftmost segment is non-null.\nChannel state: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label46:
        $r18 = new java.util.NoSuchElementException;

        specialinvoke $r18.<java.util.NoSuchElementException: void <init>()>();

        throw $r18;

     label47:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bufferEndSegment should not have lower id than receiveSegment.\nChannel state: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label48:
        return;
    }

    public boolean close(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean closeOrCancelImpl(java.lang.Throwable,boolean)>($r1, 0);

        return $z0;
    }

    protected boolean closeOrCancelImpl(java.lang.Throwable, boolean)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.internal.Symbol $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void markCancellationStarted()>();

     label1:
        r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _closeCause$FU>;

        $r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getNO_CLOSE_CAUSE$p()>();

        $z1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, $r3, $r1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void markCancelled()>();

        goto label3;

     label2:
        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void markClosed()>();

     label3:
        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void completeCloseOrCancel()>();

        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedIdempotent()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void invokeCloseHandler()>();

     label4:
        return $z1;
    }

    protected final void dropFirstElementUntilTheSpecifiedCellIsInTheBuffer(long)
    {
        kotlinx.coroutines.internal.UndeliveredElementException $r8;
        kotlinx.coroutines.channels.ChannelSegment $r3, $r5;
        long $l0, $l1, $l3, $l4;
        java.lang.AssertionError $r9;
        byte $b5;
        int i2;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r4;
        kotlin.jvm.functions.Function1 r7;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isConflatedDropOldest()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label2:
        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

     label3:
        r4 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $l3 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        i2 = r0.<kotlinx.coroutines.channels.BufferedChannel: int capacity>;

        $l1 = (long) i2;

        $l1 = $l1 + $l3;

        $l4 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l4);

        $b5 = $l0 cmp $l1;

        i2 = (int) $b5;

        if i2 >= 0 goto label4;

        return;

     label4:
        r4 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $l1 = $l3 + 1L;

        $z0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l3, $l1);

        if $z0 == 0 goto label3;

        i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l1 = (long) i2;

        $l1 = $l3 / $l1;

        i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) i2;

        $l4 = $l3 % $l4;

        i2 = (int) $l4;

        $l4 = $r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b5 = $l4 cmp $l1;

        if $b5 == 0 goto label6;

        $r5 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment findSegmentReceive(long,kotlinx.coroutines.channels.ChannelSegment)>($l1, $r3);

        if $r5 != null goto label5;

        goto label3;

     label5:
        $r3 = $r5;

     label6:
        $r2 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Object updateCellReceive(kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>($r3, i2, $l3, null);

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r2 != $r6 goto label7;

        $l1 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b5 = $l3 cmp $l1;

        i2 = (int) $b5;

        if i2 >= 0 goto label3;

        virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        goto label3;

     label7:
        virtualinvoke $r3.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r7 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if r7 == null goto label3;

        $r8 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException$default(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException,int,java.lang.Object)>(r7, $r2, null, 2, null);

        if $r8 != null goto label8;

        goto label3;

     label8:
        throw $r8;
    }

    protected final java.lang.Throwable getCloseCause()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _closeCause$FU>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Throwable) $r1;

        return $r3;
    }

    public kotlinx.coroutines.selects.SelectClause1 getOnReceive()
    {
        kotlinx.coroutines.channels.BufferedChannel$onReceive$2 $r5;
        kotlin.jvm.functions.Function3 $r4, $r6, $r7;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.channels.BufferedChannel$onReceive$1 $r2;
        kotlinx.coroutines.selects.SelectClause1Impl $r1;
        kotlinx.coroutines.selects.SelectClause1 $r8;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = new kotlinx.coroutines.selects.SelectClause1Impl;

        $r2 = <kotlinx.coroutines.channels.BufferedChannel$onReceive$1: kotlinx.coroutines.channels.BufferedChannel$onReceive$1 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'select\')] kotlinx.coroutines.selects.SelectInstance<*>, @[ParameterName(name = \'param\')] kotlin.Any?, kotlin.Unit>{ kotlinx.coroutines.selects.SelectKt.RegistrationFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r2, 3);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r5 = <kotlinx.coroutines.channels.BufferedChannel$onReceive$2: kotlinx.coroutines.channels.BufferedChannel$onReceive$2 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'param\')] kotlin.Any?, @[ParameterName(name = \'clauseResult\')] kotlin.Any?, kotlin.Any?>{ kotlinx.coroutines.selects.SelectKt.ProcessResultFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r5, 3);

        $r6 = (kotlin.jvm.functions.Function3) $r3;

        $r7 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function3 onUndeliveredElementReceiveCancellationConstructor>;

        specialinvoke $r1.<kotlinx.coroutines.selects.SelectClause1Impl: void <init>(java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3)>(r0, $r4, $r6, $r7);

        $r8 = (kotlinx.coroutines.selects.SelectClause1) $r1;

        return $r8;
    }

    public kotlinx.coroutines.selects.SelectClause1 getOnReceiveCatching()
    {
        kotlin.jvm.functions.Function3 $r4, $r6, $r7;
        kotlinx.coroutines.channels.BufferedChannel$onReceiveCatching$1 $r2;
        kotlinx.coroutines.channels.BufferedChannel$onReceiveCatching$2 $r5;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.selects.SelectClause1Impl $r1;
        kotlinx.coroutines.selects.SelectClause1 $r8;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = new kotlinx.coroutines.selects.SelectClause1Impl;

        $r2 = <kotlinx.coroutines.channels.BufferedChannel$onReceiveCatching$1: kotlinx.coroutines.channels.BufferedChannel$onReceiveCatching$1 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'select\')] kotlinx.coroutines.selects.SelectInstance<*>, @[ParameterName(name = \'param\')] kotlin.Any?, kotlin.Unit>{ kotlinx.coroutines.selects.SelectKt.RegistrationFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r2, 3);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r5 = <kotlinx.coroutines.channels.BufferedChannel$onReceiveCatching$2: kotlinx.coroutines.channels.BufferedChannel$onReceiveCatching$2 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'param\')] kotlin.Any?, @[ParameterName(name = \'clauseResult\')] kotlin.Any?, kotlin.Any?>{ kotlinx.coroutines.selects.SelectKt.ProcessResultFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r5, 3);

        $r6 = (kotlin.jvm.functions.Function3) $r3;

        $r7 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function3 onUndeliveredElementReceiveCancellationConstructor>;

        specialinvoke $r1.<kotlinx.coroutines.selects.SelectClause1Impl: void <init>(java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3)>(r0, $r4, $r6, $r7);

        $r8 = (kotlinx.coroutines.selects.SelectClause1) $r1;

        return $r8;
    }

    public kotlinx.coroutines.selects.SelectClause1 getOnReceiveOrNull()
    {
        kotlin.jvm.functions.Function3 $r4, $r6, $r7;
        kotlinx.coroutines.channels.BufferedChannel$onReceiveOrNull$2 $r5;
        kotlinx.coroutines.channels.BufferedChannel$onReceiveOrNull$1 $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.selects.SelectClause1Impl $r1;
        kotlinx.coroutines.selects.SelectClause1 $r8;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = new kotlinx.coroutines.selects.SelectClause1Impl;

        $r2 = <kotlinx.coroutines.channels.BufferedChannel$onReceiveOrNull$1: kotlinx.coroutines.channels.BufferedChannel$onReceiveOrNull$1 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'select\')] kotlinx.coroutines.selects.SelectInstance<*>, @[ParameterName(name = \'param\')] kotlin.Any?, kotlin.Unit>{ kotlinx.coroutines.selects.SelectKt.RegistrationFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r2, 3);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r5 = <kotlinx.coroutines.channels.BufferedChannel$onReceiveOrNull$2: kotlinx.coroutines.channels.BufferedChannel$onReceiveOrNull$2 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'param\')] kotlin.Any?, @[ParameterName(name = \'clauseResult\')] kotlin.Any?, kotlin.Any?>{ kotlinx.coroutines.selects.SelectKt.ProcessResultFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r5, 3);

        $r6 = (kotlin.jvm.functions.Function3) $r3;

        $r7 = r0.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function3 onUndeliveredElementReceiveCancellationConstructor>;

        specialinvoke $r1.<kotlinx.coroutines.selects.SelectClause1Impl: void <init>(java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3)>(r0, $r4, $r6, $r7);

        $r8 = (kotlinx.coroutines.selects.SelectClause1) $r1;

        return $r8;
    }

    public kotlinx.coroutines.selects.SelectClause2 getOnSend()
    {
        kotlin.jvm.functions.Function3 $r4, $r6;
        kotlinx.coroutines.selects.SelectClause2Impl $r1;
        kotlinx.coroutines.channels.BufferedChannel$onSend$1 $r2;
        kotlinx.coroutines.selects.SelectClause2 $r7;
        kotlinx.coroutines.channels.BufferedChannel$onSend$2 $r5;
        java.lang.Object $r3;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = new kotlinx.coroutines.selects.SelectClause2Impl;

        $r2 = <kotlinx.coroutines.channels.BufferedChannel$onSend$1: kotlinx.coroutines.channels.BufferedChannel$onSend$1 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'select\')] kotlinx.coroutines.selects.SelectInstance<*>, @[ParameterName(name = \'param\')] kotlin.Any?, kotlin.Unit>{ kotlinx.coroutines.selects.SelectKt.RegistrationFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r2, 3);

        $r4 = (kotlin.jvm.functions.Function3) $r3;

        $r5 = <kotlinx.coroutines.channels.BufferedChannel$onSend$2: kotlinx.coroutines.channels.BufferedChannel$onSend$2 INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Function3<@[ParameterName(name = \'clauseObject\')] kotlin.Any, @[ParameterName(name = \'param\')] kotlin.Any?, @[ParameterName(name = \'clauseResult\')] kotlin.Any?, kotlin.Any?>{ kotlinx.coroutines.selects.SelectKt.ProcessResultFunction }");

        $r3 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>($r5, 3);

        $r6 = (kotlin.jvm.functions.Function3) $r3;

        specialinvoke $r1.<kotlinx.coroutines.selects.SelectClause2Impl: void <init>(java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r0, $r4, $r6, null, 8, null);

        $r7 = (kotlinx.coroutines.selects.SelectClause2) $r1;

        return $r7;
    }

    public final long getReceiversCounter$kotlinx_coroutines_core()
    {
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        return $l0;
    }

    protected final java.lang.Throwable getSendException()
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.channels.ClosedSendChannelException $r2;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        if $r1 != null goto label1;

        $r2 = new kotlinx.coroutines.channels.ClosedSendChannelException;

        specialinvoke $r2.<kotlinx.coroutines.channels.ClosedSendChannelException: void <init>(java.lang.String)>("Channel was closed");

        $r1 = (java.lang.Throwable) $r2;

     label1:
        return $r1;
    }

    public final long getSendersCounter$kotlinx_coroutines_core()
    {
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l0 = $l0 & 1152921504606846975L;

        return $l0;
    }

    public final boolean hasElements$kotlinx_coroutines_core()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        kotlinx.coroutines.channels.ChannelSegment r3;
        long $l0, $l2, $l4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4;
        byte $b3;
        int i1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

     label1:
        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b3 = $l0 cmp $l2;

        i1 = (int) $b3;

        if i1 > 0 goto label2;

        return 0;

     label2:
        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l0 = (long) i1;

        $l0 = $l2 / $l0;

        $l4 = r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b3 = $l4 cmp $l0;

        if $b3 == 0 goto label3;

        r3 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment findSegmentReceive(long,kotlinx.coroutines.channels.ChannelSegment)>($l0, r3);

        if r3 != null goto label3;

        r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (kotlinx.coroutines.channels.ChannelSegment) $r2;

        $l2 = r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b3 = $l2 cmp $l0;

        i1 = (int) $b3;

        if i1 >= 0 goto label1;

        return 0;

     label3:
        virtualinvoke r3.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l0 = (long) i1;

        $l0 = $l2 % $l0;

        i1 = (int) $l0;

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isCellNonEmpty(kotlinx.coroutines.channels.ChannelSegment,int,long)>(r3, i1, $l2);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $r4 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $l0 = $l2 + 1L;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l2, $l0);

        goto label1;
    }

    public void invokeOnClose(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol $r4, $r6;
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r8;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2, $r5;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r10;
        java.lang.String $r9;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater closeHandler$FU>;

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, null, $r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater closeHandler$FU>;

     label2:
        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getCLOSE_HANDLER_CLOSED$p()>();

        if $r3 != $r4 goto label4;

        $r5 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater closeHandler$FU>;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getCLOSE_HANDLER_CLOSED$p()>();

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getCLOSE_HANDLER_INVOKED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, r0, $r4, $r6);

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r7);

        return;

     label3:
        goto label2;

     label4:
        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getCLOSE_HANDLER_INVOKED$p()>();

        if $r3 != $r4 goto label5;

        $r8 = new java.lang.IllegalStateException;

        $r9 = "Another handler was already registered and successfully invoked";

        $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        $r8 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Another handler is already registered: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public boolean isClosedForReceive()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive0(long)>($l0);

        return $z0;
    }

    public boolean isClosedForSend()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForSend0(long)>($l0);

        return $z0;
    }

    protected boolean isConflatedDropOldest()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        return 0;
    }

    public boolean isEmpty()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean hasElements$kotlinx_coroutines_core()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public kotlinx.coroutines.channels.ChannelIterator iterator()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;
        kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator $r1;
        kotlinx.coroutines.channels.ChannelIterator $r2;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = new kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator;

        specialinvoke $r1.<kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator: void <init>(kotlinx.coroutines.channels.BufferedChannel)>(r0);

        $r2 = (kotlinx.coroutines.channels.ChannelIterator) $r1;

        return $r2;
    }

    public boolean offer(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <kotlinx.coroutines.channels.Channel$DefaultImpls: boolean offer(kotlinx.coroutines.channels.Channel,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    protected void onClosedIdempotent()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        return;
    }

    protected void onReceiveDequeued()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        return;
    }

    protected void onReceiveEnqueued()
    {
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        return;
    }

    public java.lang.Object poll()
    {
        java.lang.Object $r1;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = staticinvoke <kotlinx.coroutines.channels.Channel$DefaultImpls: java.lang.Object poll(kotlinx.coroutines.channels.Channel)>(r0);

        return $r1;
    }

    public java.lang.Object receive(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receive$suspendImpl(kotlinx.coroutines.channels.BufferedChannel,kotlin.coroutines.Continuation)>(r0, $r1);

        return $r2;
    }

    public java.lang.Object receiveCatching-JP2dKIU(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveCatching-JP2dKIU$suspendImpl(kotlinx.coroutines.channels.BufferedChannel,kotlin.coroutines.Continuation)>(r0, $r1);

        return $r2;
    }

    public java.lang.Object receiveOrNull(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.channels.Channel$DefaultImpls: java.lang.Object receiveOrNull(kotlinx.coroutines.channels.Channel,kotlin.coroutines.Continuation)>(r0, $r1);

        return $r2;
    }

    protected void registerSelectForSend(kotlinx.coroutines.selects.SelectInstance, java.lang.Object)
    {
        java.lang.IllegalStateException $r11;
        kotlinx.coroutines.channels.ChannelSegment r3, $r7;
        long $l0, $l1, $l3;
        kotlinx.coroutines.selects.SelectInstance $r1;
        byte b4;
        int $i2, $i5;
        java.lang.String $r8;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r6;
        kotlinx.coroutines.Waiter r9;
        kotlin.Unit $r10;
        java.lang.Object $r2, $r5;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectInstance;

        $r2 := @parameter1: java.lang.Object;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (kotlinx.coroutines.channels.ChannelSegment) $r5;

     label01:
        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $l1 = $l0 & 1152921504606846975L;

        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>(r0, $l0);

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l0 = (long) $i2;

        $l0 = $l1 / $l0;

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) $i2;

        $l3 = $l1 % $l3;

        $i2 = (int) $l3;

        $l3 = r3.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        b4 = $l3 cmp $l0;

        if b4 == 0 goto label03;

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l0, r3);

        if $r7 != null goto label02;

        if $z0 == 0 goto label01;

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedSelectOnSend(java.lang.Object,kotlinx.coroutines.selects.SelectInstance)>($r2, $r1);

        return;

     label02:
        goto label04;

     label03:
        $r7 = r3;

     label04:
        r3 = $r7;

        $i5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>(r0, $r7, $i2, $r2, $l1, $r1, $z0);

        lookupswitch($i5)
        {
            case 0: goto label16;
            case 1: goto label15;
            case 2: goto label10;
            case 3: goto label09;
            case 4: goto label07;
            case 5: goto label06;
            default: goto label05;
        };

     label05:
        r3 = $r7;

        goto label17;

     label06:
        virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r3 = $r7;

        goto label17;

     label07:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        b4 = $l1 cmp $l0;

        $i2 = (int) b4;

        if $i2 >= 0 goto label08;

        virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label08:
        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedSelectOnSend(java.lang.Object,kotlinx.coroutines.selects.SelectInstance)>($r2, $r1);

        return;

     label09:
        $r11 = new java.lang.IllegalStateException;

        $r8 = "unexpected";

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r11;

     label10:
        if $z0 == 0 goto label11;

        virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void onClosedSelectOnSend(java.lang.Object,kotlinx.coroutines.selects.SelectInstance)>($r2, $r1);

        return;

     label11:
        $z0 = $r1 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label12;

        r9 = (kotlinx.coroutines.Waiter) $r1;

        goto label13;

     label12:
        r9 = null;

     label13:
        if r9 == null goto label14;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, r9, r3, $i2);

        goto label14;

     label14:
        return;

     label15:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r10);

        return;

     label16:
        virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectInstance: void selectInRegistrationPhase(java.lang.Object)>($r10);

        return;

     label17:
        goto label01;
    }

    public java.lang.Object send(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object send$suspendImpl(kotlinx.coroutines.channels.BufferedChannel,java.lang.Object,kotlin.coroutines.Continuation)>(r0, $r1, $r2);

        return $r1;
    }

    public java.lang.Object sendBroadcast$kotlinx_coroutines_core(java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Object $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendBroadcast$suspendImpl(kotlinx.coroutines.channels.BufferedChannel,java.lang.Object,kotlin.coroutines.Continuation)>(r0, $r1, $r2);

        return $r1;
    }

    protected final java.lang.Object sendImpl(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function4)
    {
        kotlinx.coroutines.channels.ChannelSegment r9, $r11;
        long $l0, $l1, $l3;
        java.lang.Integer $r12;
        byte $b4;
        java.lang.Long $r13;
        int $i2, $i5;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r7;
        kotlin.jvm.functions.Function4 $r6;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r10;
        kotlin.jvm.functions.Function2 $r4;
        kotlin.jvm.functions.Function0 $r3, $r5;
        kotlinx.coroutines.Waiter r14;
        java.lang.Object $r1, $r2, $r8;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function0;

        $r4 := @parameter3: kotlin.jvm.functions.Function2;

        $r5 := @parameter4: kotlin.jvm.functions.Function0;

        $r6 := @parameter5: kotlin.jvm.functions.Function4;

        $r7 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r9 = (kotlinx.coroutines.channels.ChannelSegment) $r8;

     label01:
        $r10 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $l1 = $l0 & 1152921504606846975L;

        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>(r0, $l0);

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l0 = (long) $i2;

        $l0 = $l1 / $l0;

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) $i2;

        $l3 = $l1 % $l3;

        $i2 = (int) $l3;

        $l3 = r9.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = $l3 cmp $l0;

        if $b4 == 0 goto label03;

        $r11 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l0, r9);

        if $r11 != null goto label02;

        if $z0 == 0 goto label01;

        $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label02:
        r9 = $r11;

        goto label03;

     label03:
        $i5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>(r0, r9, $i2, $r1, $l1, $r2, $z0);

        lookupswitch($i5)
        {
            case 0: goto label16;
            case 1: goto label15;
            case 2: goto label09;
            case 3: goto label08;
            case 4: goto label06;
            case 5: goto label05;
            default: goto label04;
        };

     label04:
        goto label17;

     label05:
        virtualinvoke r9.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        goto label17;

     label06:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b4 = $l1 cmp $l0;

        $i2 = (int) $b4;

        if $i2 >= 0 goto label07;

        virtualinvoke r9.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label07:
        $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label08:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1 = interfaceinvoke $r6.<kotlin.jvm.functions.Function4: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r9, $r12, $r1, $r13);

        return $r1;

     label09:
        $r11 = r9;

        if $z0 == 0 goto label10;

        virtualinvoke r9.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label10:
        $z0 = $r2 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label11;

        r14 = (kotlinx.coroutines.Waiter) $r2;

        goto label12;

     label11:
        r14 = null;

     label12:
        if r14 == null goto label13;

        $i5 = $i2;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, r14, $r11, $i2);

        goto label14;

     label13:
        $i5 = $i2;

     label14:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1 = interfaceinvoke $r4.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r11, $r12);

        return $r1;

     label15:
        $r1 = interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label16:
        virtualinvoke r9.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r1 = interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r1;

     label17:
        goto label01;
    }

    public boolean shouldSendSuspend$kotlinx_coroutines_core()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean shouldSendSuspend(long)>($l0);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r5;
        kotlinx.coroutines.channels.ChannelSegment r12, $r13;
        long $l0, l2, l5, $l7;
        java.lang.Iterable $r9;
        java.util.ArrayList $r19;
        byte $b3;
        int $i1, i4, $i6;
        java.lang.String $r4;
        java.util.NoSuchElementException $r20;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r15;
        java.util.Iterator $r11;
        java.lang.CharSequence $r17;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r16;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        java.util.Collection r10;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r2;
        char $c8;
        java.util.List $r8;
        java.lang.StringBuilder r1, $r3, $r18;
        java.lang.Object $r7, $r14;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r3 = new java.lang.StringBuilder;

        r1 = $r3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l0 = $l0 >> 60;

        $i1 = (int) $l0;

        lookupswitch($i1)
        {
            case 2: goto label03;
            case 3: goto label02;
            default: goto label01;
        };

     label01:
        goto label04;

     label02:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cancelled,");

        goto label04;

     label03:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closed,");

     label04:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity=");

        $i1 = r0.<kotlinx.coroutines.channels.BufferedChannel: int capacity>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data=[");

        $r5 = newarray (kotlinx.coroutines.channels.ChannelSegment)[3];

        $r6 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r5[0] = $r7;

        $r6 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r5[1] = $r7;

        $r6 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r5[2] = $r7;

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r5);

        $r9 = (java.lang.Iterable) $r8;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r10 = (java.util.Collection) $r19;

        $r11 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r7 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r7;

        $r13 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.channels.ChannelSegment access$getNULL_SEGMENT$p()>();

        if r12 == $r13 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        if $z0 == 0 goto label05;

        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label05;

     label08:
        $r8 = (java.util.List) r10;

        $r9 = (java.lang.Iterable) $r8;

        $r11 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label48;

        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r7 = $r14;

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label09;

        goto label12;

     label09:
        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r14;

        $l0 = r12.<kotlinx.coroutines.channels.ChannelSegment: long id>;

     label10:
        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r14;

        l2 = r12.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b3 = $l0 cmp l2;

        $i1 = (int) $b3;

        if $i1 <= 0 goto label11;

        $r7 = $r14;

        $l0 = l2;

     label11:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label47;

     label12:
        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        l2 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r7;

     label13:
        $i1 = 0;

        i4 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

     label14:
        if $i1 >= i4 goto label43;

        l5 = r12.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i6 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l7 = (long) $i6;

        l5 = l5 * $l7;

        $l7 = (long) $i1;

        l5 = l5 + $l7;

        $b3 = l5 cmp l2;

        $i6 = (int) $b3;

        if $i6 < 0 goto label15;

        $b3 = l5 cmp $l0;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label44;

     label15:
        $r7 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i1);

        $r14 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>($i1);

        $z0 = $r7 instanceof kotlinx.coroutines.CancellableContinuation;

        if $z0 == 0 goto label18;

        $b3 = l5 cmp $l0;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label16;

        $b3 = l5 cmp l2;

        $i6 = (int) $b3;

        if $i6 < 0 goto label16;

        $r4 = "receive";

        goto label40;

     label16:
        $b3 = l5 cmp l2;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label17;

        $b3 = l5 cmp $l0;

        $i6 = (int) $b3;

        if $i6 < 0 goto label17;

        $r4 = "send";

        goto label40;

     label17:
        $r4 = "cont";

        goto label40;

     label18:
        $z0 = $r7 instanceof kotlinx.coroutines.selects.SelectInstance;

        if $z0 == 0 goto label21;

        $b3 = l5 cmp $l0;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label19;

        $b3 = l5 cmp l2;

        $i6 = (int) $b3;

        if $i6 < 0 goto label19;

        $r4 = "onReceive";

        goto label40;

     label19:
        $b3 = l5 cmp l2;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label20;

        $b3 = l5 cmp $l0;

        $i6 = (int) $b3;

        if $i6 < 0 goto label20;

        $r4 = "onSend";

        goto label40;

     label20:
        $r4 = "select";

        goto label40;

     label21:
        $z0 = $r7 instanceof kotlinx.coroutines.channels.ReceiveCatching;

        if $z0 == 0 goto label22;

        $r4 = "receiveCatching";

        goto label40;

     label22:
        $z0 = $r7 instanceof kotlinx.coroutines.channels.BufferedChannel$SendBroadcast;

        if $z0 == 0 goto label23;

        $r4 = "sendBroadcast";

        goto label40;

     label23:
        $z0 = $r7 instanceof kotlinx.coroutines.channels.WaiterEB;

        if $z0 == 0 goto label24;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EB(");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label40;

     label24:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_RCV$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

        if $z0 == 0 goto label25;

        $z0 = 1;

        goto label26;

     label25:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

     label26:
        if $z0 == 0 goto label27;

        $r4 = "resuming_sender";

        goto label40;

     label27:
        if $r7 != null goto label28;

        $z0 = 1;

        goto label29;

     label28:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getIN_BUFFER$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

     label29:
        if $z0 == 0 goto label30;

        $z0 = 1;

        goto label31;

     label30:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

     label31:
        if $z0 == 0 goto label32;

        $z0 = 1;

        goto label33;

     label32:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getPOISONED$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

     label33:
        if $z0 == 0 goto label34;

        $z0 = 1;

        goto label35;

     label34:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

     label35:
        if $z0 == 0 goto label36;

        $z0 = 1;

        goto label37;

     label36:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

     label37:
        if $z0 == 0 goto label38;

        $z0 = 1;

        goto label39;

     label38:
        $r15 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r15);

     label39:
        if $z0 != 0 goto label42;

        $r4 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

     label40:
        if $r14 == null goto label41;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("),");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label42;

     label41:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label42:
        $i1 = $i1 + 1;

        goto label14;

     label43:
        $r16 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r16;

        if r12 != null goto label46;

     label44:
        $r17 = (java.lang.CharSequence) r1;

        $c8 = staticinvoke <kotlin.text.StringsKt: char last(java.lang.CharSequence)>($r17);

        $i1 = (int) $c8;

        if $i1 != 44 goto label45;

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i1 = $i1 - 1;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this.deleteCharAt(index)");

     label45:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label46:
        goto label13;

     label47:
        goto label10;

     label48:
        $r20 = new java.util.NoSuchElementException;

        specialinvoke $r20.<java.util.NoSuchElementException: void <init>()>();

        throw $r20;
    }

    public final java.lang.String toStringDebug$kotlinx_coroutines_core()
    {
        java.lang.Object[] $r7;
        kotlinx.coroutines.channels.ChannelSegment r12, $r13;
        long $l0, l2;
        java.lang.Iterable $r9;
        java.util.ArrayList $r18;
        byte $b3;
        int $i1, i4, $i5;
        java.lang.String $r4, $r16;
        java.util.NoSuchElementException $r19;
        boolean $z0;
        java.util.Iterator $r11;
        kotlinx.coroutines.internal.ConcurrentLinkedListNode $r15;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5;
        java.util.Collection r10;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        java.util.List $r8;
        java.lang.StringBuilder r1, $r2, $r17;
        java.lang.Object $r6, $r14;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r2 = new java.lang.StringBuilder;

        r1 = $r2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("S=");

        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",R=");

        $l0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",B=");

        $l0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",B\'=");

        $r3 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",C=");

        $r3 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l0 = $l0 >> 60;

        $i1 = (int) $l0;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l0 = $l0 >> 60;

        $i1 = (int) $l0;

        lookupswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label03;
            case 3: goto label02;
            default: goto label01;
        };

     label01:
        goto label05;

     label02:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLED,");

        goto label05;

     label03:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLOSED,");

        goto label05;

     label04:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLATION_STARTED,");

     label05:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SEND_SEGM=");

        $r5 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r6);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",RCV_SEGM=");

        $r5 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r6);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isRendezvousOrUnlimited()>();

        if $z0 != 0 goto label06;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",EB_SEGM=");

        $r5 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r6);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label06:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r7 = newarray (kotlinx.coroutines.channels.ChannelSegment)[3];

        $r5 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater receiveSegment$FU>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r7[0] = $r6;

        $r5 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater sendSegment$FU>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r7[1] = $r6;

        $r5 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufferEndSegment$FU>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r7[2] = $r6;

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r7);

        $r9 = (java.lang.Iterable) $r8;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r10 = (java.util.Collection) $r18;

        $r11 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r6;

        $r13 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.channels.ChannelSegment access$getNULL_SEGMENT$p()>();

        if r12 == $r13 goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        if $z0 == 0 goto label07;

        interfaceinvoke r10.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        goto label07;

     label10:
        $r8 = (java.util.List) r10;

        $r9 = (java.lang.Iterable) $r8;

        $r11 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label30;

        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r6 = $r14;

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label11;

        goto label14;

     label11:
        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r14;

        $l0 = r12.<kotlinx.coroutines.channels.ChannelSegment: long id>;

     label12:
        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r14;

        l2 = r12.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b3 = $l0 cmp l2;

        $i1 = (int) $b3;

        if $i1 <= 0 goto label13;

        $r6 = $r14;

        $l0 = l2;

     label13:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label12;

     label14:
        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r6;

     label15:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r12);

        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=[");

        $z0 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: boolean isRemoved()>();

        if $z0 == 0 goto label16;

        $r4 = "*";

        goto label17;

     label16:
        $r4 = "";

     label17:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $l0 = r12.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",prev=");

        $r15 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getPrev()>();

        $r13 = (kotlinx.coroutines.channels.ChannelSegment) $r15;

        $r4 = null;

        if $r13 == null goto label18;

        $r16 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r13);

        goto label19;

     label18:
        $r16 = null;

     label19:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        i4 = 0;

     label20:
        if i4 >= $i1 goto label27;

        $i5 = i4;

        $r6 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>(i4);

        $r14 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>(i4);

        $z0 = $r6 instanceof kotlinx.coroutines.CancellableContinuation;

        if $z0 == 0 goto label21;

        $r16 = "cont";

        goto label26;

     label21:
        $z0 = $r6 instanceof kotlinx.coroutines.selects.SelectInstance;

        if $z0 == 0 goto label22;

        $r16 = "select";

        goto label26;

     label22:
        $z0 = $r6 instanceof kotlinx.coroutines.channels.ReceiveCatching;

        if $z0 == 0 goto label23;

        $r16 = "receiveCatching";

        goto label26;

     label23:
        $z0 = $r6 instanceof kotlinx.coroutines.channels.BufferedChannel$SendBroadcast;

        if $z0 == 0 goto label24;

        $r16 = "send(broadcast)";

        goto label26;

     label24:
        $z0 = $r6 instanceof kotlinx.coroutines.channels.WaiterEB;

        if $z0 == 0 goto label25;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EB(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label26;

     label25:
        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

     label26:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]=(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("),");

        $r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        i4 = i4 + 1;

        goto label20;

     label27:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("next=");

        $r15 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        $r13 = (kotlinx.coroutines.channels.ChannelSegment) $r15;

        if $r13 == null goto label28;

        $r4 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r13);

     label28:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]  ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r15 = virtualinvoke r12.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.internal.ConcurrentLinkedListNode getNext()>();

        r12 = (kotlinx.coroutines.channels.ChannelSegment) $r15;

        if r12 != null goto label29;

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label29:
        goto label15;

     label30:
        $r19 = new java.util.NoSuchElementException;

        specialinvoke $r19.<java.util.NoSuchElementException: void <init>()>();

        throw $r19;
    }

    public java.lang.Object tryReceive-PtdJZtk()
    {
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r12;
        kotlinx.coroutines.channels.ChannelResult$Companion $r2;
        kotlinx.coroutines.channels.ChannelSegment $r7, $r8;
        long $l0, $l1, $l4;
        byte $b2;
        int $i3;
        java.lang.String r11;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r5, $r9;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlinx.coroutines.Waiter $r10;
        java.lang.Object $r4;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater receivers$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive0(long)>($l1);

        if $z0 == 0 goto label01;

        $r2 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        $r4 = virtualinvoke $r2.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r3);

        return $r4;

     label01:
        $l1 = $l1 & 1152921504606846975L;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 < 0 goto label02;

        $r2 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r4 = virtualinvoke $r2.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object failure-PtdJZtk()>();

        return $r4;

     label02:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getReceiveSegment$FU$p()>();

        $r4 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r7 = (kotlinx.coroutines.channels.ChannelSegment) $r4;

     label03:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label04;

        $r2 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r3 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getCloseCause()>();

        $r4 = virtualinvoke $r2.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r3);

        return $r4;

     label04:
        $r1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getReceivers$FU$p()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $i3 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l1 = (long) $i3;

        $l1 = $l0 / $l1;

        $i3 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l4 = (long) $i3;

        $l4 = $l0 % $l4;

        $i3 = (int) $l4;

        $l4 = $r7.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b2 = $l4 cmp $l1;

        if $b2 == 0 goto label06;

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentReceive(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l1, $r7);

        if $r8 != null goto label05;

        goto label03;

     label05:
        $r7 = $r8;

        goto label06;

     label06:
        $r8 = $r7;

        $r4 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.lang.Object access$updateCellReceive(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,long,java.lang.Object)>(r0, $r7, $i3, $l0, $r5);

        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND$p()>();

        if $r4 != $r9 goto label10;

        $z0 = $r5 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label07;

        $r10 = (kotlinx.coroutines.Waiter) $r5;

        goto label08;

     label07:
        $r10 = null;

     label08:
        if $r10 == null goto label09;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareReceiverForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, $r10, $r8, $i3);

     label09:
        virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: void waitExpandBufferCompletion$kotlinx_coroutines_core(long)>($l0);

        virtualinvoke $r8.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        $r2 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r4 = virtualinvoke $r2.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object failure-PtdJZtk()>();

        goto label13;

     label10:
        $r9 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getFAILED$p()>();

        if $r4 != $r9 goto label12;

        $l1 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getSendersCounter$kotlinx_coroutines_core()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label11;

        virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label11:
        $r7 = $r8;

        goto label03;

     label12:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getSUSPEND_NO_WAITER$p()>();

        if $r4 == $r5 goto label14;

        virtualinvoke $r7.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        $r2 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r4 = virtualinvoke $r2.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r4);

     label13:
        return $r4;

     label14:
        $r12 = new java.lang.IllegalStateException;

        r11 = "unexpected";

        r11 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r11);

        throw $r12;
    }

    public java.lang.Object trySend-JP2dKIU(java.lang.Object)
    {
        java.lang.Throwable $r9;
        java.lang.IllegalStateException $r13;
        kotlinx.coroutines.channels.ChannelResult$Companion r4;
        kotlinx.coroutines.channels.ChannelSegment r2, $r8;
        long $l0, $l1, $l3;
        byte $b4;
        int $i2, $i5;
        java.lang.String $r10;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r3;
        kotlinx.coroutines.Waiter r11;
        kotlin.Unit $r12;
        java.lang.Object $r1, $r7;
        kotlinx.coroutines.channels.BufferedChannel r0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $r1 := @parameter0: java.lang.Object;

        r3 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater sendersAndCloseStatus$FU>;

        $l0 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean shouldSendSuspend(long)>($l0);

        if $z0 == 0 goto label01;

        r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r1 = virtualinvoke r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object failure-PtdJZtk()>();

        return $r1;

     label01:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        $r6 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getSendSegment$FU$p()>();

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (kotlinx.coroutines.channels.ChannelSegment) $r7;

     label02:
        r3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getSendersAndCloseStatus$FU$p()>();

        $l1 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>(r0);

        $l0 = $l1 & 1152921504606846975L;

        $z0 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: boolean access$isClosedForSend0(kotlinx.coroutines.channels.BufferedChannel,long)>(r0, $l1);

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l1 = (long) $i2;

        $l1 = $l0 / $l1;

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) $i2;

        $l3 = $l0 % $l3;

        $i2 = (int) $l3;

        $l3 = r2.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $b4 = $l3 cmp $l1;

        if $b4 == 0 goto label04;

        $r8 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: kotlinx.coroutines.channels.ChannelSegment access$findSegmentSend(kotlinx.coroutines.channels.BufferedChannel,long,kotlinx.coroutines.channels.ChannelSegment)>(r0, $l1, r2);

        if $r8 != null goto label03;

        if $z0 == 0 goto label02;

        r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

        $r1 = virtualinvoke r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r9);

        return $r1;

     label03:
        goto label05;

     label04:
        $r8 = r2;

     label05:
        r2 = $r8;

        $i5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannel: int access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.channels.ChannelSegment,int,java.lang.Object,long,java.lang.Object,boolean)>(r0, $r8, $i2, $r1, $l0, $r5, $z0);

        lookupswitch($i5)
        {
            case 0: goto label18;
            case 1: goto label17;
            case 2: goto label11;
            case 3: goto label10;
            case 4: goto label08;
            case 5: goto label07;
            default: goto label06;
        };

     label06:
        r2 = $r8;

        goto label19;

     label07:
        virtualinvoke $r8.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r2 = $r8;

        goto label19;

     label08:
        $l1 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getReceiversCounter$kotlinx_coroutines_core()>();

        $b4 = $l0 cmp $l1;

        $i2 = (int) $b4;

        if $i2 >= 0 goto label09;

        virtualinvoke $r8.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

     label09:
        r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

        $r1 = virtualinvoke r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r9);

        return $r1;

     label10:
        $r13 = new java.lang.IllegalStateException;

        $r10 = "unexpected";

        $r10 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r13;

     label11:
        if $z0 == 0 goto label12;

        virtualinvoke $r8.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: java.lang.Throwable getSendException()>();

        $r1 = virtualinvoke r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)>($r9);

        return $r1;

     label12:
        $z0 = $r5 instanceof kotlinx.coroutines.Waiter;

        if $z0 == 0 goto label13;

        r11 = (kotlinx.coroutines.Waiter) $r5;

        goto label14;

     label13:
        r11 = null;

     label14:
        if r11 == null goto label15;

        $r8 = r2;

        staticinvoke <kotlinx.coroutines.channels.BufferedChannel: void access$prepareSenderForSuspension(kotlinx.coroutines.channels.BufferedChannel,kotlinx.coroutines.Waiter,kotlinx.coroutines.channels.ChannelSegment,int)>(r0, r11, r2, $i2);

        goto label16;

     label15:
        $r8 = r2;

     label16:
        virtualinvoke $r8.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r1 = virtualinvoke r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object failure-PtdJZtk()>();

        return $r1;

     label17:
        r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r1 = virtualinvoke r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r12);

        return $r1;

     label18:
        virtualinvoke $r8.<kotlinx.coroutines.channels.ChannelSegment: void cleanPrev()>();

        r4 = <kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion>;

        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r1 = virtualinvoke r4.<kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)>($r12);

        return $r1;

     label19:
        goto label02;
    }

    public final void waitExpandBufferCompletion$kotlinx_coroutines_core(long)
    {
        long $l0, $l1, l5, l6;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        byte b2;
        int $i3, $i4;
        kotlinx.coroutines.channels.BufferedChannel r0;
        boolean z0;

        r0 := @this: kotlinx.coroutines.channels.BufferedChannel;

        $l0 := @parameter0: long;

        z0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: boolean isRendezvousOrUnlimited()>();

        if z0 == 0 goto label01;

        return;

     label01:
        $l1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        b2 = $l1 cmp $l0;

        $i3 = (int) b2;

        if $i3 <= 0 goto label01;

        $i3 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: int access$getEXPAND_BUFFER_COMPLETION_WAIT_ITERATIONS$p()>();

        $i4 = 0;

     label02:
        if $i4 >= $i3 goto label04;

        $l0 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = 4611686018427387903L & $l1;

        b2 = $l0 cmp $l1;

        if b2 != 0 goto label03;

        $l1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        b2 = $l0 cmp $l1;

        if b2 != 0 goto label03;

        return;

     label03:
        $i4 = $i4 + 1;

        goto label02;

     label04:
        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

     label05:
        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = $l0 & 4611686018427387903L;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructEBCompletedAndPauseFlag(long,boolean)>($l1, 1);

        z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if z0 == 0 goto label13;

     label06:
        $l1 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        l5 = $l0 & 4611686018427387903L;

        l6 = $l0 & 4611686018427387904L;

        b2 = l6 cmp 0L;

        if b2 == 0 goto label07;

        z0 = 1;

        goto label08;

     label07:
        z0 = 0;

     label08:
        b2 = $l1 cmp l5;

        if b2 != 0 goto label11;

        l6 = specialinvoke r0.<kotlinx.coroutines.channels.BufferedChannel: long getBufferEndCounter()>();

        b2 = $l1 cmp l6;

        if b2 != 0 goto label11;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

     label09:
        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = $l0 & 4611686018427387903L;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructEBCompletedAndPauseFlag(long,boolean)>($l1, 0);

        z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if z0 == 0 goto label10;

        return;

     label10:
        goto label09;

     label11:
        if z0 != 0 goto label12;

        $r1 = <kotlinx.coroutines.channels.BufferedChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater completedExpandBuffersAndPauseFlag$FU>;

        $l1 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: long access$constructEBCompletedAndPauseFlag(long,boolean)>(l5, 1);

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        goto label06;

     label12:
        goto label06;

     label13:
        goto label05;
    }
}
