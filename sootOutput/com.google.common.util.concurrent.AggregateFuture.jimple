abstract class com.google.common.util.concurrent.AggregateFuture extends com.google.common.util.concurrent.AggregateFutureState
{
    private static final java.util.logging.Logger logger;
    private final boolean allMustSucceed;
    private final boolean collectsValues;
    private com.google.common.collect.ImmutableCollection futures;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/common/util/concurrent/AggregateFuture;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.util.concurrent.AggregateFuture: java.util.logging.Logger logger> = $r2;

        return;
    }

    void <init>(com.google.common.collect.ImmutableCollection, boolean, boolean)
    {
        com.google.common.util.concurrent.AggregateFuture r0;
        int $i0;
        com.google.common.collect.ImmutableCollection r1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $i0 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: int size()>();

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFutureState: void <init>(int)>($i0);

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (com.google.common.collect.ImmutableCollection) $r2;

        r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures> = r1;

        r0.<com.google.common.util.concurrent.AggregateFuture: boolean allMustSucceed> = $z0;

        r0.<com.google.common.util.concurrent.AggregateFuture: boolean collectsValues> = $z1;

        return;
    }

    private static boolean addCausalChain(java.util.Set, java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        java.util.Set r0;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.lang.Throwable;

     label1:
        if $r1 == null goto label3;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke $r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label3:
        return 1;
    }

    private void collectValueFromNonCancelledFuture(int, java.util.concurrent.Future)
    {
        java.lang.Throwable r3;
        java.util.concurrent.ExecutionException r4;
        java.util.concurrent.Future r1;
        com.google.common.util.concurrent.AggregateFuture r0;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Future;

     label1:
        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>(r1);

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void collectOneValue(int,java.lang.Object)>($i0, $r2);

     label2:
        goto label5;

     label3:
        r3 := @caughtexception;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void handleException(java.lang.Throwable)>(r3);

        return;

     label4:
        r4 := @caughtexception;

        r3 = virtualinvoke r4.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void handleException(java.lang.Throwable)>(r3);

     label5:
        return;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection)
    {
        com.google.common.util.concurrent.AggregateFuture r0;
        int $i0;
        com.google.common.collect.ImmutableCollection r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: int decrementRemainingAndGet()>();

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Less than 0 remaining futures");

        if $i0 != 0 goto label3;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void processCompleted(com.google.common.collect.ImmutableCollection)>(r1);

     label3:
        return;
    }

    private void handleException(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        com.google.common.util.concurrent.AggregateFuture r0;
        java.util.Set $r2;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        z0 = r0.<com.google.common.util.concurrent.AggregateFuture: boolean allMustSucceed>;

        if z0 == 0 goto label1;

        z0 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: boolean setException(java.lang.Throwable)>($r1);

        if z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: java.util.Set getOrInitSeenExceptions()>();

        z0 = staticinvoke <com.google.common.util.concurrent.AggregateFuture: boolean addCausalChain(java.util.Set,java.lang.Throwable)>($r2, $r1);

        if z0 == 0 goto label1;

        staticinvoke <com.google.common.util.concurrent.AggregateFuture: void log(java.lang.Throwable)>($r1);

        return;

     label1:
        z0 = $r1 instanceof java.lang.Error;

        if z0 == 0 goto label2;

        staticinvoke <com.google.common.util.concurrent.AggregateFuture: void log(java.lang.Throwable)>($r1);

     label2:
        return;
    }

    private static void log(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.String r3;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        boolean z0;

        $r0 := @parameter0: java.lang.Throwable;

        z0 = $r0 instanceof java.lang.Error;

        if z0 == 0 goto label1;

        r3 = "Input Future failed with Error";

        goto label2;

     label1:
        r3 = "Got more than one input Future failure. Logging failures after the first";

     label2:
        $r1 = <com.google.common.util.concurrent.AggregateFuture: java.util.logging.Logger logger>;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r3, $r0);

        return;
    }

    private void processCompleted(com.google.common.collect.ImmutableCollection)
    {
        com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason r5;
        com.google.common.collect.ImmutableCollection r1;
        java.util.concurrent.Future r4;
        com.google.common.util.concurrent.AggregateFuture r0;
        int i0;
        java.lang.Object $r3;
        com.google.common.collect.UnmodifiableIterator $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        if r1 == null goto label3;

        i0 = 0;

        $r2 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.concurrent.Future) $r3;

        $z0 = interfaceinvoke r4.<java.util.concurrent.Future: boolean isCancelled()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)>(i0, r4);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void clearSeenExceptions()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void handleAllCompleted()>();

        r5 = <com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason: com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason ALL_INPUT_FUTURES_PROCESSED>;

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)>(r5);

        return;
    }

    final void addInitialException(java.util.Set)
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.AggregateFuture r0;
        java.util.Set r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        r1 := @parameter0: java.util.Set;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: java.lang.Throwable tryInternalFastPathGetFailure()>();

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r2 = (java.lang.Throwable) $r3;

        staticinvoke <com.google.common.util.concurrent.AggregateFuture: boolean addCausalChain(java.util.Set,java.lang.Throwable)>(r1, $r2);

     label1:
        return;
    }

    protected final void afterDone()
    {
        com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason r2;
        com.google.common.collect.ImmutableCollection r1;
        java.util.concurrent.Future r5;
        com.google.common.util.concurrent.AggregateFuture r0;
        java.lang.Object $r4;
        com.google.common.collect.UnmodifiableIterator $r3;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFutureState: void afterDone()>();

        r1 = r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures>;

        r2 = <com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason: com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason OUTPUT_FUTURE_DONE>;

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)>(r2);

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: boolean isCancelled()>();

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: boolean wasInterrupted()>();

        $r3 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.Future) $r4;

        interfaceinvoke r5.<java.util.concurrent.Future: boolean cancel(boolean)>($z0);

        goto label3;

     label4:
        return;
    }

    abstract void collectOneValue(int, java.lang.Object);

    abstract void handleAllCompleted();

    final void init()
    {
        com.google.common.util.concurrent.ListenableFuture r4;
        java.util.concurrent.Executor $r6;
        com.google.common.collect.ImmutableCollection r1;
        com.google.common.util.concurrent.AggregateFuture$$ExternalSyntheticLambda0 $r5;
        com.google.common.util.concurrent.AggregateFuture r0;
        com.google.common.util.concurrent.AggregateFuture$$ExternalSyntheticLambda1 r7;
        int i0;
        java.lang.Object $r3;
        com.google.common.collect.UnmodifiableIterator $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        r1 = r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r1 = r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures>;

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void handleAllCompleted()>();

        return;

     label1:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture: boolean allMustSucceed>;

        if $z0 == 0 goto label4;

        i0 = 0;

        r1 = r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures>;

        $r2 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.util.concurrent.ListenableFuture) $r3;

        $r5 = new com.google.common.util.concurrent.AggregateFuture$$ExternalSyntheticLambda0;

        specialinvoke $r5.<com.google.common.util.concurrent.AggregateFuture$$ExternalSyntheticLambda0: void <init>(com.google.common.util.concurrent.AggregateFuture,com.google.common.util.concurrent.ListenableFuture,int)>(r0, r4, i0);

        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r4.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r5, $r6);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;

     label4:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture: boolean collectsValues>;

        if $z0 == 0 goto label5;

        r1 = r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures>;

        goto label6;

     label5:
        r1 = null;

     label6:
        r7 = new com.google.common.util.concurrent.AggregateFuture$$ExternalSyntheticLambda1;

        specialinvoke r7.<com.google.common.util.concurrent.AggregateFuture$$ExternalSyntheticLambda1: void <init>(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection)>(r0, r1);

        r1 = r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures>;

        $r2 = virtualinvoke r1.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.util.concurrent.ListenableFuture) $r3;

        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r4.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r7, $r6);

        goto label7;

     label8:
        return;
    }

    void lambda$init$0$com-google-common-util-concurrent-AggregateFuture(com.google.common.util.concurrent.ListenableFuture, int)
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.AggregateFuture r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $i0 := @parameter1: int;

     label1:
        $z0 = interfaceinvoke $r1.<com.google.common.util.concurrent.ListenableFuture: boolean isCancelled()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures> = null;

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture: boolean cancel(boolean)>(0);

     label4:
        goto label6;

     label5:
        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)>($i0, $r1);

     label6:
        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection)>(null);

        return;

     label7:
        $r2 := @caughtexception;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection)>(null);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    void lambda$init$1$com-google-common-util-concurrent-AggregateFuture(com.google.common.collect.ImmutableCollection)
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.util.concurrent.AggregateFuture r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        $r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection)>($r1);

        return;
    }

    protected final java.lang.String pendingToString()
    {
        com.google.common.util.concurrent.AggregateFuture r0;
        int $i0;
        com.google.common.collect.ImmutableCollection r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        r1 = r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures>;

        if r1 == null goto label1;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 8;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("futures=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        $r3 = specialinvoke r0.<com.google.common.util.concurrent.AggregateFutureState: java.lang.String pendingToString()>();

        return $r3;
    }

    void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)
    {
        com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason $r1;
        com.google.common.util.concurrent.AggregateFuture r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.AggregateFuture: com.google.common.collect.ImmutableCollection futures> = null;

        return;
    }
}
