final class kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function2
{
    final java.lang.Object $initialValue;
    final kotlinx.coroutines.flow.MutableSharedFlow $shared;
    final kotlinx.coroutines.flow.Flow $upstream;
    java.lang.Object L$0;
    int label;

    void <init>(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.MutableSharedFlow, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r1;
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.flow.MutableSharedFlow $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 r0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: kotlinx.coroutines.flow.MutableSharedFlow;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.Flow $upstream> = $r1;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.MutableSharedFlow $shared> = $r2;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object $initialValue> = $r3;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r4);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.Flow $r3;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.MutableSharedFlow $r4;
        java.lang.Object $r1, $r5;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 r0, $r6;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r6 = new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r3 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.Flow $upstream>;

        $r4 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r5 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object $initialValue>;

        specialinvoke $r6.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: void <init>(kotlinx.coroutines.flow.Flow,kotlinx.coroutines.flow.MutableSharedFlow,java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r4, $r5, $r2);

        $r6.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r6;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.flow.SharingCommand $r3;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 r0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.flow.SharingCommand) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object invoke(kotlinx.coroutines.flow.SharingCommand,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.flow.SharingCommand, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        kotlinx.coroutines.flow.SharingCommand $r1;
        java.lang.Object $r4;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 r0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharingCommand;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        kotlinx.coroutines.internal.Symbol r6;
        java.lang.IllegalStateException $r3;
        kotlin.coroutines.Continuation $r10;
        kotlinx.coroutines.flow.MutableSharedFlow r7;
        kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2 r0;
        kotlinx.coroutines.flow.Flow r8;
        kotlin.Unit r11;
        int[] $r5;
        kotlinx.coroutines.flow.FlowCollector $r9;
        kotlinx.coroutines.flow.SharingCommand r4;
        int i0;
        java.lang.Object $r1, $r2;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: int label>;

        lookupswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label9;

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object L$0>;

        r4 = (kotlinx.coroutines.flow.SharingCommand) $r1;

        $r5 = <kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2$WhenMappings: int[] $EnumSwitchMapping$0>;

        i0 = virtualinvoke r4.<kotlinx.coroutines.flow.SharingCommand: int ordinal()>();

        i0 = $r5[i0];

        lookupswitch(i0)
        {
            case 1: goto label8;
            case 2: goto label7;
            case 3: goto label5;
            default: goto label4;
        };

     label4:
        goto label9;

     label5:
        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object $initialValue>;

        r6 = <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.internal.Symbol NO_VALUE>;

        if $r1 != r6 goto label6;

        r7 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        interfaceinvoke r7.<kotlinx.coroutines.flow.MutableSharedFlow: void resetReplayCache()>();

        goto label9;

     label6:
        r7 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r1 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: java.lang.Object $initialValue>;

        interfaceinvoke r7.<kotlinx.coroutines.flow.MutableSharedFlow: boolean tryEmit(java.lang.Object)>($r1);

        goto label9;

     label7:
        goto label9;

     label8:
        r8 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.Flow $upstream>;

        r7 = r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: kotlinx.coroutines.flow.MutableSharedFlow $shared>;

        $r9 = (kotlinx.coroutines.flow.FlowCollector) r7;

        $r10 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2: int label> = 1;

        $r1 = interfaceinvoke r8.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r9, $r10);

        if $r1 != $r2 goto label9;

        return $r2;

     label9:
        r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r11;
    }
}
