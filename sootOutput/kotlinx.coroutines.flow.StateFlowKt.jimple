public final class kotlinx.coroutines.flow.StateFlowKt extends java.lang.Object
{
    private static final kotlinx.coroutines.internal.Symbol NONE;
    private static final kotlinx.coroutines.internal.Symbol PENDING;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("NONE");

        <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol NONE> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("PENDING");

        <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol PENDING> = $r0;

        return;
    }

    public static final kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)
    {
        kotlinx.coroutines.flow.StateFlowImpl $r1;
        java.lang.Object $r0;
        kotlinx.coroutines.flow.MutableStateFlow $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 = new kotlinx.coroutines.flow.StateFlowImpl;

        if $r0 != null goto label1;

        $r0 = <kotlinx.coroutines.flow.internal.NullSurrogateKt: kotlinx.coroutines.internal.Symbol NULL>;

        goto label1;

     label1:
        specialinvoke $r1.<kotlinx.coroutines.flow.StateFlowImpl: void <init>(java.lang.Object)>($r0);

        $r2 = (kotlinx.coroutines.flow.MutableStateFlow) $r1;

        return $r2;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getNONE$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol NONE>;

        return r0;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getPENDING$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.internal.Symbol PENDING>;

        return r0;
    }

    public static final kotlinx.coroutines.flow.Flow fuseStateFlow(kotlinx.coroutines.flow.StateFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.channels.BufferOverflow $r2, $r3;
        java.lang.AssertionError $r6;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.flow.Flow $r4;
        kotlinx.coroutines.flow.SharedFlow $r5;
        int $i0;
        kotlinx.coroutines.flow.StateFlow $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: kotlinx.coroutines.flow.StateFlow;

        $r1 := @parameter1: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter2: int;

        $r2 := @parameter3: kotlinx.coroutines.channels.BufferOverflow;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z1 = 1;

        if $z0 == 0 goto label4;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        if $i0 < 0 goto label5;

        if $i0 >= 2 goto label5;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 != 0 goto label7;

        if $i0 != -2 goto label8;

     label7:
        $r3 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST>;

        if $r2 != $r3 goto label8;

        $r4 = (kotlinx.coroutines.flow.Flow) $r0;

        return $r4;

     label8:
        $r5 = (kotlinx.coroutines.flow.SharedFlow) $r0;

        $r4 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.flow.Flow fuseSharedFlow(kotlinx.coroutines.flow.SharedFlow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r5, $r1, $i0, $r2);

        return $r4;
    }

    public static final java.lang.Object getAndUpdate(kotlinx.coroutines.flow.MutableStateFlow, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2, $r3;
        kotlinx.coroutines.flow.MutableStateFlow $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.MutableStateFlow;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

     label1:
        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $z0 = interfaceinvoke $r0.<kotlinx.coroutines.flow.MutableStateFlow: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        return $r2;
    }

    public static final void update(kotlinx.coroutines.flow.MutableStateFlow, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2, $r3;
        kotlinx.coroutines.flow.MutableStateFlow $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.MutableStateFlow;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

     label1:
        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $z0 = interfaceinvoke $r0.<kotlinx.coroutines.flow.MutableStateFlow: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        return;
    }

    public static final java.lang.Object updateAndGet(kotlinx.coroutines.flow.MutableStateFlow, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2, $r3;
        kotlinx.coroutines.flow.MutableStateFlow $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.flow.MutableStateFlow;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

     label1:
        $r2 = interfaceinvoke $r0.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $z0 = interfaceinvoke $r0.<kotlinx.coroutines.flow.MutableStateFlow: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        return $r3;
    }
}
