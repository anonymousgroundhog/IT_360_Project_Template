public class kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher extends kotlinx.coroutines.ExecutorCoroutineDispatcher
{
    private final int corePoolSize;
    private kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler;
    private final long idleWorkerKeepAliveNs;
    private final int maxPoolSize;
    private final java.lang.String schedulerName;

    public void <init>()
    {
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        specialinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: void <init>(int,int,long,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, 0L, null, 15, null);

        return;
    }

    public void <init>(int, int, long, java.lang.String)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        specialinvoke r0.<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int corePoolSize> = $i0;

        r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int maxPoolSize> = $i1;

        r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: long idleWorkerKeepAliveNs> = $l2;

        r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: java.lang.String schedulerName> = $r1;

        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>();

        r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler> = $r2;

        return;
    }

    public void <init>(int, int, long, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        long $l3;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $l3 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r2 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i4 = $i0 & 1;

        if $i4 == 0 goto label1;

        $i1 = <kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE>;

     label1:
        $i4 = $i0 & 2;

        if $i4 == 0 goto label2;

        $i2 = <kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE>;

        goto label2;

     label2:
        $i4 = $i0 & 4;

        if $i4 == 0 goto label3;

        $l3 = <kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS>;

        goto label3;

     label3:
        $i0 = $i0 & 8;

        if $i0 == 0 goto label4;

        $r1 = "CoroutineScheduler";

        goto label4;

     label4:
        specialinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: void <init>(int,int,long,java.lang.String)>($i1, $i2, $l3, $r1);

        return;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r2 = new kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int corePoolSize>;

        $i1 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int maxPoolSize>;

        $l2 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: long idleWorkerKeepAliveNs>;

        $r1 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: java.lang.String schedulerName>;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l2, $r1);

        return $r2;
    }

    public void close()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r1 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void close()>();

        return;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>($r3, $r2, null, 0, 6, null);

        return;
    }

    public final void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter2: boolean;

        $r3 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r1, $r2, $z0);

        return;
    }

    public void dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>($r3, $r2, null, 1, 2, null);

        return;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        java.util.concurrent.Executor $r2;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r1 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        $r2 = (java.util.concurrent.Executor) $r1;

        return $r2;
    }

    public final void restore$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: void usePrivateScheduler$kotlinx_coroutines_core()>();

        return;
    }

    public final void shutdown$kotlinx_coroutines_core(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>($l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void usePrivateScheduler$kotlinx_coroutines_core()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher r0;

        r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        entermonitor r0;

     label1:
        $r1 = r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>(1000L);

        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>();

        r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
