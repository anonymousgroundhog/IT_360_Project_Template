public final class kotlinx.coroutines.sync.SemaphoreKt extends java.lang.Object
{
    private static final kotlinx.coroutines.internal.Symbol BROKEN;
    private static final kotlinx.coroutines.internal.Symbol CANCELLED;
    private static final int MAX_SPIN_CYCLES;
    private static final kotlinx.coroutines.internal.Symbol PERMIT;
    private static final int SEGMENT_SIZE;
    private static final kotlinx.coroutines.internal.Symbol TAKEN;

    static void <clinit>()
    {
        int $i0;
        kotlinx.coroutines.internal.Symbol $r0;

        $i0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>("kotlinx.coroutines.semaphore.maxSpinCycles", 100, 0, 0, 12, null);

        <kotlinx.coroutines.sync.SemaphoreKt: int MAX_SPIN_CYCLES> = $i0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("PERMIT");

        <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol PERMIT> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("TAKEN");

        <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol TAKEN> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("BROKEN");

        <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol BROKEN> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("CANCELLED");

        <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol CANCELLED> = $r0;

        $i0 = staticinvoke <kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)>("kotlinx.coroutines.semaphore.segmentSize", 16, 0, 0, 12, null);

        <kotlinx.coroutines.sync.SemaphoreKt: int SEGMENT_SIZE> = $i0;

        return;
    }

    public static final kotlinx.coroutines.sync.Semaphore Semaphore(int, int)
    {
        kotlinx.coroutines.sync.Semaphore $r1;
        int $i0, $i1;
        kotlinx.coroutines.sync.SemaphoreImpl $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 = new kotlinx.coroutines.sync.SemaphoreImpl;

        specialinvoke $r0.<kotlinx.coroutines.sync.SemaphoreImpl: void <init>(int,int)>($i0, $i1);

        $r1 = (kotlinx.coroutines.sync.Semaphore) $r0;

        return $r1;
    }

    public static kotlinx.coroutines.sync.Semaphore Semaphore$default(int, int, int, java.lang.Object)
    {
        kotlinx.coroutines.sync.Semaphore $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $i1 = 0;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.sync.Semaphore Semaphore(int,int)>($i0, $i1);

        return $r1;
    }

    public static final kotlinx.coroutines.sync.SemaphoreSegment access$createSegment(long, kotlinx.coroutines.sync.SemaphoreSegment)
    {
        long $l0;
        kotlinx.coroutines.sync.SemaphoreSegment $r0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlinx.coroutines.sync.SemaphoreSegment;

        $r0 = staticinvoke <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.sync.SemaphoreSegment createSegment(long,kotlinx.coroutines.sync.SemaphoreSegment)>($l0, $r0);

        return $r0;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getBROKEN$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol BROKEN>;

        return r0;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getCANCELLED$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol CANCELLED>;

        return r0;
    }

    public static final int access$getMAX_SPIN_CYCLES$p()
    {
        int i0;

        i0 = <kotlinx.coroutines.sync.SemaphoreKt: int MAX_SPIN_CYCLES>;

        return i0;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getPERMIT$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol PERMIT>;

        return r0;
    }

    public static final int access$getSEGMENT_SIZE$p()
    {
        int i0;

        i0 = <kotlinx.coroutines.sync.SemaphoreKt: int SEGMENT_SIZE>;

        return i0;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getTAKEN$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.sync.SemaphoreKt: kotlinx.coroutines.internal.Symbol TAKEN>;

        return r0;
    }

    private static final kotlinx.coroutines.sync.SemaphoreSegment createSegment(long, kotlinx.coroutines.sync.SemaphoreSegment)
    {
        long $l0;
        kotlinx.coroutines.sync.SemaphoreSegment $r0, $r1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlinx.coroutines.sync.SemaphoreSegment;

        $r1 = new kotlinx.coroutines.sync.SemaphoreSegment;

        specialinvoke $r1.<kotlinx.coroutines.sync.SemaphoreSegment: void <init>(long,kotlinx.coroutines.sync.SemaphoreSegment,int)>($l0, $r0, 0);

        return $r1;
    }

    public static final java.lang.Object withPermit(kotlinx.coroutines.sync.Semaphore, kotlin.jvm.functions.Function0, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r7;
        java.lang.IllegalStateException $r6;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.sync.SemaphoreKt$withPermit$1 $r3;
        kotlin.jvm.functions.Function0 r1;
        kotlinx.coroutines.sync.Semaphore $r0;
        int $i0;
        java.lang.Object $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.sync.Semaphore;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = $r2 instanceof kotlinx.coroutines.sync.SemaphoreKt$withPermit$1;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.sync.SemaphoreKt$withPermit$1) $r2;

        $i0 = $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: int label>;

        $i0 = $i0 - -2147483648;

        $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: int label> = $i0;

        goto label2;

     label1:
        $r3 = new kotlinx.coroutines.sync.SemaphoreKt$withPermit$1;

        specialinvoke $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: void <init>(kotlin.coroutines.Continuation)>($r2);

     label2:
        $r4 = $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label4;
            default: goto label3;
        };

     label3:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r6;

     label4:
        $r5 = $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: java.lang.Object L$1>;

        r1 = (kotlin.jvm.functions.Function0) $r5;

        $r5 = $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: java.lang.Object L$0>;

        $r0 = (kotlinx.coroutines.sync.Semaphore) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label6;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: java.lang.Object L$0> = $r0;

        $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: java.lang.Object L$1> = r1;

        $r3.<kotlinx.coroutines.sync.SemaphoreKt$withPermit$1: int label> = 1;

        $r4 = interfaceinvoke $r0.<kotlinx.coroutines.sync.Semaphore: java.lang.Object acquire(kotlin.coroutines.Continuation)>($r3);

        if $r4 != $r5 goto label6;

        return $r5;

     label6:
        $r4 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label7:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Semaphore: void release()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r4;

     label8:
        r7 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Semaphore: void release()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r7;

        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private static final java.lang.Object withPermit$$forInline(kotlinx.coroutines.sync.Semaphore, kotlin.jvm.functions.Function0, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r4;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.sync.Semaphore $r0;
        java.lang.Object $r3;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: kotlinx.coroutines.sync.Semaphore;

        $r1 := @parameter1: kotlin.jvm.functions.Function0;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Semaphore: java.lang.Object acquire(kotlin.coroutines.Continuation)>($r2);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

     label1:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Semaphore: void release()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Semaphore: void release()>();

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
