public final class androidx.work.impl.model.WorkSpecDao_Impl extends java.lang.Object implements androidx.work.impl.model.WorkSpecDao
{
    private final androidx.room.RoomDatabase __db;
    private final androidx.room.EntityInsertionAdapter __insertionAdapterOfWorkSpec;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfDelete;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfIncrementWorkSpecRunAttemptCount;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfMarkWorkSpecScheduled;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfResetScheduledState;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfResetWorkSpecRunAttemptCount;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfSetOutput;
    private final androidx.room.SharedSQLiteStatement __preparedStmtOfSetPeriodStartTime;

    public void <init>(androidx.room.RoomDatabase)
    {
        androidx.work.impl.model.WorkSpecDao_Impl$9 $r10;
        androidx.work.impl.model.WorkSpecDao_Impl$8 $r9;
        androidx.room.RoomDatabase $r1;
        androidx.work.impl.model.WorkSpecDao_Impl$3 $r4;
        androidx.work.impl.model.WorkSpecDao_Impl$2 $r3;
        androidx.work.impl.model.WorkSpecDao_Impl$1 $r2;
        androidx.work.impl.model.WorkSpecDao_Impl$7 $r8;
        androidx.work.impl.model.WorkSpecDao_Impl$6 $r7;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.impl.model.WorkSpecDao_Impl$5 $r6;
        androidx.work.impl.model.WorkSpecDao_Impl$4 $r5;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: androidx.room.RoomDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db> = $r1;

        $r2 = new androidx.work.impl.model.WorkSpecDao_Impl$1;

        specialinvoke $r2.<androidx.work.impl.model.WorkSpecDao_Impl$1: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.EntityInsertionAdapter __insertionAdapterOfWorkSpec> = $r2;

        $r3 = new androidx.work.impl.model.WorkSpecDao_Impl$2;

        specialinvoke $r3.<androidx.work.impl.model.WorkSpecDao_Impl$2: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfDelete> = $r3;

        $r4 = new androidx.work.impl.model.WorkSpecDao_Impl$3;

        specialinvoke $r4.<androidx.work.impl.model.WorkSpecDao_Impl$3: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetOutput> = $r4;

        $r5 = new androidx.work.impl.model.WorkSpecDao_Impl$4;

        specialinvoke $r5.<androidx.work.impl.model.WorkSpecDao_Impl$4: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetPeriodStartTime> = $r5;

        $r6 = new androidx.work.impl.model.WorkSpecDao_Impl$5;

        specialinvoke $r6.<androidx.work.impl.model.WorkSpecDao_Impl$5: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfIncrementWorkSpecRunAttemptCount> = $r6;

        $r7 = new androidx.work.impl.model.WorkSpecDao_Impl$6;

        specialinvoke $r7.<androidx.work.impl.model.WorkSpecDao_Impl$6: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetWorkSpecRunAttemptCount> = $r7;

        $r8 = new androidx.work.impl.model.WorkSpecDao_Impl$7;

        specialinvoke $r8.<androidx.work.impl.model.WorkSpecDao_Impl$7: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfMarkWorkSpecScheduled> = $r8;

        $r9 = new androidx.work.impl.model.WorkSpecDao_Impl$8;

        specialinvoke $r9.<androidx.work.impl.model.WorkSpecDao_Impl$8: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetScheduledState> = $r9;

        $r10 = new androidx.work.impl.model.WorkSpecDao_Impl$9;

        specialinvoke $r10.<androidx.work.impl.model.WorkSpecDao_Impl$9: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomDatabase)>(r0, $r1);

        r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast> = $r10;

        return;
    }

    private void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)
    {
        java.lang.Throwable r14;
        androidx.room.RoomSQLiteQuery $r8;
        byte[] $r12;
        java.util.ArrayList r6;
        int $i0, i1, $i2;
        java.lang.String r5;
        androidx.work.Data $r13;
        androidx.collection.ArrayMap r1, r3, $r15;
        boolean $z0;
        android.database.Cursor $r11;
        java.util.Iterator $r9;
        androidx.room.RoomDatabase r10;
        java.util.Set $r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: androidx.collection.ArrayMap;

        $r2 = virtualinvoke r1.<androidx.collection.ArrayMap: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $i0 = virtualinvoke r1.<androidx.collection.ArrayMap: int size()>();

        if $i0 <= 999 goto label04;

        $r15 = new androidx.collection.ArrayMap;

        r3 = $r15;

        specialinvoke $r15.<androidx.collection.ArrayMap: void <init>(int)>(999);

        $i0 = 0;

        i1 = 0;

        $i2 = virtualinvoke r1.<androidx.collection.ArrayMap: int size()>();

     label02:
        if i1 >= $i2 goto label03;

        $r4 = virtualinvoke r1.<androidx.collection.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r5 = (java.lang.String) $r4;

        $r4 = virtualinvoke r1.<androidx.collection.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r6 = (java.util.ArrayList) $r4;

        virtualinvoke r3.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        i1 = i1 + 1;

        $i0 = $i0 + 1;

        if $i0 != 999 goto label02;

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)>(r3);

        $r15 = new androidx.collection.ArrayMap;

        specialinvoke $r15.<androidx.collection.ArrayMap: void <init>(int)>(999);

        r3 = $r15;

        $i0 = 0;

        goto label02;

     label03:
        if $i0 <= 0 goto label21;

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)>(r3);

        return;

     label04:
        $r7 = staticinvoke <androidx.room.util.StringUtil: java.lang.StringBuilder newStringBuilder()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT `progress`,`work_spec_id` FROM `WorkProgress` WHERE `work_spec_id` IN (");

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        staticinvoke <androidx.room.util.StringUtil: void appendPlaceholders(java.lang.StringBuilder,int)>($r7, $i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>(r5, $i0);

        $i0 = 1;

        $r9 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r4 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        if r5 != null goto label06;

        virtualinvoke $r8.<androidx.room.RoomSQLiteQuery: void bindNull(int)>($i0);

        goto label07;

     label06:
        virtualinvoke $r8.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>($i0, r5);

     label07:
        $i0 = $i0 + 1;

        goto label05;

     label08:
        r10 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r11 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r10, $r8, 0, null);

     label09:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndex(android.database.Cursor,java.lang.String)>($r11, "work_spec_id");

     label10:
        if $i0 != -1 goto label11;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        return;

     label11:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToNext()>();

     label12:
        if $z0 == 0 goto label19;

     label13:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean isNull(int)>($i0);

     label14:
        if $z0 != 0 goto label11;

     label15:
        r5 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r4 = virtualinvoke r1.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.util.ArrayList) $r4;

     label16:
        if r6 == null goto label11;

     label17:
        $r12 = interfaceinvoke $r11.<android.database.Cursor: byte[] getBlob(int)>(0);

        $r13 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r12);

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label18:
        goto label11;

     label19:
        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        return;

     label20:
        r14 := @caughtexception;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        throw r14;

     label21:
        return;

        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
    }

    private void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)
    {
        java.lang.Throwable r12;
        androidx.room.RoomSQLiteQuery $r8;
        java.util.ArrayList r6;
        int $i0, i1, $i2;
        java.lang.String r5;
        androidx.collection.ArrayMap r1, r3, $r13;
        boolean $z0;
        android.database.Cursor $r11;
        java.util.Iterator $r9;
        androidx.room.RoomDatabase r10;
        java.util.Set $r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: androidx.collection.ArrayMap;

        $r2 = virtualinvoke r1.<androidx.collection.ArrayMap: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $i0 = virtualinvoke r1.<androidx.collection.ArrayMap: int size()>();

        if $i0 <= 999 goto label04;

        $r13 = new androidx.collection.ArrayMap;

        r3 = $r13;

        specialinvoke $r13.<androidx.collection.ArrayMap: void <init>(int)>(999);

        $i0 = 0;

        i1 = 0;

        $i2 = virtualinvoke r1.<androidx.collection.ArrayMap: int size()>();

     label02:
        if i1 >= $i2 goto label03;

        $r4 = virtualinvoke r1.<androidx.collection.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r5 = (java.lang.String) $r4;

        $r4 = virtualinvoke r1.<androidx.collection.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r6 = (java.util.ArrayList) $r4;

        virtualinvoke r3.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        i1 = i1 + 1;

        $i0 = $i0 + 1;

        if $i0 != 999 goto label02;

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)>(r3);

        $r13 = new androidx.collection.ArrayMap;

        specialinvoke $r13.<androidx.collection.ArrayMap: void <init>(int)>(999);

        r3 = $r13;

        $i0 = 0;

        goto label02;

     label03:
        if $i0 <= 0 goto label21;

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)>(r3);

        return;

     label04:
        $r7 = staticinvoke <androidx.room.util.StringUtil: java.lang.StringBuilder newStringBuilder()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT `tag`,`work_spec_id` FROM `WorkTag` WHERE `work_spec_id` IN (");

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        staticinvoke <androidx.room.util.StringUtil: void appendPlaceholders(java.lang.StringBuilder,int)>($r7, $i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>(r5, $i0);

        $i0 = 1;

        $r9 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r4 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        if r5 != null goto label06;

        virtualinvoke $r8.<androidx.room.RoomSQLiteQuery: void bindNull(int)>($i0);

        goto label07;

     label06:
        virtualinvoke $r8.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>($i0, r5);

     label07:
        $i0 = $i0 + 1;

        goto label05;

     label08:
        r10 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r11 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r10, $r8, 0, null);

     label09:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndex(android.database.Cursor,java.lang.String)>($r11, "work_spec_id");

     label10:
        if $i0 != -1 goto label11;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        return;

     label11:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToNext()>();

     label12:
        if $z0 == 0 goto label19;

     label13:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean isNull(int)>($i0);

     label14:
        if $z0 != 0 goto label11;

     label15:
        r5 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r4 = virtualinvoke r1.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.util.ArrayList) $r4;

     label16:
        if r6 == null goto label11;

     label17:
        r5 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(0);

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label18:
        goto label11;

     label19:
        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        return;

     label20:
        r12 := @caughtexception;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        throw r12;

     label21:
        return;

        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
    }

    static androidx.room.RoomDatabase access$000(androidx.work.impl.model.WorkSpecDao_Impl)
    {
        androidx.room.RoomDatabase r1;
        androidx.work.impl.model.WorkSpecDao_Impl $r0;

        $r0 := @parameter0: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 = $r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        return r1;
    }

    static void access$100(androidx.work.impl.model.WorkSpecDao_Impl, androidx.collection.ArrayMap)
    {
        androidx.work.impl.model.WorkSpecDao_Impl $r0;
        androidx.collection.ArrayMap $r1;

        $r0 := @parameter0: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter1: androidx.collection.ArrayMap;

        specialinvoke $r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)>($r1);

        return;
    }

    static void access$200(androidx.work.impl.model.WorkSpecDao_Impl, androidx.collection.ArrayMap)
    {
        androidx.work.impl.model.WorkSpecDao_Impl $r0;
        androidx.collection.ArrayMap $r1;

        $r0 := @parameter0: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter1: androidx.collection.ArrayMap;

        specialinvoke $r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)>($r1);

        return;
    }

    public void delete(java.lang.String)
    {
        java.lang.Throwable $r5;
        androidx.room.RoomDatabase r3;
        androidx.room.SharedSQLiteStatement r4;
        java.lang.String $r1;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfDelete>;

        $r2 = virtualinvoke r4.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        if $r1 != null goto label1;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(1);

        goto label2;

     label1:
        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void beginTransaction()>();

     label3:
        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label4:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void endTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfDelete>;

        virtualinvoke r4.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        return;

     label5:
        $r5 := @caughtexception;

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void endTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfDelete>;

        virtualinvoke r4.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        throw $r5;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.util.List getAllEligibleWorkSpecsForScheduling(int)
    {
        byte[] $r10;
        androidx.work.BackoffPolicy $r15;
        androidx.work.Constraints r8;
        androidx.work.OutOfQuotaPolicy $r16;
        androidx.work.Data $r14;
        boolean $z0;
        java.lang.Throwable r17;
        androidx.room.RoomSQLiteQuery $r1, r4;
        androidx.work.NetworkType $r9;
        long l6;
        androidx.work.impl.model.WorkSpec r12;
        java.util.ArrayList r5;
        int $i0, i1, i2, i3, i4, i5, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, $i19, $i20, $i21, $i22, i23, i24, $i25, $i26;
        java.lang.String $r6, $r7;
        android.database.Cursor $r3;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.ContentUriTriggers $r11;
        androidx.work.WorkInfo$State $r13;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT `required_network_type`, `requires_charging`, `requires_device_idle`, `requires_battery_not_low`, `requires_storage_not_low`, `trigger_content_update_delay`, `trigger_max_content_delay`, `content_uri_triggers`, `WorkSpec`.`id` AS `id`, `WorkSpec`.`state` AS `state`, `WorkSpec`.`worker_class_name` AS `worker_class_name`, `WorkSpec`.`input_merger_class_name` AS `input_merger_class_name`, `WorkSpec`.`input` AS `input`, `WorkSpec`.`output` AS `output`, `WorkSpec`.`initial_delay` AS `initial_delay`, `WorkSpec`.`interval_duration` AS `interval_duration`, `WorkSpec`.`flex_duration` AS `flex_duration`, `WorkSpec`.`run_attempt_count` AS `run_attempt_count`, `WorkSpec`.`backoff_policy` AS `backoff_policy`, `WorkSpec`.`backoff_delay_duration` AS `backoff_delay_duration`, `WorkSpec`.`period_start_time` AS `period_start_time`, `WorkSpec`.`minimum_retention_duration` AS `minimum_retention_duration`, `WorkSpec`.`schedule_requested_at` AS `schedule_requested_at`, `WorkSpec`.`run_in_foreground` AS `run_in_foreground`, `WorkSpec`.`out_of_quota_policy` AS `out_of_quota_policy` FROM workspec WHERE state=0 ORDER BY period_start_time LIMIT ?", 1);

        l6 = (long) $i0;

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void bindLong(int,long)>(1, l6);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label01:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "required_network_type");

     label02:
        i7 = $i0;

     label03:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_charging");

     label04:
        i8 = $i0;

     label05:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_device_idle");

     label06:
        i1 = $i0;

     label07:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_battery_not_low");

        $i9 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_storage_not_low");

        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_content_update_delay");

        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_max_content_delay");

        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "content_uri_triggers");

        $i13 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "id");

     label08:
        i2 = $i13;

     label09:
        $i13 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "state");

        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "worker_class_name");

     label10:
        i15 = $i14;

     label11:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input_merger_class_name");

     label12:
        i3 = $i14;

     label13:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input");

     label14:
        i16 = $i14;

     label15:
        i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "output");

     label16:
        r4 = $r1;

     label17:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "initial_delay");

     label18:
        i17 = $i14;

     label19:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "interval_duration");

     label20:
        i18 = $i14;

     label21:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "flex_duration");

     label22:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_attempt_count");

     label23:
        $i20 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_policy");

     label24:
        i5 = $i20;

     label25:
        $i20 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_delay_duration");

     label26:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "period_start_time");

     label27:
        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "minimum_retention_duration");

     label28:
        i23 = $i22;

     label29:
        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "schedule_requested_at");

     label30:
        i24 = $i22;

     label31:
        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_in_foreground");

     label32:
        $i25 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "out_of_quota_policy");

     label33:
        r5 = new java.util.ArrayList;

     label34:
        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i26);

     label35:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label36:
        if $z0 == 0 goto label67;

     label37:
        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i2);

        $r7 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i15);

        r8 = new androidx.work.Constraints;

        specialinvoke r8.<androidx.work.Constraints: void <init>()>();

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i7);

        $r9 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i26);

     label38:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiredNetworkType(androidx.work.NetworkType)>($r9);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i8);

     label39:
        if $i26 == 0 goto label40;

        $z0 = 1;

        goto label41;

     label40:
        $z0 = 0;

     label41:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresCharging(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i1);

     label42:
        if $i26 == 0 goto label43;

        $z0 = 1;

        goto label44;

     label43:
        $z0 = 0;

     label44:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresDeviceIdle(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i0);

     label45:
        if $i26 == 0 goto label46;

        $z0 = 1;

        goto label47;

     label46:
        $z0 = 0;

     label47:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresBatteryNotLow(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i9);

     label48:
        if $i26 == 0 goto label49;

        $z0 = 1;

        goto label50;

     label49:
        $z0 = 0;

     label50:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresStorageNotLow(boolean)>($z0);

        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i10);

     label51:
        virtualinvoke r8.<androidx.work.Constraints: void setTriggerContentUpdateDelay(long)>(l6);

        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i11);

        virtualinvoke r8.<androidx.work.Constraints: void setTriggerMaxContentDelay(long)>(l6);

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>($i12);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])>($r10);

        virtualinvoke r8.<androidx.work.Constraints: void setContentUriTriggers(androidx.work.ContentUriTriggers)>($r11);

        r12 = new androidx.work.impl.model.WorkSpec;

     label52:
        specialinvoke r12.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i13);

        $r13 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i26);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r13;

        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i3);

        r12.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r6;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i16);

     label53:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r14;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i4);

     label54:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r14;

     label55:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i17);

        r12.<androidx.work.impl.model.WorkSpec: long initialDelay> = l6;

     label56:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i18);

        r12.<androidx.work.impl.model.WorkSpec: long intervalDuration> = l6;

        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i14);

        r12.<androidx.work.impl.model.WorkSpec: long flexDuration> = l6;

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i19);

        r12.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i26;

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i5);

     label57:
        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i26);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r15;

     label58:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i20);

        r12.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = l6;

     label59:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i21);

        r12.<androidx.work.impl.model.WorkSpec: long periodStartTime> = l6;

     label60:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i23);

        r12.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = l6;

     label61:
        $i26 = i24;

     label62:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i24);

        r12.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = l6;

        i24 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i22);

     label63:
        if i24 == 0 goto label64;

        $z0 = 1;

        goto label65;

     label64:
        $z0 = 0;

     label65:
        r12.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        i24 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i25);

        $r16 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>(i24);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r16;

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = r8;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r12);

     label66:
        i24 = $i26;

        goto label35;

     label67:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label68:
        r17 := @caughtexception;

        goto label72;

     label69:
        r17 := @caughtexception;

        r4 = $r1;

        goto label72;

     label70:
        r17 := @caughtexception;

        r4 = $r1;

        goto label72;

     label71:
        r17 := @caughtexception;

        r4 = $r1;

     label72:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r17;

        catch java.lang.Throwable from label01 to label02 with label71;
        catch java.lang.Throwable from label03 to label04 with label71;
        catch java.lang.Throwable from label05 to label06 with label71;
        catch java.lang.Throwable from label07 to label08 with label71;
        catch java.lang.Throwable from label09 to label10 with label71;
        catch java.lang.Throwable from label11 to label12 with label70;
        catch java.lang.Throwable from label13 to label14 with label69;
        catch java.lang.Throwable from label15 to label16 with label69;
        catch java.lang.Throwable from label17 to label18 with label68;
        catch java.lang.Throwable from label19 to label20 with label68;
        catch java.lang.Throwable from label21 to label22 with label68;
        catch java.lang.Throwable from label22 to label23 with label68;
        catch java.lang.Throwable from label23 to label24 with label68;
        catch java.lang.Throwable from label25 to label26 with label68;
        catch java.lang.Throwable from label26 to label27 with label68;
        catch java.lang.Throwable from label27 to label28 with label68;
        catch java.lang.Throwable from label29 to label30 with label68;
        catch java.lang.Throwable from label31 to label32 with label68;
        catch java.lang.Throwable from label32 to label33 with label68;
        catch java.lang.Throwable from label33 to label34 with label68;
        catch java.lang.Throwable from label34 to label36 with label68;
        catch java.lang.Throwable from label37 to label38 with label68;
        catch java.lang.Throwable from label38 to label39 with label68;
        catch java.lang.Throwable from label41 to label42 with label68;
        catch java.lang.Throwable from label44 to label45 with label68;
        catch java.lang.Throwable from label47 to label48 with label68;
        catch java.lang.Throwable from label50 to label51 with label68;
        catch java.lang.Throwable from label51 to label52 with label68;
        catch java.lang.Throwable from label52 to label53 with label68;
        catch java.lang.Throwable from label53 to label54 with label68;
        catch java.lang.Throwable from label54 to label55 with label68;
        catch java.lang.Throwable from label55 to label56 with label68;
        catch java.lang.Throwable from label56 to label57 with label68;
        catch java.lang.Throwable from label57 to label58 with label68;
        catch java.lang.Throwable from label58 to label59 with label68;
        catch java.lang.Throwable from label59 to label60 with label68;
        catch java.lang.Throwable from label60 to label61 with label68;
        catch java.lang.Throwable from label62 to label63 with label68;
        catch java.lang.Throwable from label65 to label66 with label68;
    }

    public java.util.List getAllUnfinishedWork()
    {
        java.lang.Throwable $r6;
        androidx.room.RoomSQLiteQuery $r1;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.util.ArrayList r4;
        int $i0;
        java.lang.String $r5;
        android.database.Cursor $r3;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5)", 0);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label1:
        r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getCount()>();

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

     label2:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label6;

     label4:
        $r5 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r5);

     label5:
        goto label2;

     label6:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r4;

     label7:
        $r6 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public java.util.List getAllWorkSpecIds()
    {
        java.lang.Throwable $r6;
        androidx.room.RoomSQLiteQuery $r1;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.util.ArrayList r4;
        int $i0;
        java.lang.String $r5;
        android.database.Cursor $r3;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id FROM workspec", 0);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label1:
        r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getCount()>();

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

     label2:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label3:
        if $z0 == 0 goto label6;

     label4:
        $r5 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r5);

     label5:
        goto label2;

     label6:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r4;

     label7:
        $r6 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public androidx.lifecycle.LiveData getAllWorkSpecIdsLiveData()
    {
        androidx.work.impl.model.WorkSpecDao_Impl$10 $r1;
        androidx.room.InvalidationTracker $r4;
        androidx.room.RoomSQLiteQuery $r2;
        androidx.lifecycle.LiveData $r6;
        androidx.room.RoomDatabase $r3;
        java.lang.String[] $r5;
        androidx.work.impl.model.WorkSpecDao_Impl r0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id FROM workspec", 0);

        $r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = virtualinvoke $r3.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "workspec";

        $r1 = new androidx.work.impl.model.WorkSpecDao_Impl$10;

        specialinvoke $r1.<androidx.work.impl.model.WorkSpecDao_Impl$10: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomSQLiteQuery)>(r0, $r2);

        $r6 = virtualinvoke $r4.<androidx.room.InvalidationTracker: androidx.lifecycle.LiveData createLiveData(java.lang.String[],boolean,java.util.concurrent.Callable)>($r5, 1, $r1);

        return $r6;
    }

    public java.util.List getEligibleWorkForScheduling(int)
    {
        byte[] $r10;
        androidx.work.BackoffPolicy $r15;
        androidx.work.Constraints r8;
        androidx.work.OutOfQuotaPolicy $r16;
        androidx.work.Data $r14;
        boolean $z0;
        java.lang.Throwable r17;
        androidx.room.RoomSQLiteQuery $r1, r4;
        androidx.work.NetworkType $r9;
        long l6;
        androidx.work.impl.model.WorkSpec r12;
        java.util.ArrayList r5;
        int $i0, i1, i2, i3, i4, i5, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, $i19, $i20, $i21, $i22, i23, i24, $i25, $i26;
        java.lang.String $r6, $r7;
        android.database.Cursor $r3;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.ContentUriTriggers $r11;
        androidx.work.WorkInfo$State $r13;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT `required_network_type`, `requires_charging`, `requires_device_idle`, `requires_battery_not_low`, `requires_storage_not_low`, `trigger_content_update_delay`, `trigger_max_content_delay`, `content_uri_triggers`, `WorkSpec`.`id` AS `id`, `WorkSpec`.`state` AS `state`, `WorkSpec`.`worker_class_name` AS `worker_class_name`, `WorkSpec`.`input_merger_class_name` AS `input_merger_class_name`, `WorkSpec`.`input` AS `input`, `WorkSpec`.`output` AS `output`, `WorkSpec`.`initial_delay` AS `initial_delay`, `WorkSpec`.`interval_duration` AS `interval_duration`, `WorkSpec`.`flex_duration` AS `flex_duration`, `WorkSpec`.`run_attempt_count` AS `run_attempt_count`, `WorkSpec`.`backoff_policy` AS `backoff_policy`, `WorkSpec`.`backoff_delay_duration` AS `backoff_delay_duration`, `WorkSpec`.`period_start_time` AS `period_start_time`, `WorkSpec`.`minimum_retention_duration` AS `minimum_retention_duration`, `WorkSpec`.`schedule_requested_at` AS `schedule_requested_at`, `WorkSpec`.`run_in_foreground` AS `run_in_foreground`, `WorkSpec`.`out_of_quota_policy` AS `out_of_quota_policy` FROM workspec WHERE state=0 AND schedule_requested_at=-1 ORDER BY period_start_time LIMIT (SELECT MAX(?-COUNT(*), 0) FROM workspec WHERE schedule_requested_at<>-1 AND state NOT IN (2, 3, 5))", 1);

        l6 = (long) $i0;

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void bindLong(int,long)>(1, l6);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label01:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "required_network_type");

     label02:
        i7 = $i0;

     label03:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_charging");

     label04:
        i8 = $i0;

     label05:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_device_idle");

     label06:
        i1 = $i0;

     label07:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_battery_not_low");

        $i9 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_storage_not_low");

        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_content_update_delay");

        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_max_content_delay");

        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "content_uri_triggers");

        $i13 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "id");

     label08:
        i2 = $i13;

     label09:
        $i13 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "state");

        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "worker_class_name");

     label10:
        i15 = $i14;

     label11:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input_merger_class_name");

     label12:
        i3 = $i14;

     label13:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input");

     label14:
        i16 = $i14;

     label15:
        i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "output");

     label16:
        r4 = $r1;

     label17:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "initial_delay");

     label18:
        i17 = $i14;

     label19:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "interval_duration");

     label20:
        i18 = $i14;

     label21:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "flex_duration");

     label22:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_attempt_count");

     label23:
        $i20 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_policy");

     label24:
        i5 = $i20;

     label25:
        $i20 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_delay_duration");

     label26:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "period_start_time");

     label27:
        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "minimum_retention_duration");

     label28:
        i23 = $i22;

     label29:
        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "schedule_requested_at");

     label30:
        i24 = $i22;

     label31:
        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_in_foreground");

     label32:
        $i25 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "out_of_quota_policy");

     label33:
        r5 = new java.util.ArrayList;

     label34:
        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i26);

     label35:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label36:
        if $z0 == 0 goto label67;

     label37:
        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i2);

        $r7 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i15);

        r8 = new androidx.work.Constraints;

        specialinvoke r8.<androidx.work.Constraints: void <init>()>();

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i7);

        $r9 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i26);

     label38:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiredNetworkType(androidx.work.NetworkType)>($r9);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i8);

     label39:
        if $i26 == 0 goto label40;

        $z0 = 1;

        goto label41;

     label40:
        $z0 = 0;

     label41:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresCharging(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i1);

     label42:
        if $i26 == 0 goto label43;

        $z0 = 1;

        goto label44;

     label43:
        $z0 = 0;

     label44:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresDeviceIdle(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i0);

     label45:
        if $i26 == 0 goto label46;

        $z0 = 1;

        goto label47;

     label46:
        $z0 = 0;

     label47:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresBatteryNotLow(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i9);

     label48:
        if $i26 == 0 goto label49;

        $z0 = 1;

        goto label50;

     label49:
        $z0 = 0;

     label50:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresStorageNotLow(boolean)>($z0);

        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i10);

     label51:
        virtualinvoke r8.<androidx.work.Constraints: void setTriggerContentUpdateDelay(long)>(l6);

        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i11);

        virtualinvoke r8.<androidx.work.Constraints: void setTriggerMaxContentDelay(long)>(l6);

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>($i12);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])>($r10);

        virtualinvoke r8.<androidx.work.Constraints: void setContentUriTriggers(androidx.work.ContentUriTriggers)>($r11);

        r12 = new androidx.work.impl.model.WorkSpec;

     label52:
        specialinvoke r12.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i13);

        $r13 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i26);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r13;

        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i3);

        r12.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r6;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i16);

     label53:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r14;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i4);

     label54:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r14;

     label55:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i17);

        r12.<androidx.work.impl.model.WorkSpec: long initialDelay> = l6;

     label56:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i18);

        r12.<androidx.work.impl.model.WorkSpec: long intervalDuration> = l6;

        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i14);

        r12.<androidx.work.impl.model.WorkSpec: long flexDuration> = l6;

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i19);

        r12.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i26;

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i5);

     label57:
        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i26);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r15;

     label58:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i20);

        r12.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = l6;

     label59:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i21);

        r12.<androidx.work.impl.model.WorkSpec: long periodStartTime> = l6;

     label60:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i23);

        r12.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = l6;

     label61:
        $i26 = i24;

     label62:
        l6 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i24);

        r12.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = l6;

        i24 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i22);

     label63:
        if i24 == 0 goto label64;

        $z0 = 1;

        goto label65;

     label64:
        $z0 = 0;

     label65:
        r12.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        i24 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i25);

        $r16 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>(i24);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r16;

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = r8;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r12);

     label66:
        i24 = $i26;

        goto label35;

     label67:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label68:
        r17 := @caughtexception;

        goto label72;

     label69:
        r17 := @caughtexception;

        r4 = $r1;

        goto label72;

     label70:
        r17 := @caughtexception;

        r4 = $r1;

        goto label72;

     label71:
        r17 := @caughtexception;

        r4 = $r1;

     label72:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r17;

        catch java.lang.Throwable from label01 to label02 with label71;
        catch java.lang.Throwable from label03 to label04 with label71;
        catch java.lang.Throwable from label05 to label06 with label71;
        catch java.lang.Throwable from label07 to label08 with label71;
        catch java.lang.Throwable from label09 to label10 with label71;
        catch java.lang.Throwable from label11 to label12 with label70;
        catch java.lang.Throwable from label13 to label14 with label69;
        catch java.lang.Throwable from label15 to label16 with label69;
        catch java.lang.Throwable from label17 to label18 with label68;
        catch java.lang.Throwable from label19 to label20 with label68;
        catch java.lang.Throwable from label21 to label22 with label68;
        catch java.lang.Throwable from label22 to label23 with label68;
        catch java.lang.Throwable from label23 to label24 with label68;
        catch java.lang.Throwable from label25 to label26 with label68;
        catch java.lang.Throwable from label26 to label27 with label68;
        catch java.lang.Throwable from label27 to label28 with label68;
        catch java.lang.Throwable from label29 to label30 with label68;
        catch java.lang.Throwable from label31 to label32 with label68;
        catch java.lang.Throwable from label32 to label33 with label68;
        catch java.lang.Throwable from label33 to label34 with label68;
        catch java.lang.Throwable from label34 to label36 with label68;
        catch java.lang.Throwable from label37 to label38 with label68;
        catch java.lang.Throwable from label38 to label39 with label68;
        catch java.lang.Throwable from label41 to label42 with label68;
        catch java.lang.Throwable from label44 to label45 with label68;
        catch java.lang.Throwable from label47 to label48 with label68;
        catch java.lang.Throwable from label50 to label51 with label68;
        catch java.lang.Throwable from label51 to label52 with label68;
        catch java.lang.Throwable from label52 to label53 with label68;
        catch java.lang.Throwable from label53 to label54 with label68;
        catch java.lang.Throwable from label54 to label55 with label68;
        catch java.lang.Throwable from label55 to label56 with label68;
        catch java.lang.Throwable from label56 to label57 with label68;
        catch java.lang.Throwable from label57 to label58 with label68;
        catch java.lang.Throwable from label58 to label59 with label68;
        catch java.lang.Throwable from label59 to label60 with label68;
        catch java.lang.Throwable from label60 to label61 with label68;
        catch java.lang.Throwable from label62 to label63 with label68;
        catch java.lang.Throwable from label65 to label66 with label68;
    }

    public java.util.List getInputsFromPrerequisites(java.lang.String)
    {
        java.lang.Throwable r8;
        androidx.room.RoomSQLiteQuery $r2;
        byte[] $r6;
        androidx.room.RoomDatabase r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.util.ArrayList r5;
        int $i0;
        java.lang.String $r1;
        androidx.work.Data $r7;
        android.database.Cursor $r4;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT output FROM workspec WHERE id IN (SELECT prerequisite_id FROM dependency WHERE work_spec_id=?)", 1);

        if $r1 != null goto label1;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r3, $r2, 0, null);

     label3:
        r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

     label4:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label5:
        if $z0 == 0 goto label8;

     label6:
        $r6 = interfaceinvoke $r4.<android.database.Cursor: byte[] getBlob(int)>(0);

        $r7 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r6);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r7);

     label7:
        goto label4;

     label8:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label9:
        r8 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r8;

        catch java.lang.Throwable from label3 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public java.util.List getRecentlyCompletedWork(long)
    {
        byte[] $r10;
        androidx.work.BackoffPolicy $r15;
        androidx.work.Constraints r8;
        androidx.work.OutOfQuotaPolicy $r16;
        androidx.work.Data $r14;
        boolean $z0;
        java.lang.Throwable r17;
        androidx.room.RoomSQLiteQuery $r1, r4;
        androidx.work.NetworkType $r9;
        long $l0;
        androidx.work.impl.model.WorkSpec r12;
        java.util.ArrayList r5;
        int i1, i2, i3, i4, $i5, i6, i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, i19, i20, $i21, i22, $i23, i24, i25, $i26, i27;
        java.lang.String $r6, $r7;
        android.database.Cursor $r3;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.ContentUriTriggers $r11;
        androidx.work.WorkInfo$State $r13;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT `required_network_type`, `requires_charging`, `requires_device_idle`, `requires_battery_not_low`, `requires_storage_not_low`, `trigger_content_update_delay`, `trigger_max_content_delay`, `content_uri_triggers`, `WorkSpec`.`id` AS `id`, `WorkSpec`.`state` AS `state`, `WorkSpec`.`worker_class_name` AS `worker_class_name`, `WorkSpec`.`input_merger_class_name` AS `input_merger_class_name`, `WorkSpec`.`input` AS `input`, `WorkSpec`.`output` AS `output`, `WorkSpec`.`initial_delay` AS `initial_delay`, `WorkSpec`.`interval_duration` AS `interval_duration`, `WorkSpec`.`flex_duration` AS `flex_duration`, `WorkSpec`.`run_attempt_count` AS `run_attempt_count`, `WorkSpec`.`backoff_policy` AS `backoff_policy`, `WorkSpec`.`backoff_delay_duration` AS `backoff_delay_duration`, `WorkSpec`.`period_start_time` AS `period_start_time`, `WorkSpec`.`minimum_retention_duration` AS `minimum_retention_duration`, `WorkSpec`.`schedule_requested_at` AS `schedule_requested_at`, `WorkSpec`.`run_in_foreground` AS `run_in_foreground`, `WorkSpec`.`out_of_quota_policy` AS `out_of_quota_policy` FROM workspec WHERE period_start_time >= ? AND state IN (2, 3, 5) ORDER BY period_start_time DESC", 1);

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void bindLong(int,long)>(1, $l0);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label01:
        $i5 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "required_network_type");

     label02:
        i6 = $i5;

     label03:
        $i5 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_charging");

     label04:
        i7 = $i5;

     label05:
        $i5 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_device_idle");

        $i8 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_battery_not_low");

        $i9 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_storage_not_low");

        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_content_update_delay");

        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_max_content_delay");

        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "content_uri_triggers");

     label06:
        i2 = $i12;

     label07:
        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "id");

     label08:
        i1 = $i12;

     label09:
        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "state");

     label10:
        i3 = $i12;

     label11:
        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "worker_class_name");

     label12:
        i13 = $i12;

     label13:
        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input_merger_class_name");

     label14:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input");

     label15:
        i4 = $i14;

     label16:
        $i15 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "output");

     label17:
        r4 = $r1;

     label18:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "initial_delay");

     label19:
        $i16 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "interval_duration");

     label20:
        $i17 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "flex_duration");

     label21:
        $i18 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_attempt_count");

     label22:
        i19 = $i18;

     label23:
        $i18 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_policy");

     label24:
        i20 = $i18;

     label25:
        $i18 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_delay_duration");

     label26:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "period_start_time");

     label27:
        i22 = $i21;

     label28:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "minimum_retention_duration");

     label29:
        $i23 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "schedule_requested_at");

     label30:
        i24 = $i23;

     label31:
        $i23 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_in_foreground");

     label32:
        i25 = $i23;

     label33:
        $i23 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "out_of_quota_policy");

     label34:
        r5 = new java.util.ArrayList;

     label35:
        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i26);

     label36:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label37:
        if $z0 == 0 goto label70;

     label38:
        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r7 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i13);

        r8 = new androidx.work.Constraints;

        specialinvoke r8.<androidx.work.Constraints: void <init>()>();

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i6);

        $r9 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i26);

     label39:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiredNetworkType(androidx.work.NetworkType)>($r9);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i7);

     label40:
        if $i26 == 0 goto label41;

        $z0 = 1;

        goto label42;

     label41:
        $z0 = 0;

     label42:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresCharging(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i5);

     label43:
        if $i26 == 0 goto label44;

        $z0 = 1;

        goto label45;

     label44:
        $z0 = 0;

     label45:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresDeviceIdle(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i8);

     label46:
        if $i26 == 0 goto label47;

        $z0 = 1;

        goto label48;

     label47:
        $z0 = 0;

     label48:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresBatteryNotLow(boolean)>($z0);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i9);

     label49:
        if $i26 == 0 goto label50;

        $z0 = 1;

        goto label51;

     label50:
        $z0 = 0;

     label51:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresStorageNotLow(boolean)>($z0);

        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i10);

     label52:
        virtualinvoke r8.<androidx.work.Constraints: void setTriggerContentUpdateDelay(long)>($l0);

        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i11);

        virtualinvoke r8.<androidx.work.Constraints: void setTriggerMaxContentDelay(long)>($l0);

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i2);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])>($r10);

        virtualinvoke r8.<androidx.work.Constraints: void setContentUriTriggers(androidx.work.ContentUriTriggers)>($r11);

        r12 = new androidx.work.impl.model.WorkSpec;

     label53:
        specialinvoke r12.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        $i26 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i3);

     label54:
        $r13 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i26);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r13;

        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>($i12);

        r12.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r6;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i4);

        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r14;

     label55:
        i27 = $i15;

     label56:
        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>($i15);

        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r14;

     label57:
        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i14);

        r12.<androidx.work.impl.model.WorkSpec: long initialDelay> = $l0;

        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i16);

        r12.<androidx.work.impl.model.WorkSpec: long intervalDuration> = $l0;

        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i17);

        r12.<androidx.work.impl.model.WorkSpec: long flexDuration> = $l0;

        $i15 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i19);

        r12.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i15;

        $i15 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i20);

     label58:
        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i15);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r15;

     label59:
        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i18);

        r12.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = $l0;

     label60:
        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i22);

        r12.<androidx.work.impl.model.WorkSpec: long periodStartTime> = $l0;

     label61:
        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i21);

        r12.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = $l0;

     label62:
        $i26 = i24;

     label63:
        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i24);

        r12.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = $l0;

     label64:
        i24 = i25;

     label65:
        i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i25);

     label66:
        if i25 == 0 goto label67;

        $z0 = 1;

        goto label68;

     label67:
        $z0 = 0;

     label68:
        r12.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i23);

        $r16 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>(i25);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r16;

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = r8;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r12);

     label69:
        $i15 = i27;

        i25 = i24;

        i24 = $i26;

        goto label36;

     label70:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label71:
        r17 := @caughtexception;

        goto label75;

     label72:
        r17 := @caughtexception;

        r4 = $r1;

        goto label75;

     label73:
        r17 := @caughtexception;

        r4 = $r1;

        goto label75;

     label74:
        r17 := @caughtexception;

        r4 = $r1;

     label75:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r17;

        catch java.lang.Throwable from label01 to label02 with label74;
        catch java.lang.Throwable from label03 to label04 with label74;
        catch java.lang.Throwable from label05 to label06 with label74;
        catch java.lang.Throwable from label07 to label08 with label74;
        catch java.lang.Throwable from label09 to label10 with label74;
        catch java.lang.Throwable from label11 to label12 with label73;
        catch java.lang.Throwable from label13 to label14 with label72;
        catch java.lang.Throwable from label14 to label15 with label72;
        catch java.lang.Throwable from label16 to label17 with label72;
        catch java.lang.Throwable from label18 to label19 with label71;
        catch java.lang.Throwable from label19 to label20 with label71;
        catch java.lang.Throwable from label20 to label21 with label71;
        catch java.lang.Throwable from label21 to label22 with label71;
        catch java.lang.Throwable from label23 to label24 with label71;
        catch java.lang.Throwable from label25 to label26 with label71;
        catch java.lang.Throwable from label26 to label27 with label71;
        catch java.lang.Throwable from label28 to label29 with label71;
        catch java.lang.Throwable from label29 to label30 with label71;
        catch java.lang.Throwable from label31 to label32 with label71;
        catch java.lang.Throwable from label33 to label34 with label71;
        catch java.lang.Throwable from label34 to label35 with label71;
        catch java.lang.Throwable from label35 to label37 with label71;
        catch java.lang.Throwable from label38 to label39 with label71;
        catch java.lang.Throwable from label39 to label40 with label71;
        catch java.lang.Throwable from label42 to label43 with label71;
        catch java.lang.Throwable from label45 to label46 with label71;
        catch java.lang.Throwable from label48 to label49 with label71;
        catch java.lang.Throwable from label51 to label52 with label71;
        catch java.lang.Throwable from label52 to label53 with label71;
        catch java.lang.Throwable from label53 to label54 with label71;
        catch java.lang.Throwable from label54 to label55 with label71;
        catch java.lang.Throwable from label56 to label57 with label71;
        catch java.lang.Throwable from label57 to label58 with label71;
        catch java.lang.Throwable from label58 to label59 with label71;
        catch java.lang.Throwable from label59 to label60 with label71;
        catch java.lang.Throwable from label60 to label61 with label71;
        catch java.lang.Throwable from label61 to label62 with label71;
        catch java.lang.Throwable from label63 to label64 with label71;
        catch java.lang.Throwable from label65 to label66 with label71;
        catch java.lang.Throwable from label68 to label69 with label71;
    }

    public java.util.List getRunningWork()
    {
        byte[] $r10;
        androidx.work.BackoffPolicy $r15;
        androidx.work.Constraints r8;
        androidx.work.OutOfQuotaPolicy $r16;
        androidx.work.Data $r14;
        boolean $z0;
        java.lang.Throwable r17;
        androidx.room.RoomSQLiteQuery $r1, r4;
        androidx.work.NetworkType $r9;
        long $l26;
        androidx.work.impl.model.WorkSpec r12;
        java.util.ArrayList r5;
        int i0, i1, i2, $i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, i12, $i13, $i14, i15, i16, $i17, i18, $i19, $i20, $i21, i22, i23, i24, $i25, i27;
        java.lang.String $r6, $r7;
        android.database.Cursor $r3;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.ContentUriTriggers $r11;
        androidx.work.WorkInfo$State $r13;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT `required_network_type`, `requires_charging`, `requires_device_idle`, `requires_battery_not_low`, `requires_storage_not_low`, `trigger_content_update_delay`, `trigger_max_content_delay`, `content_uri_triggers`, `WorkSpec`.`id` AS `id`, `WorkSpec`.`state` AS `state`, `WorkSpec`.`worker_class_name` AS `worker_class_name`, `WorkSpec`.`input_merger_class_name` AS `input_merger_class_name`, `WorkSpec`.`input` AS `input`, `WorkSpec`.`output` AS `output`, `WorkSpec`.`initial_delay` AS `initial_delay`, `WorkSpec`.`interval_duration` AS `interval_duration`, `WorkSpec`.`flex_duration` AS `flex_duration`, `WorkSpec`.`run_attempt_count` AS `run_attempt_count`, `WorkSpec`.`backoff_policy` AS `backoff_policy`, `WorkSpec`.`backoff_delay_duration` AS `backoff_delay_duration`, `WorkSpec`.`period_start_time` AS `period_start_time`, `WorkSpec`.`minimum_retention_duration` AS `minimum_retention_duration`, `WorkSpec`.`schedule_requested_at` AS `schedule_requested_at`, `WorkSpec`.`run_in_foreground` AS `run_in_foreground`, `WorkSpec`.`out_of_quota_policy` AS `out_of_quota_policy` FROM workspec WHERE state=1", 0);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label01:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "required_network_type");

     label02:
        i4 = $i3;

     label03:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_charging");

     label04:
        i5 = $i3;

     label05:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_device_idle");

     label06:
        i6 = $i3;

     label07:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_battery_not_low");

     label08:
        i7 = $i3;

     label09:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_storage_not_low");

     label10:
        i8 = $i3;

     label11:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_content_update_delay");

        $i9 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_max_content_delay");

        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "content_uri_triggers");

        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "id");

     label12:
        i12 = $i11;

     label13:
        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "state");

        $i13 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "worker_class_name");

        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input_merger_class_name");

     label14:
        i15 = $i14;

     label15:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input");

     label16:
        i0 = $i14;

     label17:
        i1 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "output");

     label18:
        r4 = $r1;

     label19:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "initial_delay");

     label20:
        i16 = $i14;

     label21:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "interval_duration");

     label22:
        $i17 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "flex_duration");

     label23:
        i18 = $i17;

     label24:
        $i17 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_attempt_count");

     label25:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_policy");

     label26:
        i2 = $i19;

     label27:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_delay_duration");

     label28:
        $i20 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "period_start_time");

     label29:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "minimum_retention_duration");

     label30:
        i22 = $i21;

     label31:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "schedule_requested_at");

     label32:
        i23 = $i21;

     label33:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_in_foreground");

     label34:
        i24 = $i21;

     label35:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "out_of_quota_policy");

     label36:
        r5 = new java.util.ArrayList;

     label37:
        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i25);

     label38:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label39:
        if $z0 == 0 goto label72;

     label40:
        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i12);

        $r7 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>($i13);

        r8 = new androidx.work.Constraints;

        specialinvoke r8.<androidx.work.Constraints: void <init>()>();

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i4);

        $r9 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i25);

     label41:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiredNetworkType(androidx.work.NetworkType)>($r9);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i5);

     label42:
        if $i25 == 0 goto label43;

        $z0 = 1;

        goto label44;

     label43:
        $z0 = 0;

     label44:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresCharging(boolean)>($z0);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i6);

     label45:
        if $i25 == 0 goto label46;

        $z0 = 1;

        goto label47;

     label46:
        $z0 = 0;

     label47:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresDeviceIdle(boolean)>($z0);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i7);

     label48:
        if $i25 == 0 goto label49;

        $z0 = 1;

        goto label50;

     label49:
        $z0 = 0;

     label50:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresBatteryNotLow(boolean)>($z0);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i8);

     label51:
        if $i25 == 0 goto label52;

        $z0 = 1;

        goto label53;

     label52:
        $z0 = 0;

     label53:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresStorageNotLow(boolean)>($z0);

        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i3);

     label54:
        virtualinvoke r8.<androidx.work.Constraints: void setTriggerContentUpdateDelay(long)>($l26);

        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i9);

        virtualinvoke r8.<androidx.work.Constraints: void setTriggerMaxContentDelay(long)>($l26);

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>($i10);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])>($r10);

        virtualinvoke r8.<androidx.work.Constraints: void setContentUriTriggers(androidx.work.ContentUriTriggers)>($r11);

        r12 = new androidx.work.impl.model.WorkSpec;

        specialinvoke r12.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i11);

        $r13 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i25);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r13;

        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i15);

        r12.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r6;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i0);

     label55:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r14;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i1);

     label56:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r14;

     label57:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i16);

        r12.<androidx.work.impl.model.WorkSpec: long initialDelay> = $l26;

     label58:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i14);

        r12.<androidx.work.impl.model.WorkSpec: long intervalDuration> = $l26;

     label59:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i18);

        r12.<androidx.work.impl.model.WorkSpec: long flexDuration> = $l26;

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i17);

        r12.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i25;

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i2);

     label60:
        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i25);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r15;

     label61:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i19);

        r12.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = $l26;

     label62:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i20);

        r12.<androidx.work.impl.model.WorkSpec: long periodStartTime> = $l26;

     label63:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i22);

        r12.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = $l26;

     label64:
        $i25 = i23;

     label65:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i23);

        r12.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = $l26;

     label66:
        i27 = i24;

     label67:
        i23 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i24);

     label68:
        if i23 == 0 goto label69;

        $z0 = 1;

        goto label70;

     label69:
        $z0 = 0;

     label70:
        r12.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        i23 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i21);

        $r16 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>(i23);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r16;

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = r8;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r12);

     label71:
        i23 = $i25;

        i24 = i27;

        goto label38;

     label72:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label73:
        r17 := @caughtexception;

        goto label76;

     label74:
        r17 := @caughtexception;

        r4 = $r1;

        goto label76;

     label75:
        r17 := @caughtexception;

        r4 = $r1;

     label76:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r17;

        catch java.lang.Throwable from label01 to label02 with label75;
        catch java.lang.Throwable from label03 to label04 with label75;
        catch java.lang.Throwable from label05 to label06 with label75;
        catch java.lang.Throwable from label07 to label08 with label75;
        catch java.lang.Throwable from label09 to label10 with label75;
        catch java.lang.Throwable from label11 to label12 with label75;
        catch java.lang.Throwable from label13 to label14 with label75;
        catch java.lang.Throwable from label15 to label16 with label75;
        catch java.lang.Throwable from label17 to label18 with label74;
        catch java.lang.Throwable from label19 to label20 with label73;
        catch java.lang.Throwable from label21 to label22 with label73;
        catch java.lang.Throwable from label22 to label23 with label73;
        catch java.lang.Throwable from label24 to label25 with label73;
        catch java.lang.Throwable from label25 to label26 with label73;
        catch java.lang.Throwable from label27 to label28 with label73;
        catch java.lang.Throwable from label28 to label29 with label73;
        catch java.lang.Throwable from label29 to label30 with label73;
        catch java.lang.Throwable from label31 to label32 with label73;
        catch java.lang.Throwable from label33 to label34 with label73;
        catch java.lang.Throwable from label35 to label36 with label73;
        catch java.lang.Throwable from label36 to label37 with label73;
        catch java.lang.Throwable from label37 to label39 with label73;
        catch java.lang.Throwable from label40 to label41 with label73;
        catch java.lang.Throwable from label41 to label42 with label73;
        catch java.lang.Throwable from label44 to label45 with label73;
        catch java.lang.Throwable from label47 to label48 with label73;
        catch java.lang.Throwable from label50 to label51 with label73;
        catch java.lang.Throwable from label53 to label54 with label73;
        catch java.lang.Throwable from label54 to label55 with label73;
        catch java.lang.Throwable from label55 to label56 with label73;
        catch java.lang.Throwable from label56 to label57 with label73;
        catch java.lang.Throwable from label57 to label58 with label73;
        catch java.lang.Throwable from label58 to label59 with label73;
        catch java.lang.Throwable from label59 to label60 with label73;
        catch java.lang.Throwable from label60 to label61 with label73;
        catch java.lang.Throwable from label61 to label62 with label73;
        catch java.lang.Throwable from label62 to label63 with label73;
        catch java.lang.Throwable from label63 to label64 with label73;
        catch java.lang.Throwable from label65 to label66 with label73;
        catch java.lang.Throwable from label67 to label68 with label73;
        catch java.lang.Throwable from label70 to label71 with label73;
    }

    public androidx.lifecycle.LiveData getScheduleRequestedAtLiveData(java.lang.String)
    {
        androidx.room.InvalidationTracker $r5;
        androidx.room.RoomSQLiteQuery $r3;
        androidx.lifecycle.LiveData $r7;
        androidx.room.RoomDatabase $r4;
        java.lang.String[] $r6;
        androidx.work.impl.model.WorkSpecDao_Impl$14 $r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.lang.String $r1;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT schedule_requested_at FROM workspec WHERE id=?", 1);

        if $r1 != null goto label1;

        virtualinvoke $r3.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r3.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        $r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r5 = virtualinvoke $r4.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "workspec";

        $r2 = new androidx.work.impl.model.WorkSpecDao_Impl$14;

        specialinvoke $r2.<androidx.work.impl.model.WorkSpecDao_Impl$14: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomSQLiteQuery)>(r0, $r3);

        $r7 = virtualinvoke $r5.<androidx.room.InvalidationTracker: androidx.lifecycle.LiveData createLiveData(java.lang.String[],boolean,java.util.concurrent.Callable)>($r6, 0, $r2);

        return $r7;
    }

    public java.util.List getScheduledWork()
    {
        byte[] $r10;
        androidx.work.BackoffPolicy $r15;
        androidx.work.Constraints r8;
        androidx.work.OutOfQuotaPolicy $r16;
        androidx.work.Data $r14;
        boolean $z0;
        java.lang.Throwable r17;
        androidx.room.RoomSQLiteQuery $r1, r4;
        androidx.work.NetworkType $r9;
        long $l26;
        androidx.work.impl.model.WorkSpec r12;
        java.util.ArrayList r5;
        int i0, i1, i2, $i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, i12, $i13, $i14, i15, i16, $i17, i18, $i19, $i20, $i21, i22, i23, i24, $i25, i27;
        java.lang.String $r6, $r7;
        android.database.Cursor $r3;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.ContentUriTriggers $r11;
        androidx.work.WorkInfo$State $r13;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT `required_network_type`, `requires_charging`, `requires_device_idle`, `requires_battery_not_low`, `requires_storage_not_low`, `trigger_content_update_delay`, `trigger_max_content_delay`, `content_uri_triggers`, `WorkSpec`.`id` AS `id`, `WorkSpec`.`state` AS `state`, `WorkSpec`.`worker_class_name` AS `worker_class_name`, `WorkSpec`.`input_merger_class_name` AS `input_merger_class_name`, `WorkSpec`.`input` AS `input`, `WorkSpec`.`output` AS `output`, `WorkSpec`.`initial_delay` AS `initial_delay`, `WorkSpec`.`interval_duration` AS `interval_duration`, `WorkSpec`.`flex_duration` AS `flex_duration`, `WorkSpec`.`run_attempt_count` AS `run_attempt_count`, `WorkSpec`.`backoff_policy` AS `backoff_policy`, `WorkSpec`.`backoff_delay_duration` AS `backoff_delay_duration`, `WorkSpec`.`period_start_time` AS `period_start_time`, `WorkSpec`.`minimum_retention_duration` AS `minimum_retention_duration`, `WorkSpec`.`schedule_requested_at` AS `schedule_requested_at`, `WorkSpec`.`run_in_foreground` AS `run_in_foreground`, `WorkSpec`.`out_of_quota_policy` AS `out_of_quota_policy` FROM workspec WHERE state=0 AND schedule_requested_at<>-1", 0);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label01:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "required_network_type");

     label02:
        i4 = $i3;

     label03:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_charging");

     label04:
        i5 = $i3;

     label05:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_device_idle");

     label06:
        i6 = $i3;

     label07:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_battery_not_low");

     label08:
        i7 = $i3;

     label09:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "requires_storage_not_low");

     label10:
        i8 = $i3;

     label11:
        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_content_update_delay");

        $i9 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "trigger_max_content_delay");

        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "content_uri_triggers");

        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "id");

     label12:
        i12 = $i11;

     label13:
        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "state");

        $i13 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "worker_class_name");

        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input_merger_class_name");

     label14:
        i15 = $i14;

     label15:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "input");

     label16:
        i0 = $i14;

     label17:
        i1 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "output");

     label18:
        r4 = $r1;

     label19:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "initial_delay");

     label20:
        i16 = $i14;

     label21:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "interval_duration");

     label22:
        $i17 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "flex_duration");

     label23:
        i18 = $i17;

     label24:
        $i17 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_attempt_count");

     label25:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_policy");

     label26:
        i2 = $i19;

     label27:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "backoff_delay_duration");

     label28:
        $i20 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "period_start_time");

     label29:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "minimum_retention_duration");

     label30:
        i22 = $i21;

     label31:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "schedule_requested_at");

     label32:
        i23 = $i21;

     label33:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "run_in_foreground");

     label34:
        i24 = $i21;

     label35:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r3, "out_of_quota_policy");

     label36:
        r5 = new java.util.ArrayList;

     label37:
        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i25);

     label38:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

     label39:
        if $z0 == 0 goto label72;

     label40:
        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i12);

        $r7 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>($i13);

        r8 = new androidx.work.Constraints;

        specialinvoke r8.<androidx.work.Constraints: void <init>()>();

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i4);

        $r9 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i25);

     label41:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiredNetworkType(androidx.work.NetworkType)>($r9);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i5);

     label42:
        if $i25 == 0 goto label43;

        $z0 = 1;

        goto label44;

     label43:
        $z0 = 0;

     label44:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresCharging(boolean)>($z0);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i6);

     label45:
        if $i25 == 0 goto label46;

        $z0 = 1;

        goto label47;

     label46:
        $z0 = 0;

     label47:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresDeviceIdle(boolean)>($z0);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i7);

     label48:
        if $i25 == 0 goto label49;

        $z0 = 1;

        goto label50;

     label49:
        $z0 = 0;

     label50:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresBatteryNotLow(boolean)>($z0);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i8);

     label51:
        if $i25 == 0 goto label52;

        $z0 = 1;

        goto label53;

     label52:
        $z0 = 0;

     label53:
        virtualinvoke r8.<androidx.work.Constraints: void setRequiresStorageNotLow(boolean)>($z0);

        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i3);

     label54:
        virtualinvoke r8.<androidx.work.Constraints: void setTriggerContentUpdateDelay(long)>($l26);

        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i9);

        virtualinvoke r8.<androidx.work.Constraints: void setTriggerMaxContentDelay(long)>($l26);

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>($i10);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])>($r10);

        virtualinvoke r8.<androidx.work.Constraints: void setContentUriTriggers(androidx.work.ContentUriTriggers)>($r11);

        r12 = new androidx.work.impl.model.WorkSpec;

        specialinvoke r12.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i11);

        $r13 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i25);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r13;

        $r6 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(i15);

        r12.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r6;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i0);

     label55:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r14;

        $r10 = interfaceinvoke $r3.<android.database.Cursor: byte[] getBlob(int)>(i1);

     label56:
        $r14 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r10);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r14;

     label57:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i16);

        r12.<androidx.work.impl.model.WorkSpec: long initialDelay> = $l26;

     label58:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i14);

        r12.<androidx.work.impl.model.WorkSpec: long intervalDuration> = $l26;

     label59:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i18);

        r12.<androidx.work.impl.model.WorkSpec: long flexDuration> = $l26;

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i17);

        r12.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i25;

        $i25 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i2);

     label60:
        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i25);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r15;

     label61:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i19);

        r12.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = $l26;

     label62:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i20);

        r12.<androidx.work.impl.model.WorkSpec: long periodStartTime> = $l26;

     label63:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i22);

        r12.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = $l26;

     label64:
        $i25 = i23;

     label65:
        $l26 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(i23);

        r12.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = $l26;

     label66:
        i27 = i24;

     label67:
        i23 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(i24);

     label68:
        if i23 == 0 goto label69;

        $z0 = 1;

        goto label70;

     label69:
        $z0 = 0;

     label70:
        r12.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        i23 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i21);

        $r16 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>(i23);

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r16;

        r12.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = r8;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r12);

     label71:
        i23 = $i25;

        i24 = i27;

        goto label38;

     label72:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label73:
        r17 := @caughtexception;

        goto label76;

     label74:
        r17 := @caughtexception;

        r4 = $r1;

        goto label76;

     label75:
        r17 := @caughtexception;

        r4 = $r1;

     label76:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r17;

        catch java.lang.Throwable from label01 to label02 with label75;
        catch java.lang.Throwable from label03 to label04 with label75;
        catch java.lang.Throwable from label05 to label06 with label75;
        catch java.lang.Throwable from label07 to label08 with label75;
        catch java.lang.Throwable from label09 to label10 with label75;
        catch java.lang.Throwable from label11 to label12 with label75;
        catch java.lang.Throwable from label13 to label14 with label75;
        catch java.lang.Throwable from label15 to label16 with label75;
        catch java.lang.Throwable from label17 to label18 with label74;
        catch java.lang.Throwable from label19 to label20 with label73;
        catch java.lang.Throwable from label21 to label22 with label73;
        catch java.lang.Throwable from label22 to label23 with label73;
        catch java.lang.Throwable from label24 to label25 with label73;
        catch java.lang.Throwable from label25 to label26 with label73;
        catch java.lang.Throwable from label27 to label28 with label73;
        catch java.lang.Throwable from label28 to label29 with label73;
        catch java.lang.Throwable from label29 to label30 with label73;
        catch java.lang.Throwable from label31 to label32 with label73;
        catch java.lang.Throwable from label33 to label34 with label73;
        catch java.lang.Throwable from label35 to label36 with label73;
        catch java.lang.Throwable from label36 to label37 with label73;
        catch java.lang.Throwable from label37 to label39 with label73;
        catch java.lang.Throwable from label40 to label41 with label73;
        catch java.lang.Throwable from label41 to label42 with label73;
        catch java.lang.Throwable from label44 to label45 with label73;
        catch java.lang.Throwable from label47 to label48 with label73;
        catch java.lang.Throwable from label50 to label51 with label73;
        catch java.lang.Throwable from label53 to label54 with label73;
        catch java.lang.Throwable from label54 to label55 with label73;
        catch java.lang.Throwable from label55 to label56 with label73;
        catch java.lang.Throwable from label56 to label57 with label73;
        catch java.lang.Throwable from label57 to label58 with label73;
        catch java.lang.Throwable from label58 to label59 with label73;
        catch java.lang.Throwable from label59 to label60 with label73;
        catch java.lang.Throwable from label60 to label61 with label73;
        catch java.lang.Throwable from label61 to label62 with label73;
        catch java.lang.Throwable from label62 to label63 with label73;
        catch java.lang.Throwable from label63 to label64 with label73;
        catch java.lang.Throwable from label65 to label66 with label73;
        catch java.lang.Throwable from label67 to label68 with label73;
        catch java.lang.Throwable from label70 to label71 with label73;
    }

    public androidx.work.WorkInfo$State getState(java.lang.String)
    {
        java.lang.Throwable r6;
        androidx.room.RoomSQLiteQuery $r2;
        androidx.room.RoomDatabase r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.WorkInfo$State $r5;
        int $i0;
        java.lang.String $r1;
        android.database.Cursor $r4;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT state FROM workspec WHERE id=?", 1);

        if $r1 != null goto label1;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r3, $r2, 0, null);

     label3:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

     label4:
        if $z0 == 0 goto label7;

     label5:
        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>(0);

        $r5 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i0);

     label6:
        goto label8;

     label7:
        $r5 = null;

     label8:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        return $r5;

     label9:
        r6 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r6;

        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
    }

    public java.util.List getUnfinishedWorkWithName(java.lang.String)
    {
        java.lang.Throwable r6;
        androidx.room.RoomSQLiteQuery $r2;
        androidx.room.RoomDatabase r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.util.ArrayList r5;
        int $i0;
        java.lang.String $r1;
        android.database.Cursor $r4;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5) AND id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);

        if $r1 != null goto label1;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r3, $r2, 0, null);

     label3:
        r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

     label4:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label5:
        if $z0 == 0 goto label8;

     label6:
        $r1 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r1);

     label7:
        goto label4;

     label8:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label9:
        r6 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r6;

        catch java.lang.Throwable from label3 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public java.util.List getUnfinishedWorkWithTag(java.lang.String)
    {
        java.lang.Throwable r6;
        androidx.room.RoomSQLiteQuery $r2;
        androidx.room.RoomDatabase r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.util.ArrayList r5;
        int $i0;
        java.lang.String $r1;
        android.database.Cursor $r4;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5) AND id IN (SELECT work_spec_id FROM worktag WHERE tag=?)", 1);

        if $r1 != null goto label1;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r3, $r2, 0, null);

     label3:
        r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getCount()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(int)>($i0);

     label4:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label5:
        if $z0 == 0 goto label8;

     label6:
        $r1 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>(0);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r1);

     label7:
        goto label4;

     label8:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        return r5;

     label9:
        r6 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r6;

        catch java.lang.Throwable from label3 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)
    {
        byte[] $r9;
        androidx.work.BackoffPolicy $r14;
        androidx.work.Constraints r7;
        androidx.work.OutOfQuotaPolicy $r15;
        androidx.work.Data $r13;
        boolean $z0;
        java.lang.Throwable r16;
        androidx.room.RoomSQLiteQuery $r2, r5;
        androidx.work.NetworkType $r8;
        long $l25;
        androidx.work.impl.model.WorkSpec r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String $r1, $r6;
        android.database.Cursor $r4;
        androidx.room.RoomDatabase r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.ContentUriTriggers $r10;
        androidx.work.WorkInfo$State $r12;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT `required_network_type`, `requires_charging`, `requires_device_idle`, `requires_battery_not_low`, `requires_storage_not_low`, `trigger_content_update_delay`, `trigger_max_content_delay`, `content_uri_triggers`, `WorkSpec`.`id` AS `id`, `WorkSpec`.`state` AS `state`, `WorkSpec`.`worker_class_name` AS `worker_class_name`, `WorkSpec`.`input_merger_class_name` AS `input_merger_class_name`, `WorkSpec`.`input` AS `input`, `WorkSpec`.`output` AS `output`, `WorkSpec`.`initial_delay` AS `initial_delay`, `WorkSpec`.`interval_duration` AS `interval_duration`, `WorkSpec`.`flex_duration` AS `flex_duration`, `WorkSpec`.`run_attempt_count` AS `run_attempt_count`, `WorkSpec`.`backoff_policy` AS `backoff_policy`, `WorkSpec`.`backoff_delay_duration` AS `backoff_delay_duration`, `WorkSpec`.`period_start_time` AS `period_start_time`, `WorkSpec`.`minimum_retention_duration` AS `minimum_retention_duration`, `WorkSpec`.`schedule_requested_at` AS `schedule_requested_at`, `WorkSpec`.`run_in_foreground` AS `run_in_foreground`, `WorkSpec`.`out_of_quota_policy` AS `out_of_quota_policy` FROM workspec WHERE id=?", 1);

        if $r1 != null goto label01;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label02;

     label01:
        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label02:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r3, $r2, 0, null);

     label03:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "required_network_type");

        $i1 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "requires_charging");

        $i2 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "requires_device_idle");

        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "requires_battery_not_low");

        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "requires_storage_not_low");

        $i5 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "trigger_content_update_delay");

        $i6 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "trigger_max_content_delay");

        $i7 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "content_uri_triggers");

        $i8 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "id");

        $i9 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "state");

        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "worker_class_name");

        $i11 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "input_merger_class_name");

     label04:
        $i12 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "input");

     label05:
        $i13 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "output");

     label06:
        r5 = $r2;

     label07:
        $i14 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "initial_delay");

        $i15 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "interval_duration");

        $i16 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "flex_duration");

        $i17 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "run_attempt_count");

        $i18 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "backoff_policy");

        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "backoff_delay_duration");

        $i20 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "period_start_time");

        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "minimum_retention_duration");

        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "schedule_requested_at");

        $i23 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "run_in_foreground");

        $i24 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r4, "out_of_quota_policy");

        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

     label08:
        if $z0 == 0 goto label26;

     label09:
        $r1 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i8);

        $r6 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i10);

        r7 = new androidx.work.Constraints;

        specialinvoke r7.<androidx.work.Constraints: void <init>()>();

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i0);

        $r8 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i0);

        virtualinvoke r7.<androidx.work.Constraints: void setRequiredNetworkType(androidx.work.NetworkType)>($r8);

        $i1 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i1);

     label10:
        if $i1 == 0 goto label11;

        $z0 = 1;

        goto label12;

     label11:
        $z0 = 0;

     label12:
        virtualinvoke r7.<androidx.work.Constraints: void setRequiresCharging(boolean)>($z0);

        $i2 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i2);

     label13:
        if $i2 == 0 goto label14;

        $z0 = 1;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        virtualinvoke r7.<androidx.work.Constraints: void setRequiresDeviceIdle(boolean)>($z0);

        $i3 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i3);

     label16:
        if $i3 == 0 goto label17;

        $z0 = 1;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        virtualinvoke r7.<androidx.work.Constraints: void setRequiresBatteryNotLow(boolean)>($z0);

        $i4 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i4);

     label19:
        if $i4 == 0 goto label20;

        $z0 = 1;

        goto label21;

     label20:
        $z0 = 0;

     label21:
        virtualinvoke r7.<androidx.work.Constraints: void setRequiresStorageNotLow(boolean)>($z0);

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i5);

        virtualinvoke r7.<androidx.work.Constraints: void setTriggerContentUpdateDelay(long)>($l25);

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i6);

        virtualinvoke r7.<androidx.work.Constraints: void setTriggerMaxContentDelay(long)>($l25);

        $r9 = interfaceinvoke $r4.<android.database.Cursor: byte[] getBlob(int)>($i7);

        $r10 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])>($r9);

        virtualinvoke r7.<androidx.work.Constraints: void setContentUriTriggers(androidx.work.ContentUriTriggers)>($r10);

        r11 = new androidx.work.impl.model.WorkSpec;

        specialinvoke r11.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>($r1, $r6);

        $i5 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i9);

        $r12 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i5);

        r11.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r12;

        $r1 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>($i11);

        r11.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r1;

        $r9 = interfaceinvoke $r4.<android.database.Cursor: byte[] getBlob(int)>($i12);

        $r13 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r9);

        r11.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r13;

        $r9 = interfaceinvoke $r4.<android.database.Cursor: byte[] getBlob(int)>($i13);

        $r13 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r9);

        r11.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r13;

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i14);

        r11.<androidx.work.impl.model.WorkSpec: long initialDelay> = $l25;

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i15);

        r11.<androidx.work.impl.model.WorkSpec: long intervalDuration> = $l25;

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i16);

        r11.<androidx.work.impl.model.WorkSpec: long flexDuration> = $l25;

        $i11 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i17);

        r11.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i11;

        $i18 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i18);

        $r14 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i18);

        r11.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r14;

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i19);

        r11.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = $l25;

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i20);

        r11.<androidx.work.impl.model.WorkSpec: long periodStartTime> = $l25;

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i21);

        r11.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = $l25;

        $l25 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>($i22);

        r11.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = $l25;

        $i19 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i23);

     label22:
        if $i19 == 0 goto label23;

        $z0 = 1;

        goto label24;

     label23:
        $z0 = 0;

     label24:
        r11.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        $i24 = interfaceinvoke $r4.<android.database.Cursor: int getInt(int)>($i24);

        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>($i24);

        r11.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r15;

        r11.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = r7;

     label25:
        goto label27;

     label26:
        r11 = null;

     label27:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void release()>();

        return r11;

     label28:
        r16 := @caughtexception;

        goto label32;

     label29:
        r16 := @caughtexception;

        r5 = $r2;

        goto label32;

     label30:
        r16 := @caughtexception;

        r5 = $r2;

        goto label32;

     label31:
        r16 := @caughtexception;

        r5 = $r2;

     label32:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        virtualinvoke r5.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r16;

        catch java.lang.Throwable from label03 to label04 with label31;
        catch java.lang.Throwable from label04 to label05 with label30;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
    }

    public java.util.List getWorkSpecIdAndStatesForName(java.lang.String)
    {
        java.lang.Throwable r8;
        androidx.room.RoomSQLiteQuery $r3;
        androidx.room.RoomDatabase r4;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.util.ArrayList r2;
        androidx.work.WorkInfo$State $r7;
        int $i0, $i1, $i2;
        java.lang.String $r1;
        androidx.work.impl.model.WorkSpec$IdAndState r6;
        android.database.Cursor $r5;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id, state FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);

        if $r1 != null goto label1;

        virtualinvoke $r3.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r3.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r4.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r5 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r4, $r3, 0, null);

     label3:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r5, "id");

        $i1 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r5, "state");

        r2 = new java.util.ArrayList;

        $i2 = interfaceinvoke $r5.<android.database.Cursor: int getCount()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i2);

     label4:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

     label5:
        if $z0 == 0 goto label8;

     label6:
        r6 = new androidx.work.impl.model.WorkSpec$IdAndState;

        specialinvoke r6.<androidx.work.impl.model.WorkSpec$IdAndState: void <init>()>();

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>($i0);

        r6.<androidx.work.impl.model.WorkSpec$IdAndState: java.lang.String id> = $r1;

        $i2 = interfaceinvoke $r5.<android.database.Cursor: int getInt(int)>($i1);

        $r7 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i2);

        r6.<androidx.work.impl.model.WorkSpec$IdAndState: androidx.work.WorkInfo$State state> = $r7;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r6);

     label7:
        goto label4;

     label8:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        virtualinvoke $r3.<androidx.room.RoomSQLiteQuery: void release()>();

        return r2;

     label9:
        r8 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        virtualinvoke $r3.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r8;

        catch java.lang.Throwable from label3 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public androidx.work.impl.model.WorkSpec[] getWorkSpecs(java.util.List)
    {
        byte[] $r14;
        androidx.work.BackoffPolicy $r19;
        androidx.work.Constraints r12;
        androidx.work.OutOfQuotaPolicy $r20;
        androidx.work.Data $r18;
        boolean $z0;
        java.util.List r1;
        java.lang.StringBuilder $r2;
        androidx.work.impl.model.WorkSpec[] r10;
        java.lang.Throwable r21;
        androidx.room.RoomSQLiteQuery $r4, r9;
        androidx.work.NetworkType $r13;
        long $l27;
        androidx.work.impl.model.WorkSpec r16;
        int i0, i1, i2, i3, $i4, i5, i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, $i15, $i16, i17, i18, $i19, i20, $i21, $i22, $i23, i24, $i25, $i26;
        java.lang.String $r3, $r11;
        android.database.Cursor $r8;
        java.util.Iterator $r5;
        androidx.room.RoomDatabase r7;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.ContentUriTriggers $r15;
        androidx.work.WorkInfo$State $r17;
        java.lang.Object $r6;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <androidx.room.util.StringUtil: java.lang.StringBuilder newStringBuilder()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM workspec WHERE id IN (");

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        staticinvoke <androidx.room.util.StringUtil: void appendPlaceholders(java.lang.StringBuilder,int)>($r2, $i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>($r3, $i4);

        $r5 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        $i4 = 1;

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r6;

        if $r3 != null goto label02;

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindNull(int)>($i4);

        goto label03;

     label02:
        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>($i4, $r3);

     label03:
        $i4 = $i4 + 1;

        goto label01;

     label04:
        r7 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r7.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r7 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r8 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r7, $r4, 0, null);

     label05:
        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "required_network_type");

     label06:
        i5 = $i4;

     label07:
        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "requires_charging");

     label08:
        i6 = $i4;

     label09:
        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "requires_device_idle");

     label10:
        i0 = $i4;

     label11:
        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "requires_battery_not_low");

        $i7 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "requires_storage_not_low");

        $i8 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "trigger_content_update_delay");

        $i9 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "trigger_max_content_delay");

        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "content_uri_triggers");

     label12:
        i11 = $i10;

     label13:
        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "id");

     label14:
        i12 = $i10;

     label15:
        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "state");

     label16:
        i2 = $i10;

     label17:
        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "worker_class_name");

     label18:
        i1 = $i10;

     label19:
        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "input_merger_class_name");

     label20:
        i13 = $i10;

     label21:
        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "input");

     label22:
        i14 = $i10;

     label23:
        $i10 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "output");

     label24:
        r9 = $r4;

     label25:
        $i15 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "initial_delay");

     label26:
        $i16 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "interval_duration");

     label27:
        i17 = $i16;

     label28:
        $i16 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "flex_duration");

     label29:
        i18 = $i16;

     label30:
        $i16 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "run_attempt_count");

     label31:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "backoff_policy");

     label32:
        i3 = $i19;

     label33:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "backoff_delay_duration");

     label34:
        i20 = $i19;

     label35:
        $i19 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "period_start_time");

     label36:
        $i21 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "minimum_retention_duration");

     label37:
        $i22 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "schedule_requested_at");

     label38:
        $i23 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "run_in_foreground");

     label39:
        i24 = $i23;

     label40:
        $i23 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r8, "out_of_quota_policy");

     label41:
        $i25 = interfaceinvoke $r8.<android.database.Cursor: int getCount()>();

        r10 = newarray (androidx.work.impl.model.WorkSpec)[$i25];

     label42:
        $i25 = 0;

     label43:
        $z0 = interfaceinvoke $r8.<android.database.Cursor: boolean moveToNext()>();

     label44:
        if $z0 == 0 goto label76;

     label45:
        $r3 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>(i12);

        $r11 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>(i1);

        r12 = new androidx.work.Constraints;

        specialinvoke r12.<androidx.work.Constraints: void <init>()>();

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>(i5);

        $r13 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i26);

     label46:
        virtualinvoke r12.<androidx.work.Constraints: void setRequiredNetworkType(androidx.work.NetworkType)>($r13);

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>(i6);

     label47:
        if $i26 == 0 goto label48;

        $z0 = 1;

        goto label49;

     label48:
        $z0 = 0;

     label49:
        virtualinvoke r12.<androidx.work.Constraints: void setRequiresCharging(boolean)>($z0);

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>(i0);

     label50:
        if $i26 == 0 goto label51;

        $z0 = 1;

        goto label52;

     label51:
        $z0 = 0;

     label52:
        virtualinvoke r12.<androidx.work.Constraints: void setRequiresDeviceIdle(boolean)>($z0);

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>($i4);

     label53:
        if $i26 == 0 goto label54;

        $z0 = 1;

        goto label55;

     label54:
        $z0 = 0;

     label55:
        virtualinvoke r12.<androidx.work.Constraints: void setRequiresBatteryNotLow(boolean)>($z0);

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>($i7);

     label56:
        if $i26 == 0 goto label57;

        $z0 = 1;

        goto label58;

     label57:
        $z0 = 0;

     label58:
        virtualinvoke r12.<androidx.work.Constraints: void setRequiresStorageNotLow(boolean)>($z0);

        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i8);

     label59:
        virtualinvoke r12.<androidx.work.Constraints: void setTriggerContentUpdateDelay(long)>($l27);

        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i9);

        virtualinvoke r12.<androidx.work.Constraints: void setTriggerMaxContentDelay(long)>($l27);

        $r14 = interfaceinvoke $r8.<android.database.Cursor: byte[] getBlob(int)>(i11);

        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.ContentUriTriggers byteArrayToContentUriTriggers(byte[])>($r14);

        virtualinvoke r12.<androidx.work.Constraints: void setContentUriTriggers(androidx.work.ContentUriTriggers)>($r15);

        r16 = new androidx.work.impl.model.WorkSpec;

     label60:
        specialinvoke r16.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>($r3, $r11);

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>(i2);

     label61:
        $r17 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i26);

        r16.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r17;

        $r3 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>(i13);

        r16.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r3;

        $r14 = interfaceinvoke $r8.<android.database.Cursor: byte[] getBlob(int)>(i14);

        $r18 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r14);

        r16.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r18;

        $r14 = interfaceinvoke $r8.<android.database.Cursor: byte[] getBlob(int)>($i10);

        $r18 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r14);

        r16.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r18;

     label62:
        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i15);

        r16.<androidx.work.impl.model.WorkSpec: long initialDelay> = $l27;

     label63:
        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>(i17);

        r16.<androidx.work.impl.model.WorkSpec: long intervalDuration> = $l27;

     label64:
        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>(i18);

        r16.<androidx.work.impl.model.WorkSpec: long flexDuration> = $l27;

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>($i16);

        r16.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i26;

        $i26 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>(i3);

     label65:
        $r19 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i26);

        r16.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r19;

     label66:
        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>(i20);

        r16.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = $l27;

     label67:
        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i19);

        r16.<androidx.work.impl.model.WorkSpec: long periodStartTime> = $l27;

     label68:
        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i21);

        r16.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = $l27;

     label69:
        $l27 = interfaceinvoke $r8.<android.database.Cursor: long getLong(int)>($i22);

        r16.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = $l27;

     label70:
        $i26 = i24;

     label71:
        i24 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>(i24);

     label72:
        if i24 == 0 goto label73;

        $z0 = 1;

        goto label74;

     label73:
        $z0 = 0;

     label74:
        r16.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        i24 = interfaceinvoke $r8.<android.database.Cursor: int getInt(int)>($i23);

        $r20 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>(i24);

        r16.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r20;

        r16.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = r12;

        r10[$i25] = r16;

     label75:
        $i25 = $i25 + 1;

        i24 = $i26;

        goto label43;

     label76:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void release()>();

        return r10;

     label77:
        r21 := @caughtexception;

        goto label84;

     label78:
        r21 := @caughtexception;

        r9 = $r4;

        goto label84;

     label79:
        r21 := @caughtexception;

        r9 = $r4;

        goto label84;

     label80:
        r21 := @caughtexception;

        r9 = $r4;

        goto label84;

     label81:
        r21 := @caughtexception;

        r9 = $r4;

        goto label84;

     label82:
        r21 := @caughtexception;

        r9 = $r4;

        goto label84;

     label83:
        r21 := @caughtexception;

        r9 = $r4;

     label84:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        virtualinvoke r9.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r21;

        catch java.lang.Throwable from label05 to label06 with label83;
        catch java.lang.Throwable from label07 to label08 with label83;
        catch java.lang.Throwable from label09 to label10 with label83;
        catch java.lang.Throwable from label11 to label12 with label83;
        catch java.lang.Throwable from label13 to label14 with label83;
        catch java.lang.Throwable from label15 to label16 with label82;
        catch java.lang.Throwable from label17 to label18 with label81;
        catch java.lang.Throwable from label19 to label20 with label80;
        catch java.lang.Throwable from label21 to label22 with label79;
        catch java.lang.Throwable from label23 to label24 with label78;
        catch java.lang.Throwable from label25 to label26 with label77;
        catch java.lang.Throwable from label26 to label27 with label77;
        catch java.lang.Throwable from label28 to label29 with label77;
        catch java.lang.Throwable from label30 to label31 with label77;
        catch java.lang.Throwable from label31 to label32 with label77;
        catch java.lang.Throwable from label33 to label34 with label77;
        catch java.lang.Throwable from label35 to label36 with label77;
        catch java.lang.Throwable from label36 to label37 with label77;
        catch java.lang.Throwable from label37 to label38 with label77;
        catch java.lang.Throwable from label38 to label39 with label77;
        catch java.lang.Throwable from label40 to label41 with label77;
        catch java.lang.Throwable from label41 to label42 with label77;
        catch java.lang.Throwable from label43 to label44 with label77;
        catch java.lang.Throwable from label45 to label46 with label77;
        catch java.lang.Throwable from label46 to label47 with label77;
        catch java.lang.Throwable from label49 to label50 with label77;
        catch java.lang.Throwable from label52 to label53 with label77;
        catch java.lang.Throwable from label55 to label56 with label77;
        catch java.lang.Throwable from label58 to label59 with label77;
        catch java.lang.Throwable from label59 to label60 with label77;
        catch java.lang.Throwable from label60 to label61 with label77;
        catch java.lang.Throwable from label61 to label62 with label77;
        catch java.lang.Throwable from label62 to label63 with label77;
        catch java.lang.Throwable from label63 to label64 with label77;
        catch java.lang.Throwable from label64 to label65 with label77;
        catch java.lang.Throwable from label65 to label66 with label77;
        catch java.lang.Throwable from label66 to label67 with label77;
        catch java.lang.Throwable from label67 to label68 with label77;
        catch java.lang.Throwable from label68 to label69 with label77;
        catch java.lang.Throwable from label69 to label70 with label77;
        catch java.lang.Throwable from label71 to label72 with label77;
        catch java.lang.Throwable from label74 to label75 with label77;
    }

    public androidx.work.impl.model.WorkSpec$WorkInfoPojo getWorkStatusPojoForId(java.lang.String)
    {
        java.lang.Throwable r14, r15;
        androidx.room.RoomSQLiteQuery $r4;
        byte[] $r12;
        java.util.ArrayList r8, r9, $r17;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1;
        androidx.work.Data $r13;
        androidx.collection.ArrayMap r2, r3, $r16;
        android.database.Cursor $r6;
        boolean $z0;
        androidx.work.impl.model.WorkSpec$WorkInfoPojo r10, $r18;
        androidx.room.RoomDatabase r5;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.WorkInfo$State $r11;
        java.lang.Object $r7;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: java.lang.String;

        $r4 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id, state, output, run_attempt_count FROM workspec WHERE id=?", 1);

        if r1 != null goto label01;

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label02;

     label01:
        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, r1);

     label02:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void beginTransaction()>();

     label03:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r6 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r5, $r4, 1, null);

     label04:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "id");

        $i1 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "state");

        $i2 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "output");

        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "run_attempt_count");

        r3 = new androidx.collection.ArrayMap;

     label05:
        r2 = r3;

     label06:
        specialinvoke r3.<androidx.collection.ArrayMap: void <init>()>();

        $r16 = new androidx.collection.ArrayMap;

     label07:
        specialinvoke $r16.<androidx.collection.ArrayMap: void <init>()>();

     label08:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

     label09:
        if $z0 == 0 goto label23;

     label10:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label11:
        if $z0 != 0 goto label16;

     label12:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.ArrayList) $r7;

     label13:
        if r8 != null goto label16;

     label14:
        r9 = new java.util.ArrayList;

     label15:
        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

     label16:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label17:
        if $z0 != 0 goto label08;

     label18:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.ArrayList) $r7;

     label19:
        if r8 != null goto label08;

     label20:
        r9 = new java.util.ArrayList;

     label21:
        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

     label22:
        goto label08;

     label23:
        interfaceinvoke $r6.<android.database.Cursor: boolean moveToPosition(int)>(-1);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)>(r2);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)>($r16);

        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToFirst()>();

     label24:
        if $z0 == 0 goto label44;

        r8 = null;

     label25:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label26:
        if $z0 != 0 goto label28;

     label27:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.ArrayList) $r7;

     label28:
        if r8 != null goto label32;

     label29:
        r9 = new java.util.ArrayList;

     label30:
        specialinvoke r9.<java.util.ArrayList: void <init>()>();

     label31:
        r8 = r9;

     label32:
        r9 = null;

     label33:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label34:
        if $z0 != 0 goto label36;

     label35:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (java.util.ArrayList) $r7;

     label36:
        if r9 != null goto label40;

     label37:
        $r17 = new java.util.ArrayList;

     label38:
        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

     label39:
        r9 = $r17;

     label40:
        $r18 = new androidx.work.impl.model.WorkSpec$WorkInfoPojo;

     label41:
        r10 = $r18;

     label42:
        specialinvoke $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: void <init>()>();

        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.lang.String id> = r1;

        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>($i1);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i0);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.WorkInfo$State state> = $r11;

        $r12 = interfaceinvoke $r6.<android.database.Cursor: byte[] getBlob(int)>($i2);

        $r13 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r12);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.Data output> = $r13;

        $i2 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>($i3);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: int runAttemptCount> = $i2;

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List tags> = r8;

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List progress> = r9;

     label43:
        goto label45;

     label44:
        r10 = null;

     label45:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label46:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void release()>();

     label47:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void endTransaction()>();

        return r10;

     label48:
        r14 := @caughtexception;

     label49:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r14;

     label50:
        r15 := @caughtexception;

        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void endTransaction()>();

        throw r15;

        catch java.lang.Throwable from label03 to label04 with label50;
        catch java.lang.Throwable from label04 to label05 with label48;
        catch java.lang.Throwable from label06 to label07 with label48;
        catch java.lang.Throwable from label07 to label09 with label48;
        catch java.lang.Throwable from label10 to label11 with label48;
        catch java.lang.Throwable from label12 to label13 with label48;
        catch java.lang.Throwable from label14 to label15 with label48;
        catch java.lang.Throwable from label15 to label17 with label48;
        catch java.lang.Throwable from label18 to label19 with label48;
        catch java.lang.Throwable from label20 to label21 with label48;
        catch java.lang.Throwable from label21 to label22 with label48;
        catch java.lang.Throwable from label23 to label24 with label48;
        catch java.lang.Throwable from label25 to label26 with label48;
        catch java.lang.Throwable from label27 to label28 with label48;
        catch java.lang.Throwable from label29 to label30 with label48;
        catch java.lang.Throwable from label30 to label31 with label48;
        catch java.lang.Throwable from label33 to label34 with label48;
        catch java.lang.Throwable from label35 to label36 with label48;
        catch java.lang.Throwable from label37 to label38 with label48;
        catch java.lang.Throwable from label38 to label39 with label48;
        catch java.lang.Throwable from label40 to label41 with label48;
        catch java.lang.Throwable from label42 to label43 with label48;
        catch java.lang.Throwable from label45 to label46 with label48;
        catch java.lang.Throwable from label46 to label47 with label50;
        catch java.lang.Throwable from label49 to label50 with label50;
    }

    public java.util.List getWorkStatusPojoForIds(java.util.List)
    {
        java.lang.Throwable r12, r18;
        androidx.room.RoomSQLiteQuery $r6;
        byte[] $r16;
        java.util.ArrayList r11, r13, r14, $r20;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r5;
        androidx.work.Data $r17;
        androidx.collection.ArrayMap r2, r3, $r19;
        boolean $z0;
        android.database.Cursor $r10;
        androidx.work.impl.model.WorkSpec$WorkInfoPojo $r21;
        java.util.Iterator $r7;
        androidx.room.RoomDatabase r9;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.util.List r1;
        androidx.work.WorkInfo$State $r15;
        java.lang.StringBuilder $r4;
        java.lang.Object $r8;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: java.util.List;

        $r4 = staticinvoke <androidx.room.util.StringUtil: java.lang.StringBuilder newStringBuilder()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id, state, output, run_attempt_count FROM workspec WHERE id IN (");

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        staticinvoke <androidx.room.util.StringUtil: void appendPlaceholders(java.lang.StringBuilder,int)>($r4, i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>($r5, i0);

        $r7 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        i0 = 1;

     label01:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r8;

        if $r5 != null goto label02;

        virtualinvoke $r6.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(i0);

        goto label03;

     label02:
        virtualinvoke $r6.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(i0, $r5);

     label03:
        i0 = i0 + 1;

        goto label01;

     label04:
        r9 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r9.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r9 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r9.<androidx.room.RoomDatabase: void beginTransaction()>();

     label05:
        r9 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r10 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r9, $r6, 1, null);

     label06:
        $i1 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r10, "id");

     label07:
        i0 = $i1;

     label08:
        $i2 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r10, "state");

        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r10, "output");

        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r10, "run_attempt_count");

        r3 = new androidx.collection.ArrayMap;

     label09:
        r2 = r3;

     label10:
        specialinvoke r3.<androidx.collection.ArrayMap: void <init>()>();

        $r19 = new androidx.collection.ArrayMap;

     label11:
        specialinvoke $r19.<androidx.collection.ArrayMap: void <init>()>();

     label12:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToNext()>();

     label13:
        if $z0 == 0 goto label28;

     label14:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isNull(int)>($i1);

     label15:
        if $z0 != 0 goto label20;

     label16:
        $r5 = interfaceinvoke $r10.<android.database.Cursor: java.lang.String getString(int)>($i1);

        $r8 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r11 = (java.util.ArrayList) $r8;

     label17:
        if r11 != null goto label20;

     label18:
        r13 = new java.util.ArrayList;

     label19:
        specialinvoke r13.<java.util.ArrayList: void <init>()>();

        virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r13);

     label20:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isNull(int)>($i1);

     label21:
        if $z0 != 0 goto label12;

     label22:
        $r5 = interfaceinvoke $r10.<android.database.Cursor: java.lang.String getString(int)>($i1);

        $r8 = virtualinvoke $r19.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r11 = (java.util.ArrayList) $r8;

     label23:
        if r11 != null goto label12;

     label24:
        r13 = new java.util.ArrayList;

     label25:
        specialinvoke r13.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r19.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r13);

     label26:
        goto label12;

     label27:
        r12 := @caughtexception;

        goto label65;

     label28:
        interfaceinvoke $r10.<android.database.Cursor: boolean moveToPosition(int)>(-1);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)>(r2);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)>($r19);

        r13 = new java.util.ArrayList;

     label29:
        r11 = r13;

     label30:
        $i1 = interfaceinvoke $r10.<android.database.Cursor: int getCount()>();

        specialinvoke r13.<java.util.ArrayList: void <init>(int)>($i1);

     label31:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToNext()>();

     label32:
        if $z0 == 0 goto label60;

        r13 = null;

     label33:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isNull(int)>(i0);

     label34:
        if $z0 != 0 goto label39;

     label35:
        $r5 = interfaceinvoke $r10.<android.database.Cursor: java.lang.String getString(int)>(i0);

     label36:
        $r8 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r13 = (java.util.ArrayList) $r8;

     label37:
        goto label39;

     label38:
        r12 := @caughtexception;

        goto label65;

     label39:
        if r13 != null goto label44;

     label40:
        r14 = new java.util.ArrayList;

     label41:
        specialinvoke r14.<java.util.ArrayList: void <init>()>();

     label42:
        r13 = r14;

        goto label44;

     label43:
        r12 := @caughtexception;

        goto label65;

     label44:
        r14 = null;

     label45:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean isNull(int)>(i0);

     label46:
        if $z0 != 0 goto label49;

     label47:
        $r5 = interfaceinvoke $r10.<android.database.Cursor: java.lang.String getString(int)>(i0);

        $r8 = virtualinvoke $r19.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r14 = (java.util.ArrayList) $r8;

     label48:
        goto label49;

     label49:
        if r14 != null goto label53;

     label50:
        $r20 = new java.util.ArrayList;

     label51:
        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

     label52:
        r14 = $r20;

     label53:
        $r21 = new androidx.work.impl.model.WorkSpec$WorkInfoPojo;

     label54:
        specialinvoke $r21.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: void <init>()>();

     label55:
        $r5 = interfaceinvoke $r10.<android.database.Cursor: java.lang.String getString(int)>(i0);

        $r21.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.lang.String id> = $r5;

        $i1 = interfaceinvoke $r10.<android.database.Cursor: int getInt(int)>($i2);

     label56:
        $r15 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i1);

        $r21.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.WorkInfo$State state> = $r15;

        $r16 = interfaceinvoke $r10.<android.database.Cursor: byte[] getBlob(int)>($i3);

        $r17 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r16);

        $r21.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.Data output> = $r17;

        $i1 = interfaceinvoke $r10.<android.database.Cursor: int getInt(int)>($i4);

        $r21.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: int runAttemptCount> = $i1;

        $r21.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List tags> = r13;

        $r21.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List progress> = r14;

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r21);

     label57:
        goto label31;

     label58:
        r12 := @caughtexception;

        goto label65;

     label59:
        r12 := @caughtexception;

        goto label65;

     label60:
        r9 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r9.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label61:
        interfaceinvoke $r10.<android.database.Cursor: void close()>();

        virtualinvoke $r6.<androidx.room.RoomSQLiteQuery: void release()>();

     label62:
        r9 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r9.<androidx.room.RoomDatabase: void endTransaction()>();

        return r11;

     label63:
        r12 := @caughtexception;

        goto label65;

     label64:
        r12 := @caughtexception;

     label65:
        interfaceinvoke $r10.<android.database.Cursor: void close()>();

        virtualinvoke $r6.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r12;

     label66:
        r18 := @caughtexception;

        goto label68;

     label67:
        r18 := @caughtexception;

     label68:
        r9 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r9.<androidx.room.RoomDatabase: void endTransaction()>();

        throw r18;

        catch java.lang.Throwable from label05 to label06 with label67;
        catch java.lang.Throwable from label06 to label07 with label64;
        catch java.lang.Throwable from label08 to label09 with label64;
        catch java.lang.Throwable from label10 to label11 with label64;
        catch java.lang.Throwable from label11 to label13 with label64;
        catch java.lang.Throwable from label14 to label15 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label19 to label21 with label27;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label64;
        catch java.lang.Throwable from label30 to label32 with label64;
        catch java.lang.Throwable from label33 to label34 with label64;
        catch java.lang.Throwable from label35 to label36 with label38;
        catch java.lang.Throwable from label36 to label37 with label43;
        catch java.lang.Throwable from label40 to label41 with label43;
        catch java.lang.Throwable from label41 to label42 with label43;
        catch java.lang.Throwable from label45 to label46 with label59;
        catch java.lang.Throwable from label47 to label48 with label43;
        catch java.lang.Throwable from label50 to label51 with label43;
        catch java.lang.Throwable from label51 to label52 with label43;
        catch java.lang.Throwable from label53 to label54 with label59;
        catch java.lang.Throwable from label54 to label55 with label59;
        catch java.lang.Throwable from label55 to label56 with label58;
        catch java.lang.Throwable from label56 to label57 with label63;
        catch java.lang.Throwable from label60 to label61 with label63;
        catch java.lang.Throwable from label61 to label62 with label66;
        catch java.lang.Throwable from label65 to label66 with label66;
    }

    public java.util.List getWorkStatusPojoForName(java.lang.String)
    {
        java.lang.Throwable r14, r15;
        androidx.room.RoomSQLiteQuery $r4;
        byte[] $r12;
        java.util.ArrayList r8, r9, r10, $r17;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String r1;
        androidx.work.Data $r13;
        androidx.collection.ArrayMap r2, r3, $r16;
        android.database.Cursor $r6;
        boolean $z0;
        androidx.work.impl.model.WorkSpec$WorkInfoPojo $r18;
        androidx.room.RoomDatabase r5;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.WorkInfo$State $r11;
        java.lang.Object $r7;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: java.lang.String;

        $r4 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id, state, output, run_attempt_count FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);

        if r1 != null goto label01;

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label02;

     label01:
        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, r1);

     label02:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void beginTransaction()>();

     label03:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r6 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r5, $r4, 1, null);

     label04:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "id");

     label05:
        i1 = $i0;

     label06:
        $i2 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "state");

        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "output");

        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "run_attempt_count");

        r3 = new androidx.collection.ArrayMap;

     label07:
        r2 = r3;

     label08:
        specialinvoke r3.<androidx.collection.ArrayMap: void <init>()>();

        $r16 = new androidx.collection.ArrayMap;

     label09:
        specialinvoke $r16.<androidx.collection.ArrayMap: void <init>()>();

     label10:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

     label11:
        if $z0 == 0 goto label25;

     label12:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label13:
        if $z0 != 0 goto label18;

     label14:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.ArrayList) $r7;

     label15:
        if r8 != null goto label18;

     label16:
        r9 = new java.util.ArrayList;

     label17:
        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

     label18:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label19:
        if $z0 != 0 goto label10;

     label20:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.ArrayList) $r7;

     label21:
        if r8 != null goto label10;

     label22:
        r9 = new java.util.ArrayList;

     label23:
        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

     label24:
        goto label10;

     label25:
        interfaceinvoke $r6.<android.database.Cursor: boolean moveToPosition(int)>(-1);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)>(r2);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)>($r16);

        r9 = new java.util.ArrayList;

     label26:
        r8 = r9;

     label27:
        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getCount()>();

        specialinvoke r9.<java.util.ArrayList: void <init>(int)>($i0);

     label28:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

     label29:
        if $z0 == 0 goto label48;

        r9 = null;

     label30:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>(i1);

     label31:
        if $z0 != 0 goto label33;

     label32:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r7 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (java.util.ArrayList) $r7;

     label33:
        if r9 != null goto label37;

     label34:
        r10 = new java.util.ArrayList;

     label35:
        specialinvoke r10.<java.util.ArrayList: void <init>()>();

     label36:
        r9 = r10;

     label37:
        r10 = null;

     label38:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>(i1);

     label39:
        if $z0 != 0 goto label41;

     label40:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r7 = virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.util.ArrayList) $r7;

     label41:
        if r10 != null goto label45;

     label42:
        $r17 = new java.util.ArrayList;

     label43:
        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

     label44:
        r10 = $r17;

     label45:
        $r18 = new androidx.work.impl.model.WorkSpec$WorkInfoPojo;

     label46:
        specialinvoke $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: void <init>()>();

        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.lang.String id> = r1;

        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>($i2);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i0);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.WorkInfo$State state> = $r11;

        $r12 = interfaceinvoke $r6.<android.database.Cursor: byte[] getBlob(int)>($i3);

        $r13 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r12);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.Data output> = $r13;

        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>($i4);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: int runAttemptCount> = $i0;

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List tags> = r9;

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List progress> = r10;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r18);

     label47:
        goto label28;

     label48:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label49:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void release()>();

     label50:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void endTransaction()>();

        return r8;

     label51:
        r14 := @caughtexception;

     label52:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r14;

     label53:
        r15 := @caughtexception;

        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void endTransaction()>();

        throw r15;

        catch java.lang.Throwable from label03 to label04 with label53;
        catch java.lang.Throwable from label04 to label05 with label51;
        catch java.lang.Throwable from label06 to label07 with label51;
        catch java.lang.Throwable from label08 to label09 with label51;
        catch java.lang.Throwable from label09 to label11 with label51;
        catch java.lang.Throwable from label12 to label13 with label51;
        catch java.lang.Throwable from label14 to label15 with label51;
        catch java.lang.Throwable from label16 to label17 with label51;
        catch java.lang.Throwable from label17 to label19 with label51;
        catch java.lang.Throwable from label20 to label21 with label51;
        catch java.lang.Throwable from label22 to label23 with label51;
        catch java.lang.Throwable from label23 to label24 with label51;
        catch java.lang.Throwable from label25 to label26 with label51;
        catch java.lang.Throwable from label27 to label29 with label51;
        catch java.lang.Throwable from label30 to label31 with label51;
        catch java.lang.Throwable from label32 to label33 with label51;
        catch java.lang.Throwable from label34 to label35 with label51;
        catch java.lang.Throwable from label35 to label36 with label51;
        catch java.lang.Throwable from label38 to label39 with label51;
        catch java.lang.Throwable from label40 to label41 with label51;
        catch java.lang.Throwable from label42 to label43 with label51;
        catch java.lang.Throwable from label43 to label44 with label51;
        catch java.lang.Throwable from label45 to label46 with label51;
        catch java.lang.Throwable from label46 to label47 with label51;
        catch java.lang.Throwable from label48 to label49 with label51;
        catch java.lang.Throwable from label49 to label50 with label53;
        catch java.lang.Throwable from label52 to label53 with label53;
    }

    public java.util.List getWorkStatusPojoForTag(java.lang.String)
    {
        java.lang.Throwable r14, r15;
        androidx.room.RoomSQLiteQuery $r4;
        byte[] $r12;
        java.util.ArrayList r8, r9, r10, $r17;
        int $i0, i1, $i2, $i3, $i4;
        java.lang.String r1;
        androidx.work.Data $r13;
        androidx.collection.ArrayMap r2, r3, $r16;
        android.database.Cursor $r6;
        boolean $z0;
        androidx.work.impl.model.WorkSpec$WorkInfoPojo $r18;
        androidx.room.RoomDatabase r5;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.WorkInfo$State $r11;
        java.lang.Object $r7;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: java.lang.String;

        $r4 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id, state, output, run_attempt_count FROM workspec WHERE id IN (SELECT work_spec_id FROM worktag WHERE tag=?)", 1);

        if r1 != null goto label01;

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label02;

     label01:
        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, r1);

     label02:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void beginTransaction()>();

     label03:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r6 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r5, $r4, 1, null);

     label04:
        $i0 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "id");

     label05:
        i1 = $i0;

     label06:
        $i2 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "state");

        $i3 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "output");

        $i4 = staticinvoke <androidx.room.util.CursorUtil: int getColumnIndexOrThrow(android.database.Cursor,java.lang.String)>($r6, "run_attempt_count");

        r3 = new androidx.collection.ArrayMap;

     label07:
        r2 = r3;

     label08:
        specialinvoke r3.<androidx.collection.ArrayMap: void <init>()>();

        $r16 = new androidx.collection.ArrayMap;

     label09:
        specialinvoke $r16.<androidx.collection.ArrayMap: void <init>()>();

     label10:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

     label11:
        if $z0 == 0 goto label25;

     label12:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label13:
        if $z0 != 0 goto label18;

     label14:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.ArrayList) $r7;

     label15:
        if r8 != null goto label18;

     label16:
        r9 = new java.util.ArrayList;

     label17:
        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

     label18:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>($i0);

     label19:
        if $z0 != 0 goto label10;

     label20:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r7 = virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.ArrayList) $r7;

     label21:
        if r8 != null goto label10;

     label22:
        r9 = new java.util.ArrayList;

     label23:
        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

     label24:
        goto label10;

     label25:
        interfaceinvoke $r6.<android.database.Cursor: boolean moveToPosition(int)>(-1);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkTagAsjavaLangString(androidx.collection.ArrayMap)>(r2);

        specialinvoke r0.<androidx.work.impl.model.WorkSpecDao_Impl: void __fetchRelationshipWorkProgressAsandroidxWorkData(androidx.collection.ArrayMap)>($r16);

        r9 = new java.util.ArrayList;

     label26:
        r8 = r9;

     label27:
        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getCount()>();

        specialinvoke r9.<java.util.ArrayList: void <init>(int)>($i0);

     label28:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

     label29:
        if $z0 == 0 goto label48;

        r9 = null;

     label30:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>(i1);

     label31:
        if $z0 != 0 goto label33;

     label32:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r7 = virtualinvoke r2.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (java.util.ArrayList) $r7;

     label33:
        if r9 != null goto label37;

     label34:
        r10 = new java.util.ArrayList;

     label35:
        specialinvoke r10.<java.util.ArrayList: void <init>()>();

     label36:
        r9 = r10;

     label37:
        r10 = null;

     label38:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean isNull(int)>(i1);

     label39:
        if $z0 != 0 goto label41;

     label40:
        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r7 = virtualinvoke $r16.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.util.ArrayList) $r7;

     label41:
        if r10 != null goto label45;

     label42:
        $r17 = new java.util.ArrayList;

     label43:
        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

     label44:
        r10 = $r17;

     label45:
        $r18 = new androidx.work.impl.model.WorkSpec$WorkInfoPojo;

     label46:
        specialinvoke $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: void <init>()>();

        r1 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.lang.String id> = r1;

        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>($i2);

        $r11 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i0);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.WorkInfo$State state> = $r11;

        $r12 = interfaceinvoke $r6.<android.database.Cursor: byte[] getBlob(int)>($i3);

        $r13 = staticinvoke <androidx.work.Data: androidx.work.Data fromByteArray(byte[])>($r12);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: androidx.work.Data output> = $r13;

        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getInt(int)>($i4);

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: int runAttemptCount> = $i0;

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List tags> = r9;

        $r18.<androidx.work.impl.model.WorkSpec$WorkInfoPojo: java.util.List progress> = r10;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r18);

     label47:
        goto label28;

     label48:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label49:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void release()>();

     label50:
        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void endTransaction()>();

        return r8;

     label51:
        r14 := @caughtexception;

     label52:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r14;

     label53:
        r15 := @caughtexception;

        r5 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r5.<androidx.room.RoomDatabase: void endTransaction()>();

        throw r15;

        catch java.lang.Throwable from label03 to label04 with label53;
        catch java.lang.Throwable from label04 to label05 with label51;
        catch java.lang.Throwable from label06 to label07 with label51;
        catch java.lang.Throwable from label08 to label09 with label51;
        catch java.lang.Throwable from label09 to label11 with label51;
        catch java.lang.Throwable from label12 to label13 with label51;
        catch java.lang.Throwable from label14 to label15 with label51;
        catch java.lang.Throwable from label16 to label17 with label51;
        catch java.lang.Throwable from label17 to label19 with label51;
        catch java.lang.Throwable from label20 to label21 with label51;
        catch java.lang.Throwable from label22 to label23 with label51;
        catch java.lang.Throwable from label23 to label24 with label51;
        catch java.lang.Throwable from label25 to label26 with label51;
        catch java.lang.Throwable from label27 to label29 with label51;
        catch java.lang.Throwable from label30 to label31 with label51;
        catch java.lang.Throwable from label32 to label33 with label51;
        catch java.lang.Throwable from label34 to label35 with label51;
        catch java.lang.Throwable from label35 to label36 with label51;
        catch java.lang.Throwable from label38 to label39 with label51;
        catch java.lang.Throwable from label40 to label41 with label51;
        catch java.lang.Throwable from label42 to label43 with label51;
        catch java.lang.Throwable from label43 to label44 with label51;
        catch java.lang.Throwable from label45 to label46 with label51;
        catch java.lang.Throwable from label46 to label47 with label51;
        catch java.lang.Throwable from label48 to label49 with label51;
        catch java.lang.Throwable from label49 to label50 with label53;
        catch java.lang.Throwable from label52 to label53 with label53;
    }

    public androidx.lifecycle.LiveData getWorkStatusPojoLiveDataForIds(java.util.List)
    {
        androidx.room.InvalidationTracker $r8;
        androidx.room.RoomSQLiteQuery $r4;
        androidx.lifecycle.LiveData $r11;
        java.util.Iterator $r5;
        androidx.room.RoomDatabase $r7;
        java.lang.String[] $r9;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.impl.model.WorkSpecDao_Impl$11 $r10;
        java.util.List r1;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.Object $r6;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <androidx.room.util.StringUtil: java.lang.StringBuilder newStringBuilder()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT id, state, output, run_attempt_count FROM workspec WHERE id IN (");

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        staticinvoke <androidx.room.util.StringUtil: void appendPlaceholders(java.lang.StringBuilder,int)>($r2, i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>($r3, i0);

        i0 = 1;

        $r5 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r6;

        if $r3 != null goto label2;

        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(i0);

        goto label3;

     label2:
        virtualinvoke $r4.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(i0, $r3);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r7 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r8 = virtualinvoke $r7.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r9 = newarray (java.lang.String)[3];

        $r9[0] = "WorkTag";

        $r9[1] = "WorkProgress";

        $r9[2] = "workspec";

        $r10 = new androidx.work.impl.model.WorkSpecDao_Impl$11;

        specialinvoke $r10.<androidx.work.impl.model.WorkSpecDao_Impl$11: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomSQLiteQuery)>(r0, $r4);

        $r11 = virtualinvoke $r8.<androidx.room.InvalidationTracker: androidx.lifecycle.LiveData createLiveData(java.lang.String[],boolean,java.util.concurrent.Callable)>($r9, 1, $r10);

        return $r11;
    }

    public androidx.lifecycle.LiveData getWorkStatusPojoLiveDataForName(java.lang.String)
    {
        androidx.room.InvalidationTracker $r4;
        androidx.room.RoomSQLiteQuery $r2;
        androidx.lifecycle.LiveData $r7;
        androidx.room.RoomDatabase $r3;
        java.lang.String[] $r5;
        androidx.work.impl.model.WorkSpecDao_Impl$13 $r6;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        java.lang.String $r1;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id, state, output, run_attempt_count FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);

        if $r1 != null goto label1;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        $r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = virtualinvoke $r3.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r5 = newarray (java.lang.String)[4];

        $r5[0] = "WorkTag";

        $r5[1] = "WorkProgress";

        $r5[2] = "workspec";

        $r5[3] = "workname";

        $r6 = new androidx.work.impl.model.WorkSpecDao_Impl$13;

        specialinvoke $r6.<androidx.work.impl.model.WorkSpecDao_Impl$13: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomSQLiteQuery)>(r0, $r2);

        $r7 = virtualinvoke $r4.<androidx.room.InvalidationTracker: androidx.lifecycle.LiveData createLiveData(java.lang.String[],boolean,java.util.concurrent.Callable)>($r5, 1, $r6);

        return $r7;
    }

    public androidx.lifecycle.LiveData getWorkStatusPojoLiveDataForTag(java.lang.String)
    {
        androidx.room.InvalidationTracker $r4;
        androidx.room.RoomSQLiteQuery $r2;
        androidx.lifecycle.LiveData $r7;
        androidx.room.RoomDatabase $r3;
        java.lang.String[] $r5;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.impl.model.WorkSpecDao_Impl$12 $r6;
        java.lang.String $r1;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT id, state, output, run_attempt_count FROM workspec WHERE id IN (SELECT work_spec_id FROM worktag WHERE tag=?)", 1);

        if $r1 != null goto label1;

        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindNull(int)>(1);

        goto label2;

     label1:
        virtualinvoke $r2.<androidx.room.RoomSQLiteQuery: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        $r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r4 = virtualinvoke $r3.<androidx.room.RoomDatabase: androidx.room.InvalidationTracker getInvalidationTracker()>();

        $r5 = newarray (java.lang.String)[4];

        $r5[0] = "WorkTag";

        $r5[1] = "WorkProgress";

        $r5[2] = "workspec";

        $r5[3] = "worktag";

        $r6 = new androidx.work.impl.model.WorkSpecDao_Impl$12;

        specialinvoke $r6.<androidx.work.impl.model.WorkSpecDao_Impl$12: void <init>(androidx.work.impl.model.WorkSpecDao_Impl,androidx.room.RoomSQLiteQuery)>(r0, $r2);

        $r7 = virtualinvoke $r4.<androidx.room.InvalidationTracker: androidx.lifecycle.LiveData createLiveData(java.lang.String[],boolean,java.util.concurrent.Callable)>($r5, 1, $r6);

        return $r7;
    }

    public boolean hasUnfinishedWork()
    {
        java.lang.Throwable r4;
        androidx.room.RoomSQLiteQuery $r1;
        androidx.room.RoomDatabase r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        int $i0;
        boolean z0, $z1;
        android.database.Cursor $r3;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        z0 = 0;

        $r1 = staticinvoke <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>("SELECT COUNT(*) > 0 FROM workspec WHERE state NOT IN (2, 3, 5) LIMIT 1", 0);

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r3 = staticinvoke <androidx.room.util.DBUtil: android.database.Cursor query(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,boolean,android.os.CancellationSignal)>(r2, $r1, 0, null);

     label1:
        $z1 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        if $z1 == 0 goto label6;

     label3:
        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>(0);

     label4:
        if $i0 == 0 goto label5;

        z0 = 1;

     label5:
        goto label7;

     label6:
        z0 = 0;

     label7:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        return z0;

     label8:
        r4 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        virtualinvoke $r1.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
    }

    public int incrementWorkSpecRunAttemptCount(java.lang.String)
    {
        java.lang.Throwable r5;
        androidx.room.RoomDatabase r2;
        int $i0;
        androidx.room.SharedSQLiteStatement r3;
        java.lang.String $r1;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.sqlite.db.SupportSQLiteStatement $r4;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfIncrementWorkSpecRunAttemptCount>;

        $r4 = virtualinvoke r3.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        if $r1 != null goto label1;

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(1);

        goto label2;

     label1:
        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void beginTransaction()>();

     label3:
        $i0 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label4:
        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfIncrementWorkSpecRunAttemptCount>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r4);

        return $i0;

     label5:
        r5 := @caughtexception;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfIncrementWorkSpecRunAttemptCount>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r4);

        throw r5;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void insertWorkSpec(androidx.work.impl.model.WorkSpec)
    {
        java.lang.Throwable $r4;
        androidx.room.RoomDatabase $r2;
        androidx.room.EntityInsertionAdapter $r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.impl.model.WorkSpec $r1;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: androidx.work.impl.model.WorkSpec;

        $r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke $r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        $r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke $r2.<androidx.room.RoomDatabase: void beginTransaction()>();

     label1:
        $r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.EntityInsertionAdapter __insertionAdapterOfWorkSpec>;

        virtualinvoke $r3.<androidx.room.EntityInsertionAdapter: void insert(java.lang.Object)>($r1);

        $r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke $r2.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label2:
        $r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke $r2.<androidx.room.RoomDatabase: void endTransaction()>();

        return;

     label3:
        $r4 := @caughtexception;

        $r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke $r2.<androidx.room.RoomDatabase: void endTransaction()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int markWorkSpecScheduled(java.lang.String, long)
    {
        java.lang.Throwable r5;
        androidx.room.RoomDatabase r2;
        long $l0;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        int $i1;
        androidx.room.SharedSQLiteStatement r3;
        java.lang.String $r1;
        androidx.sqlite.db.SupportSQLiteStatement $r4;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfMarkWorkSpecScheduled>;

        $r4 = virtualinvoke r3.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: void bindLong(int,long)>(1, $l0);

        if $r1 != null goto label1;

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(2);

        goto label2;

     label1:
        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(2, $r1);

     label2:
        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void beginTransaction()>();

     label3:
        $i1 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label4:
        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfMarkWorkSpecScheduled>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r4);

        return $i1;

     label5:
        r5 := @caughtexception;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfMarkWorkSpecScheduled>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r4);

        throw r5;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void pruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast()
    {
        java.lang.Throwable $r4;
        androidx.room.RoomDatabase r2;
        androidx.room.SharedSQLiteStatement r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.sqlite.db.SupportSQLiteStatement $r1;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast>;

        $r1 = virtualinvoke r3.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void beginTransaction()>();

     label1:
        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label2:
        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r1);

        return;

     label3:
        $r4 := @caughtexception;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int resetScheduledState()
    {
        java.lang.Throwable r4;
        androidx.room.RoomDatabase r1;
        int $i0;
        androidx.room.SharedSQLiteStatement r2;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.sqlite.db.SupportSQLiteStatement $r3;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        r1 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r1.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetScheduledState>;

        $r3 = virtualinvoke r2.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        r1 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r1.<androidx.room.RoomDatabase: void beginTransaction()>();

     label1:
        $i0 = interfaceinvoke $r3.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r1 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r1.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label2:
        r1 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r1.<androidx.room.RoomDatabase: void endTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetScheduledState>;

        virtualinvoke r2.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r3);

        return $i0;

     label3:
        r4 := @caughtexception;

        r1 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r1.<androidx.room.RoomDatabase: void endTransaction()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetScheduledState>;

        virtualinvoke r2.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r3);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int resetWorkSpecRunAttemptCount(java.lang.String)
    {
        java.lang.Throwable r5;
        androidx.room.RoomDatabase r2;
        int $i0;
        androidx.room.SharedSQLiteStatement r3;
        java.lang.String $r1;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.sqlite.db.SupportSQLiteStatement $r4;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetWorkSpecRunAttemptCount>;

        $r4 = virtualinvoke r3.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        if $r1 != null goto label1;

        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(1);

        goto label2;

     label1:
        interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(1, $r1);

     label2:
        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void beginTransaction()>();

     label3:
        $i0 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label4:
        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetWorkSpecRunAttemptCount>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r4);

        return $i0;

     label5:
        r5 := @caughtexception;

        r2 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r2.<androidx.room.RoomDatabase: void endTransaction()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfResetWorkSpecRunAttemptCount>;

        virtualinvoke r3.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r4);

        throw r5;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setOutput(java.lang.String, androidx.work.Data)
    {
        java.lang.Throwable $r7;
        byte[] $r6;
        androidx.room.RoomDatabase r3;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.room.SharedSQLiteStatement r4;
        java.lang.String $r1;
        androidx.work.Data $r2;
        androidx.sqlite.db.SupportSQLiteStatement $r5;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: androidx.work.Data;

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetOutput>;

        $r5 = virtualinvoke r4.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        $r6 = staticinvoke <androidx.work.Data: byte[] toByteArrayInternal(androidx.work.Data)>($r2);

        if $r6 != null goto label1;

        interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(1);

        goto label2;

     label1:
        interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteStatement: void bindBlob(int,byte[])>(1, $r6);

     label2:
        if $r1 != null goto label3;

        interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(2);

        goto label4;

     label3:
        interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(2, $r1);

     label4:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void beginTransaction()>();

     label5:
        interfaceinvoke $r5.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label6:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void endTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetOutput>;

        virtualinvoke r4.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r5);

        return;

     label7:
        $r7 := @caughtexception;

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void endTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetOutput>;

        virtualinvoke r4.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r5);

        throw $r7;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void setPeriodStartTime(java.lang.String, long)
    {
        java.lang.Throwable $r5;
        androidx.room.RoomDatabase r3;
        androidx.room.SharedSQLiteStatement r4;
        long $l0;
        java.lang.String $r1;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.sqlite.db.SupportSQLiteStatement $r2;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetPeriodStartTime>;

        $r2 = virtualinvoke r4.<androidx.room.SharedSQLiteStatement: androidx.sqlite.db.SupportSQLiteStatement acquire()>();

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindLong(int,long)>(1, $l0);

        if $r1 != null goto label1;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(2);

        goto label2;

     label1:
        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(2, $r1);

     label2:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void beginTransaction()>();

     label3:
        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label4:
        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void endTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetPeriodStartTime>;

        virtualinvoke r4.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        return;

     label5:
        $r5 := @caughtexception;

        r3 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r3.<androidx.room.RoomDatabase: void endTransaction()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.SharedSQLiteStatement __preparedStmtOfSetPeriodStartTime>;

        virtualinvoke r4.<androidx.room.SharedSQLiteStatement: void release(androidx.sqlite.db.SupportSQLiteStatement)>($r2);

        throw $r5;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public transient int setState(androidx.work.WorkInfo$State, java.lang.String[])
    {
        java.lang.Throwable r7;
        androidx.room.RoomDatabase r4;
        java.lang.String[] $r2;
        long l1;
        androidx.work.impl.model.WorkSpecDao_Impl r0;
        androidx.work.WorkInfo$State $r1;
        int i0, i2, $i3;
        java.lang.StringBuilder $r5;
        java.lang.String r3;
        androidx.sqlite.db.SupportSQLiteStatement $r6;

        r0 := @this: androidx.work.impl.model.WorkSpecDao_Impl;

        $r1 := @parameter0: androidx.work.WorkInfo$State;

        $r2 := @parameter1: java.lang.String[];

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r4.<androidx.room.RoomDatabase: void assertNotSuspendingTransaction()>();

        $r5 = staticinvoke <androidx.room.util.StringUtil: java.lang.StringBuilder newStringBuilder()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE workspec SET state=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE id IN (");

        i0 = lengthof $r2;

        staticinvoke <androidx.room.util.StringUtil: void appendPlaceholders(java.lang.StringBuilder,int)>($r5, i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        $r6 = virtualinvoke r4.<androidx.room.RoomDatabase: androidx.sqlite.db.SupportSQLiteStatement compileStatement(java.lang.String)>(r3);

        i0 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: int stateToInt(androidx.work.WorkInfo$State)>($r1);

        l1 = (long) i0;

        interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteStatement: void bindLong(int,long)>(1, l1);

        i0 = 2;

        i2 = lengthof $r2;

        $i3 = 0;

     label1:
        if $i3 >= i2 goto label4;

        r3 = $r2[$i3];

        if r3 != null goto label2;

        interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteStatement: void bindNull(int)>(i0);

        goto label3;

     label2:
        interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteStatement: void bindString(int,java.lang.String)>(i0, r3);

     label3:
        i0 = i0 + 1;

        $i3 = $i3 + 1;

        goto label1;

     label4:
        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r4.<androidx.room.RoomDatabase: void beginTransaction()>();

     label5:
        i0 = interfaceinvoke $r6.<androidx.sqlite.db.SupportSQLiteStatement: int executeUpdateDelete()>();

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r4.<androidx.room.RoomDatabase: void setTransactionSuccessful()>();

     label6:
        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r4.<androidx.room.RoomDatabase: void endTransaction()>();

        return i0;

     label7:
        r7 := @caughtexception;

        r4 = r0.<androidx.work.impl.model.WorkSpecDao_Impl: androidx.room.RoomDatabase __db>;

        virtualinvoke r4.<androidx.room.RoomDatabase: void endTransaction()>();

        throw r7;

        catch java.lang.Throwable from label5 to label6 with label7;
    }
}
