final class kotlin.io.FileTreeWalk$FileTreeWalkIterator extends kotlin.collections.AbstractIterator
{
    private final java.util.ArrayDeque state;
    final kotlin.io.FileTreeWalk this$0;

    public void <init>(kotlin.io.FileTreeWalk)
    {
        kotlin.io.FileTreeWalk$DirectoryState $r4;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState $r5;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator r0;
        java.util.ArrayDeque $r2;
        java.io.File $r3;
        kotlin.io.FileTreeWalk $r1;
        boolean $z0;

        r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r1 := @parameter0: kotlin.io.FileTreeWalk;

        r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0> = $r1;

        specialinvoke r0.<kotlin.collections.AbstractIterator: void <init>()>();

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state> = $r2;

        $r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r1);

        $r4 = specialinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk$DirectoryState directoryState(java.io.File)>($r3);

        virtualinvoke $r2.<java.util.ArrayDeque: void push(java.lang.Object)>($r4);

        goto label3;

     label1:
        $r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $r5 = new kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState;

        $r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r3 = staticinvoke <kotlin.io.FileTreeWalk: java.io.File access$getStart$p(kotlin.io.FileTreeWalk)>($r1);

        specialinvoke $r5.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState: void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator,java.io.File)>(r0, $r3);

        virtualinvoke $r2.<java.util.ArrayDeque: void push(java.lang.Object)>($r5);

        goto label3;

     label2:
        virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: void done()>();

     label3:
        return;
    }

    private final kotlin.io.FileTreeWalk$DirectoryState directoryState(java.io.File)
    {
        kotlin.io.FileTreeWalk$DirectoryState $r7;
        kotlin.NoWhenBranchMatchedException $r5;
        kotlin.io.FileWalkDirection $r4;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator r0;
        java.io.File $r1;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState $r6;
        int[] $r2;
        int $i0;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState $r8;
        kotlin.io.FileTreeWalk $r3;

        r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r1 := @parameter0: java.io.File;

        $r3 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.io.FileWalkDirection access$getDirection$p(kotlin.io.FileTreeWalk)>($r3);

        $r2 = <kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r4.<kotlin.io.FileWalkDirection: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $r5 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r5.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r5;

     label2:
        $r6 = new kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState;

        specialinvoke $r6.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState: void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator,java.io.File)>(r0, $r1);

        $r7 = (kotlin.io.FileTreeWalk$DirectoryState) $r6;

        return $r7;

     label3:
        $r8 = new kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState;

        specialinvoke $r8.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator,java.io.File)>(r0, $r1);

        $r7 = (kotlin.io.FileTreeWalk$DirectoryState) $r8;

        return $r7;
    }

    private final java.io.File gotoNext()
    {
        kotlin.io.FileTreeWalk$DirectoryState $r7;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator r0;
        java.io.File $r4, $r5;
        kotlin.io.FileTreeWalk$WalkState r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.util.ArrayDeque r1;
        boolean $z0;
        kotlin.io.FileTreeWalk $r6;

        r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

     label1:
        r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $r2 = virtualinvoke r1.<java.util.ArrayDeque: java.lang.Object peek()>();

        r3 = (kotlin.io.FileTreeWalk$WalkState) $r2;

        if r3 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r3.<kotlin.io.FileTreeWalk$WalkState: java.io.File step()>();

        if $r4 != null goto label3;

        r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        virtualinvoke r1.<java.util.ArrayDeque: java.lang.Object pop()>();

        goto label1;

     label3:
        $r5 = virtualinvoke r3.<kotlin.io.FileTreeWalk$WalkState: java.io.File getRoot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label5;

        r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $i0 = virtualinvoke r1.<java.util.ArrayDeque: int size()>();

        $r6 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $i1 = staticinvoke <kotlin.io.FileTreeWalk: int access$getMaxDepth$p(kotlin.io.FileTreeWalk)>($r6);

        if $i0 < $i1 goto label4;

        return $r4;

     label4:
        r1 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.util.ArrayDeque state>;

        $r7 = specialinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk$DirectoryState directoryState(java.io.File)>($r4);

        virtualinvoke r1.<java.util.ArrayDeque: void push(java.lang.Object)>($r7);

        goto label1;

     label5:
        return $r4;
    }

    protected void computeNext()
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator r0;
        java.io.File $r1;

        r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r1 = specialinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: java.io.File gotoNext()>();

        if $r1 == null goto label1;

        virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: void setNext(java.lang.Object)>($r1);

        return;

     label1:
        virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: void done()>();

        return;
    }
}
