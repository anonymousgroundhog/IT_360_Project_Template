public final class kotlinx.coroutines.internal.LimitedDispatcher extends kotlinx.coroutines.CoroutineDispatcher implements kotlinx.coroutines.Delay
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU;
    private final kotlinx.coroutines.Delay $$delegate_0;
    private final kotlinx.coroutines.CoroutineDispatcher dispatcher;
    private final int parallelism;
    private final kotlinx.coroutines.internal.LockFreeTaskQueue queue;
    private volatile int runningWorkers;
    private final java.lang.Object workerAllocationLock;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/internal/LimitedDispatcher;", "runningWorkers");

        <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU> = $r0;

        return;
    }

    public void <init>(kotlinx.coroutines.CoroutineDispatcher, int)
    {
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        int $i0;
        kotlinx.coroutines.Delay $r2;
        java.lang.Object $r4;
        kotlinx.coroutines.CoroutineDispatcher $r1;
        boolean $z0;
        kotlinx.coroutines.internal.LockFreeTaskQueue $r3;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $i0 := @parameter1: int;

        specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: void <init>()>();

        r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.CoroutineDispatcher dispatcher> = $r1;

        r0.<kotlinx.coroutines.internal.LimitedDispatcher: int parallelism> = $i0;

        $z0 = $r1 instanceof kotlinx.coroutines.Delay;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.Delay) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 != null goto label3;

        $r2 = staticinvoke <kotlinx.coroutines.DefaultExecutorKt: kotlinx.coroutines.Delay getDefaultDelay()>();

     label3:
        r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.Delay $$delegate_0> = $r2;

        $r3 = new kotlinx.coroutines.internal.LockFreeTaskQueue;

        specialinvoke $r3.<kotlinx.coroutines.internal.LockFreeTaskQueue: void <init>(boolean)>(0);

        r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.internal.LockFreeTaskQueue queue> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.internal.LimitedDispatcher: java.lang.Object workerAllocationLock> = $r4;

        return;
    }

    public static final kotlinx.coroutines.CoroutineDispatcher access$getDispatcher$p(kotlinx.coroutines.internal.LimitedDispatcher)
    {
        kotlinx.coroutines.CoroutineDispatcher r1;
        kotlinx.coroutines.internal.LimitedDispatcher $r0;

        $r0 := @parameter0: kotlinx.coroutines.internal.LimitedDispatcher;

        r1 = $r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        return r1;
    }

    public static final java.lang.Runnable access$obtainTaskOrDeallocateWorker(kotlinx.coroutines.internal.LimitedDispatcher)
    {
        kotlinx.coroutines.internal.LimitedDispatcher $r0;
        java.lang.Runnable $r1;

        $r0 := @parameter0: kotlinx.coroutines.internal.LimitedDispatcher;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.internal.LimitedDispatcher: java.lang.Runnable obtainTaskOrDeallocateWorker()>();

        return $r1;
    }

    private final void dispatchInternal(java.lang.Runnable, kotlin.jvm.functions.Function1)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r4;
        kotlinx.coroutines.internal.LimitedDispatcher$Worker $r5;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Runnable $r1;
        kotlinx.coroutines.internal.LockFreeTaskQueue r3;
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.internal.LockFreeTaskQueue queue>;

        virtualinvoke r3.<kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)>($r1);

        r4 = <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU>;

        $i0 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i1 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: int parallelism>;

        if $i0 < $i1 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.internal.LimitedDispatcher: boolean tryAllocateWorker()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r1 = specialinvoke r0.<kotlinx.coroutines.internal.LimitedDispatcher: java.lang.Runnable obtainTaskOrDeallocateWorker()>();

        if $r1 != null goto label3;

        return;

     label3:
        $r5 = new kotlinx.coroutines.internal.LimitedDispatcher$Worker;

        specialinvoke $r5.<kotlinx.coroutines.internal.LimitedDispatcher$Worker: void <init>(kotlinx.coroutines.internal.LimitedDispatcher,java.lang.Runnable)>(r0, $r1);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        return;
    }

    private final java.lang.Runnable obtainTaskOrDeallocateWorker()
    {
        java.lang.Throwable $r5;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r4;
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.Runnable r3;
        kotlinx.coroutines.internal.LockFreeTaskQueue r1;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

     label1:
        r1 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.internal.LockFreeTaskQueue queue>;

        $r2 = virtualinvoke r1.<kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object removeFirstOrNull()>();

        r3 = (java.lang.Runnable) $r2;

        if r3 != null goto label7;

        $r2 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: java.lang.Object workerAllocationLock>;

        entermonitor $r2;

     label2:
        $r4 = <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>(r0);

        r1 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.internal.LockFreeTaskQueue queue>;

        $i0 = virtualinvoke r1.<kotlinx.coroutines.internal.LockFreeTaskQueue: int getSize()>();

     label3:
        if $i0 != 0 goto label4;

        exitmonitor $r2;

        return null;

     label4:
        $r4 = <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>(r0);

     label5:
        exitmonitor $r2;

        goto label1;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r2;

        throw $r5;

     label7:
        return r3;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private final boolean tryAllocateWorker()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        int $i0, $i1;
        java.lang.Object r1;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        r1 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: java.lang.Object workerAllocationLock>;

        entermonitor r1;

     label1:
        $r2 = <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        $i0 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: int parallelism>;

     label2:
        if $i1 < $i0 goto label3;

        exitmonitor r1;

        return 0;

     label3:
        $r2 = <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>(r0);

     label4:
        exitmonitor r1;

        return 1;

     label5:
        $r3 := @caughtexception;

        exitmonitor r1;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.Object delay(long, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        kotlinx.coroutines.Delay $r3;
        long $l0;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.Delay $$delegate_0>;

        $r2 = interfaceinvoke $r3.<kotlinx.coroutines.Delay: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l0, $r1);

        return $r2;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r5;
        kotlinx.coroutines.internal.LimitedDispatcher$Worker r6;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;
        kotlinx.coroutines.internal.LockFreeTaskQueue r4;
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        int $i0, i1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        r4 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.internal.LockFreeTaskQueue queue>;

        virtualinvoke r4.<kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)>($r2);

        r5 = <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU>;

        $i0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        i1 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: int parallelism>;

        if $i0 >= i1 goto label2;

        $z0 = specialinvoke r0.<kotlinx.coroutines.internal.LimitedDispatcher: boolean tryAllocateWorker()>();

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<kotlinx.coroutines.internal.LimitedDispatcher: java.lang.Runnable obtainTaskOrDeallocateWorker()>();

        if $r2 != null goto label1;

        return;

     label1:
        r6 = new kotlinx.coroutines.internal.LimitedDispatcher$Worker;

        specialinvoke r6.<kotlinx.coroutines.internal.LimitedDispatcher$Worker: void <init>(kotlinx.coroutines.internal.LimitedDispatcher,java.lang.Runnable)>(r0, $r2);

        $r3 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r1 = (kotlin.coroutines.CoroutineContext) r0;

        $r2 = (java.lang.Runnable) r6;

        virtualinvoke $r3.<kotlinx.coroutines.CoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

     label2:
        return;
    }

    public void dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r5;
        kotlinx.coroutines.internal.LimitedDispatcher$Worker r6;
        kotlinx.coroutines.CoroutineDispatcher $r3;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.Runnable $r2;
        kotlinx.coroutines.internal.LockFreeTaskQueue r4;
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        int $i0, i1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: java.lang.Runnable;

        r4 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.internal.LockFreeTaskQueue queue>;

        virtualinvoke r4.<kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)>($r2);

        r5 = <kotlinx.coroutines.internal.LimitedDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater runningWorkers$FU>;

        $i0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        i1 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: int parallelism>;

        if $i0 >= i1 goto label2;

        $z0 = specialinvoke r0.<kotlinx.coroutines.internal.LimitedDispatcher: boolean tryAllocateWorker()>();

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<kotlinx.coroutines.internal.LimitedDispatcher: java.lang.Runnable obtainTaskOrDeallocateWorker()>();

        if $r2 != null goto label1;

        return;

     label1:
        r6 = new kotlinx.coroutines.internal.LimitedDispatcher$Worker;

        specialinvoke r6.<kotlinx.coroutines.internal.LimitedDispatcher$Worker: void <init>(kotlinx.coroutines.internal.LimitedDispatcher,java.lang.Runnable)>(r0, $r2);

        $r3 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

        $r1 = (kotlin.coroutines.CoroutineContext) r0;

        $r2 = (java.lang.Runnable) r6;

        virtualinvoke $r3.<kotlinx.coroutines.CoroutineDispatcher: void dispatchYield(kotlin.coroutines.CoroutineContext,java.lang.Runnable)>($r1, $r2);

     label2:
        return;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.DisposableHandle $r3;
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        kotlinx.coroutines.Delay $r4;
        long $l0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        $r4 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.Delay $$delegate_0>;

        $r3 = interfaceinvoke $r4.<kotlinx.coroutines.Delay: kotlinx.coroutines.DisposableHandle invokeOnTimeout(long,java.lang.Runnable,kotlin.coroutines.CoroutineContext)>($l0, $r1, $r2);

        return $r3;
    }

    public kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)
    {
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        int $i0, $i1;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $i0 := @parameter0: int;

        staticinvoke <kotlinx.coroutines.internal.LimitedDispatcherKt: void checkParallelism(int)>($i0);

        $i1 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: int parallelism>;

        if $i0 < $i1 goto label1;

        $r1 = (kotlinx.coroutines.CoroutineDispatcher) r0;

        return $r1;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.CoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher limitedParallelism(int)>($i0);

        return $r1;
    }

    public void scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.internal.LimitedDispatcher r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        kotlinx.coroutines.Delay $r2;
        long $l0;

        r0 := @this: kotlinx.coroutines.internal.LimitedDispatcher;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $r2 = r0.<kotlinx.coroutines.internal.LimitedDispatcher: kotlinx.coroutines.Delay $$delegate_0>;

        interfaceinvoke $r2.<kotlinx.coroutines.Delay: void scheduleResumeAfterDelay(long,kotlinx.coroutines.CancellableContinuation)>($l0, $r1);

        return;
    }
}
