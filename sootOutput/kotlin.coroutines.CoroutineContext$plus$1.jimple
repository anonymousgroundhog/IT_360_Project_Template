final class kotlin.coroutines.CoroutineContext$plus$1 extends kotlin.jvm.internal.Lambda implements kotlin.jvm.functions.Function2
{
    public static final kotlin.coroutines.CoroutineContext$plus$1 INSTANCE;

    static void <clinit>()
    {
        kotlin.coroutines.CoroutineContext$plus$1 $r0;

        $r0 = new kotlin.coroutines.CoroutineContext$plus$1;

        specialinvoke $r0.<kotlin.coroutines.CoroutineContext$plus$1: void <init>()>();

        <kotlin.coroutines.CoroutineContext$plus$1: kotlin.coroutines.CoroutineContext$plus$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        kotlin.coroutines.CoroutineContext$plus$1 r0;

        r0 := @this: kotlin.coroutines.CoroutineContext$plus$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.CoroutineContext$Element $r4;
        java.lang.Object $r1, $r2;
        kotlin.coroutines.CoroutineContext$plus$1 r0;
        kotlin.coroutines.CoroutineContext $r3;

        r0 := @this: kotlin.coroutines.CoroutineContext$plus$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.coroutines.CoroutineContext) $r1;

        $r4 = (kotlin.coroutines.CoroutineContext$Element) $r2;

        $r3 = virtualinvoke r0.<kotlin.coroutines.CoroutineContext$plus$1: kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>($r3, $r4);

        return $r3;
    }

    public final kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element)
    {
        kotlin.coroutines.ContinuationInterceptor$Key r5;
        kotlin.coroutines.CoroutineContext$Element $r2, $r6;
        kotlin.coroutines.ContinuationInterceptor r7;
        kotlin.coroutines.CoroutineContext$plus$1 r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.EmptyCoroutineContext r4;
        kotlin.coroutines.CoroutineContext$Key $r3;
        kotlin.coroutines.CombinedContext r8, $r9;

        r0 := @this: kotlin.coroutines.CoroutineContext$plus$1;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.coroutines.CoroutineContext$Element;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "acc");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "element");

        $r3 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext$Element: kotlin.coroutines.CoroutineContext$Key getKey()>();

        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>($r3);

        r4 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        if $r1 != r4 goto label1;

        $r1 = (kotlin.coroutines.CoroutineContext) $r2;

        return $r1;

     label1:
        r5 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) r5;

        $r6 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r3);

        r7 = (kotlin.coroutines.ContinuationInterceptor) $r6;

        if r7 != null goto label2;

        r8 = new kotlin.coroutines.CombinedContext;

        specialinvoke r8.<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>($r1, $r2);

        goto label4;

     label2:
        r5 = <kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key>;

        $r3 = (kotlin.coroutines.CoroutineContext$Key) r5;

        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>($r3);

        r4 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        if $r1 != r4 goto label3;

        r8 = new kotlin.coroutines.CombinedContext;

        $r1 = (kotlin.coroutines.CoroutineContext) $r2;

        $r2 = (kotlin.coroutines.CoroutineContext$Element) r7;

        specialinvoke r8.<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>($r1, $r2);

        goto label4;

     label3:
        r8 = new kotlin.coroutines.CombinedContext;

        $r9 = new kotlin.coroutines.CombinedContext;

        specialinvoke $r9.<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>($r1, $r2);

        $r1 = (kotlin.coroutines.CoroutineContext) $r9;

        $r2 = (kotlin.coroutines.CoroutineContext$Element) r7;

        specialinvoke r8.<kotlin.coroutines.CombinedContext: void <init>(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)>($r1, $r2);

     label4:
        $r1 = (kotlin.coroutines.CoroutineContext) r8;

        return $r1;
    }
}
