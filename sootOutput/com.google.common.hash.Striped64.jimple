abstract class com.google.common.hash.Striped64 extends java.lang.Number
{
    static final int NCPU;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long baseOffset;
    private static final long busyOffset;
    static final java.util.Random rng;
    static final java.lang.ThreadLocal threadHashCode;
    transient volatile long base;
    transient volatile int busy;
    transient volatile com.google.common.hash.Striped64$Cell[] cells;

    static void <clinit>()
    {
        sun.misc.Unsafe $r3;
        java.lang.ThreadLocal r0;
        java.lang.Runtime $r2;
        java.lang.Error $r7;
        java.util.Random r1;
        long $l1;
        java.lang.reflect.Field $r5;
        java.lang.Exception r6;
        int $i0;
        java.lang.Class r4;

        r0 = new java.lang.ThreadLocal;

        specialinvoke r0.<java.lang.ThreadLocal: void <init>()>();

        <com.google.common.hash.Striped64: java.lang.ThreadLocal threadHashCode> = r0;

        r1 = new java.util.Random;

        specialinvoke r1.<java.util.Random: void <init>()>();

        <com.google.common.hash.Striped64: java.util.Random rng> = r1;

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r2.<java.lang.Runtime: int availableProcessors()>();

        <com.google.common.hash.Striped64: int NCPU> = $i0;

     label1:
        $r3 = staticinvoke <com.google.common.hash.Striped64: sun.misc.Unsafe getUnsafe()>();

     label2:
        <com.google.common.hash.Striped64: sun.misc.Unsafe UNSAFE> = $r3;

        r4 = class "Lcom/google/common/hash/Striped64;";

        $r3 = <com.google.common.hash.Striped64: sun.misc.Unsafe UNSAFE>;

     label3:
        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("base");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

     label4:
        <com.google.common.hash.Striped64: long baseOffset> = $l1;

        $r3 = <com.google.common.hash.Striped64: sun.misc.Unsafe UNSAFE>;

     label5:
        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("busy");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

     label6:
        <com.google.common.hash.Striped64: long busyOffset> = $l1;

        return;

     label7:
        r6 := @caughtexception;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.Throwable)>(r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    void <init>()
    {
        com.google.common.hash.Striped64 r0;

        r0 := @this: com.google.common.hash.Striped64;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        return;
    }

    static sun.misc.Unsafe access$000()
    {
        sun.misc.Unsafe $r0;

        $r0 = staticinvoke <com.google.common.hash.Striped64: sun.misc.Unsafe getUnsafe()>();

        return $r0;
    }

    private static sun.misc.Unsafe getUnsafe()
    {
        sun.misc.Unsafe $r1;
        java.lang.Throwable $r6;
        java.security.PrivilegedActionException r5;
        com.google.common.hash.Striped64$1 r3;
        java.lang.SecurityException r2;
        java.lang.Object $r4;
        java.lang.RuntimeException $r0;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

     label2:
        return $r1;

     label3:
        r2 := @caughtexception;

        r3 = new com.google.common.hash.Striped64$1;

     label4:
        specialinvoke r3.<com.google.common.hash.Striped64$1: void <init>()>();

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(r3);

     label5:
        $r1 = (sun.misc.Unsafe) $r4;

        return $r1;

     label6:
        r5 := @caughtexception;

        $r0 = new java.lang.RuntimeException;

        $r6 = virtualinvoke r5.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not initialize intrinsics", $r6);

        throw $r0;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.security.PrivilegedActionException from label4 to label5 with label6;
    }

    final boolean casBase(long, long)
    {
        sun.misc.Unsafe $r1;
        long $l0, $l1, $l2;
        com.google.common.hash.Striped64 r0;
        boolean $z0;

        r0 := @this: com.google.common.hash.Striped64;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 = <com.google.common.hash.Striped64: sun.misc.Unsafe UNSAFE>;

        $l2 = <com.google.common.hash.Striped64: long baseOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l2, $l0, $l1);

        return $z0;
    }

    final boolean casBusy()
    {
        sun.misc.Unsafe $r1;
        long $l0;
        com.google.common.hash.Striped64 r0;
        boolean $z0;

        r0 := @this: com.google.common.hash.Striped64;

        $r1 = <com.google.common.hash.Striped64: sun.misc.Unsafe UNSAFE>;

        $l0 = <com.google.common.hash.Striped64: long busyOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l0, 0, 1);

        return $z0;
    }

    abstract long fn(long, long);

    final void internalReset(long)
    {
        com.google.common.hash.Striped64$Cell r2;
        com.google.common.hash.Striped64$Cell[] r1;
        int i1, i2;
        long $l0;
        com.google.common.hash.Striped64 r0;

        r0 := @this: com.google.common.hash.Striped64;

        $l0 := @parameter0: long;

        r1 = r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells>;

        r0.<com.google.common.hash.Striped64: long base> = $l0;

        if r1 == null goto label3;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r2 = r1[i2];

        if r2 == null goto label2;

        r2.<com.google.common.hash.Striped64$Cell: long value> = $l0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    final void retryUpdate(long, int[], boolean)
    {
        java.lang.Throwable r8, r10, r11;
        long $l0, l4, $l5;
        java.util.Random r4;
        com.google.common.hash.Striped64$Cell r6, r7;
        int[] r1, r3;
        int i1, $i2, i3;
        boolean $z0, z1, $z2, $z3;
        java.lang.ThreadLocal r2;
        com.google.common.hash.Striped64$Cell[] r5, r9;
        com.google.common.hash.Striped64 r0;

        r0 := @this: com.google.common.hash.Striped64;

        $l0 := @parameter0: long;

        r1 := @parameter1: int[];

        $z0 := @parameter2: boolean;

        if r1 != null goto label03;

        r2 = <com.google.common.hash.Striped64: java.lang.ThreadLocal threadHashCode>;

        i1 = 1;

        r1 = newarray (int)[1];

        r3 = r1;

        virtualinvoke r2.<java.lang.ThreadLocal: void set(java.lang.Object)>(r1);

        r4 = <com.google.common.hash.Striped64: java.util.Random rng>;

        $i2 = virtualinvoke r4.<java.util.Random: int nextInt()>();

        if $i2 != 0 goto label01;

        goto label02;

     label01:
        i1 = $i2;

     label02:
        r1[0] = i1;

        goto label04;

     label03:
        i1 = r1[0];

        r3 = r1;

     label04:
        z1 = 0;

     label05:
        r5 = r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells>;

        if r5 == null goto label36;

        $i2 = lengthof r5;

        if $i2 <= 0 goto label35;

        i3 = $i2 + -1;

        i3 = i3 & i1;

        r6 = r5[i3];

        if r6 != null goto label17;

        $i2 = r0.<com.google.common.hash.Striped64: int busy>;

        if $i2 != 0 goto label16;

        r7 = new com.google.common.hash.Striped64$Cell;

        r6 = r7;

        specialinvoke r7.<com.google.common.hash.Striped64$Cell: void <init>(long)>($l0);

        $i2 = r0.<com.google.common.hash.Striped64: int busy>;

        if $i2 != 0 goto label16;

        $z2 = virtualinvoke r0.<com.google.common.hash.Striped64: boolean casBusy()>();

        if $z2 == 0 goto label16;

        $z2 = 0;

     label06:
        r5 = r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells>;

     label07:
        if r5 == null goto label14;

     label08:
        $i2 = lengthof r5;

     label09:
        if $i2 <= 0 goto label14;

        $i2 = $i2 + -1;

        $i2 = $i2 & i1;

     label10:
        r7 = r5[$i2];

     label11:
        if r7 != null goto label14;

     label12:
        r5[$i2] = r6;

     label13:
        $z2 = 1;

     label14:
        r0.<com.google.common.hash.Striped64: int busy> = 0;

        if $z2 == 0 goto label05;

        return;

     label15:
        r8 := @caughtexception;

        r0.<com.google.common.hash.Striped64: int busy> = 0;

        throw r8;

     label16:
        z1 = 0;

        goto label34;

     label17:
        if $z0 != 0 goto label18;

        $z0 = 1;

        goto label34;

     label18:
        l4 = r6.<com.google.common.hash.Striped64$Cell: long value>;

        $z2 = $z0;

        $l5 = virtualinvoke r0.<com.google.common.hash.Striped64: long fn(long,long)>(l4, $l0);

        $z3 = virtualinvoke r6.<com.google.common.hash.Striped64$Cell: boolean cas(long,long)>(l4, $l5);

        if $z3 == 0 goto label19;

        return;

     label19:
        i3 = <com.google.common.hash.Striped64: int NCPU>;

        if $i2 >= i3 goto label33;

        r9 = r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells>;

        if r9 == r5 goto label20;

        goto label33;

     label20:
        if z1 != 0 goto label21;

        z1 = 1;

        goto label34;

     label21:
        i3 = r0.<com.google.common.hash.Striped64: int busy>;

        if i3 != 0 goto label32;

        $z0 = virtualinvoke r0.<com.google.common.hash.Striped64: boolean casBusy()>();

        if $z0 == 0 goto label32;

     label22:
        r9 = r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells>;

     label23:
        if r9 != r5 goto label30;

        i3 = $i2 << 1;

     label24:
        r9 = newarray (com.google.common.hash.Striped64$Cell)[i3];

     label25:
        i3 = 0;

     label26:
        if i3 >= $i2 goto label29;

     label27:
        r6 = r5[i3];

        r9[i3] = r6;

     label28:
        i3 = i3 + 1;

        goto label26;

     label29:
        r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells> = r9;

     label30:
        r0.<com.google.common.hash.Striped64: int busy> = 0;

        z1 = 0;

        $z0 = $z2;

        goto label05;

     label31:
        r10 := @caughtexception;

        r0.<com.google.common.hash.Striped64: int busy> = 0;

        throw r10;

     label32:
        $z0 = $z2;

        goto label34;

     label33:
        z1 = 0;

        $z0 = $z2;

     label34:
        $i2 = i1 << 13;

        i1 = $i2 ^ i1;

        $i2 = i1 >>> 17;

        i1 = i1 ^ $i2;

        $i2 = i1 << 5;

        i1 = i1 ^ $i2;

        r3[0] = i1;

        goto label48;

     label35:
        goto label36;

     label36:
        $i2 = r0.<com.google.common.hash.Striped64: int busy>;

        if $i2 != 0 goto label47;

        r9 = r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells>;

        if r9 != r5 goto label47;

        $z2 = virtualinvoke r0.<com.google.common.hash.Striped64: boolean casBusy()>();

        if $z2 == 0 goto label47;

        $z2 = 0;

     label37:
        r9 = r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells>;

     label38:
        if r9 != r5 goto label44;

     label39:
        r5 = newarray (com.google.common.hash.Striped64$Cell)[2];

     label40:
        $i2 = i1 & 1;

     label41:
        r7 = new com.google.common.hash.Striped64$Cell;

     label42:
        specialinvoke r7.<com.google.common.hash.Striped64$Cell: void <init>(long)>($l0);

        r5[$i2] = r7;

        r0.<com.google.common.hash.Striped64: com.google.common.hash.Striped64$Cell[] cells> = r5;

     label43:
        $z2 = 1;

     label44:
        r0.<com.google.common.hash.Striped64: int busy> = 0;

        if $z2 == 0 goto label45;

        return;

     label45:
        goto label48;

     label46:
        r11 := @caughtexception;

        r0.<com.google.common.hash.Striped64: int busy> = 0;

        throw r11;

     label47:
        l4 = r0.<com.google.common.hash.Striped64: long base>;

        $l5 = virtualinvoke r0.<com.google.common.hash.Striped64: long fn(long,long)>(l4, $l0);

        $z2 = virtualinvoke r0.<com.google.common.hash.Striped64: boolean casBase(long,long)>(l4, $l5);

        if $z2 == 0 goto label48;

        return;

     label48:
        goto label05;

        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label22 to label23 with label31;
        catch java.lang.Throwable from label24 to label25 with label31;
        catch java.lang.Throwable from label27 to label28 with label31;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label37 to label38 with label46;
        catch java.lang.Throwable from label39 to label40 with label46;
        catch java.lang.Throwable from label41 to label42 with label46;
        catch java.lang.Throwable from label42 to label43 with label46;
    }
}
