public final class androidx.core.location.LocationCompat extends java.lang.Object
{
    public static final java.lang.String EXTRA_BEARING_ACCURACY;
    public static final java.lang.String EXTRA_IS_MOCK;
    public static final java.lang.String EXTRA_SPEED_ACCURACY;
    public static final java.lang.String EXTRA_VERTICAL_ACCURACY;
    private static java.lang.reflect.Method sSetIsFromMockProviderMethod;

    private void <init>()
    {
        androidx.core.location.LocationCompat r0;

        r0 := @this: androidx.core.location.LocationCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static float getBearingAccuracyDegrees(android.location.Location)
    {
        android.os.Bundle $r1;
        int i0;
        float $f0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        $f0 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: float getBearingAccuracyDegrees(android.location.Location)>($r0);

        return $f0;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        if $r1 != null goto label2;

        return 0.0F;

     label2:
        $f0 = virtualinvoke $r1.<android.os.Bundle: float getFloat(java.lang.String,float)>("bearingAccuracy", 0.0F);

        return $f0;
    }

    public static long getElapsedRealtimeMillis(android.location.Location)
    {
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = staticinvoke <androidx.core.location.LocationCompat$Api17Impl: long getElapsedRealtimeNanos(android.location.Location)>($r0);

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        return $l0;
    }

    public static long getElapsedRealtimeNanos(android.location.Location)
    {
        long $l0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        $l0 = staticinvoke <androidx.core.location.LocationCompat$Api17Impl: long getElapsedRealtimeNanos(android.location.Location)>($r0);

        return $l0;
    }

    private static java.lang.reflect.Method getSetIsFromMockProviderMethod() throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r0;
        java.lang.Class $r2, $r3;
        java.lang.reflect.Method $r1;

        $r1 = <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod>;

        if $r1 != null goto label1;

        $r2 = class "Landroid/location/Location;";

        $r0 = newarray (java.lang.Class)[1];

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r0[0] = $r3;

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setIsFromMockProvider", $r0);

        <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod> = $r1;

        $r1 = <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod>;

        virtualinvoke $r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label1:
        $r1 = <androidx.core.location.LocationCompat: java.lang.reflect.Method sSetIsFromMockProviderMethod>;

        return $r1;
    }

    public static float getSpeedAccuracyMetersPerSecond(android.location.Location)
    {
        android.os.Bundle $r1;
        int i0;
        float $f0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        $f0 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: float getSpeedAccuracyMetersPerSecond(android.location.Location)>($r0);

        return $f0;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        if $r1 != null goto label2;

        return 0.0F;

     label2:
        $f0 = virtualinvoke $r1.<android.os.Bundle: float getFloat(java.lang.String,float)>("speedAccuracy", 0.0F);

        return $f0;
    }

    public static float getVerticalAccuracyMeters(android.location.Location)
    {
        android.os.Bundle $r1;
        int i0;
        float $f0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        $f0 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: float getVerticalAccuracyMeters(android.location.Location)>($r0);

        return $f0;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        if $r1 != null goto label2;

        return 0.0F;

     label2:
        $f0 = virtualinvoke $r1.<android.os.Bundle: float getFloat(java.lang.String,float)>("verticalAccuracy", 0.0F);

        return $f0;
    }

    public static boolean hasBearingAccuracy(android.location.Location)
    {
        android.os.Bundle $r1;
        int i0;
        android.location.Location $r0;
        boolean $z0;

        $r0 := @parameter0: android.location.Location;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        $z0 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: boolean hasBearingAccuracy(android.location.Location)>($r0);

        return $z0;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("bearingAccuracy");

        return $z0;
    }

    public static boolean hasSpeedAccuracy(android.location.Location)
    {
        android.os.Bundle $r1;
        int i0;
        android.location.Location $r0;
        boolean $z0;

        $r0 := @parameter0: android.location.Location;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        $z0 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: boolean hasSpeedAccuracy(android.location.Location)>($r0);

        return $z0;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("speedAccuracy");

        return $z0;
    }

    public static boolean hasVerticalAccuracy(android.location.Location)
    {
        android.os.Bundle $r1;
        int i0;
        android.location.Location $r0;
        boolean $z0;

        $r0 := @parameter0: android.location.Location;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        $z0 = staticinvoke <androidx.core.location.LocationCompat$Api26Impl: boolean hasVerticalAccuracy(android.location.Location)>($r0);

        return $z0;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("verticalAccuracy");

        return $z0;
    }

    public static boolean isMock(android.location.Location)
    {
        android.location.Location $r0;
        boolean $z0;

        $r0 := @parameter0: android.location.Location;

        $z0 = staticinvoke <androidx.core.location.LocationCompat$Api18Impl: boolean isMock(android.location.Location)>($r0);

        return $z0;
    }

    public static void setBearingAccuracyDegrees(android.location.Location, float)
    {
        android.os.Bundle $r1, r2;
        int i0;
        float $f0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        $f0 := @parameter1: float;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        staticinvoke <androidx.core.location.LocationCompat$Api26Impl: void setBearingAccuracyDegrees(android.location.Location,float)>($r0, $f0);

        return;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        r2 = $r1;

        if $r1 != null goto label2;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        virtualinvoke $r0.<android.location.Location: void setExtras(android.os.Bundle)>($r1);

        r2 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

     label2:
        virtualinvoke r2.<android.os.Bundle: void putFloat(java.lang.String,float)>("bearingAccuracy", $f0);

        return;
    }

    public static void setMock(android.location.Location, boolean)
    {
        java.lang.IllegalAccessException r6;
        java.lang.Object[] r2;
        java.lang.NoSuchMethodException r8;
        java.lang.NoSuchMethodError r9;
        java.lang.RuntimeException r5;
        java.lang.reflect.InvocationTargetException r4;
        java.lang.IllegalAccessError r7;
        java.lang.Boolean $r3;
        android.location.Location $r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        $r0 := @parameter0: android.location.Location;

        $z0 := @parameter1: boolean;

     label1:
        $r1 = staticinvoke <androidx.core.location.LocationCompat: java.lang.reflect.Method getSetIsFromMockProviderMethod()>();

     label2:
        r2 = newarray (java.lang.Object)[1];

     label3:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label4:
        r2[0] = $r3;

     label5:
        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, r2);

     label6:
        return;

     label7:
        r4 := @caughtexception;

        r5 = new java.lang.RuntimeException;

        specialinvoke r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw r5;

     label8:
        r6 := @caughtexception;

        r7 = new java.lang.IllegalAccessError;

        specialinvoke r7.<java.lang.IllegalAccessError: void <init>()>();

        virtualinvoke r7.<java.lang.Error: java.lang.Throwable initCause(java.lang.Throwable)>(r6);

        throw r7;

     label9:
        r8 := @caughtexception;

        r9 = new java.lang.NoSuchMethodError;

        specialinvoke r9.<java.lang.NoSuchMethodError: void <init>()>();

        virtualinvoke r9.<java.lang.Error: java.lang.Throwable initCause(java.lang.Throwable)>(r8);

        throw r9;

        catch java.lang.NoSuchMethodException from label1 to label2 with label9;
        catch java.lang.NoSuchMethodException from label3 to label4 with label9;
        catch java.lang.NoSuchMethodException from label5 to label6 with label9;
        catch java.lang.IllegalAccessException from label1 to label2 with label8;
        catch java.lang.IllegalAccessException from label3 to label4 with label8;
        catch java.lang.IllegalAccessException from label5 to label6 with label8;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
    }

    public static void setSpeedAccuracyMetersPerSecond(android.location.Location, float)
    {
        android.os.Bundle $r1, r2;
        int i0;
        float $f0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        $f0 := @parameter1: float;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        staticinvoke <androidx.core.location.LocationCompat$Api26Impl: void setSpeedAccuracyMetersPerSecond(android.location.Location,float)>($r0, $f0);

        return;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        r2 = $r1;

        if $r1 != null goto label2;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        virtualinvoke $r0.<android.location.Location: void setExtras(android.os.Bundle)>($r1);

        r2 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

     label2:
        virtualinvoke r2.<android.os.Bundle: void putFloat(java.lang.String,float)>("speedAccuracy", $f0);

        return;
    }

    public static void setVerticalAccuracyMeters(android.location.Location, float)
    {
        android.os.Bundle $r1, r2;
        int i0;
        float $f0;
        android.location.Location $r0;

        $r0 := @parameter0: android.location.Location;

        $f0 := @parameter1: float;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 26 goto label1;

        staticinvoke <androidx.core.location.LocationCompat$Api26Impl: void setVerticalAccuracyMeters(android.location.Location,float)>($r0, $f0);

        return;

     label1:
        $r1 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

        r2 = $r1;

        if $r1 != null goto label2;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        virtualinvoke $r0.<android.location.Location: void setExtras(android.os.Bundle)>($r1);

        r2 = virtualinvoke $r0.<android.location.Location: android.os.Bundle getExtras()>();

     label2:
        virtualinvoke r2.<android.os.Bundle: void putFloat(java.lang.String,float)>("verticalAccuracy", $f0);

        return;
    }

    public static void <clinit>()
    {
        <androidx.core.location.LocationCompat: java.lang.String EXTRA_VERTICAL_ACCURACY> = "verticalAccuracy";

        <androidx.core.location.LocationCompat: java.lang.String EXTRA_SPEED_ACCURACY> = "speedAccuracy";

        <androidx.core.location.LocationCompat: java.lang.String EXTRA_IS_MOCK> = "mockLocation";

        <androidx.core.location.LocationCompat: java.lang.String EXTRA_BEARING_ACCURACY> = "bearingAccuracy";

        return;
    }
}
