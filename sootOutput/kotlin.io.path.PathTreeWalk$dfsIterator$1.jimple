final class kotlin.io.path.PathTreeWalk$dfsIterator$1 extends kotlin.coroutines.jvm.internal.RestrictedSuspendLambda implements kotlin.jvm.functions.Function2
{
    private java.lang.Object L$0;
    java.lang.Object L$1;
    java.lang.Object L$2;
    java.lang.Object L$3;
    java.lang.Object L$4;
    java.lang.Object L$5;
    int label;
    final kotlin.io.path.PathTreeWalk this$0;

    void <init>(kotlin.io.path.PathTreeWalk, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.io.path.PathTreeWalk$dfsIterator$1 r0;
        kotlin.io.path.PathTreeWalk $r1;

        r0 := @this: kotlin.io.path.PathTreeWalk$dfsIterator$1;

        $r1 := @parameter0: kotlin.io.path.PathTreeWalk;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.RestrictedSuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.io.path.PathTreeWalk $r3;
        java.lang.Object $r1;
        kotlin.io.path.PathTreeWalk$dfsIterator$1 r0, $r4;

        r0 := @this: kotlin.io.path.PathTreeWalk$dfsIterator$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new kotlin.io.path.PathTreeWalk$dfsIterator$1;

        $r3 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0>;

        specialinvoke $r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: void <init>(kotlin.io.path.PathTreeWalk,kotlin.coroutines.Continuation)>($r3, $r2);

        $r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r4;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r4;
        java.lang.Object $r1, $r2;
        kotlin.io.path.PathTreeWalk$dfsIterator$1 r0;
        kotlin.sequences.SequenceScope $r3;

        r0 := @this: kotlin.io.path.PathTreeWalk$dfsIterator$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.sequences.SequenceScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object invoke(kotlin.sequences.SequenceScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlin.sequences.SequenceScope, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;
        kotlin.io.path.PathTreeWalk$dfsIterator$1 r0;
        kotlin.sequences.SequenceScope $r1;

        r0 := @this: kotlin.io.path.PathTreeWalk$dfsIterator$1;

        $r1 := @parameter0: kotlin.sequences.SequenceScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlin.io.path.PathTreeWalk$dfsIterator$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        kotlin.coroutines.Continuation r17;
        java.lang.Object[] $r16;
        kotlin.io.path.PathNode $r11;
        java.nio.file.LinkOption $r22;
        java.nio.file.FileSystemLoopException $r20;
        kotlin.io.path.PathTreeWalk r10;
        int i0;
        java.lang.String $r21;
        java.nio.file.Path r9, $r14;
        kotlin.sequences.SequenceScope $r8;
        boolean $z0;
        java.nio.file.LinkOption[] $r15;
        java.util.Iterator $r19;
        java.util.Collection r23;
        kotlin.collections.ArrayDeque r7, $r12;
        java.util.List $r18;
        kotlin.Unit r24;
        java.lang.Object $r1, $r2, r5;
        kotlin.io.path.DirectoryEntriesReader r6, $r13;
        kotlin.io.path.PathTreeWalk$dfsIterator$1 r0, r4;

        r0 := @this: kotlin.io.path.PathTreeWalk$dfsIterator$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: int label>;

        lookupswitch(i0)
        {
            case 0: goto label06;
            case 1: goto label05;
            case 2: goto label04;
            case 3: goto label03;
            case 4: goto label02;
            default: goto label01;
        };

     label01:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r3;

     label02:
        r4 = r0;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2>;

        r6 = (kotlin.io.path.DirectoryEntriesReader) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1>;

        r7 = (kotlin.collections.ArrayDeque) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0>;

        $r8 = (kotlin.sequences.SequenceScope) r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label12;

     label03:
        r4 = r0;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$5>;

        r9 = (java.nio.file.Path) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$4>;

        r10 = (kotlin.io.path.PathTreeWalk) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$3>;

        $r11 = (kotlin.io.path.PathNode) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2>;

        r6 = (kotlin.io.path.DirectoryEntriesReader) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1>;

        r7 = (kotlin.collections.ArrayDeque) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0>;

        $r8 = (kotlin.sequences.SequenceScope) r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label13;

     label04:
        r4 = r0;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2>;

        r6 = (kotlin.io.path.DirectoryEntriesReader) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1>;

        r7 = (kotlin.collections.ArrayDeque) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0>;

        $r8 = (kotlin.sequences.SequenceScope) r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label12;

     label05:
        r4 = r0;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$5>;

        r9 = (java.nio.file.Path) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$4>;

        r10 = (kotlin.io.path.PathTreeWalk) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$3>;

        $r11 = (kotlin.io.path.PathNode) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2>;

        r6 = (kotlin.io.path.DirectoryEntriesReader) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1>;

        r7 = (kotlin.collections.ArrayDeque) r5;

        r5 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0>;

        $r8 = (kotlin.sequences.SequenceScope) r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label08;

     label06:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r4 = r0;

        $r1 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0>;

        $r8 = (kotlin.sequences.SequenceScope) $r1;

        $r12 = new kotlin.collections.ArrayDeque;

        specialinvoke $r12.<kotlin.collections.ArrayDeque: void <init>()>();

        r7 = $r12;

        $r13 = new kotlin.io.path.DirectoryEntriesReader;

        r10 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0>;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalk: boolean access$getFollowLinks(kotlin.io.path.PathTreeWalk)>(r10);

        specialinvoke $r13.<kotlin.io.path.DirectoryEntriesReader: void <init>(boolean)>($z0);

        r6 = $r13;

        $r11 = new kotlin.io.path.PathNode;

        r10 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0>;

        r9 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.Path access$getStart$p(kotlin.io.path.PathTreeWalk)>(r10);

        r10 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0>;

        $r14 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.Path access$getStart$p(kotlin.io.path.PathTreeWalk)>(r10);

        r10 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0>;

        $r15 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)>(r10);

        $r1 = staticinvoke <kotlin.io.path.PathTreeWalkKt: java.lang.Object access$keyOf(java.nio.file.Path,java.nio.file.LinkOption[])>($r14, $r15);

        specialinvoke $r11.<kotlin.io.path.PathNode: void <init>(java.nio.file.Path,java.lang.Object,kotlin.io.path.PathNode)>(r9, $r1, null);

        r10 = r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0>;

        r9 = virtualinvoke $r11.<kotlin.io.path.PathNode: java.nio.file.Path getPath()>();

        $r14 = r9;

        $r15 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)>(r10);

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r9, $r15);

        if $z0 == 0 goto label11;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalkKt: boolean access$createsCycle(kotlin.io.path.PathNode)>($r11);

        if $z0 != 0 goto label10;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalk: boolean access$getIncludeDirectories(kotlin.io.path.PathTreeWalk)>(r10);

        if $z0 == 0 goto label09;

        r17 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0> = $r8;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1> = $r12;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2> = $r13;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$3> = $r11;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$4> = r10;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$5> = r9;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: int label> = 1;

        $r1 = virtualinvoke $r8.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>(r9, r17);

        if $r1 != $r2 goto label07;

        return $r2;

     label07:
        r7 = $r12;

        r6 = $r13;

     label08:
        $r14 = r9;

     label09:
        $r15 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)>(r10);

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r14, $r15);

        if $z0 == 0 goto label12;

        $r18 = virtualinvoke r6.<kotlin.io.path.DirectoryEntriesReader: java.util.List readEntries(kotlin.io.path.PathNode)>($r11);

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke $r11.<kotlin.io.path.PathNode: void setContentIterator(java.util.Iterator)>($r19);

        virtualinvoke r7.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>($r11);

        goto label12;

     label10:
        $r20 = new java.nio.file.FileSystemLoopException;

        $r21 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r20.<java.nio.file.FileSystemLoopException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label11:
        $r15 = newarray (java.nio.file.LinkOption)[1];

        $r22 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        $r15[0] = $r22;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, 1);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r9, $r15);

        if $z0 == 0 goto label12;

        r17 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0> = $r8;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1> = $r12;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2> = $r13;

        r0.<kotlin.io.path.PathTreeWalk$dfsIterator$1: int label> = 2;

        $r1 = virtualinvoke $r8.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>(r9, r17);

        if $r1 != $r2 goto label12;

        return $r2;

     label12:
        r23 = (java.util.Collection) r7;

        $z0 = interfaceinvoke r23.<java.util.Collection: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label19;

        $r1 = virtualinvoke r7.<kotlin.collections.ArrayDeque: java.lang.Object last()>();

        $r11 = (kotlin.io.path.PathNode) $r1;

        $r19 = virtualinvoke $r11.<kotlin.io.path.PathNode: java.util.Iterator getContentIterator()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r19);

        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r1 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (kotlin.io.path.PathNode) $r1;

        r10 = r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: kotlin.io.path.PathTreeWalk this$0>;

        r9 = virtualinvoke $r11.<kotlin.io.path.PathNode: java.nio.file.Path getPath()>();

        $r14 = r9;

        $r15 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)>(r10);

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r9, $r15);

        if $z0 == 0 goto label16;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalkKt: boolean access$createsCycle(kotlin.io.path.PathNode)>($r11);

        if $z0 != 0 goto label15;

        $z0 = staticinvoke <kotlin.io.path.PathTreeWalk: boolean access$getIncludeDirectories(kotlin.io.path.PathTreeWalk)>(r10);

        if $z0 == 0 goto label14;

        r17 = (kotlin.coroutines.Continuation) r4;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0> = $r8;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1> = r7;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2> = r6;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$3> = $r11;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$4> = r10;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$5> = r9;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: int label> = 3;

        $r1 = virtualinvoke $r8.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>(r9, r17);

        if $r1 != $r2 goto label13;

        return $r2;

     label13:
        $r14 = r9;

     label14:
        $r15 = staticinvoke <kotlin.io.path.PathTreeWalk: java.nio.file.LinkOption[] access$getLinkOptions(kotlin.io.path.PathTreeWalk)>(r10);

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        i0 = lengthof $r15;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, i0);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r14, $r15);

        if $z0 == 0 goto label12;

        $r18 = virtualinvoke r6.<kotlin.io.path.DirectoryEntriesReader: java.util.List readEntries(kotlin.io.path.PathNode)>($r11);

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke $r11.<kotlin.io.path.PathNode: void setContentIterator(java.util.Iterator)>($r19);

        virtualinvoke r7.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>($r11);

        goto label12;

     label15:
        $r20 = new java.nio.file.FileSystemLoopException;

        $r21 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r20.<java.nio.file.FileSystemLoopException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label16:
        $r15 = newarray (java.nio.file.LinkOption)[1];

        $r22 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        $r15[0] = $r22;

        $r16 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r15, 1);

        $r15 = (java.nio.file.LinkOption[]) $r16;

        $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r9, $r15);

        if $z0 == 0 goto label17;

        r17 = (kotlin.coroutines.Continuation) r4;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$0> = $r8;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$1> = r7;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$2> = r6;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$3> = null;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$4> = null;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: java.lang.Object L$5> = null;

        r4.<kotlin.io.path.PathTreeWalk$dfsIterator$1: int label> = 4;

        $r1 = virtualinvoke $r8.<kotlin.sequences.SequenceScope: java.lang.Object yield(java.lang.Object,kotlin.coroutines.Continuation)>(r9, r17);

        if $r1 != $r2 goto label12;

        return $r2;

     label17:
        goto label12;

     label18:
        virtualinvoke r7.<kotlin.collections.ArrayDeque: java.lang.Object removeLast()>();

        goto label12;

     label19:
        r24 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r24;
    }
}
