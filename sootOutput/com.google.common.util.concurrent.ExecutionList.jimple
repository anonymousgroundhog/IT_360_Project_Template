public final class com.google.common.util.concurrent.ExecutionList extends java.lang.Object
{
    private static final java.util.logging.Logger log;
    private boolean executed;
    private com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/common/util/concurrent/ExecutionList;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.util.concurrent.ExecutionList: java.util.logging.Logger log> = $r2;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.ExecutionList r0;

        r0 := @this: com.google.common.util.concurrent.ExecutionList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void executeListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r1;
        java.lang.RuntimeException r2;
        java.util.logging.Logger $r3;
        java.lang.Runnable $r0;
        java.util.logging.Level $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r8;
        java.lang.String $r5, $r6, $r7;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: java.util.concurrent.Executor;

     label1:
        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r0);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = <com.google.common.util.concurrent.ExecutionList: java.util.logging.Logger log>;

        $r4 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i0 = $i0 + 57;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuntimeException while executing runnable ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with executor ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, $r5, r2);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void add(java.lang.Runnable, java.util.concurrent.Executor)
    {
        java.lang.Throwable $r5;
        com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair $r3, $r4;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.ExecutionList r0;
        java.lang.Runnable $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ExecutionList;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Runnable was null.");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Executor was null.");

        entermonitor r0;

     label1:
        $z0 = r0.<com.google.common.util.concurrent.ExecutionList: boolean executed>;

        if $z0 != 0 goto label3;

        $r4 = new com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair;

        $r3 = r0.<com.google.common.util.concurrent.ExecutionList: com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables>;

        specialinvoke $r4.<com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: void <init>(java.lang.Runnable,java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair)>($r1, $r2, $r3);

        r0.<com.google.common.util.concurrent.ExecutionList: com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables> = $r4;

        exitmonitor r0;

     label2:
        return;

     label3:
        exitmonitor r0;

     label4:
        staticinvoke <com.google.common.util.concurrent.ExecutionList: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>($r1, $r2);

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void execute()
    {
        java.lang.Throwable r6;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable r5;
        com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair r2, r3, r4;
        com.google.common.util.concurrent.ExecutionList r0;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.ExecutionList;

        entermonitor r0;

     label01:
        z0 = r0.<com.google.common.util.concurrent.ExecutionList: boolean executed>;

        if z0 == 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        r0.<com.google.common.util.concurrent.ExecutionList: boolean executed> = 1;

        r2 = r0.<com.google.common.util.concurrent.ExecutionList: com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables>;

        r0.<com.google.common.util.concurrent.ExecutionList: com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables> = null;

        exitmonitor r0;

     label04:
        r3 = null;

     label05:
        if r2 == null goto label06;

        r4 = r2;

        r2 = r2.<com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair next>;

        r4.<com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair next> = r3;

        r3 = r4;

        goto label05;

     label06:
        if r3 == null goto label07;

        r5 = r3.<com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: java.lang.Runnable runnable>;

        $r1 = r3.<com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: java.util.concurrent.Executor executor>;

        staticinvoke <com.google.common.util.concurrent.ExecutionList: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>(r5, $r1);

        r3 = r3.<com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair: com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair next>;

        goto label06;

     label07:
        return;

     label08:
        r6 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
}
