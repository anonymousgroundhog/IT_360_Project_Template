public class com.google.common.collect.ImmutableMultimap$Builder extends java.lang.Object
{
    final java.util.Map builderMap;
    java.util.Comparator keyComparator;
    java.util.Comparator valueComparator;

    public void <init>()
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Platform: java.util.Map preservesInsertionOrderOnPutsMap()>();

        r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Map builderMap> = $r1;

        return;
    }

    public com.google.common.collect.ImmutableMultimap build()
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        com.google.common.collect.Ordering $r5;
        java.util.Map r1;
        java.util.Collection r3;
        com.google.common.collect.ImmutableListMultimap $r6;
        java.util.Set $r2;
        java.util.Comparator $r4;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Map builderMap>;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = $r2;

        $r4 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Comparator keyComparator>;

        if $r4 == null goto label1;

        $r4 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Comparator keyComparator>;

        $r5 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>($r4);

        $r5 = virtualinvoke $r5.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onKeys()>();

        r3 = virtualinvoke $r5.<com.google.common.collect.Ordering: com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable)>($r2);

     label1:
        $r4 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Comparator valueComparator>;

        $r6 = staticinvoke <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap fromMapEntries(java.util.Collection,java.util.Comparator)>(r3, $r4);

        return $r6;
    }

    com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0, r1;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.Iterable $r8;
        java.util.Map $r2;
        java.lang.Object $r5, $r7;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: com.google.common.collect.ImmutableMultimap$Builder;

        $r2 = r1.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Map builderMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Iterable) $r7;

        virtualinvoke r0.<com.google.common.collect.ImmutableMultimap$Builder: com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable)>($r5, $r8);

        goto label1;

     label2:
        return r0;
    }

    java.util.Collection newMutableValueCollection()
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.lang.Object $r2;
        java.util.Comparator r1;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: java.util.Comparator;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.util.Comparator) $r2;

        r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Comparator keyComparator> = r1;

        return r0;
    }

    public com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.lang.Object $r2;
        java.util.Comparator r1;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: java.util.Comparator;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.util.Comparator) $r2;

        r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Comparator valueComparator> = r1;

        return r0;
    }

    public com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.Map $r3;
        java.util.Collection r5, $r6;
        java.lang.Object r1, r2, $r4;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Map builderMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.Collection) $r4;

        if r5 != null goto label1;

        $r3 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Map builderMap>;

        $r6 = virtualinvoke r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Collection newMutableValueCollection()>();

        r5 = $r6;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label1:
        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        return r0;
    }

    public com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.Map$Entry r1;
        java.lang.Object $r2, $r3;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableMultimap$Builder: com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        com.google.common.collect.Multimap r1;
        java.lang.Iterable $r8;
        java.util.Map $r2;
        java.lang.Object $r5, $r7;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: com.google.common.collect.Multimap;

        $r2 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.Iterable) $r7;

        virtualinvoke r0.<com.google.common.collect.ImmutableMultimap$Builder: com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable)>($r5, $r8);

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Iterable r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        virtualinvoke r0.<com.google.common.collect.ImmutableMultimap$Builder: com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry)>(r4);

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Iterable)
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.Iterator $r9;
        java.util.Collection r8;
        java.lang.Iterable r2;
        java.lang.NullPointerException r4;
        java.util.Map r6;
        int $i0;
        java.lang.Object r1, $r7;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        if r1 != null goto label3;

        r4 = new java.lang.NullPointerException;

        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.String toString(java.lang.Iterable)>(r2);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r3 = "null key in entry: null=";

        if $i0 == 0 goto label1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        goto label2;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>("null key in entry: null=");

     label2:
        specialinvoke r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw r4;

     label3:
        r6 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Map builderMap>;

        $r7 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.Collection) $r7;

        if r8 == null goto label6;

        $r9 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, $r7);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label4;

     label5:
        return r0;

     label6:
        $r9 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label7;

        return r0;

     label7:
        r8 = virtualinvoke r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Collection newMutableValueCollection()>();

     label8:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r1, $r7);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label8;

     label9:
        r6 = r0.<com.google.common.collect.ImmutableMultimap$Builder: java.util.Map builderMap>;

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

        return r0;
    }

    public transient com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Object[])
    {
        com.google.common.collect.ImmutableMultimap$Builder r0;
        java.util.List $r3;
        java.lang.Object[] r2;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ImmutableMultimap$Builder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableMultimap$Builder: com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable)>(r1, $r3);

        return r0;
    }
}
