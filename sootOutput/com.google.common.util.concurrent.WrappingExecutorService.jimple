abstract class com.google.common.util.concurrent.WrappingExecutorService extends java.lang.Object implements java.util.concurrent.ExecutorService
{
    private final java.util.concurrent.ExecutorService delegate;

    protected void <init>(java.util.concurrent.ExecutorService)
    {
        java.lang.Object $r2;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.util.concurrent.ExecutorService) $r2;

        r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate> = $r1;

        return;
    }

    static void lambda$wrapTask$0(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable $r0;
        java.lang.RuntimeException $r2;
        java.lang.Exception r1;

        $r0 := @parameter0: java.util.concurrent.Callable;

     label1:
        interfaceinvoke $r0.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(r1);

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private com.google.common.collect.ImmutableList wrapTasks(java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection r1;
        java.util.concurrent.Callable r5;
        com.google.common.collect.ImmutableList $r6;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.lang.Object $r4;
        com.google.common.collect.ImmutableList$Builder $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        r1 := @parameter0: java.util.Collection;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.Callable) $r4;

        r5 = virtualinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable)>(r5);

        virtualinvoke $r2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>(r5);

        goto label1;

     label2:
        $r6 = virtualinvoke $r2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r6;
    }

    public final boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit $r1;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        long $l0;
        java.util.concurrent.ExecutorService $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $z0;
    }

    public final void execute(java.lang.Runnable)
    {
        java.lang.Runnable $r1;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: java.lang.Runnable wrapTask(java.lang.Runnable)>($r1);

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1);

        return;
    }

    public final java.util.List invokeAll(java.util.Collection) throws java.lang.InterruptedException
    {
        java.util.List $r4;
        com.google.common.collect.ImmutableList $r3;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.Collection r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r3 = specialinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: com.google.common.collect.ImmutableList wrapTasks(java.util.Collection)>(r1);

        $r4 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>($r3);

        return $r4;
    }

    public final java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit $r2;
        java.util.List $r5;
        com.google.common.collect.ImmutableList $r4;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.Collection r1;
        long $l0;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        r1 := @parameter0: java.util.Collection;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r4 = specialinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: com.google.common.collect.ImmutableList wrapTasks(java.util.Collection)>(r1);

        $r5 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>($r4, $l0, $r2);

        return $r5;
    }

    public final java.lang.Object invokeAny(java.util.Collection) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        com.google.common.collect.ImmutableList $r3;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.Collection r1;
        java.lang.Object $r4;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r3 = specialinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: com.google.common.collect.ImmutableList wrapTasks(java.util.Collection)>(r1);

        $r4 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.TimeUnit $r2;
        com.google.common.collect.ImmutableList $r4;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.Collection r1;
        long $l0;
        java.lang.Object $r5;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        r1 := @parameter0: java.util.Collection;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r4 = specialinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: com.google.common.collect.ImmutableList wrapTasks(java.util.Collection)>(r1);

        $r5 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>($r4, $l0, $r2);

        return $r5;
    }

    public final boolean isShutdown()
    {
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.ExecutorService $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>();

        return $z0;
    }

    public final boolean isTerminated()
    {
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.ExecutorService $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isTerminated()>();

        return $z0;
    }

    public final void shutdown()
    {
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        return;
    }

    public final java.util.List shutdownNow()
    {
        java.util.List $r1;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r2 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r1 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        return $r1;
    }

    public final java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.Future $r3;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.lang.Runnable $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: java.lang.Runnable wrapTask(java.lang.Runnable)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r1);

        return $r3;
    }

    public final java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.Future $r4;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.lang.Object r2;
        java.lang.Runnable $r1;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: java.lang.Runnable wrapTask(java.lang.Runnable)>($r1);

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>($r1, r2);

        return $r4;
    }

    public final java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.Future $r4;
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.Callable r1;
        java.lang.Object $r3;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.ExecutorService delegate>;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.util.concurrent.Callable) $r3;

        r1 = virtualinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable)>(r1);

        $r4 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r1);

        return $r4;
    }

    protected java.lang.Runnable wrapTask(java.lang.Runnable)
    {
        com.google.common.util.concurrent.WrappingExecutorService r0;
        java.util.concurrent.Callable $r3;
        java.lang.Runnable $r1;
        com.google.common.util.concurrent.WrappingExecutorService$$ExternalSyntheticLambda0 $r2;

        r0 := @this: com.google.common.util.concurrent.WrappingExecutorService;

        $r1 := @parameter0: java.lang.Runnable;

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>($r1, null);

        $r3 = virtualinvoke r0.<com.google.common.util.concurrent.WrappingExecutorService: java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable)>($r3);

        $r2 = new com.google.common.util.concurrent.WrappingExecutorService$$ExternalSyntheticLambda0;

        specialinvoke $r2.<com.google.common.util.concurrent.WrappingExecutorService$$ExternalSyntheticLambda0: void <init>(java.util.concurrent.Callable)>($r3);

        return $r2;
    }

    protected abstract java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable);
}
