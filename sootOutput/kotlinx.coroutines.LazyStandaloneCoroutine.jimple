final class kotlinx.coroutines.LazyStandaloneCoroutine extends kotlinx.coroutines.StandaloneCoroutine
{
    private final kotlin.coroutines.Continuation continuation;

    public void <init>(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)
    {
        kotlin.coroutines.Continuation $r3;
        kotlin.jvm.functions.Function2 $r2;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.LazyStandaloneCoroutine r0;

        r0 := @this: kotlinx.coroutines.LazyStandaloneCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        specialinvoke r0.<kotlinx.coroutines.StandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>($r1, 0);

        $r3 = (kotlin.coroutines.Continuation) r0;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r2, r0, $r3);

        r0.<kotlinx.coroutines.LazyStandaloneCoroutine: kotlin.coroutines.Continuation continuation> = $r3;

        return;
    }

    protected void onStart()
    {
        kotlin.coroutines.Continuation $r1, $r2;
        kotlinx.coroutines.LazyStandaloneCoroutine r0;

        r0 := @this: kotlinx.coroutines.LazyStandaloneCoroutine;

        $r1 = r0.<kotlinx.coroutines.LazyStandaloneCoroutine: kotlin.coroutines.Continuation continuation>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation)>($r1, $r2);

        return;
    }
}
