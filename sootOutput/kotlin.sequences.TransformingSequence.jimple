public final class kotlin.sequences.TransformingSequence extends java.lang.Object implements kotlin.sequences.Sequence
{
    private final kotlin.sequences.Sequence sequence;
    private final kotlin.jvm.functions.Function1 transformer;

    public void <init>(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r2;
        kotlin.sequences.Sequence $r1;
        kotlin.sequences.TransformingSequence r0;

        r0 := @this: kotlin.sequences.TransformingSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transformer");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence> = $r1;

        r0.<kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer> = $r2;

        return;
    }

    public static final kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence)
    {
        kotlin.sequences.Sequence r1;
        kotlin.sequences.TransformingSequence $r0;

        $r0 := @parameter0: kotlin.sequences.TransformingSequence;

        r1 = $r0.<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence>;

        return r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence)
    {
        kotlin.jvm.functions.Function1 r1;
        kotlin.sequences.TransformingSequence $r0;

        $r0 := @parameter0: kotlin.sequences.TransformingSequence;

        r1 = $r0.<kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer>;

        return r1;
    }

    public final kotlin.sequences.Sequence flatten$kotlin_stdlib(kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.Sequence $r2;
        kotlin.jvm.functions.Function1 $r1, $r3;
        kotlin.sequences.FlatteningSequence $r4;
        kotlin.sequences.TransformingSequence r0;

        r0 := @this: kotlin.sequences.TransformingSequence;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "iterator");

        $r4 = new kotlin.sequences.FlatteningSequence;

        $r2 = r0.<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence>;

        $r3 = r0.<kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer>;

        specialinvoke $r4.<kotlin.sequences.FlatteningSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r2, $r3, $r1);

        $r2 = (kotlin.sequences.Sequence) $r4;

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r2;
        kotlin.sequences.TransformingSequence$iterator$1 $r1;
        kotlin.sequences.TransformingSequence r0;

        r0 := @this: kotlin.sequences.TransformingSequence;

        $r1 = new kotlin.sequences.TransformingSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.TransformingSequence$iterator$1: void <init>(kotlin.sequences.TransformingSequence)>(r0);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }
}
