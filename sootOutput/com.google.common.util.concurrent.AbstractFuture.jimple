public abstract class com.google.common.util.concurrent.AbstractFuture extends com.google.common.util.concurrent.internal.InternalFutureFailureAccess implements com.google.common.util.concurrent.ListenableFuture
{
    private static final com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER;
    static final boolean GENERATE_CANCELLATION_CAUSES;
    private static final java.lang.Object NULL;
    private static final long SPIN_THRESHOLD_NANOS;
    private static final java.util.logging.Logger log;
    private volatile com.google.common.util.concurrent.AbstractFuture$Listener listeners;
    private volatile java.lang.Object value;
    private volatile com.google.common.util.concurrent.AbstractFuture$Waiter waiters;

    static void <clinit>()
    {
        java.lang.Throwable r5, r6;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper r8;
        java.util.logging.Level $r15;
        com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper $r14;
        com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper $r0;
        com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper r7;
        java.lang.SecurityException r2;
        java.lang.String $r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r9, $r10, $r11, $r12, $r13;
        java.util.logging.Logger $r4;
        java.lang.Class r3;
        java.lang.Object r16;

        <com.google.common.util.concurrent.AbstractFuture: long SPIN_THRESHOLD_NANOS> = 1000L;

     label01:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("guava.concurrent.generate_cancellation_cause", "false");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

     label02:
        goto label04;

     label03:
        r2 := @caughtexception;

        $z0 = 0;

     label04:
        <com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES> = $z0;

        r3 = class "Lcom/google/common/util/concurrent/AbstractFuture;";

        $r1 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log> = $r4;

        r5 = null;

        r6 = null;

     label05:
        r7 = new com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper;

        specialinvoke r7.<com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: void <init>(com.google.common.util.concurrent.AbstractFuture$1)>(null);

     label06:
        r8 = r7;

        goto label11;

     label07:
        r5 := @caughtexception;

     label08:
        $r0 = new com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper;

        $r9 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", class "Ljava/lang/Thread;", "thread");

        $r10 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", "next");

        $r11 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture;", class "Lcom/google/common/util/concurrent/AbstractFuture$Waiter;", "waiters");

        $r12 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture;", class "Lcom/google/common/util/concurrent/AbstractFuture$Listener;", "listeners");

        $r13 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lcom/google/common/util/concurrent/AbstractFuture;", class "Ljava/lang/Object;", "value");

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)>($r9, $r10, $r11, $r12, $r13);

     label09:
        r8 = $r0;

        goto label11;

     label10:
        r6 := @caughtexception;

        $r14 = new com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper;

        specialinvoke $r14.<com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: void <init>(com.google.common.util.concurrent.AbstractFuture$1)>(null);

        r8 = $r14;

     label11:
        <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER> = r8;

        if r6 == null goto label12;

        $r4 = <com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log>;

        $r15 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r15, "UnsafeAtomicHelper is broken!", r5);

        $r4 = <com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log>;

        $r15 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r15, "SafeAtomicHelper is broken!", r6);

     label12:
        r16 = new java.lang.Object;

        specialinvoke r16.<java.lang.Object: void <init>()>();

        <com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL> = r16;

        return;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    protected void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        specialinvoke r0.<com.google.common.util.concurrent.internal.InternalFutureFailureAccess: void <init>()>();

        return;
    }

    static com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200()
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper r0;

        r0 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        return r0;
    }

    static java.lang.Object access$300(com.google.common.util.concurrent.AbstractFuture)
    {
        java.lang.Object r1;
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        return r1;
    }

    static java.lang.Object access$302(com.google.common.util.concurrent.AbstractFuture, java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: java.lang.Object;

        $r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value> = $r1;

        return $r1;
    }

    static java.lang.Object access$400(com.google.common.util.concurrent.ListenableFuture)
    {
        java.lang.Object $r1;
        com.google.common.util.concurrent.ListenableFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r1 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>($r0);

        return $r1;
    }

    static void access$500(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void complete(com.google.common.util.concurrent.AbstractFuture)>($r0);

        return;
    }

    static com.google.common.util.concurrent.AbstractFuture$Listener access$700(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Listener r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners>;

        return r1;
    }

    static com.google.common.util.concurrent.AbstractFuture$Listener access$702(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture $r0;
        com.google.common.util.concurrent.AbstractFuture$Listener $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Listener;

        $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners> = $r1;

        return $r1;
    }

    static com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter r1;
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        r1 = $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        return r1;
    }

    static com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture, com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;
        com.google.common.util.concurrent.AbstractFuture $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters> = $r1;

        return $r1;
    }

    private void addDoneString(java.lang.StringBuilder)
    {
        java.lang.Throwable $r7;
        java.util.concurrent.CancellationException r5;
        java.lang.RuntimeException r3;
        java.util.concurrent.ExecutionException r6;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.Class $r4;
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

     label1:
        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SUCCESS, result=[");

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void appendResultObject(java.lang.StringBuilder,java.lang.Object)>($r1, $r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNKNOWN, cause=[");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thrown from get()]");

        return;

     label4:
        r5 := @caughtexception;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLED");

        goto label6;

     label5:
        r6 := @caughtexception;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FAILURE, cause=[");

        $r7 = virtualinvoke r6.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label6:
        return;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label5;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void addPendingString(java.lang.StringBuilder)
    {
        java.lang.Throwable r7;
        com.google.common.util.concurrent.ListenableFuture r5;
        com.google.common.util.concurrent.AbstractFuture$SetFuture r4;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r2;
        java.lang.Object r3;
        java.lang.Class $r8;
        java.lang.String $r6, $r9;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PENDING");

        r3 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        z0 = r3 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if z0 == 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", setFuture=[");

        r4 = (com.google.common.util.concurrent.AbstractFuture$SetFuture) r3;

        r5 = r4.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void appendUserObject(java.lang.StringBuilder,java.lang.Object)>($r1, r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label7;

     label1:
        $r6 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.String pendingToString()>();

        $r6 = staticinvoke <com.google.common.base.Strings: java.lang.String emptyToNull(java.lang.String)>($r6);

     label2:
        goto label6;

     label3:
        r7 := @caughtexception;

        goto label5;

     label4:
        r7 := @caughtexception;

     label5:
        $r8 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i1 = $i1 + 38;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown from implementation: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        if $r6 == null goto label7;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", info=[");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label7:
        z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean isDone()>();

        if z0 == 0 goto label8;

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i0, $i1);

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void addDoneString(java.lang.StringBuilder)>($r1);

     label8:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.StackOverflowError from label1 to label2 with label3;
    }

    private void appendResultObject(java.lang.StringBuilder, java.lang.Object)
    {
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != null goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        return;

     label1:
        if $r2 != r0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this future");

        return;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return;
    }

    private void appendUserObject(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.Throwable r3;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.Class $r4;
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != r0 goto label3;

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this future");

     label2:
        goto label4;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label4:
        return;

     label5:
        r3 := @caughtexception;

        goto label7;

     label6:
        r3 := @caughtexception;

     label7:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown from implementation: ");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.StackOverflowError from label1 to label2 with label5;
        catch java.lang.StackOverflowError from label3 to label4 with label5;
    }

    private static java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        java.lang.String $r0;
        java.util.concurrent.CancellationException r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Throwable;

        r2 = new java.util.concurrent.CancellationException;

        specialinvoke r2.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>($r0);

        virtualinvoke r2.<java.util.concurrent.CancellationException: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

        return r2;
    }

    private com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper r3;
        com.google.common.util.concurrent.AbstractFuture$Listener $r1, $r2, r4;
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Listener;

        r3 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r2 = <com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE>;

        $r2 = virtualinvoke r3.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: com.google.common.util.concurrent.AbstractFuture$Listener gasListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener)>(r0, $r2);

        r4 = $r1;

     label1:
        if $r2 == null goto label2;

        $r1 = $r2;

        $r2 = $r2.<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next>;

        $r1.<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next> = r4;

        r4 = $r1;

        goto label1;

     label2:
        return r4;
    }

    private static void complete(com.google.common.util.concurrent.AbstractFuture)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r7;
        com.google.common.util.concurrent.ListenableFuture r6;
        java.util.concurrent.Executor r8;
        com.google.common.util.concurrent.AbstractFuture$SetFuture r5;
        java.lang.Runnable r3;
        com.google.common.util.concurrent.AbstractFuture$Listener r1, r2;
        java.lang.Object $r4;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean z0;

        r0 := @parameter0: com.google.common.util.concurrent.AbstractFuture;

        r2 = null;

     label1:
        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void releaseWaiters()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void afterDone()>();

        r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener)>(r2);

     label2:
        if r2 == null goto label5;

        r1 = r2;

        r2 = r2.<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next>;

        r3 = r1.<com.google.common.util.concurrent.AbstractFuture$Listener: java.lang.Runnable task>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        r3 = (java.lang.Runnable) $r4;

        z0 = r3 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if z0 == 0 goto label4;

        r5 = (com.google.common.util.concurrent.AbstractFuture$SetFuture) r3;

        r0 = r5.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.AbstractFuture owner>;

        $r4 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if $r4 != r5 goto label3;

        r6 = r5.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        $r4 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>(r6);

        $r7 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        z0 = virtualinvoke $r7.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, r5, $r4);

        if z0 == 0 goto label3;

        goto label1;

     label3:
        goto label2;

     label4:
        r8 = r1.<com.google.common.util.concurrent.AbstractFuture$Listener: java.util.concurrent.Executor executor>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        r8 = (java.util.concurrent.Executor) $r4;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>(r3, r8);

        goto label2;

     label5:
        return;
    }

    private static void executeListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r1;
        java.lang.RuntimeException r2;
        java.util.logging.Logger $r3;
        java.lang.Runnable $r0;
        java.util.logging.Level $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r8;
        java.lang.String $r5, $r6, $r7;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: java.util.concurrent.Executor;

     label1:
        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r0);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = <com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log>;

        $r4 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i0 = $i0 + 57;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuntimeException while executing runnable ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with executor ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, $r5, r2);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private java.lang.Object getDoneValue(java.lang.Object) throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r5;
        java.util.concurrent.CancellationException $r7;
        com.google.common.util.concurrent.AbstractFuture$Cancellation r6;
        java.util.concurrent.ExecutionException r3;
        com.google.common.util.concurrent.AbstractFuture$Failure $r4;
        java.lang.Object $r1, r2;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.Object;

        z0 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        if z0 != 0 goto label3;

        z0 = $r1 instanceof com.google.common.util.concurrent.AbstractFuture$Failure;

        if z0 != 0 goto label2;

        r2 = <com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL>;

        if $r1 != r2 goto label1;

        $r1 = staticinvoke <com.google.common.util.concurrent.NullnessCasts: java.lang.Object uncheckedNull()>();

     label1:
        return $r1;

     label2:
        r3 = new java.util.concurrent.ExecutionException;

        $r4 = (com.google.common.util.concurrent.AbstractFuture$Failure) $r1;

        $r5 = $r4.<com.google.common.util.concurrent.AbstractFuture$Failure: java.lang.Throwable exception>;

        specialinvoke r3.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r5);

        throw r3;

     label3:
        r6 = (com.google.common.util.concurrent.AbstractFuture$Cancellation) $r1;

        $r5 = r6.<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        $r7 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)>("Task was cancelled.", $r5);

        throw $r7;
    }

    private static java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)
    {
        java.lang.Throwable r4;
        com.google.common.util.concurrent.ListenableFuture r0;
        com.google.common.util.concurrent.AbstractFuture$Cancellation r3, r5;
        com.google.common.util.concurrent.AbstractFuture$Failure r7;
        int $i0;
        java.lang.String $r9, $r10;
        boolean z0, z1;
        java.util.concurrent.CancellationException r12;
        java.lang.IllegalArgumentException $r8;
        java.util.concurrent.ExecutionException r13;
        com.google.common.util.concurrent.internal.InternalFutureFailureAccess r6;
        java.lang.Object r2;
        java.lang.StringBuilder $r11;
        com.google.common.util.concurrent.AbstractFuture r1;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        z0 = r0 instanceof com.google.common.util.concurrent.AbstractFuture$Trusted;

        if z0 == 0 goto label04;

        r1 = (com.google.common.util.concurrent.AbstractFuture) r0;

        r2 = r1.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        z0 = r2 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        if z0 == 0 goto label03;

        r3 = (com.google.common.util.concurrent.AbstractFuture$Cancellation) r2;

        z0 = r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: boolean wasInterrupted>;

        if z0 == 0 goto label03;

        r4 = r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        if r4 == null goto label01;

        r5 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        r4 = r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        specialinvoke r5.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, r4);

        goto label02;

     label01:
        r5 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

     label02:
        r2 = r5;

     label03:
        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        return r2;

     label04:
        z0 = r0 instanceof com.google.common.util.concurrent.internal.InternalFutureFailureAccess;

        if z0 == 0 goto label05;

        r6 = (com.google.common.util.concurrent.internal.InternalFutureFailureAccess) r0;

        r4 = staticinvoke <com.google.common.util.concurrent.internal.InternalFutures: java.lang.Throwable tryInternalFastPathGetFailure(com.google.common.util.concurrent.internal.InternalFutureFailureAccess)>(r6);

        if r4 == null goto label05;

        r7 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        specialinvoke r7.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r4);

        return r7;

     label05:
        z0 = interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: boolean isCancelled()>();

        z1 = <com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        z1 = z1 ^ 1;

        z1 = z1 & z0;

        if z1 == 0 goto label06;

        r3 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        return r2;

     label06:
        r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>(r0);

     label07:
        if z0 == 0 goto label14;

     label08:
        r3 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        $r8 = new java.lang.IllegalArgumentException;

     label09:
        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

     label10:
        $i0 = $i0 + 84;

     label11:
        $r11 = new java.lang.StringBuilder;

     label12:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get() did not throw CancellationException, despite reporting isCancelled() == true: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        specialinvoke r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, $r8);

     label13:
        return r3;

     label14:
        if r2 != null goto label16;

     label15:
        r2 = <com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL>;

     label16:
        return r2;

     label17:
        r4 := @caughtexception;

        r7 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        specialinvoke r7.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r4);

        return r7;

     label18:
        r12 := @caughtexception;

        if z0 != 0 goto label19;

        r7 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i0 = $i0 + 77;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get() threw CancellationException, despite reporting isCancelled() == false: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r12);

        specialinvoke r7.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r8);

        return r7;

     label19:
        r3 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        specialinvoke r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, r12);

        return r3;

     label20:
        r13 := @caughtexception;

        if z0 == 0 goto label21;

        r3 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i0 = $i0 + 84;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get() did not throw CancellationException, despite reporting isCancelled() == true: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r13);

        specialinvoke r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, $r8);

        return r3;

     label21:
        r7 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        r4 = virtualinvoke r13.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r7.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r4);

        return r7;

        catch java.util.concurrent.ExecutionException from label06 to label07 with label20;
        catch java.util.concurrent.ExecutionException from label09 to label10 with label20;
        catch java.util.concurrent.ExecutionException from label12 to label13 with label20;
        catch java.util.concurrent.CancellationException from label06 to label07 with label18;
        catch java.util.concurrent.CancellationException from label09 to label10 with label18;
        catch java.util.concurrent.CancellationException from label12 to label13 with label18;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label10 with label17;
        catch java.lang.Throwable from label11 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    private static java.lang.Object getUninterruptibly(java.util.concurrent.Future) throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable r3;
        java.util.concurrent.Future r0;
        java.lang.InterruptedException r4;
        java.lang.Thread $r2;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0: java.util.concurrent.Future;

        z0 = 0;

     label1:
        $r1 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        if z0 == 0 goto label6;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return $r1;

     label3:
        r3 := @caughtexception;

        if z0 == 0 goto label4;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label4:
        throw r3;

     label5:
        r4 := @caughtexception;

        z0 = 1;

        goto label1;

     label6:
        return $r1;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void releaseWaiters()
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper r2;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1;
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r2 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r1 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        $r1 = virtualinvoke r2.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: com.google.common.util.concurrent.AbstractFuture$Waiter gasWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter)>(r0, $r1);

     label1:
        if $r1 == null goto label2;

        virtualinvoke $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: void unpark()>();

        $r1 = $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next>;

        goto label1;

     label2:
        return;
    }

    private void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r5;
        java.lang.Thread $r4;
        com.google.common.util.concurrent.AbstractFuture$Waiter $r1, r2, r3;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread> = null;

     label1:
        $r1 = null;

        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        r3 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if r2 != r3 goto label2;

        return;

     label2:
        if r2 == null goto label6;

        r3 = r2.<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next>;

        $r4 = r2.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r4 == null goto label3;

        $r1 = r2;

        goto label5;

     label3:
        if $r1 == null goto label4;

        $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next> = r3;

        $r4 = $r1.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r4 != null goto label5;

        goto label1;

     label4:
        $r5 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r5.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>(r0, r2, r3);

        if $z0 != 0 goto label5;

        goto label1;

     label5:
        r2 = r3;

        goto label2;

     label6:
        return;
    }

    public void addListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r5;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r1;
        com.google.common.util.concurrent.AbstractFuture$Listener r3, r4, $r6;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Runnable was null.");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Executor was null.");

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean isDone()>();

        if $z0 != 0 goto label3;

        r3 = r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners>;

        r4 = <com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE>;

        if r3 == r4 goto label3;

        r4 = new com.google.common.util.concurrent.AbstractFuture$Listener;

        specialinvoke r4.<com.google.common.util.concurrent.AbstractFuture$Listener: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>($r1, $r2);

     label1:
        r4.<com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next> = r3;

        $r5 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r5.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener)>(r0, r3, r4);

        if $z0 == 0 goto label2;

        return;

     label2:
        r3 = r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners>;

        $r6 = <com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE>;

        if r3 != $r6 goto label1;

     label3:
        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>($r1, $r2);

        return;
    }

    protected void afterDone()
    {
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        return;
    }

    public boolean cancel(boolean)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper r4;
        com.google.common.util.concurrent.ListenableFuture r6;
        java.util.concurrent.CancellationException $r7;
        com.google.common.util.concurrent.AbstractFuture$SetFuture r5;
        com.google.common.util.concurrent.AbstractFuture$Cancellation r3;
        java.lang.Object r1, r2;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $z0 := @parameter0: boolean;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        z2 = 0;

        if r1 != null goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z3 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z1 = $z1 | z3;

        if $z1 == 0 goto label14;

        $z1 = <com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        if $z1 == 0 goto label03;

        r3 = new com.google.common.util.concurrent.AbstractFuture$Cancellation;

        r2 = r3;

        $r7 = new java.util.concurrent.CancellationException;

        specialinvoke $r7.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Future.cancel() was called.");

        specialinvoke r3.<com.google.common.util.concurrent.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>($z0, $r7);

        goto label06;

     label03:
        if $z0 == 0 goto label04;

        r3 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED>;

        goto label05;

     label04:
        r3 = <com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

     label05:
        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

     label06:
        r4 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z1 = virtualinvoke r4.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        if $z1 == 0 goto label13;

        z2 = 1;

        if $z0 == 0 goto label07;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void interruptTask()>();

     label07:
        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void complete(com.google.common.util.concurrent.AbstractFuture)>(r0);

        $z1 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 == 0 goto label15;

        r5 = (com.google.common.util.concurrent.AbstractFuture$SetFuture) r1;

        r6 = r5.<com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        $z1 = r6 instanceof com.google.common.util.concurrent.AbstractFuture$Trusted;

        if $z1 == 0 goto label11;

        r0 = (com.google.common.util.concurrent.AbstractFuture) r6;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r1 != null goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        $z1 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z1 = z3 | $z1;

        if $z1 == 0 goto label10;

        goto label06;

     label10:
        goto label12;

     label11:
        interfaceinvoke r6.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>($z0);

     label12:
        return 1;

     label13:
        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z1 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        if $z1 != 0 goto label06;

        return z2;

     label14:
        return 0;

     label15:
        return 1;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r4;
        java.lang.InterruptedException $r5;
        java.lang.Object r1;
        com.google.common.util.concurrent.AbstractFuture$Waiter r2, r3, $r6;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0, z1;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label11;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r1 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        z1 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        z1 = z1 ^ 1;

        $z0 = $z0 & z1;

        if $z0 == 0 goto label03;

        r1 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r1);

        return r1;

     label03:
        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        r3 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if r2 == r3 goto label10;

        r3 = new com.google.common.util.concurrent.AbstractFuture$Waiter;

        specialinvoke r3.<com.google.common.util.concurrent.AbstractFuture$Waiter: void <init>()>();

     label04:
        virtualinvoke r3.<com.google.common.util.concurrent.AbstractFuture$Waiter: void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter)>(r2);

        $r4 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r4.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>(r0, r2, r3);

        if $z0 == 0 goto label09;

     label05:
        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label08;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r1 == null goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        z1 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        z1 = z1 ^ 1;

        $z0 = $z0 & z1;

        if $z0 == 0 goto label05;

        r1 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r1);

        return r1;

     label08:
        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)>(r3);

        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();

        throw $r5;

     label09:
        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        $r6 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if r2 != $r6 goto label04;

     label10:
        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        r1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r1 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r1);

        return r1;

     label11:
        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();

        throw $r5;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r5;
        java.util.concurrent.TimeoutException $r16;
        long $l0, $l1, l2, $l4;
        byte b3;
        java.util.Locale $r9;
        int $i5, $i6;
        java.lang.String $r7, $r8, $r10, $r11;
        com.google.common.util.concurrent.AbstractFuture$Waiter r3, r4, $r6;
        boolean $z0, $z1;
        java.util.concurrent.TimeUnit $r1, r13;
        java.lang.InterruptedException $r14;
        java.lang.Object r2;
        java.lang.StringBuilder r12, $r15;
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        l2 = $l1;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label30;

        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r2 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $z1 = r2 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label03;

        r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r2);

        return r2;

     label03:
        b3 = $l1 cmp 0L;

        $i5 = (int) b3;

        if $i5 <= 0 goto label04;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l4 + $l1;

        goto label05;

     label04:
        $l4 = 0L;

     label05:
        b3 = $l1 cmp 1000L;

        $i5 = (int) b3;

        if $i5 < 0 goto label16;

        r3 = r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        r4 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if r3 == r4 goto label15;

        $r6 = new com.google.common.util.concurrent.AbstractFuture$Waiter;

        r4 = $r6;

        specialinvoke $r6.<com.google.common.util.concurrent.AbstractFuture$Waiter: void <init>()>();

     label06:
        virtualinvoke r4.<com.google.common.util.concurrent.AbstractFuture$Waiter: void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter)>(r3);

        $r5 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r5.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>(r0, r3, r4);

        if $z0 == 0 goto label13;

     label07:
        staticinvoke <com.google.common.util.concurrent.OverflowAvoidingLockSupport: void parkNanos(java.lang.Object,long)>(r0, l2);

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label12;

        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r2 == null goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        $z1 = r2 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label10;

        r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r2);

        return r2;

     label10:
        l2 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l4 - l2;

        b3 = l2 cmp 1000L;

        $i5 = (int) b3;

        if $i5 >= 0 goto label11;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)>(r4);

        goto label16;

     label11:
        goto label07;

     label12:
        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)>(r4);

        $r14 = new java.lang.InterruptedException;

        specialinvoke $r14.<java.lang.InterruptedException: void <init>()>();

        throw $r14;

     label13:
        r3 = r0.<com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters>;

        $r6 = <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE>;

        if r3 != $r6 goto label14;

        goto label15;

     label14:
        goto label06;

     label15:
        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r2);

        return r2;

     label16:
        b3 = l2 cmp 0L;

        $i5 = (int) b3;

        if $i5 <= 0 goto label21;

        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r2 == null goto label17;

        $z0 = 1;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        $z1 = r2 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label19;

        r2 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r2);

        return r2;

     label19:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label20;

        l2 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l4 - l2;

        goto label16;

     label20:
        $r14 = new java.lang.InterruptedException;

        specialinvoke $r14.<java.lang.InterruptedException: void <init>()>();

        throw $r14;

     label21:
        $r7 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()>();

        $r8 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: java.lang.String toString()>();

        $r9 = <java.util.Locale: java.util.Locale ROOT>;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $r10 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: java.lang.String toString()>();

        $r9 = <java.util.Locale: java.util.Locale ROOT>;

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $i5 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i5 = $i5 + 28;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i5);

        r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waited ");

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = $r11;

        $l0 = l2 + 1000L;

        b3 = $l0 cmp 0L;

        $i5 = (int) b3;

        if $i5 >= 0 goto label28;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String concat(java.lang.String)>(" (plus ");

        $r11 = $r10;

        l2 = neg l2;

        r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l2, r13);

        $l4 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        l2 = l2 - $l4;

        b3 = $l0 cmp 0L;

        if b3 == 0 goto label23;

        b3 = l2 cmp 1000L;

        $i5 = (int) b3;

        if $i5 <= 0 goto label22;

        goto label23;

     label22:
        $z0 = 0;

        goto label24;

     label23:
        $z0 = 1;

     label24:
        $z1 = $z0;

        b3 = $l0 cmp 0L;

        $i5 = (int) b3;

        if $i5 <= 0 goto label26;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $i5 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i5 = $i5 + 21;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $i6 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i5 = $i5 + $i6;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i5);

        r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = $r8;

        if $z0 == 0 goto label25;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String concat(java.lang.String)>(",");

     label25:
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r8.<java.lang.String: java.lang.String concat(java.lang.String)>(" ");

        goto label26;

     label26:
        if $z1 == 0 goto label27;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $i5 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i5 = $i5 + 33;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i5);

        r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nanoseconds ");

        $r11 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label27:
        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String concat(java.lang.String)>("delay)");

        goto label28;

     label28:
        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean isDone()>();

        if $z0 == 0 goto label29;

        $r16 = new java.util.concurrent.TimeoutException;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>(" but future completed as timeout expired");

        specialinvoke $r16.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label29:
        $r16 = new java.util.concurrent.TimeoutException;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $i5 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i5 = $i5 + 5;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        $i6 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i5 = $i5 + $i6;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i5);

        r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        r12 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label30:
        $r14 = new java.lang.InterruptedException;

        specialinvoke $r14.<java.lang.InterruptedException: void <init>()>();

        throw $r14;
    }

    protected void interruptTask()
    {
        com.google.common.util.concurrent.AbstractFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        return;
    }

    public boolean isCancelled()
    {
        java.lang.Object r1;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z0 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        return $z0;
    }

    public boolean isDone()
    {
        java.lang.Object r1;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $z0 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$SetFuture;

        $z0 = 1 ^ $z0;

        $z1 = $z0 & $z1;

        return $z1;
    }

    final void maybePropagateCancellationTo(java.util.concurrent.Future)
    {
        java.util.concurrent.Future r1;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r1 := @parameter0: java.util.concurrent.Future;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $z1 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean isCancelled()>();

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean wasInterrupted()>();

        interfaceinvoke r1.<java.util.concurrent.Future: boolean cancel(boolean)>($z0);

     label3:
        return;
    }

    protected java.lang.String pendingToString()
    {
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ScheduledFuture $r1;
        long $l0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $z0 = r0 instanceof java.util.concurrent.ScheduledFuture;

        if $z0 == 0 goto label1;

        $r1 = (java.util.concurrent.ScheduledFuture) r0;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l0 = interfaceinvoke $r1.<java.util.concurrent.ScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(41);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remaining delay=[");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return null;
    }

    protected boolean set(java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r2;
        java.lang.Object r1;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r1 = <com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL>;

        goto label1;

     label1:
        $r2 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r1);

        if $z0 == 0 goto label2;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void complete(com.google.common.util.concurrent.AbstractFuture)>(r0);

        return 1;

     label2:
        return 0;
    }

    protected boolean setException(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r4;
        com.google.common.util.concurrent.AbstractFuture$Failure r2;
        java.lang.Object $r3;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.lang.Throwable) $r3;

        specialinvoke r2.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r1);

        $r4 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r4.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r2);

        if $z0 == 0 goto label1;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void complete(com.google.common.util.concurrent.AbstractFuture)>(r0);

        return 1;

     label1:
        return 0;
    }

    protected boolean setFuture(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r3;
        java.lang.Throwable r6, r8;
        com.google.common.util.concurrent.ListenableFuture r1;
        com.google.common.util.concurrent.AbstractFuture$SetFuture r4;
        com.google.common.util.concurrent.AbstractFuture$Cancellation r9;
        com.google.common.util.concurrent.DirectExecutor r5;
        com.google.common.util.concurrent.AbstractFuture$Failure r7;
        java.lang.Object r2;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        if r2 != null goto label11;

        $z0 = interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        if $z0 == 0 goto label02;

        r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>(r1);

        $r3 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r3.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r2);

        if $z0 == 0 goto label01;

        staticinvoke <com.google.common.util.concurrent.AbstractFuture: void complete(com.google.common.util.concurrent.AbstractFuture)>(r0);

        return 1;

     label01:
        return 0;

     label02:
        r4 = new com.google.common.util.concurrent.AbstractFuture$SetFuture;

        specialinvoke r4.<com.google.common.util.concurrent.AbstractFuture$SetFuture: void <init>(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.ListenableFuture)>(r0, r1);

        $r3 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r3.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r4);

        if $z0 == 0 goto label10;

     label03:
        r5 = <com.google.common.util.concurrent.DirectExecutor: com.google.common.util.concurrent.DirectExecutor INSTANCE>;

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r4, r5);

     label04:
        return 1;

     label05:
        r6 := @caughtexception;

     label06:
        r7 = new com.google.common.util.concurrent.AbstractFuture$Failure;

        specialinvoke r7.<com.google.common.util.concurrent.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r6);

     label07:
        goto label09;

     label08:
        r8 := @caughtexception;

        r7 = <com.google.common.util.concurrent.AbstractFuture$Failure: com.google.common.util.concurrent.AbstractFuture$Failure FALLBACK_INSTANCE>;

     label09:
        $r3 = <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        virtualinvoke $r3.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, r4, r7);

        return 1;

     label10:
        r2 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

     label11:
        $z0 = r2 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        if $z0 == 0 goto label12;

        r9 = (com.google.common.util.concurrent.AbstractFuture$Cancellation) r2;

        $z0 = r9.<com.google.common.util.concurrent.AbstractFuture$Cancellation: boolean wasInterrupted>;

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>($z0);

     label12:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.StringBuilder r1, $r4;
        java.lang.Class $r2;
        java.lang.String $r3;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("com.google.common.util.concurrent.");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[status=");

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean isCancelled()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLED");

        goto label5;

     label3:
        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean isDone()>();

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void addDoneString(java.lang.StringBuilder)>(r1);

        goto label5;

     label4:
        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void addPendingString(java.lang.StringBuilder)>(r1);

     label5:
        r1 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected final java.lang.Throwable tryInternalFastPathGetFailure()
    {
        java.lang.Throwable r3;
        com.google.common.util.concurrent.AbstractFuture$Failure $r2;
        java.lang.Object r1;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        z0 = r0 instanceof com.google.common.util.concurrent.AbstractFuture$Trusted;

        if z0 == 0 goto label1;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        z0 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$Failure;

        if z0 == 0 goto label1;

        $r2 = (com.google.common.util.concurrent.AbstractFuture$Failure) r1;

        r3 = $r2.<com.google.common.util.concurrent.AbstractFuture$Failure: java.lang.Throwable exception>;

        return r3;

     label1:
        return null;
    }

    protected final boolean wasInterrupted()
    {
        java.lang.Object r1;
        com.google.common.util.concurrent.AbstractFuture r0;
        boolean $z0;
        com.google.common.util.concurrent.AbstractFuture$Cancellation $r2;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture;

        r1 = r0.<com.google.common.util.concurrent.AbstractFuture: java.lang.Object value>;

        $z0 = r1 instanceof com.google.common.util.concurrent.AbstractFuture$Cancellation;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.util.concurrent.AbstractFuture$Cancellation) r1;

        $z0 = $r2.<com.google.common.util.concurrent.AbstractFuture$Cancellation: boolean wasInterrupted>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
