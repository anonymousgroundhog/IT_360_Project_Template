public final class kotlinx.coroutines.sync.MutexKt extends java.lang.Object
{
    private static final kotlinx.coroutines.internal.Symbol NO_OWNER;
    private static final kotlinx.coroutines.internal.Symbol ON_LOCK_ALREADY_LOCKED_BY_OWNER;
    private static final int TRY_LOCK_ALREADY_LOCKED_BY_OWNER;
    private static final int TRY_LOCK_FAILED;
    private static final int TRY_LOCK_SUCCESS;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r0;

        <kotlinx.coroutines.sync.MutexKt: int TRY_LOCK_FAILED> = 1;

        <kotlinx.coroutines.sync.MutexKt: int TRY_LOCK_ALREADY_LOCKED_BY_OWNER> = 2;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("NO_OWNER");

        <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol NO_OWNER> = $r0;

        $r0 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r0.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("ALREADY_LOCKED_BY_OWNER");

        <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol ON_LOCK_ALREADY_LOCKED_BY_OWNER> = $r0;

        return;
    }

    public static final kotlinx.coroutines.sync.Mutex Mutex(boolean)
    {
        kotlinx.coroutines.sync.MutexImpl $r0;
        boolean $z0;
        kotlinx.coroutines.sync.Mutex $r1;

        $z0 := @parameter0: boolean;

        $r0 = new kotlinx.coroutines.sync.MutexImpl;

        specialinvoke $r0.<kotlinx.coroutines.sync.MutexImpl: void <init>(boolean)>($z0);

        $r1 = (kotlinx.coroutines.sync.Mutex) $r0;

        return $r1;
    }

    public static kotlinx.coroutines.sync.Mutex Mutex$default(boolean, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;
        kotlinx.coroutines.sync.Mutex $r1;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $r1 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.sync.Mutex Mutex(boolean)>($z0);

        return $r1;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol NO_OWNER>;

        return r0;
    }

    public static final kotlinx.coroutines.internal.Symbol access$getON_LOCK_ALREADY_LOCKED_BY_OWNER$p()
    {
        kotlinx.coroutines.internal.Symbol r0;

        r0 = <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol ON_LOCK_ALREADY_LOCKED_BY_OWNER>;

        return r0;
    }

    public static final java.lang.Object withLock(kotlinx.coroutines.sync.Mutex, java.lang.Object, kotlin.jvm.functions.Function0, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r8;
        java.lang.IllegalStateException $r7;
        kotlin.coroutines.Continuation $r3;
        kotlin.jvm.functions.Function0 r2;
        int $i0;
        java.lang.Object r1, $r5, $r6;
        kotlinx.coroutines.sync.MutexKt$withLock$1 $r4;
        kotlinx.coroutines.sync.Mutex $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.sync.Mutex;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: kotlin.jvm.functions.Function0;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $z0 = $r3 instanceof kotlinx.coroutines.sync.MutexKt$withLock$1;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.sync.MutexKt$withLock$1) $r3;

        $i0 = $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: int label>;

        $i0 = $i0 - -2147483648;

        $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: int label> = $i0;

        goto label2;

     label1:
        $r4 = new kotlinx.coroutines.sync.MutexKt$withLock$1;

        specialinvoke $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: void <init>(kotlin.coroutines.Continuation)>($r3);

     label2:
        $r5 = $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label4;
            default: goto label3;
        };

     label3:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;

     label4:
        r1 = $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: java.lang.Object L$2>;

        r2 = (kotlin.jvm.functions.Function0) r1;

        r1 = $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: java.lang.Object L$1>;

        $r6 = $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: java.lang.Object L$0>;

        $r0 = (kotlinx.coroutines.sync.Mutex) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        goto label6;

     label5:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: java.lang.Object L$0> = $r0;

        $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: java.lang.Object L$1> = r1;

        $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: java.lang.Object L$2> = r2;

        $r4.<kotlinx.coroutines.sync.MutexKt$withLock$1: int label> = 1;

        $r5 = interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r4);

        if $r5 != $r6 goto label6;

        return $r6;

     label6:
        $r5 = interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label7:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(r1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r5;

     label8:
        r8 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>(r1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r8;

        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private static final java.lang.Object withLock$$forInline(kotlinx.coroutines.sync.Mutex, java.lang.Object, kotlin.jvm.functions.Function0, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable $r5;
        kotlin.coroutines.Continuation $r3;
        java.lang.Object $r1, $r4;
        kotlin.jvm.functions.Function0 $r2;
        kotlinx.coroutines.sync.Mutex $r0;

        $r0 := @parameter0: kotlinx.coroutines.sync.Mutex;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function0;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r3);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

     label1:
        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>($r1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>($r1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object withLock$default(kotlinx.coroutines.sync.Mutex, java.lang.Object, kotlin.jvm.functions.Function0, kotlin.coroutines.Continuation, int, java.lang.Object)
    {
        java.lang.Throwable $r5;
        kotlin.coroutines.Continuation $r2;
        int $i0;
        java.lang.Object $r3, $r4;
        kotlin.jvm.functions.Function0 $r1;
        kotlinx.coroutines.sync.Mutex $r0;

        $r0 := @parameter0: kotlinx.coroutines.sync.Mutex;

        $r4 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function0;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r4 = null;

     label1:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(0);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: java.lang.Object lock(java.lang.Object,kotlin.coroutines.Continuation)>($r4, $r2);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void mark(int)>(1);

     label2:
        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>($r4);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label4:
        $r5 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        interfaceinvoke $r0.<kotlinx.coroutines.sync.Mutex: void unlock(java.lang.Object)>($r4);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
