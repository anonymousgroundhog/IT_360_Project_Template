public final class com.google.common.collect.Collections2 extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.collect.Collections2 r0;

        r0 := @this: com.google.common.collect.Collections2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean access$000(java.util.List, java.util.List)
    {
        java.util.List $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.List;

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean isPermutation(java.util.List,java.util.List)>($r0, $r1);

        return $z0;
    }

    static boolean containsAllImpl(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0, r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    private static com.google.common.collect.ObjectCountHashMap counts(java.util.Collection)
    {
        com.google.common.collect.ObjectCountHashMap r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        int $i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 = new com.google.common.collect.ObjectCountHashMap;

        specialinvoke r1.<com.google.common.collect.ObjectCountHashMap: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke r1.<com.google.common.collect.ObjectCountHashMap: int get(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        virtualinvoke r1.<com.google.common.collect.ObjectCountHashMap: int put(java.lang.Object,int)>($r3, $i0);

        goto label1;

     label2:
        return r1;
    }

    public static java.util.Collection filter(java.util.Collection, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate r1;
        java.util.Collection r0;
        java.lang.Object $r3;
        com.google.common.collect.Collections2$FilteredCollection $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.google.common.base.Predicate;

        $z0 = r0 instanceof com.google.common.collect.Collections2$FilteredCollection;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Collections2$FilteredCollection) r0;

        $r2 = virtualinvoke $r2.<com.google.common.collect.Collections2$FilteredCollection: com.google.common.collect.Collections2$FilteredCollection createCombined(com.google.common.base.Predicate)>(r1);

        return $r2;

     label1:
        $r2 = new com.google.common.collect.Collections2$FilteredCollection;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r0 = (java.util.Collection) $r3;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (com.google.common.base.Predicate) $r3;

        specialinvoke $r2.<com.google.common.collect.Collections2$FilteredCollection: void <init>(java.util.Collection,com.google.common.base.Predicate)>(r0, r1);

        return $r2;
    }

    private static boolean isPermutation(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        com.google.common.collect.ObjectCountHashMap $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.google.common.collect.Collections2: com.google.common.collect.ObjectCountHashMap counts(java.util.Collection)>(r0);

        $r3 = staticinvoke <com.google.common.collect.Collections2: com.google.common.collect.ObjectCountHashMap counts(java.util.Collection)>(r1);

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $i0 = 0;

     label3:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label5;

        $i1 = virtualinvoke $r2.<com.google.common.collect.ObjectCountHashMap: int getValue(int)>($i0);

        $r4 = virtualinvoke $r2.<com.google.common.collect.ObjectCountHashMap: java.lang.Object getKey(int)>($i0);

        $i2 = virtualinvoke $r3.<com.google.common.collect.ObjectCountHashMap: int get(java.lang.Object)>($r4);

        if $i1 == $i2 goto label4;

        return 0;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        return 1;
    }

    static java.lang.StringBuilder newStringBuilderForCollection(int)
    {
        int $i0;
        long $l1;
        java.lang.StringBuilder $r0;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "size");

        $r0 = new java.lang.StringBuilder;

        $l1 = (long) $i0;

        $l1 = $l1 * 8L;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, 1073741824L);

        $i0 = (int) $l1;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i0);

        return $r0;
    }

    public static java.util.Collection orderedPermutations(java.lang.Iterable)
    {
        com.google.common.collect.Ordering $r1;
        java.lang.Iterable r0;
        java.util.Collection $r2;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection orderedPermutations(java.lang.Iterable,java.util.Comparator)>(r0, $r1);

        return $r2;
    }

    public static java.util.Collection orderedPermutations(java.lang.Iterable, java.util.Comparator)
    {
        java.util.Comparator r1;
        com.google.common.collect.Collections2$OrderedPermutationCollection $r2;
        java.lang.Iterable r0;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.util.Comparator;

        $r2 = new com.google.common.collect.Collections2$OrderedPermutationCollection;

        specialinvoke $r2.<com.google.common.collect.Collections2$OrderedPermutationCollection: void <init>(java.lang.Iterable,java.util.Comparator)>(r0, r1);

        return $r2;
    }

    public static java.util.Collection permutations(java.util.Collection)
    {
        com.google.common.collect.ImmutableList $r2;
        com.google.common.collect.Collections2$PermutationCollection $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = new com.google.common.collect.Collections2$PermutationCollection;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r0);

        specialinvoke $r1.<com.google.common.collect.Collections2$PermutationCollection: void <init>(com.google.common.collect.ImmutableList)>($r2);

        return $r1;
    }

    static boolean safeContains(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object $r1;
        java.lang.ClassCastException r3;
        java.lang.NullPointerException r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

     label2:
        return $z0;

     label3:
        r2 := @caughtexception;

        goto label5;

     label4:
        r3 := @caughtexception;

     label5:
        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    static boolean safeRemove(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object $r1;
        java.lang.ClassCastException r3;
        java.lang.NullPointerException r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean remove(java.lang.Object)>($r1);

     label2:
        return $z0;

     label3:
        r2 := @caughtexception;

        goto label5;

     label4:
        r3 := @caughtexception;

     label5:
        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    static java.lang.String toStringImpl(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean z0, $z1;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = staticinvoke <com.google.common.collect.Collections2: java.lang.StringBuilder newStringBuilderForCollection(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        z0 = 1;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if z0 != 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        z0 = 0;

        if $r3 != r0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Collection)");

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        goto label1;

     label4:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.util.Collection transform(java.util.Collection, com.google.common.base.Function)
    {
        com.google.common.collect.Collections2$TransformedCollection $r2;
        com.google.common.base.Function r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.google.common.base.Function;

        $r2 = new com.google.common.collect.Collections2$TransformedCollection;

        specialinvoke $r2.<com.google.common.collect.Collections2$TransformedCollection: void <init>(java.util.Collection,com.google.common.base.Function)>(r0, r1);

        return $r2;
    }
}
