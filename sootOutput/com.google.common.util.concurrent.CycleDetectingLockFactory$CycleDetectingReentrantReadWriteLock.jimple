final class com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock extends java.util.concurrent.locks.ReentrantReadWriteLock implements com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock
{
    private final com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode;
    private final com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock readLock;
    private final com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock writeLock;

    private void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, boolean)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock $r5;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>($z0);

        $r4 = new com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock;

        specialinvoke $r4.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock)>($r1, r0);

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock readLock> = $r4;

        $r5 = new com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;

        specialinvoke $r5.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock)>($r1, r0);

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock writeLock> = $r5;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r2 = (com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) $r3;

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode> = $r2;

        return;
    }

    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, boolean, com.google.common.util.concurrent.CycleDetectingLockFactory$1)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$1 $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: com.google.common.util.concurrent.CycleDetectingLockFactory$1;

        specialinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean)>($r1, $r2, $z0);

        return;
    }

    public com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode>;

        return r1;
    }

    public boolean isAcquiredByCurrentThread()
    {
        int $i0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()>();

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: int getReadHoldCount()>();

        if $i0 <= 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public volatile java.util.concurrent.locks.Lock readLock()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        return $r1;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock readLock>;

        return r1;
    }

    public volatile java.util.concurrent.locks.Lock writeLock()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        return $r1;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock writeLock>;

        return r1;
    }
}
