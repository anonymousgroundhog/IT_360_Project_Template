final class com.google.common.collect.CollectPreconditions extends java.lang.Object
{

    void <init>()
    {
        com.google.common.collect.CollectPreconditions r0;

        r0 := @this: com.google.common.collect.CollectPreconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void checkEntryNotNull(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0, $r1;
        java.lang.StringBuilder $r5;
        java.lang.String $r3, $r4;
        java.lang.NullPointerException $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == null goto label2;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 26;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value in entry: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 24;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null key in entry: null=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    static int checkNonnegative(int, java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r2;
        java.lang.IllegalArgumentException $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + 40;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    static long checkNonnegative(long, java.lang.String)
    {
        long $l0;
        java.lang.IllegalArgumentException $r4;
        byte $b1;
        int $i2;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r0, $r1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.lang.String;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        return $l0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i2 + 49;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;
    }

    static void checkPositive(int, java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r2;
        java.lang.IllegalArgumentException $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        if $i0 <= 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + 38;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be positive but was: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    static void checkRemove(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "no calls to next() since the last call to remove()");

        return;
    }
}
