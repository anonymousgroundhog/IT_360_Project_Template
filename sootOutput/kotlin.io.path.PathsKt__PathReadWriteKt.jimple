class kotlin.io.path.PathsKt__PathReadWriteKt extends java.lang.Object
{

    public void <init>()
    {
        kotlin.io.path.PathsKt__PathReadWriteKt r0;

        r0 := @this: kotlin.io.path.PathsKt__PathReadWriteKt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final void appendBytes(java.nio.file.Path, byte[]) throws java.io.IOException
    {
        byte[] $r1;
        java.nio.file.OpenOption[] $r3;
        java.nio.file.StandardOpenOption $r2;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r3 = newarray (java.nio.file.OpenOption)[1];

        $r2 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption APPEND>;

        $r3[0] = $r2;

        staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>($r0, $r1, $r3);

        return;
    }

    private static final java.nio.file.Path appendLines(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.charset.Charset $r2;
        java.nio.file.OpenOption[] $r4;
        java.nio.file.StandardOpenOption $r3;
        java.nio.file.Path $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        $r4 = newarray (java.nio.file.OpenOption)[1];

        $r3 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption APPEND>;

        $r4[0] = $r3;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r1, $r2, $r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines, chars\u2026tandardOpenOption.APPEND)");

        return $r0;
    }

    private static final java.nio.file.Path appendLines(java.nio.file.Path, kotlin.sequences.Sequence, java.nio.charset.Charset) throws java.io.IOException
    {
        java.nio.charset.Charset $r2;
        kotlin.sequences.Sequence $r1;
        java.nio.file.OpenOption[] $r5;
        java.nio.file.StandardOpenOption $r3;
        java.nio.file.Path $r0;
        java.lang.Iterable $r4;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        $r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Iterable asIterable(kotlin.sequences.Sequence)>($r1);

        $r5 = newarray (java.nio.file.OpenOption)[1];

        $r3 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption APPEND>;

        $r5[0] = $r3;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r4, $r2, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines.asIter\u2026tandardOpenOption.APPEND)");

        return $r0;
    }

    static java.nio.file.Path appendLines$default(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, int, java.lang.Object) throws java.io.IOException
    {
        java.nio.charset.Charset $r3;
        java.nio.file.OpenOption[] $r5;
        java.nio.file.StandardOpenOption $r2;
        int $i0;
        java.lang.Object $r4;
        java.nio.file.Path $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.Iterable;

        $r3 := @parameter2: java.nio.charset.Charset;

        $i0 := @parameter3: int;

        $r4 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        $r5 = newarray (java.nio.file.OpenOption)[1];

        $r2 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption APPEND>;

        $r5[0] = $r2;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r1, $r3, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines, chars\u2026tandardOpenOption.APPEND)");

        return $r0;
    }

    static java.nio.file.Path appendLines$default(java.nio.file.Path, kotlin.sequences.Sequence, java.nio.charset.Charset, int, java.lang.Object) throws java.io.IOException
    {
        kotlin.sequences.Sequence $r1;
        java.nio.file.StandardOpenOption $r2;
        java.lang.Iterable $r5;
        java.nio.charset.Charset $r3;
        java.nio.file.OpenOption[] $r6;
        int $i0;
        java.lang.Object $r4;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        $r3 := @parameter2: java.nio.charset.Charset;

        $i0 := @parameter3: int;

        $r4 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        $r5 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Iterable asIterable(kotlin.sequences.Sequence)>($r1);

        $r6 = newarray (java.nio.file.OpenOption)[1];

        $r2 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption APPEND>;

        $r6[0] = $r2;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r5, $r3, $r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines.asIter\u2026tandardOpenOption.APPEND)");

        return $r0;
    }

    public static final void appendText(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.OutputStream $r3;
        java.lang.Throwable r8, $r9;
        java.lang.CharSequence r1;
        java.nio.file.StandardOpenOption $r5;
        java.nio.charset.Charset r2;
        java.nio.file.OpenOption[] r4;
        java.io.Closeable $r7;
        java.io.OutputStreamWriter $r6;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "text");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "charset");

        r4 = newarray (java.nio.file.OpenOption)[1];

        $r5 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption APPEND>;

        r4[0] = $r5;

        $r3 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "newOutputStream(this, StandardOpenOption.APPEND)");

        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r3, r2);

        $r7 = (java.io.Closeable) $r6;

     label1:
        $r6 = (java.io.OutputStreamWriter) $r7;

        virtualinvoke $r6.<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>(r1);

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r7, null);

        return;

     label3:
        r8 := @caughtexception;

     label4:
        throw r8;

     label5:
        $r9 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r7, r8);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static void appendText$default(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, int, java.lang.Object) throws java.io.IOException
    {
        java.lang.CharSequence $r1;
        java.nio.charset.Charset $r3;
        int $i0;
        java.lang.Object $r2;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.CharSequence;

        $r3 := @parameter2: java.nio.charset.Charset;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.path.PathsKt: void appendText(java.nio.file.Path,java.lang.CharSequence,java.nio.charset.Charset)>($r0, $r1, $r3);

        return;
    }

    private static final transient java.io.BufferedReader bufferedReader(java.nio.file.Path, java.nio.charset.Charset, int, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r5;
        java.io.Reader $r7;
        java.io.InputStreamReader $r4;
        java.nio.charset.Charset $r1;
        java.nio.file.OpenOption[] $r2;
        int $i0, $i1;
        java.io.BufferedReader $r3;
        java.nio.file.Path $r0;
        java.io.InputStream $r6;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        $i1 = lengthof $r2;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i1);

        $r2 = (java.nio.file.OpenOption[]) $r5;

        $r6 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r2);

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r6, $r1);

        $r7 = (java.io.Reader) $r4;

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r7, $i0);

        return $r3;
    }

    static java.io.BufferedReader bufferedReader$default(java.nio.file.Path, java.nio.charset.Charset, int, java.nio.file.OpenOption[], int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r6;
        java.io.Reader $r8;
        java.io.InputStreamReader $r5;
        java.nio.charset.Charset $r2;
        java.nio.file.OpenOption[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.io.BufferedReader $r4;
        java.nio.file.Path $r0;
        java.io.InputStream $r7;

        $r0 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.nio.file.OpenOption[];

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $r4 = new java.io.BufferedReader;

        $r5 = new java.io.InputStreamReader;

        $i1 = lengthof $r1;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1);

        $r1 = (java.nio.file.OpenOption[]) $r6;

        $r7 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r1);

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r7, $r2);

        $r8 = (java.io.Reader) $r5;

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r8, $i0);

        return $r4;
    }

    private static final transient java.io.BufferedWriter bufferedWriter(java.nio.file.Path, java.nio.charset.Charset, int, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.io.OutputStream $r6;
        java.lang.Object[] $r5;
        java.io.BufferedWriter $r3;
        java.nio.charset.Charset $r1;
        java.nio.file.OpenOption[] $r2;
        int $i0, $i1;
        java.io.Writer $r7;
        java.io.OutputStreamWriter $r4;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $r3 = new java.io.BufferedWriter;

        $r4 = new java.io.OutputStreamWriter;

        $i1 = lengthof $r2;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i1);

        $r2 = (java.nio.file.OpenOption[]) $r5;

        $r6 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r2);

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r6, $r1);

        $r7 = (java.io.Writer) $r4;

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r7, $i0);

        return $r3;
    }

    static java.io.BufferedWriter bufferedWriter$default(java.nio.file.Path, java.nio.charset.Charset, int, java.nio.file.OpenOption[], int, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream $r7;
        java.lang.Object[] $r6;
        java.io.BufferedWriter $r4;
        java.nio.charset.Charset $r2;
        java.nio.file.OpenOption[] $r1;
        int $i0, $i1, $i2;
        java.io.Writer $r8;
        java.io.OutputStreamWriter $r5;
        java.lang.Object $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.nio.file.OpenOption[];

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $r4 = new java.io.BufferedWriter;

        $r5 = new java.io.OutputStreamWriter;

        $i1 = lengthof $r1;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1);

        $r1 = (java.nio.file.OpenOption[]) $r6;

        $r7 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r1);

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r7, $r2);

        $r8 = (java.io.Writer) $r5;

        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r8, $i0);

        return $r4;
    }

    private static final void forEachLine(java.nio.file.Path, java.nio.charset.Charset, kotlin.jvm.functions.Function1) throws java.io.IOException
    {
        java.lang.Throwable r10, $r11;
        java.util.Iterator $r7;
        kotlin.sequences.Sequence $r6;
        kotlin.jvm.functions.Function1 r2;
        java.io.Reader $r4;
        kotlin.Unit r9;
        java.nio.charset.Charset r1;
        java.io.Closeable $r5;
        java.lang.Object $r8;
        java.io.BufferedReader $r3;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "action");

        $r3 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)>($r0, r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "newBufferedReader(this, charset)");

        $r4 = (java.io.Reader) $r3;

        $r3 = (java.io.BufferedReader) $r4;

        $r5 = (java.io.Closeable) $r3;

     label01:
        $r3 = (java.io.BufferedReader) $r5;

        $r6 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r3);

        $r7 = interfaceinvoke $r6.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label06;

     label04:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r8);

     label05:
        goto label02;

     label06:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return;

     label08:
        r10 := @caughtexception;

     label09:
        throw r10;

     label10:
        $r11 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, r10);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r11;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    static void forEachLine$default(java.nio.file.Path, java.nio.charset.Charset, kotlin.jvm.functions.Function1, int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Throwable r10, $r11;
        java.util.Iterator $r8;
        kotlin.sequences.Sequence $r7;
        kotlin.jvm.functions.Function1 r1;
        java.io.Reader $r5;
        kotlin.Unit r9;
        java.nio.charset.Charset r2;
        java.io.Closeable $r6;
        int $i0;
        java.lang.Object $r3;
        java.io.BufferedReader $r4;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.nio.charset.Charset;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label01;

        r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label01:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "action");

        $r4 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)>($r0, r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "newBufferedReader(this, charset)");

        $r5 = (java.io.Reader) $r4;

        $r4 = (java.io.BufferedReader) $r5;

        $r6 = (java.io.Closeable) $r4;

     label02:
        $r4 = (java.io.BufferedReader) $r6;

        $r7 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r4);

        $r8 = interfaceinvoke $r7.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

     label04:
        if $z0 == 0 goto label07;

     label05:
        $r3 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

     label06:
        goto label03;

     label07:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return;

     label09:
        r10 := @caughtexception;

     label10:
        throw r10;

     label11:
        $r11 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, r10);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r11;

        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    private static final transient java.io.InputStream inputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        java.nio.file.OpenOption[] $r1;
        int $i0;
        java.nio.file.Path $r0;
        java.io.InputStream $r3;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.OpenOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "newInputStream(this, *options)");

        return $r3;
    }

    private static final transient java.io.OutputStream outputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.io.OutputStream $r3;
        java.lang.Object[] $r2;
        java.nio.file.OpenOption[] $r1;
        int $i0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $i0 = lengthof $r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.OpenOption[]) $r2;

        $r3 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "newOutputStream(this, *options)");

        return $r3;
    }

    private static final byte[] readBytes(java.nio.file.Path) throws java.io.IOException
    {
        byte[] $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>($r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "readAllBytes(this)");

        return $r1;
    }

    private static final java.util.List readLines(java.nio.file.Path, java.nio.charset.Charset) throws java.io.IOException
    {
        java.util.List $r2;
        java.nio.charset.Charset $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r2 = staticinvoke <java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path,java.nio.charset.Charset)>($r0, $r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "readAllLines(this, charset)");

        return $r2;
    }

    static java.util.List readLines$default(java.nio.file.Path, java.nio.charset.Charset, int, java.lang.Object) throws java.io.IOException
    {
        java.util.List $r1;
        java.nio.charset.Charset $r2;
        int $i0;
        java.lang.Object $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        $r1 = staticinvoke <java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path,java.nio.charset.Charset)>($r0, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "readAllLines(this, charset)");

        return $r1;
    }

    public static final java.lang.String readText(java.nio.file.Path, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.Throwable r9, $r10;
        java.lang.Object[] $r4;
        java.io.Reader $r7;
        java.io.InputStreamReader $r3;
        java.nio.charset.Charset r1;
        java.nio.file.OpenOption[] $r2;
        java.io.Closeable $r6;
        java.lang.String $r8;
        java.nio.file.Path $r0;
        java.io.InputStream $r5;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "charset");

        $r2 = newarray (java.nio.file.OpenOption)[0];

        $r3 = new java.io.InputStreamReader;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, 0);

        $r2 = (java.nio.file.OpenOption[]) $r4;

        $r5 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r2);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, r1);

        $r6 = (java.io.Closeable) $r3;

     label1:
        $r3 = (java.io.InputStreamReader) $r6;

        $r7 = (java.io.Reader) $r3;

        $r8 = staticinvoke <kotlin.io.TextStreamsKt: java.lang.String readText(java.io.Reader)>($r7);

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, null);

        return $r8;

     label3:
        r9 := @caughtexception;

     label4:
        throw r9;

     label5:
        $r10 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, r9);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static java.lang.String readText$default(java.nio.file.Path, java.nio.charset.Charset, int, java.lang.Object) throws java.io.IOException
    {
        java.nio.charset.Charset $r3;
        int $i0;
        java.lang.Object $r0;
        java.lang.String $r1;
        java.nio.file.Path $r2;

        $r2 := @parameter0: java.nio.file.Path;

        $r3 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $r1 = staticinvoke <kotlin.io.path.PathsKt: java.lang.String readText(java.nio.file.Path,java.nio.charset.Charset)>($r2, $r3);

        return $r1;
    }

    private static final transient java.io.InputStreamReader reader(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r4;
        java.nio.charset.Charset $r1;
        java.nio.file.OpenOption[] $r2;
        int $i0;
        java.nio.file.Path $r0;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r5;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $r3 = new java.io.InputStreamReader;

        $i0 = lengthof $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.OpenOption[]) $r4;

        $r5 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r2);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, $r1);

        return $r3;
    }

    static java.io.InputStreamReader reader$default(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[], int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r5;
        java.io.InputStreamReader $r4;
        java.nio.charset.Charset $r2;
        java.nio.file.OpenOption[] $r1;
        int $i0;
        java.lang.Object $r3;
        java.nio.file.Path $r0;
        java.io.InputStream $r6;

        $r0 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.charset.Charset;

        $r1 := @parameter2: java.nio.file.OpenOption[];

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $r4 = new java.io.InputStreamReader;

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.OpenOption[]) $r5;

        $r6 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r1);

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r6, $r2);

        return $r4;
    }

    private static final java.lang.Object useLines(java.nio.file.Path, java.nio.charset.Charset, kotlin.jvm.functions.Function1) throws java.io.IOException
    {
        java.lang.Throwable r7, $r8;
        kotlin.sequences.Sequence $r5;
        kotlin.jvm.functions.Function1 r2;
        java.nio.charset.Charset r1;
        java.io.Closeable $r4;
        java.lang.Object $r6;
        java.io.BufferedReader $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        $r3 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)>($r0, r1);

        $r4 = (java.io.Closeable) $r3;

     label1:
        $r3 = (java.io.BufferedReader) $r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "it");

        $r5 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r3);

        $r6 = interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r6;

     label3:
        r7 := @caughtexception;

     label4:
        throw r7;

     label5:
        $r8 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, r7);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    static java.lang.Object useLines$default(java.nio.file.Path, java.nio.charset.Charset, kotlin.jvm.functions.Function1, int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Throwable r7, $r8;
        kotlin.sequences.Sequence $r6;
        kotlin.jvm.functions.Function1 r1;
        java.nio.charset.Charset r2;
        java.io.Closeable $r5;
        int $i0;
        java.lang.Object $r3;
        java.io.BufferedReader $r4;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.nio.charset.Charset;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r4 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)>($r0, r2);

        $r5 = (java.io.Closeable) $r4;

     label2:
        $r4 = (java.io.BufferedReader) $r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "it");

        $r6 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r4);

        $r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

     label3:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label4:
        r7 := @caughtexception;

     label5:
        throw r7;

     label6:
        $r8 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r5, r7);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    private static final transient void writeBytes(java.nio.file.Path, byte[], java.nio.file.OpenOption[]) throws java.io.IOException
    {
        byte[] $r1;
        java.lang.Object[] $r3;
        java.nio.file.OpenOption[] $r2;
        int $i0;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.OpenOption[]) $r3;

        staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>($r0, $r1, $r2);

        return;
    }

    private static final transient java.nio.file.Path writeLines(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r4;
        java.nio.charset.Charset $r2;
        java.nio.file.OpenOption[] $r3;
        int $i0;
        java.nio.file.Path $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: java.nio.charset.Charset;

        $r3 := @parameter3: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "options");

        $i0 = lengthof $r3;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r3 = (java.nio.file.OpenOption[]) $r4;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r1, $r2, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines, charset, *options)");

        return $r0;
    }

    private static final transient java.nio.file.Path writeLines(java.nio.file.Path, kotlin.sequences.Sequence, java.nio.charset.Charset, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.lang.Object[] $r5;
        java.nio.charset.Charset $r2;
        kotlin.sequences.Sequence $r1;
        java.nio.file.OpenOption[] $r3;
        int $i0;
        java.nio.file.Path $r0;
        java.lang.Iterable $r4;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        $r2 := @parameter2: java.nio.charset.Charset;

        $r3 := @parameter3: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "options");

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Iterable asIterable(kotlin.sequences.Sequence)>($r1);

        $i0 = lengthof $r3;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r3 = (java.nio.file.OpenOption[]) $r5;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r4, $r2, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines.asIterable(), charset, *options)");

        return $r0;
    }

    static java.nio.file.Path writeLines$default(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption[], int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r5;
        java.nio.charset.Charset $r3;
        java.nio.file.OpenOption[] $r2;
        int $i0;
        java.lang.Object $r4;
        java.nio.file.Path $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.Iterable;

        $r3 := @parameter2: java.nio.charset.Charset;

        $r2 := @parameter3: java.nio.file.OpenOption[];

        $i0 := @parameter4: int;

        $r4 := @parameter5: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $i0 = lengthof $r2;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.OpenOption[]) $r5;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r1, $r3, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines, charset, *options)");

        return $r0;
    }

    static java.nio.file.Path writeLines$default(java.nio.file.Path, kotlin.sequences.Sequence, java.nio.charset.Charset, java.nio.file.OpenOption[], int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object[] $r6;
        kotlin.sequences.Sequence $r1;
        java.lang.Iterable $r5;
        java.nio.charset.Charset $r3;
        java.nio.file.OpenOption[] $r2;
        int $i0;
        java.lang.Object $r4;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: kotlin.sequences.Sequence;

        $r3 := @parameter2: java.nio.charset.Charset;

        $r2 := @parameter3: java.nio.file.OpenOption[];

        $i0 := @parameter4: int;

        $r4 := @parameter5: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lines");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $r5 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Iterable asIterable(kotlin.sequences.Sequence)>($r1);

        $i0 = lengthof $r2;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.OpenOption[]) $r6;

        $r0 = staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r5, $r3, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "write(this, lines.asIterable(), charset, *options)");

        return $r0;
    }

    public static final transient void writeText(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.io.OutputStream $r5;
        java.lang.Throwable r8, $r9;
        java.lang.Object[] $r4;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;
        java.nio.file.OpenOption[] r3;
        java.io.Closeable $r7;
        int i0;
        java.io.OutputStreamWriter $r6;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.nio.charset.Charset;

        r3 := @parameter3: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "text");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "options");

        i0 = lengthof r3;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, i0);

        r3 = (java.nio.file.OpenOption[]) $r4;

        $r5 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "newOutputStream(this, *options)");

        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r5, r2);

        $r7 = (java.io.Closeable) $r6;

     label1:
        $r6 = (java.io.OutputStreamWriter) $r7;

        virtualinvoke $r6.<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>(r1);

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r7, null);

        return;

     label3:
        r8 := @caughtexception;

     label4:
        throw r8;

     label5:
        $r9 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r7, r8);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static void writeText$default(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, java.nio.file.OpenOption[], int, java.lang.Object) throws java.io.IOException
    {
        java.lang.CharSequence $r1;
        java.nio.charset.Charset $r4;
        java.nio.file.OpenOption[] $r2;
        int $i0;
        java.lang.Object $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.lang.CharSequence;

        $r4 := @parameter2: java.nio.charset.Charset;

        $r2 := @parameter3: java.nio.file.OpenOption[];

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r4 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.path.PathsKt: void writeText(java.nio.file.Path,java.lang.CharSequence,java.nio.charset.Charset,java.nio.file.OpenOption[])>($r0, $r1, $r4, $r2);

        return;
    }

    private static final transient java.io.OutputStreamWriter writer(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[]) throws java.io.IOException
    {
        java.io.OutputStream $r5;
        java.lang.Object[] $r4;
        java.nio.charset.Charset $r1;
        java.nio.file.OpenOption[] $r2;
        int $i0;
        java.io.OutputStreamWriter $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.nio.file.OpenOption[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "options");

        $r3 = new java.io.OutputStreamWriter;

        $i0 = lengthof $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.nio.file.OpenOption[]) $r4;

        $r5 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r2);

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r5, $r1);

        return $r3;
    }

    static java.io.OutputStreamWriter writer$default(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[], int, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream $r6;
        java.lang.Object[] $r5;
        java.nio.charset.Charset $r2;
        java.nio.file.OpenOption[] $r1;
        int $i0;
        java.io.OutputStreamWriter $r4;
        java.lang.Object $r3;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.charset.Charset;

        $r1 := @parameter2: java.nio.file.OpenOption[];

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "options");

        $r4 = new java.io.OutputStreamWriter;

        $i0 = lengthof $r1;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.nio.file.OpenOption[]) $r5;

        $r6 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r1);

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r6, $r2);

        return $r4;
    }
}
