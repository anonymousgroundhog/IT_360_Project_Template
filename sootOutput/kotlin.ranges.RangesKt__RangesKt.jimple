class kotlin.ranges.RangesKt__RangesKt extends java.lang.Object
{

    public void <init>()
    {
        kotlin.ranges.RangesKt__RangesKt r0;

        r0 := @this: kotlin.ranges.RangesKt__RangesKt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final void checkStepIsPositive(boolean, java.lang.Number)
    {
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Number $r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.Number;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "step");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Step must be positive, was: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    private static final boolean contains(kotlin.ranges.ClosedRange, java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        kotlin.ranges.ClosedRange $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $r1 == null goto label1;

        $r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static final boolean contains(kotlin.ranges.OpenEndRange, java.lang.Object)
    {
        kotlin.ranges.OpenEndRange $r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.OpenEndRange;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $r1 == null goto label1;

        $r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.OpenEndRange: boolean contains(java.lang.Comparable)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final kotlin.ranges.ClosedFloatingPointRange rangeTo(double, double)
    {
        kotlin.ranges.ClosedFloatingPointRange $r1;
        double $d0, $d1;
        kotlin.ranges.ClosedDoubleRange $r0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r0 = new kotlin.ranges.ClosedDoubleRange;

        specialinvoke $r0.<kotlin.ranges.ClosedDoubleRange: void <init>(double,double)>($d0, $d1);

        $r1 = (kotlin.ranges.ClosedFloatingPointRange) $r0;

        return $r1;
    }

    public static final kotlin.ranges.ClosedFloatingPointRange rangeTo(float, float)
    {
        kotlin.ranges.ClosedFloatRange $r0;
        float $f0, $f1;
        kotlin.ranges.ClosedFloatingPointRange $r1;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $r0 = new kotlin.ranges.ClosedFloatRange;

        specialinvoke $r0.<kotlin.ranges.ClosedFloatRange: void <init>(float,float)>($f0, $f1);

        $r1 = (kotlin.ranges.ClosedFloatingPointRange) $r0;

        return $r1;
    }

    public static final kotlin.ranges.ClosedRange rangeTo(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1;
        kotlin.ranges.ComparableRange $r2;
        kotlin.ranges.ClosedRange $r3;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "that");

        $r2 = new kotlin.ranges.ComparableRange;

        specialinvoke $r2.<kotlin.ranges.ComparableRange: void <init>(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        $r3 = (kotlin.ranges.ClosedRange) $r2;

        return $r3;
    }

    public static final kotlin.ranges.OpenEndRange rangeUntil(double, double)
    {
        kotlin.ranges.OpenEndRange $r1;
        kotlin.ranges.OpenEndDoubleRange $r0;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r0 = new kotlin.ranges.OpenEndDoubleRange;

        specialinvoke $r0.<kotlin.ranges.OpenEndDoubleRange: void <init>(double,double)>($d0, $d1);

        $r1 = (kotlin.ranges.OpenEndRange) $r0;

        return $r1;
    }

    public static final kotlin.ranges.OpenEndRange rangeUntil(float, float)
    {
        kotlin.ranges.OpenEndRange $r1;
        kotlin.ranges.OpenEndFloatRange $r0;
        float $f0, $f1;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $r0 = new kotlin.ranges.OpenEndFloatRange;

        specialinvoke $r0.<kotlin.ranges.OpenEndFloatRange: void <init>(float,float)>($f0, $f1);

        $r1 = (kotlin.ranges.OpenEndRange) $r0;

        return $r1;
    }

    public static final kotlin.ranges.OpenEndRange rangeUntil(java.lang.Comparable, java.lang.Comparable)
    {
        kotlin.ranges.OpenEndRange $r3;
        java.lang.Comparable $r0, $r1;
        kotlin.ranges.ComparableOpenEndRange $r2;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "that");

        $r2 = new kotlin.ranges.ComparableOpenEndRange;

        specialinvoke $r2.<kotlin.ranges.ComparableOpenEndRange: void <init>(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        $r3 = (kotlin.ranges.OpenEndRange) $r2;

        return $r3;
    }
}
