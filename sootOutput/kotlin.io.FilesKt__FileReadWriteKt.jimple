class kotlin.io.FilesKt__FileReadWriteKt extends kotlin.io.FilesKt__FilePathComponentsKt
{

    public void <init>()
    {
        kotlin.io.FilesKt__FileReadWriteKt r0;

        r0 := @this: kotlin.io.FilesKt__FileReadWriteKt;

        specialinvoke r0.<kotlin.io.FilesKt__FilePathComponentsKt: void <init>()>();

        return;
    }

    public static final void appendBytes(java.io.File, byte[])
    {
        java.lang.Throwable r5, $r6;
        byte[] r1;
        kotlin.Unit r4;
        java.io.Closeable $r3;
        java.io.FileOutputStream $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "array");

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r0, 1);

        $r3 = (java.io.Closeable) $r2;

     label1:
        $r2 = (java.io.FileOutputStream) $r3;

        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[])>(r1);

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r3, null);

        return;

     label3:
        r5 := @caughtexception;

     label4:
        throw r5;

     label5:
        $r6 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r3, r5);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static final void appendText(java.io.File, java.lang.String, java.nio.charset.Charset)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "text");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this as java.lang.String).getBytes(charset)");

        staticinvoke <kotlin.io.FilesKt: void appendBytes(java.io.File,byte[])>($r0, $r3);

        return;
    }

    public static void appendText$default(java.io.File, java.lang.String, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.nio.charset.Charset $r3;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.nio.charset.Charset;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.FilesKt: void appendText(java.io.File,java.lang.String,java.nio.charset.Charset)>($r0, $r1, $r3);

        return;
    }

    private static final java.io.BufferedReader bufferedReader(java.io.File, java.nio.charset.Charset, int)
    {
        java.io.FileInputStream $r3;
        java.io.Reader $r5;
        java.io.InputStreamReader $r2;
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0;
        java.io.BufferedReader $r6;
        java.io.InputStream $r4;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r2 = new java.io.InputStreamReader;

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r4 = (java.io.InputStream) $r3;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r4, $r1);

        $r5 = (java.io.Reader) $r2;

        $z0 = $r5 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        $r6 = (java.io.BufferedReader) $r5;

        return $r6;

     label1:
        $r6 = new java.io.BufferedReader;

        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r5, $i0);

        return $r6;
    }

    static java.io.BufferedReader bufferedReader$default(java.io.File, java.nio.charset.Charset, int, int, java.lang.Object)
    {
        java.io.FileInputStream $r4;
        java.io.Reader $r6;
        java.io.InputStreamReader $r3;
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.io.BufferedReader $r7;
        java.io.InputStream $r5;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r5 = (java.io.InputStream) $r4;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, $r1);

        $r6 = (java.io.Reader) $r3;

        $z0 = $r6 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label3;

        $r7 = (java.io.BufferedReader) $r6;

        return $r7;

     label3:
        $r7 = new java.io.BufferedReader;

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r6, $i0);

        return $r7;
    }

    private static final java.io.BufferedWriter bufferedWriter(java.io.File, java.nio.charset.Charset, int)
    {
        java.io.OutputStream $r4;
        java.io.BufferedWriter $r6;
        java.io.FileOutputStream $r3;
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0;
        java.io.Writer $r5;
        java.io.OutputStreamWriter $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r2 = new java.io.OutputStreamWriter;

        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r4 = (java.io.OutputStream) $r3;

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r1);

        $r5 = (java.io.Writer) $r2;

        $z0 = $r5 instanceof java.io.BufferedWriter;

        if $z0 == 0 goto label1;

        $r6 = (java.io.BufferedWriter) $r5;

        return $r6;

     label1:
        $r6 = new java.io.BufferedWriter;

        specialinvoke $r6.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r5, $i0);

        return $r6;
    }

    static java.io.BufferedWriter bufferedWriter$default(java.io.File, java.nio.charset.Charset, int, int, java.lang.Object)
    {
        java.io.OutputStream $r5;
        java.io.BufferedWriter $r7;
        java.io.FileOutputStream $r4;
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0, $i1, $i2;
        java.io.Writer $r6;
        java.io.OutputStreamWriter $r3;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $i1 = $i1 & 2;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r5 = (java.io.OutputStream) $r4;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r5, $r1);

        $r6 = (java.io.Writer) $r3;

        $z0 = $r6 instanceof java.io.BufferedWriter;

        if $z0 == 0 goto label3;

        $r7 = (java.io.BufferedWriter) $r6;

        return $r7;

     label3:
        $r7 = new java.io.BufferedWriter;

        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r6, $i0);

        return $r7;
    }

    public static final void forEachBlock(java.io.File, int, kotlin.jvm.functions.Function2)
    {
        java.lang.Throwable r7, $r8;
        byte[] r2;
        kotlin.jvm.functions.Function2 r1;
        java.io.FileInputStream $r3;
        java.lang.Integer $r6;
        java.io.File $r0;
        kotlin.Unit r5;
        java.io.Closeable $r4;
        int i0;

        $r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "action");

        i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>(i0, 512);

        r2 = newarray (byte)[i0];

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r4 = (java.io.Closeable) $r3;

     label01:
        $r3 = (java.io.FileInputStream) $r4;

     label02:
        i0 = virtualinvoke $r3.<java.io.FileInputStream: int read(byte[])>(r2);

     label03:
        if i0 > 0 goto label06;

     label04:
        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label05:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, null);

        return;

     label06:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke r1.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r2, $r6);

     label07:
        goto label02;

     label08:
        r7 := @caughtexception;

     label09:
        throw r7;

     label10:
        $r8 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r4, r7);

        throw $r8;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public static final void forEachBlock(java.io.File, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function2 $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "action");

        staticinvoke <kotlin.io.FilesKt: void forEachBlock(java.io.File,int,kotlin.jvm.functions.Function2)>($r0, 4096, $r1);

        return;
    }

    public static final void forEachLine(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r2;
        java.io.FileInputStream $r5;
        java.io.Reader $r7;
        java.io.InputStreamReader $r4;
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.io.BufferedReader $r3;
        java.io.InputStream $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "action");

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r6 = (java.io.InputStream) $r5;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r6, $r1);

        $r7 = (java.io.Reader) $r4;

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7);

        $r7 = (java.io.Reader) $r3;

        staticinvoke <kotlin.io.TextStreamsKt: void forEachLine(java.io.Reader,kotlin.jvm.functions.Function1)>($r7, $r2);

        return;
    }

    public static void forEachLine$default(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.nio.charset.Charset $r3;
        int $i0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r3 := @parameter1: java.nio.charset.Charset;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.FilesKt: void forEachLine(java.io.File,java.nio.charset.Charset,kotlin.jvm.functions.Function1)>($r0, $r3, $r1);

        return;
    }

    private static final java.io.FileInputStream inputStream(java.io.File)
    {
        java.io.FileInputStream $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        return $r1;
    }

    private static final java.io.FileOutputStream outputStream(java.io.File)
    {
        java.io.FileOutputStream $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        return $r1;
    }

    private static final java.io.PrintWriter printWriter(java.io.File, java.nio.charset.Charset)
    {
        java.io.PrintWriter $r2;
        java.io.OutputStream $r5;
        java.io.BufferedWriter $r7;
        java.io.FileOutputStream $r4;
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.io.Writer $r6;
        java.io.OutputStreamWriter $r3;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r2 = new java.io.PrintWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r5 = (java.io.OutputStream) $r4;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r5, $r1);

        $r6 = (java.io.Writer) $r3;

        $z0 = $r6 instanceof java.io.BufferedWriter;

        if $z0 == 0 goto label1;

        $r7 = (java.io.BufferedWriter) $r6;

        goto label2;

     label1:
        $r7 = new java.io.BufferedWriter;

        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r6, 8192);

     label2:
        $r6 = (java.io.Writer) $r7;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r6);

        return $r2;
    }

    static java.io.PrintWriter printWriter$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.io.PrintWriter $r3;
        java.io.OutputStream $r6;
        java.io.BufferedWriter $r8;
        java.io.FileOutputStream $r5;
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        int $i0;
        java.io.Writer $r7;
        java.io.OutputStreamWriter $r4;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.PrintWriter;

        $r4 = new java.io.OutputStreamWriter;

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r6 = (java.io.OutputStream) $r5;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r6, $r1);

        $r7 = (java.io.Writer) $r4;

        $z0 = $r7 instanceof java.io.BufferedWriter;

        if $z0 == 0 goto label2;

        $r8 = (java.io.BufferedWriter) $r7;

        goto label3;

     label2:
        $r8 = new java.io.BufferedWriter;

        specialinvoke $r8.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r7, 8192);

     label3:
        $r7 = (java.io.Writer) $r8;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>($r7);

        return $r3;
    }

    public static final byte[] readBytes(java.io.File)
    {
        java.lang.Throwable r10, $r11;
        byte[] r3, $r6, $r7;
        long $l1;
        byte $b2;
        int i0, i3, i4;
        java.lang.String $r9;
        kotlin.io.ExposingBufferByteArrayOutputStream $r13;
        java.io.OutputStream $r5;
        java.io.FileInputStream $r1, $r12;
        java.io.File $r0;
        java.io.Closeable $r2;
        java.lang.StringBuilder $r8, $r14;
        java.lang.OutOfMemoryError $r15;
        java.io.InputStream r4;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r2 = (java.io.Closeable) $r12;

     label01:
        $r1 = (java.io.FileInputStream) $r2;

     label02:
        i0 = 0;

     label03:
        $l1 = virtualinvoke $r0.<java.io.File: long length()>();

     label04:
        $b2 = $l1 cmp 2147483647L;

        i4 = (int) $b2;

        if i4 > 0 goto label22;

        i3 = (int) $l1;

        i4 = i3;

     label05:
        r3 = newarray (byte)[i3];

     label06:
        if i4 <= 0 goto label09;

     label07:
        i3 = virtualinvoke $r1.<java.io.FileInputStream: int read(byte[],int,int)>(r3, i0, i4);

     label08:
        if i3 < 0 goto label09;

        i4 = i4 - i3;

        i0 = i0 + i3;

        goto label06;

     label09:
        if i4 <= 0 goto label12;

     label10:
        r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r3, i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "copyOf(this, newSize)");

     label11:
        goto label18;

     label12:
        i0 = virtualinvoke $r1.<java.io.FileInputStream: int read()>();

     label13:
        if i0 != -1 goto label14;

        goto label18;

     label14:
        $r13 = new kotlin.io.ExposingBufferByteArrayOutputStream;

     label15:
        specialinvoke $r13.<kotlin.io.ExposingBufferByteArrayOutputStream: void <init>(int)>(8193);

        virtualinvoke $r13.<kotlin.io.ExposingBufferByteArrayOutputStream: void write(int)>(i0);

        r4 = (java.io.InputStream) $r1;

        $r5 = (java.io.OutputStream) $r13;

        staticinvoke <kotlin.io.ByteStreamsKt: long copyTo$default(java.io.InputStream,java.io.OutputStream,int,int,java.lang.Object)>(r4, $r5, 0, 2, null);

        i0 = lengthof r3;

        i4 = virtualinvoke $r13.<kotlin.io.ExposingBufferByteArrayOutputStream: int size()>();

     label16:
        i0 = i0 + i4;

        if i0 < 0 goto label19;

     label17:
        $r6 = virtualinvoke $r13.<kotlin.io.ExposingBufferByteArrayOutputStream: byte[] getBuffer()>();

        $r7 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r3, i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "copyOf(this, newSize)");

        i0 = lengthof r3;

        i4 = virtualinvoke $r13.<kotlin.io.ExposingBufferByteArrayOutputStream: int size()>();

        r3 = staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r6, $r7, i0, 0, i4);

     label18:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r2, null);

        return r3;

     label19:
        $r15 = new java.lang.OutOfMemoryError;

     label20:
        $r14 = new java.lang.StringBuilder;

     label21:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too big to fit in memory.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($r9);

        throw $r15;

     label22:
        $r15 = new java.lang.OutOfMemoryError;

     label23:
        $r14 = new java.lang.StringBuilder;

     label24:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too big (");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes) to fit in memory.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($r9);

        throw $r15;

     label25:
        r10 := @caughtexception;

     label26:
        throw r10;

     label27:
        $r11 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r2, r10);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.Throwable from label21 to label23 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label27;
    }

    public static final java.util.List readLines(java.io.File, java.nio.charset.Charset)
    {
        java.util.List $r5;
        java.nio.charset.Charset $r1;
        kotlin.io.FilesKt__FileReadWriteKt$readLines$1 $r3;
        kotlin.jvm.functions.Function1 $r4;
        java.io.File $r0;
        java.util.ArrayList r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = new kotlin.io.FilesKt__FileReadWriteKt$readLines$1;

        specialinvoke $r3.<kotlin.io.FilesKt__FileReadWriteKt$readLines$1: void <init>(java.util.ArrayList)>(r2);

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        staticinvoke <kotlin.io.FilesKt: void forEachLine(java.io.File,java.nio.charset.Charset,kotlin.jvm.functions.Function1)>($r0, $r1, $r4);

        $r5 = (java.util.List) r2;

        return $r5;
    }

    public static java.util.List readLines$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.util.List $r1;
        java.nio.charset.Charset $r3;
        int $i0;
        java.lang.Object $r0;
        java.io.File $r2;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $r1 = staticinvoke <kotlin.io.FilesKt: java.util.List readLines(java.io.File,java.nio.charset.Charset)>($r2, $r3);

        return $r1;
    }

    public static final java.lang.String readText(java.io.File, java.nio.charset.Charset)
    {
        java.lang.Throwable r8, $r9;
        java.io.FileInputStream r4;
        java.io.Reader $r7;
        java.io.InputStreamReader $r3;
        java.io.File $r0;
        java.nio.charset.Charset r1;
        java.io.Closeable $r6;
        java.lang.String $r2;
        java.io.InputStream r5;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "charset");

        $r3 = new java.io.InputStreamReader;

        r4 = new java.io.FileInputStream;

        specialinvoke r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        r5 = (java.io.InputStream) r4;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r5, r1);

        $r6 = (java.io.Closeable) $r3;

     label1:
        $r3 = (java.io.InputStreamReader) $r6;

        $r7 = (java.io.Reader) $r3;

        $r2 = staticinvoke <kotlin.io.TextStreamsKt: java.lang.String readText(java.io.Reader)>($r7);

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, null);

        return $r2;

     label3:
        r8 := @caughtexception;

     label4:
        throw r8;

     label5:
        $r9 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r6, r8);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static java.lang.String readText$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.nio.charset.Charset $r3;
        int $i0;
        java.lang.Object $r0;
        java.lang.String $r1;
        java.io.File $r2;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $r1 = staticinvoke <kotlin.io.FilesKt: java.lang.String readText(java.io.File,java.nio.charset.Charset)>($r2, $r3);

        return $r1;
    }

    private static final java.io.InputStreamReader reader(java.io.File, java.nio.charset.Charset)
    {
        java.nio.charset.Charset $r1;
        java.io.FileInputStream $r3;
        java.io.InputStreamReader $r2;
        java.io.File $r0;
        java.io.InputStream $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r2 = new java.io.InputStreamReader;

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r4 = (java.io.InputStream) $r3;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r4, $r1);

        return $r2;
    }

    static java.io.InputStreamReader reader$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.nio.charset.Charset $r1;
        int $i0;
        java.lang.Object $r2;
        java.io.FileInputStream $r4;
        java.io.InputStreamReader $r3;
        java.io.File $r0;
        java.io.InputStream $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r5 = (java.io.InputStream) $r4;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, $r1);

        return $r3;
    }

    public static final java.lang.Object useLines(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1)
    {
        java.lang.Throwable r11, $r12;
        kotlin.sequences.Sequence $r9;
        kotlin.jvm.functions.Function1 r2;
        java.io.FileInputStream $r4;
        java.io.Reader $r6;
        java.io.InputStreamReader $r3;
        java.io.File $r0;
        java.nio.charset.Charset r1;
        java.io.Closeable $r8;
        java.lang.Object $r10;
        java.io.BufferedReader $r7;
        java.io.InputStream $r5;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "charset");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r5 = (java.io.InputStream) $r4;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r5, r1);

        $r6 = (java.io.Reader) $r3;

        $z0 = $r6 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        $r7 = (java.io.BufferedReader) $r6;

        goto label2;

     label1:
        $r7 = new java.io.BufferedReader;

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r6, 8192);

     label2:
        $r8 = (java.io.Closeable) $r7;

     label3:
        $r7 = (java.io.BufferedReader) $r8;

        $r9 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r7);

        $r10 = interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r9);

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r8, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r10;

     label5:
        r11 := @caughtexception;

     label6:
        throw r11;

     label7:
        $r12 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r8, r11);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r12;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static java.lang.Object useLines$default(java.io.File, java.nio.charset.Charset, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.lang.Throwable r11, $r12;
        kotlin.sequences.Sequence $r10;
        kotlin.jvm.functions.Function1 r1;
        java.io.FileInputStream r5;
        java.io.Reader $r7;
        java.io.InputStreamReader $r4;
        java.io.File $r0;
        java.nio.charset.Charset r2;
        java.io.Closeable $r9;
        int i0;
        java.lang.Object $r3;
        java.io.BufferedReader $r8;
        java.io.InputStream r6;
        boolean z0;

        $r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.nio.charset.Charset;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        i0 = i0 & 1;

        if i0 == 0 goto label1;

        r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        $r4 = new java.io.InputStreamReader;

        r5 = new java.io.FileInputStream;

        specialinvoke r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        r6 = (java.io.InputStream) r5;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r6, r2);

        $r7 = (java.io.Reader) $r4;

        z0 = $r7 instanceof java.io.BufferedReader;

        if z0 == 0 goto label2;

        $r8 = (java.io.BufferedReader) $r7;

        goto label3;

     label2:
        $r8 = new java.io.BufferedReader;

        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r7, 8192);

     label3:
        $r9 = (java.io.Closeable) $r8;

     label4:
        $r8 = (java.io.BufferedReader) $r9;

        $r10 = staticinvoke <kotlin.io.TextStreamsKt: kotlin.sequences.Sequence lineSequence(java.io.BufferedReader)>($r8);

        $r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r10);

     label5:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r9, null);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return $r3;

     label6:
        r11 := @caughtexception;

     label7:
        throw r11;

     label8:
        $r12 := @caughtexception;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r9, r11);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r12;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public static final void writeBytes(java.io.File, byte[])
    {
        java.lang.Throwable r5, $r6;
        byte[] r1;
        kotlin.Unit r4;
        java.io.Closeable $r3;
        java.io.FileOutputStream $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "array");

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r3 = (java.io.Closeable) $r2;

     label1:
        $r2 = (java.io.FileOutputStream) $r3;

        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[])>(r1);

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r3, null);

        return;

     label3:
        r5 := @caughtexception;

     label4:
        throw r5;

     label5:
        $r6 := @caughtexception;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>($r3, r5);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public static final void writeText(java.io.File, java.lang.String, java.nio.charset.Charset)
    {
        byte[] $r3;
        java.nio.charset.Charset $r2;
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "text");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset");

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this as java.lang.String).getBytes(charset)");

        staticinvoke <kotlin.io.FilesKt: void writeBytes(java.io.File,byte[])>($r0, $r3);

        return;
    }

    public static void writeText$default(java.io.File, java.lang.String, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.nio.charset.Charset $r3;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.nio.charset.Charset;

        $i0 := @parameter3: int;

        $r2 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.io.FilesKt: void writeText(java.io.File,java.lang.String,java.nio.charset.Charset)>($r0, $r1, $r3);

        return;
    }

    private static final java.io.OutputStreamWriter writer(java.io.File, java.nio.charset.Charset)
    {
        java.io.OutputStream $r4;
        java.nio.charset.Charset $r1;
        java.io.OutputStreamWriter $r2;
        java.io.FileOutputStream $r3;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r2 = new java.io.OutputStreamWriter;

        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r4 = (java.io.OutputStream) $r3;

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r1);

        return $r2;
    }

    static java.io.OutputStreamWriter writer$default(java.io.File, java.nio.charset.Charset, int, java.lang.Object)
    {
        java.io.OutputStream $r5;
        java.nio.charset.Charset $r1;
        int $i0;
        java.io.OutputStreamWriter $r3;
        java.io.FileOutputStream $r4;
        java.lang.Object $r2;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8>;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "charset");

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r5 = (java.io.OutputStream) $r4;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r5, $r1);

        return $r3;
    }
}
