final class kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1 extends kotlin.jvm.internal.Lambda implements kotlin.jvm.functions.Function1
{
    final kotlinx.coroutines.sync.MutexImpl this$0;
    final kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner this$1;

    void <init>(kotlinx.coroutines.sync.MutexImpl, kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner)
    {
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1 r0;
        kotlinx.coroutines.sync.MutexImpl $r1;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner $r2;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1;

        $r1 := @parameter0: kotlinx.coroutines.sync.MutexImpl;

        $r2 := @parameter1: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner;

        r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl this$0> = $r1;

        r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner this$1> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        java.lang.Throwable $r2;
        kotlin.Unit r3;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1 r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: void invoke(java.lang.Throwable)>($r2);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public final void invoke(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.internal.Symbol $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1 r0;
        java.lang.AssertionError r8;
        kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner $r3;
        kotlinx.coroutines.sync.MutexImpl r2;
        java.lang.Object $r5, $r7;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl this$0>;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner this$1>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label5;

        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = staticinvoke <kotlinx.coroutines.sync.MutexKt: kotlinx.coroutines.internal.Symbol access$getNO_OWNER$p()>();

        if $r5 == $r6 goto label2;

        $r7 = $r3.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object owner>;

        if $r5 != $r7 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        r8 = new java.lang.AssertionError;

        specialinvoke r8.<java.lang.AssertionError: void <init>()>();

        throw r8;

     label5:
        $r4 = staticinvoke <kotlinx.coroutines.sync.MutexImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getOwner$FU$p()>();

        r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl this$0>;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner this$1>;

        $r5 = $r3.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object owner>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r2, $r5);

        r2 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl this$0>;

        $r3 = r0.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner$tryResume$token$1: kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner this$1>;

        $r5 = $r3.<kotlinx.coroutines.sync.MutexImpl$CancellableContinuationWithOwner: java.lang.Object owner>;

        virtualinvoke r2.<kotlinx.coroutines.sync.MutexImpl: void unlock(java.lang.Object)>($r5);

        return;
    }
}
