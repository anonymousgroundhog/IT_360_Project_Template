final class kotlinx.coroutines.flow.StartedWhileSubscribed$command$1 extends kotlin.coroutines.jvm.internal.SuspendLambda implements kotlin.jvm.functions.Function3
{
    int I$0;
    private java.lang.Object L$0;
    int label;
    final kotlinx.coroutines.flow.StartedWhileSubscribed this$0;

    void <init>(kotlinx.coroutines.flow.StartedWhileSubscribed, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.StartedWhileSubscribed$command$1 r0;
        kotlinx.coroutines.flow.StartedWhileSubscribed $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed$command$1;

        $r1 := @parameter0: kotlinx.coroutines.flow.StartedWhileSubscribed;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: kotlinx.coroutines.flow.StartedWhileSubscribed this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(3, $r2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r6;
        kotlinx.coroutines.flow.StartedWhileSubscribed$command$1 r0;
        kotlinx.coroutines.flow.FlowCollector $r4;
        int $i0;
        java.lang.Object $r1, $r2, $r3;
        java.lang.Number $r5;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed$command$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $r4 = (kotlinx.coroutines.flow.FlowCollector) $r1;

        $r5 = (java.lang.Number) $r2;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        $r6 = (kotlin.coroutines.Continuation) $r3;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,int,kotlin.coroutines.Continuation)>($r4, $i0, $r6);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector, int, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.StartedWhileSubscribed $r5;
        kotlinx.coroutines.flow.StartedWhileSubscribed$command$1 r0, $r4;
        kotlin.Unit $r6;
        kotlinx.coroutines.flow.FlowCollector $r1;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed$command$1;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r4 = new kotlinx.coroutines.flow.StartedWhileSubscribed$command$1;

        $r5 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: kotlinx.coroutines.flow.StartedWhileSubscribed this$0>;

        specialinvoke $r4.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: void <init>(kotlinx.coroutines.flow.StartedWhileSubscribed,kotlin.coroutines.Continuation)>($r5, $r2);

        $r4.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0> = $r1;

        $r4.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int I$0> = $i0;

        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r3 = virtualinvoke $r4.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object invokeSuspend(java.lang.Object)>($r6);

        return $r3;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.IllegalStateException $r10;
        kotlin.coroutines.Continuation $r7;
        kotlinx.coroutines.flow.StartedWhileSubscribed r8;
        long $l2;
        kotlinx.coroutines.flow.StartedWhileSubscribed$command$1 r0, r3;
        kotlin.Unit r9;
        byte $b0;
        kotlinx.coroutines.flow.FlowCollector $r5;
        kotlinx.coroutines.flow.SharingCommand r6;
        int i1;
        java.lang.Object $r1, $r2, $r4;

        r0 := @this: kotlinx.coroutines.flow.StartedWhileSubscribed$command$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i1 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int label>;

        lookupswitch(i1)
        {
            case 0: goto label07;
            case 1: goto label06;
            case 2: goto label05;
            case 3: goto label04;
            case 4: goto label03;
            case 5: goto label02;
            default: goto label01;
        };

     label01:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r10;

     label02:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label13;

     label03:
        r3 = r0;

        $r4 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0>;

        $r5 = (kotlinx.coroutines.flow.FlowCollector) $r4;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label12;

     label04:
        r3 = r0;

        $r4 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0>;

        $r5 = (kotlinx.coroutines.flow.FlowCollector) $r4;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label11;

     label05:
        r3 = r0;

        $r4 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0>;

        $r5 = (kotlinx.coroutines.flow.FlowCollector) $r4;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label10;

     label06:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        goto label08;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r3 = r0;

        $r1 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0>;

        $r5 = (kotlinx.coroutines.flow.FlowCollector) $r1;

        i1 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int I$0>;

        if i1 <= 0 goto label09;

        r6 = <kotlinx.coroutines.flow.SharingCommand: kotlinx.coroutines.flow.SharingCommand START>;

        $r7 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int label> = 1;

        $r1 = interfaceinvoke $r5.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(r6, $r7);

        if $r1 != $r2 goto label08;

        return $r2;

     label08:
        goto label13;

     label09:
        r8 = r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: kotlinx.coroutines.flow.StartedWhileSubscribed this$0>;

        $l2 = staticinvoke <kotlinx.coroutines.flow.StartedWhileSubscribed: long access$getStopTimeout$p(kotlinx.coroutines.flow.StartedWhileSubscribed)>(r8);

        $r7 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0> = $r5;

        r0.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int label> = 2;

        $r1 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l2, $r7);

        if $r1 != $r2 goto label10;

        return $r2;

     label10:
        r8 = r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: kotlinx.coroutines.flow.StartedWhileSubscribed this$0>;

        $l2 = staticinvoke <kotlinx.coroutines.flow.StartedWhileSubscribed: long access$getReplayExpiration$p(kotlinx.coroutines.flow.StartedWhileSubscribed)>(r8);

        $b0 = $l2 cmp 0L;

        i1 = (int) $b0;

        if i1 <= 0 goto label12;

        r6 = <kotlinx.coroutines.flow.SharingCommand: kotlinx.coroutines.flow.SharingCommand STOP>;

        $r7 = (kotlin.coroutines.Continuation) r3;

        r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0> = $r5;

        r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int label> = 3;

        $r1 = interfaceinvoke $r5.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(r6, $r7);

        if $r1 != $r2 goto label11;

        return $r2;

     label11:
        r8 = r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: kotlinx.coroutines.flow.StartedWhileSubscribed this$0>;

        $l2 = staticinvoke <kotlinx.coroutines.flow.StartedWhileSubscribed: long access$getReplayExpiration$p(kotlinx.coroutines.flow.StartedWhileSubscribed)>(r8);

        $r7 = (kotlin.coroutines.Continuation) r3;

        r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0> = $r5;

        r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int label> = 4;

        $r1 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l2, $r7);

        if $r1 != $r2 goto label12;

        return $r2;

     label12:
        r6 = <kotlinx.coroutines.flow.SharingCommand: kotlinx.coroutines.flow.SharingCommand STOP_AND_RESET_REPLAY_CACHE>;

        $r7 = (kotlin.coroutines.Continuation) r3;

        r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: java.lang.Object L$0> = null;

        r3.<kotlinx.coroutines.flow.StartedWhileSubscribed$command$1: int label> = 5;

        $r1 = interfaceinvoke $r5.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(r6, $r7);

        if $r1 != $r2 goto label13;

        return $r2;

     label13:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;
    }
}
