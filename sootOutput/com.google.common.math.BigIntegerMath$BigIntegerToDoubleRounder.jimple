class com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder extends com.google.common.math.ToDoubleRounder
{
    static final com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder INSTANCE;

    static void <clinit>()
    {
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder $r0;

        $r0 = new com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        specialinvoke $r0.<com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder: void <init>()>();

        <com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        specialinvoke r0.<com.google.common.math.ToDoubleRounder: void <init>()>();

        return;
    }

    volatile java.lang.Number minus(java.lang.Number, java.lang.Number)
    {
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;
        java.math.BigInteger $r1, $r4;
        java.lang.Number $r2, $r3;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $r2 := @parameter0: java.lang.Number;

        $r3 := @parameter1: java.lang.Number;

        $r1 = (java.math.BigInteger) $r2;

        $r4 = (java.math.BigInteger) $r3;

        $r1 = virtualinvoke r0.<com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder: java.math.BigInteger minus(java.math.BigInteger,java.math.BigInteger)>($r1, $r4);

        return $r1;
    }

    java.math.BigInteger minus(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger $r1, $r2;
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        return $r1;
    }

    volatile double roundToDoubleArbitrarily(java.lang.Number)
    {
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;
        java.math.BigInteger $r2;
        java.lang.Number $r1;
        double $d0;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $r1 := @parameter0: java.lang.Number;

        $r2 = (java.math.BigInteger) $r1;

        $d0 = virtualinvoke r0.<com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder: double roundToDoubleArbitrarily(java.math.BigInteger)>($r2);

        return $d0;
    }

    double roundToDoubleArbitrarily(java.math.BigInteger)
    {
        java.math.BigInteger $r1;
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;
        double $d0;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $r1 := @parameter0: java.math.BigInteger;

        $d0 = staticinvoke <com.google.common.math.DoubleUtils: double bigToDouble(java.math.BigInteger)>($r1);

        return $d0;
    }

    volatile int sign(java.lang.Number)
    {
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;
        int $i0;
        java.math.BigInteger $r2;
        java.lang.Number $r1;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $r1 := @parameter0: java.lang.Number;

        $r2 = (java.math.BigInteger) $r1;

        $i0 = virtualinvoke r0.<com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder: int sign(java.math.BigInteger)>($r2);

        return $i0;
    }

    int sign(java.math.BigInteger)
    {
        int $i0;
        java.math.BigInteger $r1;
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $r1 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        return $i0;
    }

    volatile java.lang.Number toX(double, java.math.RoundingMode)
    {
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;
        java.math.BigInteger $r2;
        java.math.RoundingMode $r1;
        double $d0;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.math.RoundingMode;

        $r2 = virtualinvoke r0.<com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder: java.math.BigInteger toX(double,java.math.RoundingMode)>($d0, $r1);

        return $r2;
    }

    java.math.BigInteger toX(double, java.math.RoundingMode)
    {
        com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder r0;
        java.math.BigInteger $r2;
        double $d0;
        java.math.RoundingMode $r1;

        r0 := @this: com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder;

        $d0 := @parameter0: double;

        $r1 := @parameter1: java.math.RoundingMode;

        $r2 = staticinvoke <com.google.common.math.DoubleMath: java.math.BigInteger roundToBigInteger(double,java.math.RoundingMode)>($d0, $r1);

        return $r2;
    }
}
