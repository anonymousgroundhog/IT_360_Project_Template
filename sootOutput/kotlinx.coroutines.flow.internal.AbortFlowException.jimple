public final class kotlinx.coroutines.flow.internal.AbortFlowException extends java.util.concurrent.CancellationException
{
    public final transient kotlinx.coroutines.flow.FlowCollector owner;

    public void <init>(kotlinx.coroutines.flow.FlowCollector)
    {
        kotlinx.coroutines.flow.internal.AbortFlowException r0;
        kotlinx.coroutines.flow.FlowCollector $r1;

        r0 := @this: kotlinx.coroutines.flow.internal.AbortFlowException;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        specialinvoke r0.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Flow was aborted, no more elements needed");

        r0.<kotlinx.coroutines.flow.internal.AbortFlowException: kotlinx.coroutines.flow.FlowCollector owner> = $r1;

        return;
    }

    public java.lang.Throwable fillInStackTrace()
    {
        java.lang.Throwable $r1;
        java.lang.StackTraceElement[] $r2;
        kotlinx.coroutines.flow.internal.AbortFlowException r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.internal.AbortFlowException;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getDEBUG()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<java.util.concurrent.CancellationException: java.lang.Throwable fillInStackTrace()>();

        return $r1;

     label1:
        $r2 = newarray (java.lang.StackTraceElement)[0];

        virtualinvoke r0.<kotlinx.coroutines.flow.internal.AbortFlowException: void setStackTrace(java.lang.StackTraceElement[])>($r2);

        $r1 = (java.lang.Throwable) r0;

        return $r1;
    }
}
