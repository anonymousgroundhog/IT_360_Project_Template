public final class kotlin.streams.jdk8.StreamsKt extends java.lang.Object
{

    public static java.util.Spliterator $r8$lambda$jBRaOqrA5A8aZRswyILQO-7uCm8(kotlin.sequences.Sequence)
    {
        java.util.Spliterator $r0;
        kotlin.sequences.Sequence $r1;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $r0 = staticinvoke <kotlin.streams.jdk8.StreamsKt: java.util.Spliterator asStream$lambda$4(kotlin.sequences.Sequence)>($r1);

        return $r0;
    }

    public static final kotlin.sequences.Sequence asSequence(java.util.stream.DoubleStream)
    {
        kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$4 $r1;
        kotlin.sequences.Sequence $r2;
        java.util.stream.DoubleStream $r0;

        $r0 := @parameter0: java.util.stream.DoubleStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$4;

        specialinvoke $r1.<kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$4: void <init>(java.util.stream.DoubleStream)>($r0);

        $r2 = (kotlin.sequences.Sequence) $r1;

        return $r2;
    }

    public static final kotlin.sequences.Sequence asSequence(java.util.stream.IntStream)
    {
        java.util.stream.IntStream $r0;
        kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2 $r1;
        kotlin.sequences.Sequence $r2;

        $r0 := @parameter0: java.util.stream.IntStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2;

        specialinvoke $r1.<kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2: void <init>(java.util.stream.IntStream)>($r0);

        $r2 = (kotlin.sequences.Sequence) $r1;

        return $r2;
    }

    public static final kotlin.sequences.Sequence asSequence(java.util.stream.LongStream)
    {
        kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$3 $r1;
        java.util.stream.LongStream $r0;
        kotlin.sequences.Sequence $r2;

        $r0 := @parameter0: java.util.stream.LongStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$3;

        specialinvoke $r1.<kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$3: void <init>(java.util.stream.LongStream)>($r0);

        $r2 = (kotlin.sequences.Sequence) $r1;

        return $r2;
    }

    public static final kotlin.sequences.Sequence asSequence(java.util.stream.Stream)
    {
        java.util.stream.Stream $r0;
        kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1 $r1;
        kotlin.sequences.Sequence $r2;

        $r0 := @parameter0: java.util.stream.Stream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1;

        specialinvoke $r1.<kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1: void <init>(java.util.stream.Stream)>($r0);

        $r2 = (kotlin.sequences.Sequence) $r1;

        return $r2;
    }

    public static final java.util.stream.Stream asStream(kotlin.sequences.Sequence)
    {
        java.util.stream.Stream $r1;
        kotlin.sequences.Sequence $r0;
        kotlin.streams.jdk8.StreamsKt$$ExternalSyntheticLambda0 $r2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r2 = new kotlin.streams.jdk8.StreamsKt$$ExternalSyntheticLambda0;

        specialinvoke $r2.<kotlin.streams.jdk8.StreamsKt$$ExternalSyntheticLambda0: void <init>(kotlin.sequences.Sequence)>($r0);

        $r1 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.function.Supplier,int,boolean)>($r2, 16, 0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "stream({ Spliterators.sp\u2026literator.ORDERED, false)");

        return $r1;
    }

    private static final java.util.Spliterator asStream$lambda$4(kotlin.sequences.Sequence)
    {
        java.util.Iterator $r1;
        java.util.Spliterator $r2;
        kotlin.sequences.Sequence $r0;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this_asStream");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $r2 = staticinvoke <java.util.Spliterators: java.util.Spliterator spliteratorUnknownSize(java.util.Iterator,int)>($r1, 16);

        return $r2;
    }

    public static final java.util.List toList(java.util.stream.DoubleStream)
    {
        double[] $r1;
        java.util.List $r2;
        java.util.stream.DoubleStream $r0;

        $r0 := @parameter0: java.util.stream.DoubleStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<java.util.stream.DoubleStream: double[] toArray()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "toArray()");

        $r2 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(double[])>($r1);

        return $r2;
    }

    public static final java.util.List toList(java.util.stream.IntStream)
    {
        java.util.stream.IntStream $r0;
        java.util.List $r2;
        int[] $r1;

        $r0 := @parameter0: java.util.stream.IntStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<java.util.stream.IntStream: int[] toArray()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "toArray()");

        $r2 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(int[])>($r1);

        return $r2;
    }

    public static final java.util.List toList(java.util.stream.LongStream)
    {
        java.util.List $r2;
        java.util.stream.LongStream $r0;
        long[] $r1;

        $r0 := @parameter0: java.util.stream.LongStream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<java.util.stream.LongStream: long[] toArray()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "toArray()");

        $r2 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(long[])>($r1);

        return $r2;
    }

    public static final java.util.List toList(java.util.stream.Stream)
    {
        java.util.List $r3;
        java.util.stream.Stream $r0;
        java.lang.Object $r2;
        java.util.stream.Collector $r1;

        $r0 := @parameter0: java.util.stream.Stream;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r2 = interfaceinvoke $r0.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "collect(Collectors.toList<T>())");

        $r3 = (java.util.List) $r2;

        return $r3;
    }
}
