public final class kotlin.time.ComparableTimeMark$DefaultImpls extends java.lang.Object
{

    public static int compareTo(kotlin.time.ComparableTimeMark, kotlin.time.ComparableTimeMark)
    {
        kotlin.time.Duration$Companion $r2;
        kotlin.time.ComparableTimeMark $r0, $r1;
        int $i2;
        long $l0, $l1;

        $r0 := @parameter0: kotlin.time.ComparableTimeMark;

        $r1 := @parameter1: kotlin.time.ComparableTimeMark;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $l0 = interfaceinvoke $r0.<kotlin.time.ComparableTimeMark: long minus-UwyO8pc(kotlin.time.ComparableTimeMark)>($r1);

        $r2 = <kotlin.time.Duration: kotlin.time.Duration$Companion Companion>;

        $l1 = virtualinvoke $r2.<kotlin.time.Duration$Companion: long getZERO-UwyO8pc()>();

        $i2 = staticinvoke <kotlin.time.Duration: int compareTo-LRDsOJo(long,long)>($l0, $l1);

        return $i2;
    }

    public static boolean hasNotPassedNow(kotlin.time.ComparableTimeMark)
    {
        kotlin.time.TimeMark $r1;
        kotlin.time.ComparableTimeMark $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.time.ComparableTimeMark;

        $r1 = (kotlin.time.TimeMark) $r0;

        $z0 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: boolean hasNotPassedNow(kotlin.time.TimeMark)>($r1);

        return $z0;
    }

    public static boolean hasPassedNow(kotlin.time.ComparableTimeMark)
    {
        kotlin.time.TimeMark $r1;
        kotlin.time.ComparableTimeMark $r0;
        boolean $z0;

        $r0 := @parameter0: kotlin.time.ComparableTimeMark;

        $r1 = (kotlin.time.TimeMark) $r0;

        $z0 = staticinvoke <kotlin.time.TimeMark$DefaultImpls: boolean hasPassedNow(kotlin.time.TimeMark)>($r1);

        return $z0;
    }

    public static kotlin.time.ComparableTimeMark minus-LRDsOJo(kotlin.time.ComparableTimeMark, long)
    {
        long $l0;
        kotlin.time.ComparableTimeMark $r0;

        $r0 := @parameter0: kotlin.time.ComparableTimeMark;

        $l0 := @parameter1: long;

        $l0 = staticinvoke <kotlin.time.Duration: long unaryMinus-UwyO8pc(long)>($l0);

        $r0 = interfaceinvoke $r0.<kotlin.time.ComparableTimeMark: kotlin.time.ComparableTimeMark plus-LRDsOJo(long)>($l0);

        return $r0;
    }
}
