abstract class com.google.common.util.concurrent.AbstractCatchingFuture extends com.google.common.util.concurrent.FluentFuture$TrustedFuture implements java.lang.Runnable
{
    java.lang.Class exceptionType;
    java.lang.Object fallback;
    com.google.common.util.concurrent.ListenableFuture inputFuture;

    void <init>(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, java.lang.Object)
    {
        com.google.common.util.concurrent.ListenableFuture r1;
        java.lang.Class r2;
        java.lang.Object r3, $r4;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.google.common.util.concurrent.FluentFuture$TrustedFuture: void <init>()>();

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (com.google.common.util.concurrent.ListenableFuture) $r4;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = r1;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r2 = (java.lang.Class) $r4;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = r2;

        r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = r3;

        return;
    }

    static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture r4;
        com.google.common.base.Function r2;
        com.google.common.util.concurrent.ListenableFuture r0;
        java.util.concurrent.Executor $r3;
        java.lang.Class r1;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: com.google.common.base.Function;

        $r3 := @parameter3: java.util.concurrent.Executor;

        r4 = new com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture;

        specialinvoke r4.<com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)>(r0, r1, r2);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r3, r4);

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r4, $r3);

        return r4;
    }

    static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture r0;
        java.util.concurrent.Executor $r3;
        java.lang.Class r1;
        com.google.common.util.concurrent.AsyncFunction r2;
        com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture r4;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: com.google.common.util.concurrent.AsyncFunction;

        $r3 := @parameter3: java.util.concurrent.Executor;

        r4 = new com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        specialinvoke r4.<com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)>(r0, r1, r2);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r3, r4);

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r4, $r3);

        return r4;
    }

    protected final void afterDone()
    {
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        $r1 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: void maybePropagateCancellationTo(java.util.concurrent.Future)>($r1);

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        return;
    }

    abstract java.lang.Object doFallback(java.lang.Object, java.lang.Throwable) throws java.lang.Exception;

    protected java.lang.String pendingToString()
    {
        com.google.common.util.concurrent.ListenableFuture r1;
        int $i0, $i1;
        java.lang.Class r2;
        java.lang.Object r3;
        java.lang.StringBuilder $r7;
        java.lang.String $r4, r5, $r6, $r8;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        r1 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        r2 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType>;

        r3 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback>;

        $r4 = specialinvoke r0.<com.google.common.util.concurrent.FluentFuture$TrustedFuture: java.lang.String pendingToString()>();

        r5 = "";

        if r1 == null goto label1;

        r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 16;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inputFuture=[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        if r2 == null goto label2;

        if r3 == null goto label2;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i0 = $i0 + 29;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exceptionType=[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], fallback=[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return r5;

     label2:
        if $r4 == null goto label4;

        r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String concat(java.lang.String)>($r4);

        return r5;

     label3:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>(r5);

        return $r4;

     label4:
        return null;
    }

    public final void run()
    {
        java.lang.Throwable r5, $r9, r16;
        com.google.common.util.concurrent.ListenableFuture r1;
        java.lang.NullPointerException r10;
        int $i0, $i1;
        java.lang.String $r12, $r13, $r14;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;
        boolean $z0, z1, z2;
        java.util.concurrent.ExecutionException r8;
        com.google.common.util.concurrent.internal.InternalFutureFailureAccess r6;
        java.lang.Class r2, $r11;
        java.lang.Object r3, r4, $r7;
        java.lang.StringBuilder $r15;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        r1 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        r2 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType>;

        r3 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback>;

        $z0 = 1;

        if r1 != null goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        if r2 != null goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        z1 = z1 | z2;

        if r3 != null goto label05;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        $z0 = $z0 | z1;

        if $z0 != 0 goto label25;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: boolean isCancelled()>();

        if $z0 == 0 goto label07;

        return;

     label07:
        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        r4 = null;

        r5 = null;

     label08:
        $z0 = r1 instanceof com.google.common.util.concurrent.internal.InternalFutureFailureAccess;

     label09:
        if $z0 == 0 goto label12;

     label10:
        r6 = (com.google.common.util.concurrent.internal.InternalFutureFailureAccess) r1;

     label11:
        r5 = staticinvoke <com.google.common.util.concurrent.internal.InternalFutures: java.lang.Throwable tryInternalFastPathGetFailure(com.google.common.util.concurrent.internal.InternalFutureFailureAccess)>(r6);

     label12:
        if r5 != null goto label17;

     label13:
        $r7 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>(r1);

     label14:
        r4 = $r7;

        goto label17;

     label15:
        r5 := @caughtexception;

        goto label17;

     label16:
        r8 := @caughtexception;

        $r9 = virtualinvoke r8.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        r5 = $r9;

        if $r9 != null goto label17;

        r10 = new java.lang.NullPointerException;

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        $r11 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $i0 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i0 = $i0 + 35;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Future type ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without a cause");

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r10.<java.lang.NullPointerException: void <init>(java.lang.String)>($r12);

        r5 = r10;

     label17:
        if r5 != null goto label18;

        r3 = staticinvoke <com.google.common.util.concurrent.NullnessCasts: java.lang.Object uncheckedCastNullableTToT(java.lang.Object)>(r4);

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: boolean set(java.lang.Object)>(r3);

        return;

     label18:
        $z0 = staticinvoke <com.google.common.util.concurrent.Platform: boolean isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class)>(r5, r2);

        if $z0 != 0 goto label19;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: boolean setFuture(com.google.common.util.concurrent.ListenableFuture)>(r1);

        return;

     label19:
        r3 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object doFallback(java.lang.Object,java.lang.Throwable)>(r3, r5);

     label20:
        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: void setResult(java.lang.Object)>(r3);

        return;

     label21:
        $r9 := @caughtexception;

     label22:
        virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: boolean setException(java.lang.Throwable)>($r9);

     label23:
        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        return;

     label24:
        r16 := @caughtexception;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        throw r16;

     label25:
        return;

        catch java.util.concurrent.ExecutionException from label11 to label12 with label16;
        catch java.util.concurrent.ExecutionException from label13 to label14 with label16;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label24;
    }

    abstract void setResult(java.lang.Object);
}
