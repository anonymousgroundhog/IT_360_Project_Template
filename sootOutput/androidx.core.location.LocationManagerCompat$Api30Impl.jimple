class androidx.core.location.LocationManagerCompat$Api30Impl extends java.lang.Object
{
    private static java.lang.Class sLocationRequestClass;
    private static java.lang.reflect.Method sRequestLocationUpdatesExecutorMethod;

    private void <init>()
    {
        androidx.core.location.LocationManagerCompat$Api30Impl r0;

        r0 := @this: androidx.core.location.LocationManagerCompat$Api30Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void getCurrentLocation(android.location.LocationManager, java.lang.String, androidx.core.os.CancellationSignal, java.util.concurrent.Executor, androidx.core.util.Consumer)
    {
        androidx.core.location.LocationManagerCompat$Api30Impl$$ExternalSyntheticLambda0 $r5;
        java.util.concurrent.Executor $r3;
        androidx.core.os.CancellationSignal $r2;
        android.os.CancellationSignal $r7;
        androidx.core.util.Consumer r4;
        java.lang.Object $r6;
        java.lang.String $r1;
        android.location.LocationManager $r0;

        $r0 := @parameter0: android.location.LocationManager;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: androidx.core.os.CancellationSignal;

        $r3 := @parameter3: java.util.concurrent.Executor;

        r4 := @parameter4: androidx.core.util.Consumer;

        if $r2 == null goto label1;

        $r6 = virtualinvoke $r2.<androidx.core.os.CancellationSignal: java.lang.Object getCancellationSignalObject()>();

        $r7 = (android.os.CancellationSignal) $r6;

        goto label2;

     label1:
        $r7 = null;

     label2:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r5 = new androidx.core.location.LocationManagerCompat$Api30Impl$$ExternalSyntheticLambda0;

        specialinvoke $r5.<androidx.core.location.LocationManagerCompat$Api30Impl$$ExternalSyntheticLambda0: void <init>(androidx.core.util.Consumer)>(r4);

        virtualinvoke $r0.<android.location.LocationManager: void getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>($r1, $r7, $r3, $r5);

        return;
    }

    public static boolean registerGnssStatusCallback(android.location.LocationManager, android.os.Handler, java.util.concurrent.Executor, androidx.core.location.GnssStatusCompat$Callback)
    {
        java.lang.Throwable r8;
        java.util.concurrent.Executor $r2;
        androidx.core.location.GnssStatusCompat$Callback $r3;
        android.os.Handler $r1;
        androidx.core.location.LocationManagerCompat$GnssStatusTransport r7;
        java.lang.Object $r6;
        android.location.LocationManager $r0;
        androidx.collection.SimpleArrayMap $r4, r5;
        boolean $z0;

        $r0 := @parameter0: android.location.LocationManager;

        $r1 := @parameter1: android.os.Handler;

        $r2 := @parameter2: java.util.concurrent.Executor;

        $r3 := @parameter3: androidx.core.location.GnssStatusCompat$Callback;

        $r4 = <androidx.core.location.LocationManagerCompat$GnssLazyLoader: androidx.collection.SimpleArrayMap sGnssStatusListeners>;

        entermonitor $r4;

     label1:
        r5 = <androidx.core.location.LocationManagerCompat$GnssLazyLoader: androidx.collection.SimpleArrayMap sGnssStatusListeners>;

        $r6 = virtualinvoke r5.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r7 = (androidx.core.location.LocationManagerCompat$GnssStatusTransport) $r6;

        if r7 != null goto label2;

        r7 = new androidx.core.location.LocationManagerCompat$GnssStatusTransport;

        specialinvoke r7.<androidx.core.location.LocationManagerCompat$GnssStatusTransport: void <init>(androidx.core.location.GnssStatusCompat$Callback)>($r3);

     label2:
        $z0 = virtualinvoke $r0.<android.location.LocationManager: boolean registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus$Callback)>($r2, r7);

        if $z0 == 0 goto label4;

        r5 = <androidx.core.location.LocationManagerCompat$GnssLazyLoader: androidx.collection.SimpleArrayMap sGnssStatusListeners>;

        virtualinvoke r5.<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r7);

        exitmonitor $r4;

     label3:
        return 1;

     label4:
        exitmonitor $r4;

     label5:
        return 0;

     label6:
        r8 := @caughtexception;

        exitmonitor $r4;

     label7:
        throw r8;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static boolean tryRequestLocationUpdates(android.location.LocationManager, java.lang.String, androidx.core.location.LocationRequestCompat, java.util.concurrent.Executor, androidx.core.location.LocationListenerCompat)
    {
        java.lang.Object[] $r10;
        java.lang.NoSuchMethodException r15;
        androidx.core.location.LocationRequestCompat $r2;
        int i0;
        java.lang.String $r1;
        androidx.core.location.LocationListenerCompat $r4;
        java.lang.reflect.Method r7;
        java.lang.UnsupportedOperationException r11;
        java.lang.IllegalAccessException r13;
        java.util.concurrent.Executor $r3;
        java.lang.Class[] $r5;
        android.location.LocationRequest $r9;
        java.lang.reflect.InvocationTargetException r14;
        java.lang.Class r6, $r8;
        java.lang.ClassNotFoundException r12;
        android.location.LocationManager $r0;

        $r0 := @parameter0: android.location.LocationManager;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: androidx.core.location.LocationRequestCompat;

        $r3 := @parameter3: java.util.concurrent.Executor;

        $r4 := @parameter4: androidx.core.location.LocationListenerCompat;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 30 goto label17;

        r6 = <androidx.core.location.LocationManagerCompat$Api30Impl: java.lang.Class sLocationRequestClass>;

        if r6 != null goto label03;

     label01:
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.location.LocationRequest");

     label02:
        <androidx.core.location.LocationManagerCompat$Api30Impl: java.lang.Class sLocationRequestClass> = r6;

     label03:
        r7 = <androidx.core.location.LocationManagerCompat$Api30Impl: java.lang.reflect.Method sRequestLocationUpdatesExecutorMethod>;

        if r7 != null goto label07;

        r6 = class "Landroid/location/LocationManager;";

        $r5 = newarray (java.lang.Class)[3];

        $r8 = <androidx.core.location.LocationManagerCompat$Api30Impl: java.lang.Class sLocationRequestClass>;

        $r5[0] = $r8;

        $r5[1] = class "Ljava/util/concurrent/Executor;";

        $r5[2] = class "Landroid/location/LocationListener;";

     label04:
        r7 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("requestLocationUpdates", $r5);

     label05:
        <androidx.core.location.LocationManagerCompat$Api30Impl: java.lang.reflect.Method sRequestLocationUpdatesExecutorMethod> = r7;

        r7 = <androidx.core.location.LocationManagerCompat$Api30Impl: java.lang.reflect.Method sRequestLocationUpdatesExecutorMethod>;

     label06:
        virtualinvoke r7.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label07:
        $r9 = virtualinvoke $r2.<androidx.core.location.LocationRequestCompat: android.location.LocationRequest toLocationRequest(java.lang.String)>($r1);

     label08:
        if $r9 == null goto label11;

        r7 = <androidx.core.location.LocationManagerCompat$Api30Impl: java.lang.reflect.Method sRequestLocationUpdatesExecutorMethod>;

        $r10 = newarray (java.lang.Object)[3];

        $r10[0] = $r9;

        $r10[1] = $r3;

        $r10[2] = $r4;

     label09:
        virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r10);

     label10:
        return 1;

     label11:
        return 0;

     label12:
        r11 := @caughtexception;

        return 0;

     label13:
        r12 := @caughtexception;

        return 0;

     label14:
        r13 := @caughtexception;

        return 0;

     label15:
        r14 := @caughtexception;

        return 0;

     label16:
        r15 := @caughtexception;

     label17:
        return 0;

        catch java.lang.NoSuchMethodException from label01 to label02 with label16;
        catch java.lang.NoSuchMethodException from label04 to label05 with label16;
        catch java.lang.NoSuchMethodException from label06 to label08 with label16;
        catch java.lang.NoSuchMethodException from label09 to label10 with label16;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label15;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label15;
        catch java.lang.reflect.InvocationTargetException from label06 to label08 with label15;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label15;
        catch java.lang.IllegalAccessException from label01 to label02 with label14;
        catch java.lang.IllegalAccessException from label04 to label05 with label14;
        catch java.lang.IllegalAccessException from label06 to label08 with label14;
        catch java.lang.IllegalAccessException from label09 to label10 with label14;
        catch java.lang.ClassNotFoundException from label01 to label02 with label13;
        catch java.lang.ClassNotFoundException from label04 to label05 with label13;
        catch java.lang.ClassNotFoundException from label06 to label08 with label13;
        catch java.lang.ClassNotFoundException from label09 to label10 with label13;
        catch java.lang.UnsupportedOperationException from label01 to label02 with label12;
        catch java.lang.UnsupportedOperationException from label04 to label05 with label12;
        catch java.lang.UnsupportedOperationException from label06 to label08 with label12;
        catch java.lang.UnsupportedOperationException from label09 to label10 with label12;
    }
}
