final class kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 extends kotlin.coroutines.jvm.internal.RestrictedSuspendLambda implements kotlin.jvm.functions.Function2
{
    final kotlinx.coroutines.debug.internal.StackTraceFrame $bottom;
    private java.lang.Object L$0;
    int label;
    final kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl this$0;

    void <init>(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl, kotlinx.coroutines.debug.internal.StackTraceFrame, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 r0;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl $r1;
        kotlinx.coroutines.debug.internal.StackTraceFrame $r2;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1;

        $r1 := @parameter0: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl;

        $r2 := @parameter1: kotlinx.coroutines.debug.internal.StackTraceFrame;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl this$0> = $r1;

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: kotlinx.coroutines.debug.internal.StackTraceFrame $bottom> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.RestrictedSuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 r0, $r5;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl $r3;
        java.lang.Object $r1;
        kotlinx.coroutines.debug.internal.StackTraceFrame $r4;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r5 = new kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1;

        $r3 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl this$0>;

        $r4 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: kotlinx.coroutines.debug.internal.StackTraceFrame $bottom>;

        specialinvoke $r5.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: void <init>(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl,kotlinx.coroutines.debug.internal.StackTraceFrame,kotlin.coroutines.Continuation)>($r3, $r4, $r2);

        $r5.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: java.lang.Object L$0> = $r1;

        $r2 = (kotlin.coroutines.Continuation) $r5;

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 r0;
        java.lang.Object $r1, $r2;
        kotlin.sequences.SequenceScope $r3;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlin.sequences.SequenceScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: java.lang.Object invoke(kotlin.sequences.SequenceScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlin.sequences.SequenceScope, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 r0;
        java.lang.Object $r4;
        kotlin.sequences.SequenceScope $r1;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1;

        $r1 := @parameter0: kotlin.sequences.SequenceScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        r0 = (kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        java.lang.IllegalStateException $r4;
        kotlin.coroutines.Continuation $r8;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 r0;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r7;
        kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl $r1;
        kotlinx.coroutines.debug.internal.StackTraceFrame $r6;
        kotlin.Unit r9;
        int i0;
        java.lang.Object $r2, $r3;
        kotlin.sequences.SequenceScope $r5;

        r0 := @this: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: int label>;

        lookupswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r4;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        goto label4;

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r2 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: java.lang.Object L$0>;

        $r5 = (kotlin.sequences.SequenceScope) $r2;

        $r1 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl this$0>;

        $r6 = r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: kotlinx.coroutines.debug.internal.StackTraceFrame $bottom>;

        $r7 = virtualinvoke $r6.<kotlinx.coroutines.debug.internal.StackTraceFrame: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()>();

        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1: int label> = 1;

        $r2 = staticinvoke <kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl: java.lang.Object access$yieldFrames(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl,kotlin.sequences.SequenceScope,kotlin.coroutines.jvm.internal.CoroutineStackFrame,kotlin.coroutines.Continuation)>($r1, $r5, $r7, $r8);

        if $r2 != $r3 goto label4;

        return $r3;

     label4:
        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r9;
    }
}
