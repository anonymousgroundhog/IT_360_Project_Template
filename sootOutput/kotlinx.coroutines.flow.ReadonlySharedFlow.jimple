final class kotlinx.coroutines.flow.ReadonlySharedFlow extends java.lang.Object implements kotlinx.coroutines.flow.SharedFlow, kotlinx.coroutines.flow.CancellableFlow, kotlinx.coroutines.flow.internal.FusibleFlow
{
    private final kotlinx.coroutines.flow.SharedFlow $$delegate_0;
    private final kotlinx.coroutines.Job job;

    public void <init>(kotlinx.coroutines.flow.SharedFlow, kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.flow.SharedFlow $r1;
        kotlinx.coroutines.flow.ReadonlySharedFlow r0;
        kotlinx.coroutines.Job $r2;

        r0 := @this: kotlinx.coroutines.flow.ReadonlySharedFlow;

        $r1 := @parameter0: kotlinx.coroutines.flow.SharedFlow;

        $r2 := @parameter1: kotlinx.coroutines.Job;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.flow.ReadonlySharedFlow: kotlinx.coroutines.Job job> = $r2;

        r0.<kotlinx.coroutines.flow.ReadonlySharedFlow: kotlinx.coroutines.flow.SharedFlow $$delegate_0> = $r1;

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.SharedFlow $r4;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.flow.FlowCollector $r1;
        java.lang.Object $r3;
        kotlinx.coroutines.flow.ReadonlySharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.ReadonlySharedFlow;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = r0.<kotlinx.coroutines.flow.ReadonlySharedFlow: kotlinx.coroutines.flow.SharedFlow $$delegate_0>;

        $r3 = interfaceinvoke $r4.<kotlinx.coroutines.flow.SharedFlow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r1, $r2);

        return $r3;
    }

    public kotlinx.coroutines.flow.Flow fuse(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow)
    {
        kotlinx.coroutines.flow.Flow $r3;
        kotlinx.coroutines.flow.SharedFlow $r4;
        int $i0;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.flow.ReadonlySharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.ReadonlySharedFlow;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferOverflow;

        $r4 = (kotlinx.coroutines.flow.SharedFlow) r0;

        $r3 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.flow.Flow fuseSharedFlow(kotlinx.coroutines.flow.SharedFlow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow)>($r4, $r1, $i0, $r2);

        return $r3;
    }

    public java.util.List getReplayCache()
    {
        kotlinx.coroutines.flow.SharedFlow $r2;
        java.util.List $r1;
        kotlinx.coroutines.flow.ReadonlySharedFlow r0;

        r0 := @this: kotlinx.coroutines.flow.ReadonlySharedFlow;

        $r2 = r0.<kotlinx.coroutines.flow.ReadonlySharedFlow: kotlinx.coroutines.flow.SharedFlow $$delegate_0>;

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.flow.SharedFlow: java.util.List getReplayCache()>();

        return $r1;
    }
}
