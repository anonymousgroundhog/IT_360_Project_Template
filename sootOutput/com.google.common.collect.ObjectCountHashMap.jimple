class com.google.common.collect.ObjectCountHashMap extends java.lang.Object
{
    static final float DEFAULT_LOAD_FACTOR;
    static final int DEFAULT_SIZE;
    private static final long HASH_MASK;
    private static final int MAXIMUM_CAPACITY;
    private static final long NEXT_MASK;
    static final int UNSET;
    transient long[] entries;
    transient java.lang.Object[] keys;
    private transient float loadFactor;
    transient int modCount;
    transient int size;
    private transient int[] table;
    private transient int threshold;
    transient int[] values;

    void <init>()
    {
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: void init(int,float)>(3, 1.0F);

        return;
    }

    void <init>(int)
    {
        int $i0;
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: void <init>(int,float)>($i0, 1.0F);

        return;
    }

    void <init>(int, float)
    {
        int $i0;
        float $f0;
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: void init(int,float)>($i0, $f0);

        return;
    }

    void <init>(com.google.common.collect.ObjectCountHashMap)
    {
        com.google.common.collect.ObjectCountHashMap r0, r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        r1 := @parameter0: com.google.common.collect.ObjectCountHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<com.google.common.collect.ObjectCountHashMap: int size()>();

        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: void init(int,float)>($i0, 1.0F);

        $i0 = virtualinvoke r1.<com.google.common.collect.ObjectCountHashMap: int firstIndex()>();

     label1:
        if $i0 == -1 goto label2;

        $r2 = virtualinvoke r1.<com.google.common.collect.ObjectCountHashMap: java.lang.Object getKey(int)>($i0);

        $i1 = virtualinvoke r1.<com.google.common.collect.ObjectCountHashMap: int getValue(int)>($i0);

        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: int put(java.lang.Object,int)>($r2, $i1);

        $i0 = virtualinvoke r1.<com.google.common.collect.ObjectCountHashMap: int nextIndex(int)>($i0);

        goto label1;

     label2:
        return;
    }

    static com.google.common.collect.ObjectCountHashMap create()
    {
        com.google.common.collect.ObjectCountHashMap $r0;

        $r0 = new com.google.common.collect.ObjectCountHashMap;

        specialinvoke $r0.<com.google.common.collect.ObjectCountHashMap: void <init>()>();

        return $r0;
    }

    static com.google.common.collect.ObjectCountHashMap createWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.ObjectCountHashMap $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.collect.ObjectCountHashMap;

        specialinvoke $r0.<com.google.common.collect.ObjectCountHashMap: void <init>(int)>($i0);

        return $r0;
    }

    private static int getHash(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $l0 = $l0 >>> 32;

        $i1 = (int) $l0;

        return $i1;
    }

    private static int getNext(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        return $i1;
    }

    private int hashTableMask()
    {
        int $i0;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $r1 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        return $i0;
    }

    private static long[] newEntries(int)
    {
        int $i0;
        long[] r0;

        $i0 := @parameter0: int;

        r0 = newarray (long)[$i0];

        staticinvoke <java.util.Arrays: void fill(long[],long)>(r0, -1L);

        return r0;
    }

    private static int[] newTable(int)
    {
        int $i0;
        int[] r0;

        $i0 := @parameter0: int;

        r0 = newarray (int)[$i0];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r0, -1);

        return r0;
    }

    private int remove(java.lang.Object, int)
    {
        java.lang.Object[] $r4;
        long $l1, $l6;
        long[] $r3, $r6;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] r2;
        int $i0, $i2, i3, i4, $i5;
        java.lang.Object $r1, $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i2 = specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: int hashTableMask()>();

        i3 = $i2 & $i0;

        r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        $i2 = r2[i3];

        if $i2 != -1 goto label1;

        return 0;

     label1:
        i4 = -1;

     label2:
        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $l1 = $r3[$i2];

        $i5 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getHash(long)>($l1);

        if $i5 != $i0 goto label5;

        $r4 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $r5 = $r4[$i2];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r5);

        if $z0 == 0 goto label5;

        r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $i0 = r2[$i2];

        if i4 != -1 goto label3;

        r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $l1 = $r3[$i2];

        i4 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getNext(long)>($l1);

        r2[i3] = i4;

        goto label4;

     label3:
        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $l6 = $r6[i4];

        $r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $l1 = $r6[$i2];

        i3 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getNext(long)>($l1);

        $l1 = staticinvoke <com.google.common.collect.ObjectCountHashMap: long swapNext(long,int)>($l6, i3);

        $r3[i4] = $l1;

     label4:
        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: void moveLastEntry(int)>($i2);

        $i2 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        $i2 = $i2 + -1;

        r0.<com.google.common.collect.ObjectCountHashMap: int size> = $i2;

        $i2 = r0.<com.google.common.collect.ObjectCountHashMap: int modCount>;

        $i2 = $i2 + 1;

        r0.<com.google.common.collect.ObjectCountHashMap: int modCount> = $i2;

        return $i0;

     label5:
        i4 = $i2;

        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $l1 = $r3[$i2];

        $i5 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getNext(long)>($l1);

        $i2 = $i5;

        if $i5 != -1 goto label2;

        return 0;
    }

    private void resizeMeMaybe(int)
    {
        long[] r1;
        com.google.common.collect.ObjectCountHashMap r0;
        int $i0, i1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        r1 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        i1 = lengthof r1;

        if $i0 <= i1 goto label2;

        $i0 = i1 >>> 1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0);

        $i0 = $i0 + i1;

        if $i0 >= 0 goto label1;

        $i0 = 2147483647;

     label1:
        if $i0 == i1 goto label2;

        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: void resizeEntries(int)>($i0);

     label2:
        return;
    }

    private void resizeTable(int)
    {
        long l5, l7;
        long[] r1;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] r2;
        int $i0, i1, i2, i3, i4, $i6;
        float f0, f1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        i3 = lengthof r2;

        if i3 < 1073741824 goto label1;

        r0.<com.google.common.collect.ObjectCountHashMap: int threshold> = 2147483647;

        return;

     label1:
        f0 = (float) $i0;

        f1 = r0.<com.google.common.collect.ObjectCountHashMap: float loadFactor>;

        f0 = f0 * f1;

        i3 = (int) f0;

        i3 = i3 + 1;

        r2 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int[] newTable(int)>($i0);

        r1 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $i0 = lengthof r2;

        $i0 = $i0 + -1;

        i4 = 0;

     label2:
        i1 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        if i4 >= i1 goto label3;

        l5 = r1[i4];

        $i6 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getHash(long)>(l5);

        i1 = $i6 & $i0;

        i2 = r2[i1];

        r2[i1] = i4;

        l5 = (long) $i6;

        l5 = l5 << 32;

        l7 = (long) i2;

        l7 = l7 & 4294967295L;

        l5 = l7 | l5;

        r1[i4] = l5;

        i4 = i4 + 1;

        goto label2;

     label3:
        r0.<com.google.common.collect.ObjectCountHashMap: int threshold> = i3;

        r0.<com.google.common.collect.ObjectCountHashMap: int[] table> = r2;

        return;
    }

    private static long swapNext(long, int)
    {
        int $i1;
        long $l0, $l2;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $l0 = -4294967296L & $l0;

        $l2 = (long) $i1;

        $l2 = 4294967295L & $l2;

        $l0 = $l0 | $l2;

        return $l0;
    }

    public void clear()
    {
        java.lang.Object[] $r1;
        long[] $r3;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] $r2;
        int $i0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 = r0.<com.google.common.collect.ObjectCountHashMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.ObjectCountHashMap: int modCount> = $i0;

        $r1 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $i0 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r1, 0, $i0, null);

        $r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $i0 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r2, 0, $i0, 0);

        $r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r2, -1);

        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r3, -1L);

        r0.<com.google.common.collect.ObjectCountHashMap: int size> = 0;

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: int indexOf(java.lang.Object)>($r1);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    void ensureCapacity(int)
    {
        long[] r1;
        com.google.common.collect.ObjectCountHashMap r0;
        int $i0, i1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        r1 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        i1 = lengthof r1;

        if $i0 <= i1 goto label1;

        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: void resizeEntries(int)>($i0);

     label1:
        i1 = r0.<com.google.common.collect.ObjectCountHashMap: int threshold>;

        if $i0 < i1 goto label2;

        $i0 = $i0 + -1;

        $i0 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        $i0 = $i0 << 1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(2, $i0);

        specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: void resizeTable(int)>($i0);

     label2:
        return;
    }

    int firstIndex()
    {
        int $i0;
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        if $i0 != 0 goto label1;

        return -1;

     label1:
        return 0;
    }

    public int get(java.lang.Object)
    {
        com.google.common.collect.ObjectCountHashMap r0;
        int[] $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: int indexOf(java.lang.Object)>($r1);

        if $i0 != -1 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $i0 = $r2[$i0];

        return $i0;
    }

    com.google.common.collect.Multiset$Entry getEntry(int)
    {
        com.google.common.collect.ObjectCountHashMap r0;
        int $i0, $i1;
        com.google.common.collect.ObjectCountHashMap$MapEntry $r1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i1);

        $r1 = new com.google.common.collect.ObjectCountHashMap$MapEntry;

        specialinvoke $r1.<com.google.common.collect.ObjectCountHashMap$MapEntry: void <init>(com.google.common.collect.ObjectCountHashMap,int)>(r0, $i0);

        return $r1;
    }

    java.lang.Object getKey(int)
    {
        java.lang.Object[] $r1;
        com.google.common.collect.ObjectCountHashMap r0;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i1);

        $r1 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $r2 = $r1[$i0];

        return $r2;
    }

    int getValue(int)
    {
        com.google.common.collect.ObjectCountHashMap r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i1);

        $r1 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $i0 = $r1[$i0];

        return $i0;
    }

    int indexOf(java.lang.Object)
    {
        java.lang.Object[] $r4;
        long l0;
        long[] $r3;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] r2;
        int $i1, $i2, $i3;
        java.lang.Object $r1, $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $r1 := @parameter0: java.lang.Object;

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r1);

        r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        $i2 = specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: int hashTableMask()>();

        $i2 = $i2 & $i1;

        $i2 = r2[$i2];

     label1:
        if $i2 == -1 goto label3;

        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        l0 = $r3[$i2];

        $i3 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getHash(long)>(l0);

        if $i3 != $i1 goto label2;

        $r4 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $r5 = $r4[$i2];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r5);

        if $z0 == 0 goto label2;

        return $i2;

     label2:
        $i2 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getNext(long)>(l0);

        goto label1;

     label3:
        return -1;
    }

    void init(int, float)
    {
        java.lang.Object[] $r2;
        long[] $r3;
        com.google.common.collect.ObjectCountHashMap r0;
        byte $b1;
        int[] $r1;
        int $i0, $i2;
        float $f0, $f1;
        boolean z0, $z1;
        double $d0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        z0 = 0;

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Initial capacity must be non-negative");

        $b1 = $f0 cmpl 0.0F;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label3;

        z0 = 1;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Illegal load factor");

        $d0 = (double) $f0;

        $i2 = staticinvoke <com.google.common.collect.Hashing: int closedTableSize(int,double)>($i0, $d0);

        $r1 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int[] newTable(int)>($i2);

        r0.<com.google.common.collect.ObjectCountHashMap: int[] table> = $r1;

        r0.<com.google.common.collect.ObjectCountHashMap: float loadFactor> = $f0;

        $r2 = newarray (java.lang.Object)[$i0];

        r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys> = $r2;

        $r1 = newarray (int)[$i0];

        r0.<com.google.common.collect.ObjectCountHashMap: int[] values> = $r1;

        $r3 = staticinvoke <com.google.common.collect.ObjectCountHashMap: long[] newEntries(int)>($i0);

        r0.<com.google.common.collect.ObjectCountHashMap: long[] entries> = $r3;

        $f1 = (float) $i2;

        $f0 = $f1 * $f0;

        $i0 = (int) $f0;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0);

        r0.<com.google.common.collect.ObjectCountHashMap: int threshold> = $i0;

        return;
    }

    void insertEntry(int, java.lang.Object, int, int)
    {
        java.lang.Object[] $r3;
        long $l3;
        long[] $r2;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] $r4;
        int $i0, $i1, $i2;
        java.lang.Object r1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $l3 = (long) $i2;

        $l3 = $l3 << 32;

        $l3 = $l3 | 4294967295L;

        $r2[$i0] = $l3;

        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $r3[$i0] = r1;

        $r4 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $r4[$i0] = $i1;

        return;
    }

    void moveLastEntry(int)
    {
        java.lang.Object[] r1, $r2;
        long l4;
        long[] r6;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] r4, $r5;
        int $i0, i1, $i2, $i3, $i5;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $i2 = virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: int size()>();

        $i2 = $i2 + -1;

        if $i0 >= $i2 goto label3;

        r1 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $r2 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $r3 = $r2[$i2];

        r1[$i0] = $r3;

        r4 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $r5 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $i3 = $r5[$i2];

        r4[$i0] = $i3;

        r1 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        r1[$i2] = null;

        r4 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        r4[$i2] = 0;

        r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        l4 = r6[$i2];

        r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        r6[$i0] = l4;

        r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        r6[$i2] = -1L;

        $i3 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getHash(long)>(l4);

        i1 = specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: int hashTableMask()>();

        i1 = $i3 & i1;

        r4 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        $i3 = r4[i1];

        if $i3 != $i2 goto label1;

        r4 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        r4[i1] = $i0;

        goto label2;

     label1:
        i1 = $i3;

        r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        l4 = r6[$i3];

        $i5 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getNext(long)>(l4);

        $i3 = $i5;

        if $i5 != $i2 goto label1;

        r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        l4 = staticinvoke <com.google.common.collect.ObjectCountHashMap: long swapNext(long,int)>(l4, $i0);

        r6[i1] = l4;

     label2:
        return;

     label3:
        r1 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        r1[$i0] = null;

        r4 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        r4[$i0] = 0;

        r6 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        r6[$i0] = -1L;

        return;
    }

    int nextIndex(int)
    {
        com.google.common.collect.ObjectCountHashMap r0;
        int $i0, $i1, $i2;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $i2 = $i0 + 1;

        $i1 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        if $i2 >= $i1 goto label1;

        $i0 = $i0 + 1;

        return $i0;

     label1:
        return -1;
    }

    int nextIndexAfterRemove(int, int)
    {
        int $i0, $i1;
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 + -1;

        return $i0;
    }

    public int put(java.lang.Object, int)
    {
        java.lang.IllegalStateException $r7;
        java.lang.Object[] r2;
        long l2;
        long[] r4;
        int[] r3, r5;
        int $i0, i1, $i3, i4, i5, $i6;
        boolean $z0;
        com.google.common.collect.ObjectCountHashMap r0;
        java.lang.Object r1, $r6;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkPositive(int,java.lang.String)>($i0, "count");

        r4 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        r2 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        r3 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $i3 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>(r1);

        i1 = specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: int hashTableMask()>();

        i4 = i1 & $i3;

        i1 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        r5 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        i5 = r5[i4];

        if i5 != -1 goto label1;

        r3 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        r3[i4] = i1;

        goto label3;

     label1:
        i4 = i5;

        l2 = r4[i5];

        $i6 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getHash(long)>(l2);

        if $i6 != $i3 goto label2;

        $r6 = r2[i5];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r1, $r6);

        if $z0 == 0 goto label2;

        i1 = r3[i5];

        r3[i5] = $i0;

        return i1;

     label2:
        $i6 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getNext(long)>(l2);

        i5 = $i6;

        if $i6 != -1 goto label1;

        l2 = staticinvoke <com.google.common.collect.ObjectCountHashMap: long swapNext(long,int)>(l2, i1);

        r4[i4] = l2;

     label3:
        if i1 == 2147483647 goto label5;

        i5 = i1 + 1;

        specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: void resizeMeMaybe(int)>(i5);

        virtualinvoke r0.<com.google.common.collect.ObjectCountHashMap: void insertEntry(int,java.lang.Object,int,int)>(i1, r1, $i0, $i3);

        r0.<com.google.common.collect.ObjectCountHashMap: int size> = i5;

        $i0 = r0.<com.google.common.collect.ObjectCountHashMap: int threshold>;

        if i1 < $i0 goto label4;

        r3 = r0.<com.google.common.collect.ObjectCountHashMap: int[] table>;

        $i0 = lengthof r3;

        $i0 = $i0 * 2;

        specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: void resizeTable(int)>($i0);

     label4:
        $i0 = r0.<com.google.common.collect.ObjectCountHashMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.collect.ObjectCountHashMap: int modCount> = $i0;

        return 0;

     label5:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot contain more than Integer.MAX_VALUE elements!");

        throw $r7;
    }

    public int remove(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <com.google.common.collect.Hashing: int smearedHash(java.lang.Object)>($r1);

        $i0 = specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: int remove(java.lang.Object,int)>($r1, $i0);

        return $i0;
    }

    int removeEntry(int)
    {
        java.lang.Object[] $r1;
        long[] $r3;
        com.google.common.collect.ObjectCountHashMap r0;
        int $i0;
        long $l1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        $r2 = $r1[$i0];

        $r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        $l1 = $r3[$i0];

        $i0 = staticinvoke <com.google.common.collect.ObjectCountHashMap: int getHash(long)>($l1);

        $i0 = specialinvoke r0.<com.google.common.collect.ObjectCountHashMap: int remove(java.lang.Object,int)>($r2, $i0);

        return $i0;
    }

    void resizeEntries(int)
    {
        java.lang.Object[] r1;
        long[] r3;
        com.google.common.collect.ObjectCountHashMap r0;
        int[] r2;
        int $i0, i1;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        r1 = r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys>;

        r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);

        r0.<com.google.common.collect.ObjectCountHashMap: java.lang.Object[] keys> = r1;

        r2 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r2, $i0);

        r0.<com.google.common.collect.ObjectCountHashMap: int[] values> = r2;

        r3 = r0.<com.google.common.collect.ObjectCountHashMap: long[] entries>;

        i1 = lengthof r3;

        r3 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>(r3, $i0);

        if $i0 <= i1 goto label1;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>(r3, i1, $i0, -1L);

     label1:
        r0.<com.google.common.collect.ObjectCountHashMap: long[] entries> = r3;

        return;
    }

    void setValue(int, int)
    {
        com.google.common.collect.ObjectCountHashMap r0;
        int[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i2);

        $r1 = r0.<com.google.common.collect.ObjectCountHashMap: int[] values>;

        $r1[$i0] = $i1;

        return;
    }

    int size()
    {
        int i0;
        com.google.common.collect.ObjectCountHashMap r0;

        r0 := @this: com.google.common.collect.ObjectCountHashMap;

        i0 = r0.<com.google.common.collect.ObjectCountHashMap: int size>;

        return i0;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.ObjectCountHashMap: int UNSET> = -1;

        <com.google.common.collect.ObjectCountHashMap: long NEXT_MASK> = 4294967295L;

        <com.google.common.collect.ObjectCountHashMap: int MAXIMUM_CAPACITY> = 1073741824;

        <com.google.common.collect.ObjectCountHashMap: long HASH_MASK> = -4294967296L;

        <com.google.common.collect.ObjectCountHashMap: int DEFAULT_SIZE> = 3;

        <com.google.common.collect.ObjectCountHashMap: float DEFAULT_LOAD_FACTOR> = 1.0F;

        return;
    }
}
