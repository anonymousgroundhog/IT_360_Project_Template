public final class kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1 extends java.lang.Object implements kotlinx.coroutines.flow.Flow
{
    final kotlin.jvm.functions.Function2 $predicate$inlined;
    final kotlinx.coroutines.flow.Flow $this_takeWhile$inlined;

    public void <init>(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.flow.Flow $r1;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1 r0;
        kotlin.jvm.functions.Function2 $r2;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1: kotlinx.coroutines.flow.Flow $this_takeWhile$inlined> = $r1;

        r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1: kotlin.jvm.functions.Function2 $predicate$inlined> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException $r8;
        kotlin.coroutines.Continuation $r4;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1 $r5;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1 r0;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.flow.Flow $r10;
        kotlin.Unit r12;
        kotlinx.coroutines.flow.FlowCollector $r3;
        int $i0;
        java.lang.Object $r6, $r7;
        kotlinx.coroutines.flow.internal.AbortFlowException $r9, $r11;
        kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1 r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1;

        $r3 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r4 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r4 instanceof kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1;

        if $z0 == 0 goto label01;

        $r5 = (kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1) $r4;

        $i0 = $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: int label>;

        $i0 = $i0 - -2147483648;

        $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: int label> = $i0;

        goto label02;

     label01:
        $r5 = new kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1;

        specialinvoke $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: void <init>(kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1,kotlin.coroutines.Continuation)>(r0, $r4);

     label02:
        $r6 = $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: java.lang.Object result>;

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label08;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r8;

     label04:
        $r7 = $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: java.lang.Object L$0>;

        r1 = (kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1) $r7;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

     label06:
        goto label11;

     label07:
        $r9 := @caughtexception;

        goto label13;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

        $r4 = (kotlin.coroutines.Continuation) $r5;

        $r10 = r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1: kotlinx.coroutines.flow.Flow $this_takeWhile$inlined>;

        r1 = new kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1;

        $r2 = r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1: kotlin.jvm.functions.Function2 $predicate$inlined>;

        specialinvoke r1.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda$6$$inlined$collectWhile$1: void <init>(kotlin.jvm.functions.Function2,kotlinx.coroutines.flow.FlowCollector)>($r2, $r3);

        $r3 = (kotlinx.coroutines.flow.FlowCollector) r1;

        $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: java.lang.Object L$0> = r1;

        $r5.<kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1: int label> = 1;

     label09:
        $r6 = interfaceinvoke $r10.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r3, $r5);

     label10:
        if $r6 != $r7 goto label11;

        return $r7;

     label11:
        goto label14;

     label12:
        $r11 := @caughtexception;

        $r9 = $r11;

     label13:
        $r3 = (kotlinx.coroutines.flow.FlowCollector) r1;

        staticinvoke <kotlinx.coroutines.flow.internal.FlowExceptions_commonKt: void checkOwnership(kotlinx.coroutines.flow.internal.AbortFlowException,kotlinx.coroutines.flow.FlowCollector)>($r9, $r3);

     label14:
        r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r12;

        catch kotlinx.coroutines.flow.internal.AbortFlowException from label05 to label06 with label07;
        catch kotlinx.coroutines.flow.internal.AbortFlowException from label09 to label10 with label12;
    }
}
