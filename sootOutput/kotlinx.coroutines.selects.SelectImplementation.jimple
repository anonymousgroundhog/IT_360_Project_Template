public class kotlinx.coroutines.selects.SelectImplementation extends kotlinx.coroutines.CancelHandler implements kotlinx.coroutines.selects.SelectBuilder, kotlinx.coroutines.selects.SelectInstanceInternal
{
    private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU;
    private java.util.List clauses;
    private final kotlin.coroutines.CoroutineContext context;
    private java.lang.Object disposableHandleOrSegment;
    private int indexInSegment;
    private java.lang.Object internalResult;
    private volatile java.lang.Object state;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/selects/SelectImplementation;", class "Ljava/lang/Object;", "state");

        <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU> = $r0;

        return;
    }

    public void <init>(kotlin.coroutines.CoroutineContext)
    {
        kotlinx.coroutines.internal.Symbol $r2;
        java.util.List $r3;
        kotlinx.coroutines.selects.SelectImplementation r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.util.ArrayList $r4;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        specialinvoke r0.<kotlinx.coroutines.CancelHandler: void <init>()>();

        r0.<kotlinx.coroutines.selects.SelectImplementation: kotlin.coroutines.CoroutineContext context> = $r1;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_REG$p()>();

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object state> = $r2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(2);

        $r3 = (java.util.List) $r4;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses> = $r3;

        r0.<kotlinx.coroutines.selects.SelectImplementation: int indexInSegment> = -1;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getNO_RESULT$p()>();

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult> = $r2;

        return;
    }

    public static final java.lang.Object access$complete(kotlinx.coroutines.selects.SelectImplementation, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation $r0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object complete(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final java.lang.Object access$doSelectSuspend(kotlinx.coroutines.selects.SelectImplementation, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation $r0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object doSelectSuspend(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public static final boolean access$getInRegistrationPhase(kotlinx.coroutines.selects.SelectImplementation)
    {
        kotlinx.coroutines.selects.SelectImplementation $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: boolean getInRegistrationPhase()>();

        return $z0;
    }

    public static final java.lang.Object access$getInternalResult$p(kotlinx.coroutines.selects.SelectImplementation)
    {
        java.lang.Object r1;
        kotlinx.coroutines.selects.SelectImplementation $r0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        r1 = $r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult>;

        return r1;
    }

    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getState$FU$p()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;

        r0 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        return r0;
    }

    public static final boolean access$isCancelled(kotlinx.coroutines.selects.SelectImplementation)
    {
        kotlinx.coroutines.selects.SelectImplementation $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: boolean isCancelled()>();

        return $z0;
    }

    public static final java.lang.Object access$processResultAndInvokeBlockRecoveringException(kotlinx.coroutines.selects.SelectImplementation, kotlinx.coroutines.selects.SelectImplementation$ClauseData, java.lang.Object, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation $r0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter1: kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object processResultAndInvokeBlockRecoveringException(kotlinx.coroutines.selects.SelectImplementation$ClauseData,java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2, $r3);

        return $r2;
    }

    public static final void access$reregisterClause(kotlinx.coroutines.selects.SelectImplementation, java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.selects.SelectImplementation $r0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: void reregisterClause(java.lang.Object)>($r1);

        return;
    }

    public static final java.lang.Object access$waitUntilSelected(kotlinx.coroutines.selects.SelectImplementation, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation $r0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object waitUntilSelected(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    private final void checkClauseObject(java.lang.Object)
    {
        java.lang.IllegalStateException $r10;
        java.util.Iterator $r6;
        java.util.Collection $r5;
        java.lang.Iterable $r4;
        java.util.List r2;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData r7;
        java.lang.Object $r1, $r3;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        r2 = r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.lang.Iterable) r2;

        $z0 = $r4 instanceof java.util.Collection;

        $z1 = 1;

        if $z0 == 0 goto label1;

        $r5 = (java.util.Collection) $r4;

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label5;

     label1:
        $r6 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kotlinx.coroutines.selects.SelectImplementation$ClauseData) $r3;

        $r3 = r7.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object clauseObject>;

        if $r3 != $r1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label2;

        $z1 = 0;

        goto label5;

     label5:
        if $z1 == 0 goto label6;

        return;

     label6:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot use select clauses on the same object: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r10;
    }

    private final void cleanup(kotlinx.coroutines.selects.SelectImplementation$ClauseData)
    {
        kotlinx.coroutines.internal.Symbol $r9;
        java.util.Iterator $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.AssertionError $r4;
        java.lang.Iterable $r6;
        java.util.List $r5;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r1, r8;
        java.lang.Object $r3;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $r2 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r5 = r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses>;

        if $r5 != null goto label3;

        return;

     label3:
        $r6 = (java.lang.Iterable) $r5;

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kotlinx.coroutines.selects.SelectImplementation$ClauseData) $r3;

        if r8 == $r1 goto label5;

        virtualinvoke r8.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: void dispose()>();

     label5:
        goto label4;

     label6:
        $r2 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r9 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_COMPLETED$p()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r9);

        $r9 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getNO_RESULT$p()>();

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult> = $r9;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses> = null;

        return;
    }

    private final java.lang.Object complete(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r5;
        java.lang.Object $r4;
        java.lang.AssertionError $r2;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label2;

        $z0 = specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: boolean isSelected()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r3 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type kotlinx.coroutines.selects.SelectImplementation.ClauseData<R of kotlinx.coroutines.selects.SelectImplementation>");

        $r5 = (kotlinx.coroutines.selects.SelectImplementation$ClauseData) $r4;

        $r4 = r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult>;

        specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: void cleanup(kotlinx.coroutines.selects.SelectImplementation$ClauseData)>($r5);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke $r5.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object processResult(java.lang.Object)>($r4);

        $r4 = virtualinvoke $r5.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object invokeBlock(java.lang.Object,kotlin.coroutines.Continuation)>($r4, $r1);

        return $r4;

     label3:
        $r4 = specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object processResultAndInvokeBlockRecoveringException(kotlinx.coroutines.selects.SelectImplementation$ClauseData,java.lang.Object,kotlin.coroutines.Continuation)>($r5, $r4, $r1);

        return $r4;
    }

    static java.lang.Object doSelect$suspendImpl(kotlinx.coroutines.selects.SelectImplementation, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation $r0;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: boolean isSelected()>();

        if $z0 == 0 goto label1;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object complete(kotlin.coroutines.Continuation)>($r1);

        return $r2;

     label1:
        $r2 = specialinvoke $r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object doSelectSuspend(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    private final java.lang.Object doSelectSuspend(kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException $r6;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1 $r2, $r3;
        int $i0;
        java.lang.Object $r4, $r5, r7;
        kotlinx.coroutines.selects.SelectImplementation r0, r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1) $r1;

        $i0 = $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label1;

        $i0 = $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: int label>;

        $i0 = $i0 - -2147483648;

        $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: int label> = $i0;

        goto label2;

     label1:
        $r2 = new kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1;

        specialinvoke $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: void <init>(kotlinx.coroutines.selects.SelectImplementation,kotlin.coroutines.Continuation)>(r0, $r1);

     label2:
        $r3 = $r2;

        $r4 = $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: java.lang.Object result>;

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label6;
            case 1: goto label5;
            case 2: goto label4;
            default: goto label3;
        };

     label3:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r6;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        return $r4;

     label5:
        r7 = $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: java.lang.Object L$0>;

        r8 = (kotlinx.coroutines.selects.SelectImplementation) r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        goto label7;

     label6:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        r8 = r0;

        $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: java.lang.Object L$0> = r0;

        $r2.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: int label> = 1;

        $r4 = specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object waitUntilSelected(kotlin.coroutines.Continuation)>($r2);

        if $r4 != $r5 goto label7;

        return $r5;

     label7:
        $r3.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: java.lang.Object L$0> = null;

        $r3.<kotlinx.coroutines.selects.SelectImplementation$doSelectSuspend$1: int label> = 2;

        $r4 = specialinvoke r8.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object complete(kotlin.coroutines.Continuation)>($r3);

        if $r4 != $r5 goto label8;

        return $r5;

     label8:
        return $r4;
    }

    private final kotlinx.coroutines.selects.SelectImplementation$ClauseData findClause(java.lang.Object)
    {
        java.lang.IllegalStateException $r9;
        java.util.Iterator $r5;
        java.lang.Iterable $r4;
        java.util.List r2;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData r7;
        java.lang.Object $r1, $r3, $r6, $r8;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        r2 = r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses>;

        $r3 = null;

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = (java.lang.Iterable) r2;

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kotlinx.coroutines.selects.SelectImplementation$ClauseData) $r6;

        $r8 = r7.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object clauseObject>;

        if $r8 != $r1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label2;

        $r3 = $r6;

     label5:
        r7 = (kotlinx.coroutines.selects.SelectImplementation$ClauseData) $r3;

        if r7 == null goto label6;

        return r7;

     label6:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Clause with object ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not found");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r9;
    }

    private final boolean getInRegistrationPhase()
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        r1 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_REG$p()>();

        if $r2 == $r3 goto label2;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        return $z0;
    }

    private final boolean isCancelled()
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_CANCELLED$p()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean isSelected()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r1;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r2 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $z0 = $r1 instanceof kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        return $z0;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final java.lang.Object processResultAndInvokeBlockRecoveringException(kotlinx.coroutines.selects.SelectImplementation$ClauseData, java.lang.Object, kotlin.coroutines.Continuation)
    {
        java.lang.Throwable r9;
        java.lang.IllegalStateException r8;
        kotlin.coroutines.Continuation $r3;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r10;
        kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1 $r4, $r5;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData r1;
        int i0;
        java.lang.Object r2, $r6, $r7;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        r1 := @parameter0: kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = $r3 instanceof kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1;

        if $z0 == 0 goto label01;

        $r4 = (kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1) $r3;

        i0 = $r4.<kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1: int label>;

        i0 = i0 & -2147483648;

        if i0 == 0 goto label01;

        i0 = $r4.<kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1: int label>;

        i0 = i0 - -2147483648;

        $r4.<kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1: int label> = i0;

        goto label02;

     label01:
        $r4 = new kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1;

        specialinvoke $r4.<kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1: void <init>(kotlinx.coroutines.selects.SelectImplementation,kotlin.coroutines.Continuation)>(r0, $r3);

     label02:
        $r5 = $r4;

        $r6 = $r4.<kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1: java.lang.Object result>;

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        i0 = $r4.<kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1: int label>;

        lookupswitch(i0)
        {
            case 0: goto label07;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r8;

     label04:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

     label05:
        r2 = $r6;

        goto label10;

     label06:
        r9 := @caughtexception;

        goto label11;

     label07:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r6);

     label08:
        r2 = virtualinvoke r1.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object processResult(java.lang.Object)>(r2);

        $r4.<kotlinx.coroutines.selects.SelectImplementation$processResultAndInvokeBlockRecoveringException$1: int label> = 1;

        $r6 = virtualinvoke r1.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object invokeBlock(java.lang.Object,kotlin.coroutines.Continuation)>(r2, $r4);

     label09:
        r2 = $r6;

        if $r6 != $r7 goto label10;

        return $r7;

     label10:
        return r2;

     label11:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label13;

        $z0 = $r5 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label12;

        throw r9;

     label12:
        $r10 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r5;

        r9 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>(r9, $r10);

        throw r9;

     label13:
        throw r9;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
    }

    public static void register$default(kotlinx.coroutines.selects.SelectImplementation, kotlinx.coroutines.selects.SelectImplementation$ClauseData, boolean, int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r2;
        int $i0;
        java.lang.Object $r0;
        kotlinx.coroutines.selects.SelectImplementation $r1;
        boolean $z0;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectImplementation;

        $r2 := @parameter1: kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        if $r0 != null goto label2;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.selects.SelectImplementation: void register(kotlinx.coroutines.selects.SelectImplementation$ClauseData,boolean)>($r2, $z0);

        return;

     label2:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: register");

        throw $r3;
    }

    private final void reregisterClause(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.selects.SelectImplementation r0;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r2;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: kotlinx.coroutines.selects.SelectImplementation$ClauseData findClause(java.lang.Object)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2);

        $r2.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object disposableHandleOrSegment> = null;

        $r2.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: int indexInSegment> = -1;

        virtualinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: void register(kotlinx.coroutines.selects.SelectImplementation$ClauseData,boolean)>($r2, 1);

        return;
    }

    private final int trySelectInternal(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException r12;
        kotlinx.coroutines.selects.SelectInstance r6;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r5;
        java.lang.String $r14;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean z0;
        kotlinx.coroutines.internal.Symbol $r9;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r3;
        java.util.Collection $r11;
        kotlin.jvm.functions.Function1 $r7;
        java.util.List $r10;
        kotlinx.coroutines.CancellableContinuation r8;
        java.lang.Object $r1, $r2, $r4;
        java.lang.StringBuilder $r13;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

     label01:
        r3 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        z0 = $r4 instanceof kotlinx.coroutines.CancellableContinuation;

        if z0 == 0 goto label04;

        $r5 = specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: kotlinx.coroutines.selects.SelectImplementation$ClauseData findClause(java.lang.Object)>($r1);

        if $r5 != null goto label02;

        goto label01;

     label02:
        r6 = (kotlinx.coroutines.selects.SelectInstance) r0;

        $r7 = virtualinvoke $r5.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: kotlin.jvm.functions.Function1 createOnCancellationAction(kotlinx.coroutines.selects.SelectInstance,java.lang.Object)>(r6, $r2);

        r3 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r3, r0, $r4, $r5);

        if z0 == 0 goto label01;

        r8 = (kotlinx.coroutines.CancellableContinuation) $r4;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult> = $r2;

        z0 = staticinvoke <kotlinx.coroutines.selects.SelectKt: boolean access$tryResume(kotlinx.coroutines.CancellableContinuation,kotlin.jvm.functions.Function1)>(r8, $r7);

        if z0 == 0 goto label03;

        return 0;

     label03:
        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult> = null;

        return 2;

     label04:
        $r9 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_COMPLETED$p()>();

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r9);

        if z0 == 0 goto label05;

        z0 = 1;

        goto label06;

     label05:
        z0 = $r4 instanceof kotlinx.coroutines.selects.SelectImplementation$ClauseData;

     label06:
        if z0 == 0 goto label07;

        return 3;

     label07:
        $r9 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_CANCELLED$p()>();

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r9);

        if z0 == 0 goto label08;

        return 2;

     label08:
        $r9 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_REG$p()>();

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r9);

        if z0 == 0 goto label09;

        r3 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r1);

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r3, r0, $r4, $r10);

        if z0 == 0 goto label01;

        return 1;

     label09:
        z0 = $r4 instanceof java.util.List;

        if z0 == 0 goto label10;

        r3 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r11 = (java.util.Collection) $r4;

        $r10 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Object)>($r11, $r1);

        z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r3, r0, $r4, $r10);

        if z0 == 0 goto label01;

        return 1;

     label10:
        r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected state: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw r12;
    }

    private final void update$atomicfu(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3, $r4, $r5;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, $r4, $r5);

        if $z0 == 0 goto label1;

        return;
    }

    private final java.lang.Object waitUntilSelected(kotlin.coroutines.Continuation)
    {
        java.lang.IllegalStateException $r18;
        kotlin.coroutines.Continuation $r1, $r3;
        kotlinx.coroutines.CancellableContinuationImpl r2;
        java.lang.Iterable $r12;
        kotlinx.coroutines.selects.SelectInstance $r16;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r15;
        java.lang.String $r20;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r7;
        java.util.Iterator $r13;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5, $r8;
        kotlin.jvm.functions.Function1 $r10;
        kotlinx.coroutines.CancelHandlerBase $r9;
        java.util.List $r11;
        kotlin.Unit $r14;
        kotlinx.coroutines.CancellableContinuation r4;
        java.lang.Object $r6, $r17;
        java.lang.StringBuilder $r19;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        r2 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        specialinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r3, 1);

        virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r4 = (kotlinx.coroutines.CancellableContinuation) r2;

        $r5 = staticinvoke <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getState$FU$p()>();

     label01:
        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r7 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_REG$p()>();

        if $r6 != $r7 goto label03;

        $r8 = staticinvoke <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getState$FU$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r0, $r6, r4);

        if $z0 == 0 goto label02;

        $r9 = (kotlinx.coroutines.CancelHandlerBase) r0;

        $r10 = (kotlin.jvm.functions.Function1) $r9;

        interfaceinvoke r4.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r10);

        goto label08;

     label02:
        goto label06;

     label03:
        $z0 = $r6 instanceof java.util.List;

        if $z0 == 0 goto label07;

        $r8 = staticinvoke <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$getState$FU$p()>();

        $r7 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_REG$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r0, $r6, $r7);

        if $z0 == 0 goto label06;

        $r11 = (java.util.List) $r6;

        $r12 = (java.lang.Iterable) $r6;

        $r13 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r6 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <kotlinx.coroutines.selects.SelectImplementation: void access$reregisterClause(kotlinx.coroutines.selects.SelectImplementation,java.lang.Object)>(r0, $r6);

        goto label04;

     label05:
        goto label06;

     label06:
        goto label01;

     label07:
        $z0 = $r6 instanceof kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        if $z0 == 0 goto label11;

        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r15 = (kotlinx.coroutines.selects.SelectImplementation$ClauseData) $r6;

        $r16 = (kotlinx.coroutines.selects.SelectInstance) r0;

        $r6 = staticinvoke <kotlinx.coroutines.selects.SelectImplementation: java.lang.Object access$getInternalResult$p(kotlinx.coroutines.selects.SelectImplementation)>(r0);

        $r10 = virtualinvoke $r15.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: kotlin.jvm.functions.Function1 createOnCancellationAction(kotlinx.coroutines.selects.SelectInstance,java.lang.Object)>($r16, $r6);

        interfaceinvoke r4.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r14, $r10);

     label08:
        $r6 = virtualinvoke r2.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r17 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r17 goto label09;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label09:
        $r17 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r17 goto label10;

        return $r6;

     label10:
        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r14;

     label11:
        $r18 = new java.lang.IllegalStateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected state: ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r18;
    }

    public void disposeOnCompletion(kotlinx.coroutines.DisposableHandle)
    {
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.DisposableHandle;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object disposableHandleOrSegment> = $r1;

        return;
    }

    public java.lang.Object doSelect(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlinx.coroutines.selects.SelectImplementation: java.lang.Object doSelect$suspendImpl(kotlinx.coroutines.selects.SelectImplementation,kotlin.coroutines.Continuation)>(r0, $r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.selects.SelectImplementation r0;
        kotlin.coroutines.CoroutineContext r1;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        r1 = r0.<kotlinx.coroutines.selects.SelectImplementation: kotlin.coroutines.CoroutineContext context>;

        return r1;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        java.lang.Throwable $r2;
        kotlin.Unit r3;
        java.lang.Object $r1;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: void invoke(java.lang.Throwable)>($r2);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public void invoke(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        kotlinx.coroutines.internal.Symbol $r4;
        java.util.Iterator $r7;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r2;
        java.lang.Iterable r6;
        java.util.List r5;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r8;
        java.lang.Object $r3;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

     label1:
        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_COMPLETED$p()>();

        if $r3 != $r4 goto label2;

        return;

     label2:
        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_CANCELLED$p()>();

        $z0 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r0, $r3, $r4);

        if $z0 == 0 goto label1;

        r5 = r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses>;

        if r5 != null goto label3;

        return;

     label3:
        r6 = (java.lang.Iterable) r5;

        $r7 = interfaceinvoke r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (kotlinx.coroutines.selects.SelectImplementation$ClauseData) $r3;

        virtualinvoke $r8.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: void dispose()>();

        goto label4;

     label5:
        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getNO_RESULT$p()>();

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult> = $r4;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses> = null;

        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause0, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.internal.Symbol $r7;
        kotlin.jvm.functions.Function3 $r5, $r6, $r8;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.selects.SelectImplementation r0;
        kotlinx.coroutines.selects.SelectClause0 $r1;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause0;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = new kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        $r4 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause0: java.lang.Object getClauseObject()>();

        $r5 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause0: kotlin.jvm.functions.Function3 getRegFunc()>();

        $r6 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause0: kotlin.jvm.functions.Function3 getProcessResFunc()>();

        $r7 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol getPARAM_CLAUSE_0()>();

        $r8 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause0: kotlin.jvm.functions.Function3 getOnCancellationConstructor()>();

        specialinvoke $r3.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: void <init>(kotlinx.coroutines.selects.SelectImplementation,java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function3)>(r0, $r4, $r5, $r6, $r7, $r2, $r8);

        staticinvoke <kotlinx.coroutines.selects.SelectImplementation: void register$default(kotlinx.coroutines.selects.SelectImplementation,kotlinx.coroutines.selects.SelectImplementation$ClauseData,boolean,int,java.lang.Object)>(r0, $r3, 0, 1, null);

        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause1, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function3 $r5, $r6, $r7;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.selects.SelectImplementation r0;
        kotlinx.coroutines.selects.SelectClause1 $r1;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause1;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        $r3 = new kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        $r4 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause1: java.lang.Object getClauseObject()>();

        $r5 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause1: kotlin.jvm.functions.Function3 getRegFunc()>();

        $r6 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause1: kotlin.jvm.functions.Function3 getProcessResFunc()>();

        $r7 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause1: kotlin.jvm.functions.Function3 getOnCancellationConstructor()>();

        specialinvoke $r3.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: void <init>(kotlinx.coroutines.selects.SelectImplementation,java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function3)>(r0, $r4, $r5, $r6, null, $r2, $r7);

        staticinvoke <kotlinx.coroutines.selects.SelectImplementation: void register$default(kotlinx.coroutines.selects.SelectImplementation,kotlinx.coroutines.selects.SelectImplementation$ClauseData,boolean,int,java.lang.Object)>(r0, $r3, 0, 1, null);

        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause2, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.jvm.functions.Function3 $r6, $r7, $r8;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r4;
        kotlinx.coroutines.selects.SelectClause2 $r1;
        java.lang.Object $r2, $r5;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause2;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function2;

        $r4 = new kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        $r5 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause2: java.lang.Object getClauseObject()>();

        $r6 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause2: kotlin.jvm.functions.Function3 getRegFunc()>();

        $r7 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause2: kotlin.jvm.functions.Function3 getProcessResFunc()>();

        $r8 = interfaceinvoke $r1.<kotlinx.coroutines.selects.SelectClause2: kotlin.jvm.functions.Function3 getOnCancellationConstructor()>();

        specialinvoke $r4.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: void <init>(kotlinx.coroutines.selects.SelectImplementation,java.lang.Object,kotlin.jvm.functions.Function3,kotlin.jvm.functions.Function3,java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function3)>(r0, $r5, $r6, $r7, $r2, $r3, $r8);

        staticinvoke <kotlinx.coroutines.selects.SelectImplementation: void register$default(kotlinx.coroutines.selects.SelectImplementation,kotlinx.coroutines.selects.SelectImplementation$ClauseData,boolean,int,java.lang.Object)>(r0, $r4, 0, 1, null);

        return;
    }

    public void invoke(kotlinx.coroutines.selects.SelectClause2, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.selects.SelectClause2 $r1;
        kotlin.jvm.functions.Function2 $r2;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectClause2;

        $r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlinx.coroutines.selects.SelectBuilder$DefaultImpls: void invoke(kotlinx.coroutines.selects.SelectBuilder,kotlinx.coroutines.selects.SelectClause2,kotlin.jvm.functions.Function2)>(r0, $r1, $r2);

        return;
    }

    public void invokeOnCancellation(kotlinx.coroutines.internal.Segment, int)
    {
        int $i0;
        kotlinx.coroutines.selects.SelectImplementation r0;
        kotlinx.coroutines.internal.Segment $r1;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.internal.Segment;

        $i0 := @parameter1: int;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object disposableHandleOrSegment> = $r1;

        r0.<kotlinx.coroutines.selects.SelectImplementation: int indexInSegment> = $i0;

        return;
    }

    public void onTimeout(long, kotlin.jvm.functions.Function1)
    {
        long $l0;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlinx.coroutines.selects.SelectBuilder$DefaultImpls: void onTimeout(kotlinx.coroutines.selects.SelectBuilder,long,kotlin.jvm.functions.Function1)>(r0, $l0, $r1);

        return;
    }

    public final void register(kotlinx.coroutines.selects.SelectImplementation$ClauseData, boolean)
    {
        kotlinx.coroutines.internal.Symbol $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.util.Collection $r6;
        java.lang.AssertionError $r7;
        java.util.List $r5;
        kotlinx.coroutines.selects.SelectImplementation$ClauseData $r1;
        int $i0;
        java.lang.Object $r3;
        kotlinx.coroutines.selects.SelectImplementation r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        $z0 := @parameter1: boolean;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label4;

        $r2 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.internal.Symbol access$getSTATE_CANCELLED$p()>();

        if $r3 == $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        $r2 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r0);

        $z1 = $r3 instanceof kotlinx.coroutines.selects.SelectImplementation$ClauseData;

        if $z1 == 0 goto label5;

        return;

     label5:
        if $z0 != 0 goto label6;

        $r3 = $r1.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object clauseObject>;

        specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: void checkClauseObject(java.lang.Object)>($r3);

     label6:
        $z1 = virtualinvoke $r1.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: boolean tryRegisterAsWaiter(kotlinx.coroutines.selects.SelectImplementation)>(r0);

        if $z1 == 0 goto label8;

        if $z0 != 0 goto label7;

        $r5 = r0.<kotlinx.coroutines.selects.SelectImplementation: java.util.List clauses>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r1);

     label7:
        $r3 = r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object disposableHandleOrSegment>;

        $r1.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: java.lang.Object disposableHandleOrSegment> = $r3;

        $i0 = r0.<kotlinx.coroutines.selects.SelectImplementation: int indexInSegment>;

        $r1.<kotlinx.coroutines.selects.SelectImplementation$ClauseData: int indexInSegment> = $i0;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object disposableHandleOrSegment> = null;

        r0.<kotlinx.coroutines.selects.SelectImplementation: int indexInSegment> = -1;

        return;

     label8:
        $r2 = <kotlinx.coroutines.selects.SelectImplementation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater state$FU>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(r0, $r1);

        return;
    }

    public void selectInRegistrationPhase(java.lang.Object)
    {
        java.lang.Object $r1;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        r0.<kotlinx.coroutines.selects.SelectImplementation: java.lang.Object internalResult> = $r1;

        return;
    }

    public boolean trySelect(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $i0 = specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: int trySelectInternal(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final kotlinx.coroutines.selects.TrySelectDetailedResult trySelectDetailed(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.selects.TrySelectDetailedResult $r3;
        int $i0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.selects.SelectImplementation r0;

        r0 := @this: kotlinx.coroutines.selects.SelectImplementation;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $i0 = specialinvoke r0.<kotlinx.coroutines.selects.SelectImplementation: int trySelectInternal(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3 = staticinvoke <kotlinx.coroutines.selects.SelectKt: kotlinx.coroutines.selects.TrySelectDetailedResult access$TrySelectDetailedResult(int)>($i0);

        return $r3;
    }
}
