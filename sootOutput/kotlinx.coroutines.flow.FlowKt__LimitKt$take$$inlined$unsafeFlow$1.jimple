public final class kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1 extends java.lang.Object implements kotlinx.coroutines.flow.Flow
{
    final int $count$inlined;
    final kotlinx.coroutines.flow.Flow $this_take$inlined;

    public void <init>(kotlinx.coroutines.flow.Flow, int)
    {
        kotlinx.coroutines.flow.Flow $r1;
        int $i0;
        kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1 r0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1;

        $r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        $i0 := @parameter1: int;

        r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1: kotlinx.coroutines.flow.Flow $this_take$inlined> = $r1;

        r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1: int $count$inlined> = $i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1 r0;
        java.lang.IllegalStateException $r7;
        kotlin.coroutines.Continuation $r3;
        kotlin.jvm.internal.Ref$IntRef r1;
        kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 $r4;
        kotlinx.coroutines.flow.Flow $r9;
        kotlinx.coroutines.flow.FlowKt__LimitKt$take$2$1 $r10;
        kotlin.Unit r12;
        kotlinx.coroutines.flow.FlowCollector $r2, $r11;
        int $i0;
        java.lang.Object $r5, $r6;
        kotlinx.coroutines.flow.internal.AbortFlowException r8;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1;

        $r2 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r3 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = $r3 instanceof kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1;

        if $z0 == 0 goto label01;

        $r4 = (kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1) $r3;

        $i0 = $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: int label>;

        $i0 = $i0 - -2147483648;

        $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: int label> = $i0;

        goto label02;

     label01:
        $r4 = new kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1;

        specialinvoke $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: void <init>(kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1,kotlin.coroutines.Continuation)>(r0, $r3);

     label02:
        $r5 = $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: java.lang.Object result>;

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label08;
            case 1: goto label04;
            default: goto label03;
        };

     label03:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;

     label04:
        $r6 = $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: java.lang.Object L$0>;

        $r2 = (kotlinx.coroutines.flow.FlowCollector) $r6;

     label05:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

     label06:
        goto label13;

     label07:
        r8 := @caughtexception;

        goto label15;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r5);

        $r3 = (kotlin.coroutines.Continuation) $r4;

        r1 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke r1.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        $r9 = r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1: kotlinx.coroutines.flow.Flow $this_take$inlined>;

        $r10 = new kotlinx.coroutines.flow.FlowKt__LimitKt$take$2$1;

        $i0 = r0.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1: int $count$inlined>;

     label09:
        specialinvoke $r10.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$2$1: void <init>(kotlin.jvm.internal.Ref$IntRef,int,kotlinx.coroutines.flow.FlowCollector)>(r1, $i0, $r2);

     label10:
        $r11 = (kotlinx.coroutines.flow.FlowCollector) $r10;

        $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: java.lang.Object L$0> = $r2;

        $r4.<kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1: int label> = 1;

     label11:
        $r5 = interfaceinvoke $r9.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r11, $r4);

     label12:
        if $r5 != $r6 goto label13;

        return $r6;

     label13:
        goto label16;

     label14:
        r8 := @caughtexception;

     label15:
        staticinvoke <kotlinx.coroutines.flow.internal.FlowExceptions_commonKt: void checkOwnership(kotlinx.coroutines.flow.internal.AbortFlowException,kotlinx.coroutines.flow.FlowCollector)>(r8, $r2);

     label16:
        r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r12;

        catch kotlinx.coroutines.flow.internal.AbortFlowException from label05 to label06 with label07;
        catch kotlinx.coroutines.flow.internal.AbortFlowException from label09 to label10 with label14;
        catch kotlinx.coroutines.flow.internal.AbortFlowException from label11 to label12 with label14;
    }
}
