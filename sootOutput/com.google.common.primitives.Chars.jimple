public final class com.google.common.primitives.Chars extends java.lang.Object
{
    public static final int BYTES;

    private void <init>()
    {
        com.google.common.primitives.Chars r0;

        r0 := @this: com.google.common.primitives.Chars;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int access$000(char[], char, int, int)
    {
        int $i1, $i2;
        char[] $r0;
        char $c0;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i1 = staticinvoke <com.google.common.primitives.Chars: int indexOf(char[],char,int,int)>($r0, $c0, $i1, $i2);

        return $i1;
    }

    static int access$100(char[], char, int, int)
    {
        int $i1, $i2;
        char[] $r0;
        char $c0;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i1 = staticinvoke <com.google.common.primitives.Chars: int lastIndexOf(char[],char,int,int)>($r0, $c0, $i1, $i2);

        return $i1;
    }

    public static transient java.util.List asList(char[])
    {
        java.util.List $r1;
        com.google.common.primitives.Chars$CharArrayAsList $r2;
        int $i0;
        char[] $r0;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;

     label1:
        $r2 = new com.google.common.primitives.Chars$CharArrayAsList;

        specialinvoke $r2.<com.google.common.primitives.Chars$CharArrayAsList: void <init>(char[])>($r0);

        return $r2;
    }

    public static char checkedCast(long)
    {
        byte $b1;
        int i2;
        long $l0, $l4;
        char c3;
        boolean $z0;

        $l0 := @parameter0: long;

        i2 = (int) $l0;

        c3 = (char) i2;

        $l4 = (long) c3;

        $b1 = $l4 cmp $l0;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "Out of range: %s", $l0);

        return c3;
    }

    public static int compare(char, char)
    {
        int $i2, $i3;
        char $c0, $c1;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $i2 = (int) $c0;

        $i3 = (int) $c1;

        $i2 = $i2 - $i3;

        return $i2;
    }

    public static transient char[] concat(char[][])
    {
        int i0, i1, i2, $i3;
        char[] r1, r2;
        char[][] $r0;

        $r0 := @parameter0: char[][];

        i0 = 0;

        i1 = lengthof $r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r1 = $r0[i2];

        $i3 = lengthof r1;

        i0 = i0 + $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        r2 = newarray (char)[i0];

        i0 = 0;

        i1 = lengthof $r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        r1 = $r0[i2];

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, i0, $i3);

        $i3 = lengthof r1;

        i0 = i0 + $i3;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r2;
    }

    public static char constrainToRange(char, char, char)
    {
        int $i3, $i4;
        char $c0, $c1, $c2;
        boolean $z0;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $c2 := @parameter2: char;

        $i3 = (int) $c1;

        $i4 = (int) $c2;

        if $i3 > $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,char,char)>($z0, "min (%s) must be less than or equal to max (%s)", $c1, $c2);

        $i3 = (int) $c0;

        $i4 = (int) $c1;

        if $i3 >= $i4 goto label3;

        return $c1;

     label3:
        $i3 = (int) $c0;

        $i4 = (int) $c2;

        if $i3 >= $i4 goto label4;

        return $c0;

     label4:
        return $c2;
    }

    public static boolean contains(char[], char)
    {
        int $i2, $i3, $i4, $i5;
        char[] $r0;
        char $c0, c1;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i2 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label3;

        c1 = $r0[$i3];

        $i4 = (int) c1;

        $i5 = (int) $c0;

        if $i4 != $i5 goto label2;

        return 1;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static char[] ensureCapacity(char[], int, int)
    {
        int $i0, $i1, $i2;
        char[] $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = 1;

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "Invalid minLength: %s", $i0);

        if $i1 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Invalid padding: %s", $i1);

        $i2 = lengthof $r0;

        if $i2 >= $i0 goto label5;

        $i0 = $i0 + $i1;

        $r0 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>($r0, $i0);

     label5:
        return $r0;
    }

    public static char fromByteArray(byte[])
    {
        byte[] $r0;
        byte $b2, $b3;
        int $i0;
        char $c1;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "array too small: %s < %s", $i0, 2);

        $b2 = $r0[0];

        $b3 = $r0[1];

        $c1 = staticinvoke <com.google.common.primitives.Chars: char fromBytes(byte,byte)>($b2, $b3);

        return $c1;
    }

    public static char fromBytes(byte, byte)
    {
        short $s2;
        byte $b0, $b1;
        int $i3, $i5;
        char $c4;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $i3 = (int) $b0;

        $i3 = $i3 << 8;

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $i5 = (int) $s2;

        $i3 = $i3 | $i5;

        $c4 = (char) $i3;

        return $c4;
    }

    public static int hashCode(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        return $i1;
    }

    public static int indexOf(char[], char)
    {
        int $i1;
        char[] $r0;
        char $c0;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i1 = lengthof $r0;

        $i1 = staticinvoke <com.google.common.primitives.Chars: int indexOf(char[],char,int,int)>($r0, $c0, 0, $i1);

        return $i1;
    }

    private static int indexOf(char[], char, int, int)
    {
        int $i1, $i2, $i4, $i5;
        char[] $r0;
        char $c0, $c3;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

     label1:
        if $i1 >= $i2 goto label3;

        $c3 = $r0[$i1];

        $i4 = (int) $c3;

        $i5 = (int) $c0;

        if $i4 != $i5 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int indexOf(char[], char[])
    {
        char $c0, $c4;
        int i1, i2, $i3, $i5;
        char[] $r0, $r1;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: char[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "target");

        i1 = lengthof $r1;

        if i1 != 0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        i2 = lengthof $r0;

        $i3 = lengthof $r1;

        i2 = i2 - $i3;

        i2 = i2 + 1;

        if i1 >= i2 goto label6;

        i2 = 0;

     label3:
        $i3 = lengthof $r1;

        if i2 >= $i3 goto label5;

        $i3 = i1 + i2;

        $c4 = $r0[$i3];

        $c0 = $r1[i2];

        $i3 = (int) $c4;

        $i5 = (int) $c0;

        if $i3 == $i5 goto label4;

        i1 = i1 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return i1;

     label6:
        return -1;
    }

    public static transient java.lang.String join(java.lang.String, char[])
    {
        char $c1;
        int i0, $i2, $i3;
        char[] $r1;
        java.lang.StringBuilder r2, $r3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        i0 = lengthof $r1;

        if i0 != 0 goto label1;

        return "";

     label1:
        $r3 = new java.lang.StringBuilder;

        r2 = $r3;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = i0 + -1;

        $i2 = $i2 * $i3;

        $i2 = $i2 + i0;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $c1 = $r1[0];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = 1;

     label2:
        if $i2 >= i0 goto label3;

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $c1 = $r1[$i2];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r0 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static int lastIndexOf(char[], char)
    {
        int $i1;
        char[] $r0;
        char $c0;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i1 = lengthof $r0;

        $i1 = staticinvoke <com.google.common.primitives.Chars: int lastIndexOf(char[],char,int,int)>($r0, $c0, 0, $i1);

        return $i1;
    }

    private static int lastIndexOf(char[], char, int, int)
    {
        int $i1, $i2, $i4, $i5;
        char[] $r0;
        char $c0, $c3;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i2 = $i2 + -1;

     label1:
        if $i2 < $i1 goto label3;

        $c3 = $r0[$i2];

        $i4 = (int) $c3;

        $i5 = (int) $c0;

        if $i4 != $i5 goto label2;

        return $i2;

     label2:
        $i2 = $i2 + -1;

        goto label1;

     label3:
        return -1;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Chars$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.Chars$LexicographicalComparator: com.google.common.primitives.Chars$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static transient char max(char[])
    {
        int i0, $i2, $i4;
        char[] $r0;
        char c1, $c3;
        boolean z0;

        $r0 := @parameter0: char[];

        i0 = lengthof $r0;

        if i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        c1 = $r0[0];

        i0 = 1;

     label3:
        $i2 = lengthof $r0;

        if i0 >= $i2 goto label5;

        $c3 = $r0[i0];

        $i2 = (int) $c3;

        $i4 = (int) c1;

        if $i2 <= $i4 goto label4;

        c1 = $r0[i0];

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return c1;
    }

    public static transient char min(char[])
    {
        int i0, $i2, $i4;
        char[] $r0;
        char c1, $c3;
        boolean z0;

        $r0 := @parameter0: char[];

        i0 = lengthof $r0;

        if i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>(z0);

        c1 = $r0[0];

        i0 = 1;

     label3:
        $i2 = lengthof $r0;

        if i0 >= $i2 goto label5;

        $c3 = $r0[i0];

        $i2 = (int) $c3;

        $i4 = (int) c1;

        if $i2 >= $i4 goto label4;

        c1 = $r0[i0];

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return c1;
    }

    public static void reverse(char[])
    {
        int $i0;
        char[] $r0;

        $r0 := @parameter0: char[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Chars: void reverse(char[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void reverse(char[], int, int)
    {
        int $i0, $i1, i4;
        char[] $r0;
        char c2, $c3;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        i4 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, i4);

        $i1 = $i1 + -1;

     label1:
        if $i0 >= $i1 goto label2;

        c2 = $r0[$i0];

        $c3 = $r0[$i1];

        $r0[$i0] = $c3;

        $r0[$i1] = c2;

        $i0 = $i0 + 1;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return;
    }

    public static char saturatedCast(long)
    {
        byte $b1;
        int $i2;
        long $l0;
        char $c3;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 65535L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        return 65535;

     label1:
        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        return 0;

     label2:
        $i2 = (int) $l0;

        $c3 = (char) $i2;

        return $c3;
    }

    public static void sortDescending(char[])
    {
        int $i0;
        char[] $r0;

        $r0 := @parameter0: char[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Chars: void sortDescending(char[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sortDescending(char[], int, int)
    {
        int $i0, $i1, $i2;
        char[] $r0;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        staticinvoke <java.util.Arrays: void sort(char[],int,int)>($r0, $i0, $i1);

        staticinvoke <com.google.common.primitives.Chars: void reverse(char[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static char[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection r0;
        char $c2;
        java.lang.Character $r5;
        com.google.common.primitives.Chars$CharArrayAsList r2;
        int i0, i1;
        char[] r1;
        java.lang.Object $r4;
        boolean z0;

        r0 := @parameter0: java.util.Collection;

        z0 = r0 instanceof com.google.common.primitives.Chars$CharArrayAsList;

        if z0 == 0 goto label1;

        r2 = (com.google.common.primitives.Chars$CharArrayAsList) r0;

        r1 = virtualinvoke r2.<com.google.common.primitives.Chars$CharArrayAsList: char[] toCharArray()>();

        return r1;

     label1:
        $r3 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof $r3;

        r1 = newarray (char)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = $r3[i1];

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = (java.lang.Character) $r4;

        $c2 = virtualinvoke $r5.<java.lang.Character: char charValue()>();

        r1[i1] = $c2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static byte[] toByteArray(char)
    {
        byte[] $r0;
        byte $b1, $b3;
        int $i2;
        char $c0;

        $c0 := @parameter0: char;

        $i2 = (int) $c0;

        $i2 = $i2 >> 8;

        $b3 = (byte) $i2;

        $b1 = (byte) $c0;

        $r0 = newarray (byte)[2];

        $r0[0] = $b3;

        $r0[1] = $b1;

        return $r0;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.Chars: int BYTES> = 2;

        return;
    }
}
