abstract enum class com.google.common.math.LongMath$MillerRabinTester extends java.lang.Enum
{
    private static final com.google.common.math.LongMath$MillerRabinTester[] $VALUES;
    public static final enum com.google.common.math.LongMath$MillerRabinTester LARGE;
    public static final enum com.google.common.math.LongMath$MillerRabinTester SMALL;

    private static com.google.common.math.LongMath$MillerRabinTester[] $values()
    {
        com.google.common.math.LongMath$MillerRabinTester[] $r0;
        com.google.common.math.LongMath$MillerRabinTester $r1;

        $r0 = newarray (com.google.common.math.LongMath$MillerRabinTester)[2];

        $r1 = <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester SMALL>;

        $r0[0] = $r1;

        $r1 = <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester LARGE>;

        $r0[1] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        com.google.common.math.LongMath$MillerRabinTester[] $r0;
        com.google.common.math.LongMath$MillerRabinTester$2 $r2;
        com.google.common.math.LongMath$MillerRabinTester$1 $r1;

        $r1 = new com.google.common.math.LongMath$MillerRabinTester$1;

        specialinvoke $r1.<com.google.common.math.LongMath$MillerRabinTester$1: void <init>(java.lang.String,int)>("SMALL", 0);

        <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester SMALL> = $r1;

        $r2 = new com.google.common.math.LongMath$MillerRabinTester$2;

        specialinvoke $r2.<com.google.common.math.LongMath$MillerRabinTester$2: void <init>(java.lang.String,int)>("LARGE", 1);

        <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester LARGE> = $r2;

        $r0 = staticinvoke <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester[] $values()>();

        <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r1;
        com.google.common.math.LongMath$MillerRabinTester r0;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    void <init>(java.lang.String, int, com.google.common.math.LongMath$1)
    {
        com.google.common.math.LongMath$MillerRabinTester r0;
        com.google.common.math.LongMath$1 $r2;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.google.common.math.LongMath$1;

        specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    private long powMod(long, long, long)
    {
        com.google.common.math.LongMath$MillerRabinTester r0;
        byte $b1;
        long $l0, $l2, $l3, l4, $l5;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester;

        $l2 := @parameter0: long;

        $l3 := @parameter1: long;

        $l0 := @parameter2: long;

        l4 = 1L;

     label1:
        $b1 = $l3 cmp 0L;

        if $b1 == 0 goto label3;

        $l5 = 1L & $l3;

        $b1 = $l5 cmp 0L;

        if $b1 == 0 goto label2;

        l4 = virtualinvoke r0.<com.google.common.math.LongMath$MillerRabinTester: long mulMod(long,long,long)>(l4, $l2, $l0);

     label2:
        $l2 = virtualinvoke r0.<com.google.common.math.LongMath$MillerRabinTester: long squareMod(long,long)>($l2, $l0);

        $l3 = $l3 >> 1;

        goto label1;

     label3:
        return l4;
    }

    static boolean test(long, long)
    {
        byte $b2;
        com.google.common.math.LongMath$MillerRabinTester $r0;
        int $i3;
        long $l0, $l1;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l1 cmp 3037000499L;

        $i3 = (int) $b2;

        if $i3 > 0 goto label1;

        $r0 = <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester SMALL>;

        goto label2;

     label1:
        $r0 = <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester LARGE>;

     label2:
        $z0 = specialinvoke $r0.<com.google.common.math.LongMath$MillerRabinTester: boolean testWitness(long,long)>($l0, $l1);

        return $z0;
    }

    private boolean testWitness(long, long)
    {
        com.google.common.math.LongMath$MillerRabinTester r0;
        byte b4;
        int $i3, i5;
        long $l0, $l1, l2;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        l2 = $l1 - 1L;

        $i3 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l2);

        l2 = $l1 - 1L;

        l2 = l2 >> $i3;

        $l0 = $l0 % $l1;

        b4 = $l0 cmp 0L;

        if b4 != 0 goto label1;

        return 1;

     label1:
        l2 = specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester: long powMod(long,long,long)>($l0, l2, $l1);

        $l0 = l2;

        b4 = l2 cmp 1L;

        if b4 != 0 goto label2;

        return 1;

     label2:
        i5 = 0;

     label3:
        l2 = $l1 - 1L;

        b4 = $l0 cmp l2;

        if b4 == 0 goto label5;

        i5 = i5 + 1;

        if i5 != $i3 goto label4;

        return 0;

     label4:
        $l0 = virtualinvoke r0.<com.google.common.math.LongMath$MillerRabinTester: long squareMod(long,long)>($l0, $l1);

        goto label3;

     label5:
        return 1;
    }

    public static com.google.common.math.LongMath$MillerRabinTester valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        com.google.common.math.LongMath$MillerRabinTester $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/google/common/math/LongMath$MillerRabinTester;", $r0);

        $r2 = (com.google.common.math.LongMath$MillerRabinTester) $r1;

        return $r2;
    }

    public static com.google.common.math.LongMath$MillerRabinTester[] values()
    {
        com.google.common.math.LongMath$MillerRabinTester[] $r1;
        java.lang.Object $r0;

        $r1 = <com.google.common.math.LongMath$MillerRabinTester: com.google.common.math.LongMath$MillerRabinTester[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (com.google.common.math.LongMath$MillerRabinTester[]) $r0;

        return $r1;
    }

    abstract long mulMod(long, long, long);

    abstract long squareMod(long, long);
}
