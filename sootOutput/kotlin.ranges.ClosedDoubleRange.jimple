final class kotlin.ranges.ClosedDoubleRange extends java.lang.Object implements kotlin.ranges.ClosedFloatingPointRange
{
    private final double _endInclusive;
    private final double _start;

    public void <init>(double, double)
    {
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0, $d1;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.ranges.ClosedDoubleRange: double _start> = $d0;

        r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive> = $d1;

        return;
    }

    public boolean contains(double)
    {
        byte $b0;
        int $i1;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0, $d1;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $d0 := @parameter0: double;

        $d1 = r0.<kotlin.ranges.ClosedDoubleRange: double _start>;

        $b0 = $d0 cmpl $d1;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        $d1 = r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive>;

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean contains(java.lang.Comparable)
    {
        java.lang.Comparable $r1;
        java.lang.Number $r2;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0;
        boolean $z0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        $z0 = virtualinvoke r0.<kotlin.ranges.ClosedDoubleRange: boolean contains(double)>($d0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b0;
        java.lang.Object $r1;
        kotlin.ranges.ClosedDoubleRange r0, $r2;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlin.ranges.ClosedDoubleRange;

        if $z0 == 0 goto label7;

        $z0 = virtualinvoke r0.<kotlin.ranges.ClosedDoubleRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.ClosedDoubleRange) $r1;

        $z0 = virtualinvoke $r2.<kotlin.ranges.ClosedDoubleRange: boolean isEmpty()>();

        if $z0 != 0 goto label6;

     label1:
        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _start>;

        $r2 = (kotlin.ranges.ClosedDoubleRange) $r1;

        $d1 = $r2.<kotlin.ranges.ClosedDoubleRange: double _start>;

        $b0 = $d0 cmpg $d1;

        if $b0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label7;

        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive>;

        r0 = (kotlin.ranges.ClosedDoubleRange) $r1;

        $d1 = r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive>;

        $b0 = $d0 cmpg $d1;

        if $b0 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label7;

     label6:
        return 1;

     label7:
        return 0;
    }

    public volatile java.lang.Comparable getEndInclusive()
    {
        java.lang.Comparable $r2;
        java.lang.Double $r1;
        kotlin.ranges.ClosedDoubleRange r0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.ClosedDoubleRange: java.lang.Double getEndInclusive()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Double getEndInclusive()
    {
        java.lang.Double $r1;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public volatile java.lang.Comparable getStart()
    {
        java.lang.Comparable $r2;
        java.lang.Double $r1;
        kotlin.ranges.ClosedDoubleRange r0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $r1 = virtualinvoke r0.<kotlin.ranges.ClosedDoubleRange: java.lang.Double getStart()>();

        $r2 = (java.lang.Comparable) $r1;

        return $r2;
    }

    public java.lang.Double getStart()
    {
        java.lang.Double $r1;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _start>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public int hashCode()
    {
        int $i0, $i1;
        kotlin.ranges.ClosedDoubleRange r0;
        boolean $z0;
        double $d0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $z0 = virtualinvoke r0.<kotlin.ranges.ClosedDoubleRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _start>;

        $i0 = staticinvoke <kotlin.ranges.ClosedDoubleRange$$ExternalSyntheticBackport0: int m(double)>($d0);

        $i0 = $i0 * 31;

        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive>;

        $i1 = staticinvoke <kotlin.ranges.ClosedDoubleRange$$ExternalSyntheticBackport0: int m(double)>($d0);

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isEmpty()
    {
        byte $b0;
        int $i1;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0, $d1;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $d1 = r0.<kotlin.ranges.ClosedDoubleRange: double _start>;

        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive>;

        $b0 = $d1 cmpg $d0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean lessThanOrEquals(double, double)
    {
        byte $b0;
        int $i1;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0, $d1;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean lessThanOrEquals(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r1, $r2;
        java.lang.Number $r3;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 := @parameter1: java.lang.Comparable;

        $r3 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        $r3 = (java.lang.Number) $r2;

        $d1 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        $z0 = virtualinvoke r0.<kotlin.ranges.ClosedDoubleRange: boolean lessThanOrEquals(double,double)>($d0, $d1);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        kotlin.ranges.ClosedDoubleRange r0;
        double $d0;

        r0 := @this: kotlin.ranges.ClosedDoubleRange;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _start>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $d0 = r0.<kotlin.ranges.ClosedDoubleRange: double _endInclusive>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
