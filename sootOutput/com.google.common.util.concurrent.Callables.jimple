public final class com.google.common.util.concurrent.Callables extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.util.concurrent.Callables r0;

        r0 := @this: com.google.common.util.concurrent.Callables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.util.concurrent.AsyncCallable asAsyncCallable(java.util.concurrent.Callable, com.google.common.util.concurrent.ListeningExecutorService)
    {
        java.util.concurrent.Callable r0;
        com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda1 $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r1;

        r0 := @parameter0: java.util.concurrent.Callable;

        $r1 := @parameter1: com.google.common.util.concurrent.ListeningExecutorService;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda1;

        specialinvoke $r2.<com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda1: void <init>(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable)>($r1, r0);

        return $r2;
    }

    static com.google.common.util.concurrent.ListenableFuture lambda$asAsyncCallable$1(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable) throws java.lang.Exception
    {
        java.util.concurrent.Callable $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ListeningExecutorService;

        $r1 := @parameter1: java.util.concurrent.Callable;

        $r2 = interfaceinvoke $r0.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>($r1);

        return $r2;
    }

    static java.lang.Object lambda$returning$0(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        return $r0;
    }

    static java.lang.Object lambda$threadRenaming$2(com.google.common.base.Supplier, java.util.concurrent.Callable) throws java.lang.Exception
    {
        java.lang.Throwable $r6;
        com.google.common.base.Supplier $r0;
        java.util.concurrent.Callable $r1;
        java.lang.Thread $r2;
        java.lang.Object $r4;
        java.lang.String $r3, r5;
        boolean $z0;

        $r0 := @parameter0: com.google.common.base.Supplier;

        $r1 := @parameter1: java.util.concurrent.Callable;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.String getName()>();

        $r4 = interfaceinvoke $r0.<com.google.common.base.Supplier: java.lang.Object get()>();

        r5 = (java.lang.String) $r4;

        $z0 = staticinvoke <com.google.common.util.concurrent.Callables: boolean trySetName(java.lang.String,java.lang.Thread)>(r5, $r2);

     label1:
        $r4 = interfaceinvoke $r1.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        if $z0 == 0 goto label5;

        staticinvoke <com.google.common.util.concurrent.Callables: boolean trySetName(java.lang.String,java.lang.Thread)>($r3, $r2);

        return $r4;

     label3:
        $r6 := @caughtexception;

        if $z0 == 0 goto label4;

        staticinvoke <com.google.common.util.concurrent.Callables: boolean trySetName(java.lang.String,java.lang.Thread)>($r3, $r2);

     label4:
        throw $r6;

     label5:
        return $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void lambda$threadRenaming$3(com.google.common.base.Supplier, java.lang.Runnable)
    {
        java.lang.Throwable $r2;
        com.google.common.base.Supplier $r0;
        java.lang.Runnable $r1;
        java.lang.Thread $r3;
        java.lang.Object $r5;
        java.lang.String $r4, r6;
        boolean $z0;

        $r0 := @parameter0: com.google.common.base.Supplier;

        $r1 := @parameter1: java.lang.Runnable;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>();

        $r5 = interfaceinvoke $r0.<com.google.common.base.Supplier: java.lang.Object get()>();

        r6 = (java.lang.String) $r5;

        $z0 = staticinvoke <com.google.common.util.concurrent.Callables: boolean trySetName(java.lang.String,java.lang.Thread)>(r6, $r3);

     label1:
        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

     label2:
        if $z0 == 0 goto label5;

        staticinvoke <com.google.common.util.concurrent.Callables: boolean trySetName(java.lang.String,java.lang.Thread)>($r4, $r3);

        return;

     label3:
        $r2 := @caughtexception;

        if $z0 == 0 goto label4;

        staticinvoke <com.google.common.util.concurrent.Callables: boolean trySetName(java.lang.String,java.lang.Thread)>($r4, $r3);

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.util.concurrent.Callable returning(java.lang.Object)
    {
        com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda2 $r1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $r1 = new com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda2;

        specialinvoke $r1.<com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda2: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    static java.lang.Runnable threadRenaming(java.lang.Runnable, com.google.common.base.Supplier)
    {
        com.google.common.base.Supplier r1;
        com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda3 $r2;
        java.lang.Runnable $r0;

        $r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = new com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda3;

        specialinvoke $r2.<com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda3: void <init>(com.google.common.base.Supplier,java.lang.Runnable)>(r1, $r0);

        return $r2;
    }

    static java.util.concurrent.Callable threadRenaming(java.util.concurrent.Callable, com.google.common.base.Supplier)
    {
        com.google.common.base.Supplier r1;
        java.util.concurrent.Callable r0;
        com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda0 $r2;

        r0 := @parameter0: java.util.concurrent.Callable;

        r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = new com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda0;

        specialinvoke $r2.<com.google.common.util.concurrent.Callables$$ExternalSyntheticLambda0: void <init>(com.google.common.base.Supplier,java.util.concurrent.Callable)>(r1, r0);

        return $r2;
    }

    private static boolean trySetName(java.lang.String, java.lang.Thread)
    {
        java.lang.SecurityException r2;
        java.lang.String $r0;
        java.lang.Thread $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Thread;

     label1:
        virtualinvoke $r1.<java.lang.Thread: void setName(java.lang.String)>($r0);

     label2:
        return 1;

     label3:
        r2 := @caughtexception;

        return 0;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
}
