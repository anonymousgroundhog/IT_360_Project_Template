public final class kotlin.text.MatcherMatchResult$groups$1 extends kotlin.collections.AbstractCollection implements kotlin.text.MatchNamedGroupCollection
{
    final kotlin.text.MatcherMatchResult this$0;

    void <init>(kotlin.text.MatcherMatchResult)
    {
        kotlin.text.MatcherMatchResult $r1;
        kotlin.text.MatcherMatchResult$groups$1 r0;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        $r1 := @parameter0: kotlin.text.MatcherMatchResult;

        r0.<kotlin.text.MatcherMatchResult$groups$1: kotlin.text.MatcherMatchResult this$0> = $r1;

        specialinvoke r0.<kotlin.collections.AbstractCollection: void <init>()>();

        return;
    }

    public final volatile boolean contains(java.lang.Object)
    {
        kotlin.text.MatcherMatchResult$groups$1 r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlin.text.MatchGroup $r2;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = $r1 instanceof kotlin.text.MatchGroup;

     label2:
        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r2 = (kotlin.text.MatchGroup) $r1;

        $z0 = virtualinvoke r0.<kotlin.text.MatcherMatchResult$groups$1: boolean contains(kotlin.text.MatchGroup)>($r2);

        return $z0;
    }

    public volatile boolean contains(kotlin.text.MatchGroup)
    {
        kotlin.text.MatcherMatchResult$groups$1 r0;
        kotlin.text.MatchGroup $r1;
        boolean $z0;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        $r1 := @parameter0: kotlin.text.MatchGroup;

        $z0 = specialinvoke r0.<kotlin.collections.AbstractCollection: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public kotlin.text.MatchGroup get(int)
    {
        java.util.regex.MatchResult $r2;
        kotlin.text.MatcherMatchResult r1;
        java.lang.Integer $r4;
        kotlin.text.MatcherMatchResult$groups$1 r0;
        int $i0, $i1;
        java.lang.String $r6;
        kotlin.ranges.IntRange $r3;
        kotlin.text.MatchGroup $r5;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        $i0 := @parameter0: int;

        r1 = r0.<kotlin.text.MatcherMatchResult$groups$1: kotlin.text.MatcherMatchResult this$0>;

        $r2 = staticinvoke <kotlin.text.MatcherMatchResult: java.util.regex.MatchResult access$getMatchResult(kotlin.text.MatcherMatchResult)>(r1);

        $r3 = staticinvoke <kotlin.text.RegexKt: kotlin.ranges.IntRange access$range(java.util.regex.MatchResult,int)>($r2, $i0);

        $r4 = virtualinvoke $r3.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 < 0 goto label1;

        $r5 = new kotlin.text.MatchGroup;

        r1 = r0.<kotlin.text.MatcherMatchResult$groups$1: kotlin.text.MatcherMatchResult this$0>;

        $r2 = staticinvoke <kotlin.text.MatcherMatchResult: java.util.regex.MatchResult access$getMatchResult(kotlin.text.MatcherMatchResult)>(r1);

        $r6 = interfaceinvoke $r2.<java.util.regex.MatchResult: java.lang.String group(int)>($i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "matchResult.group(index)");

        specialinvoke $r5.<kotlin.text.MatchGroup: void <init>(java.lang.String,kotlin.ranges.IntRange)>($r6, $r3);

        return $r5;

     label1:
        return null;
    }

    public kotlin.text.MatchGroup get(java.lang.String)
    {
        kotlin.internal.PlatformImplementations $r2;
        kotlin.text.MatcherMatchResult$groups$1 r0;
        java.util.regex.MatchResult $r4;
        kotlin.text.MatcherMatchResult $r3;
        java.lang.String $r1;
        kotlin.text.MatchGroup $r5;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "name");

        $r2 = <kotlin.internal.PlatformImplementationsKt: kotlin.internal.PlatformImplementations IMPLEMENTATIONS>;

        $r3 = r0.<kotlin.text.MatcherMatchResult$groups$1: kotlin.text.MatcherMatchResult this$0>;

        $r4 = staticinvoke <kotlin.text.MatcherMatchResult: java.util.regex.MatchResult access$getMatchResult(kotlin.text.MatcherMatchResult)>($r3);

        $r5 = virtualinvoke $r2.<kotlin.internal.PlatformImplementations: kotlin.text.MatchGroup getMatchResultNamedGroup(java.util.regex.MatchResult,java.lang.String)>($r4, $r1);

        return $r5;
    }

    public int getSize()
    {
        kotlin.text.MatcherMatchResult$groups$1 r0;
        java.util.regex.MatchResult $r2;
        int $i0;
        kotlin.text.MatcherMatchResult $r1;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        $r1 = r0.<kotlin.text.MatcherMatchResult$groups$1: kotlin.text.MatcherMatchResult this$0>;

        $r2 = staticinvoke <kotlin.text.MatcherMatchResult: java.util.regex.MatchResult access$getMatchResult(kotlin.text.MatcherMatchResult)>($r1);

        $i0 = interfaceinvoke $r2.<java.util.regex.MatchResult: int groupCount()>();

        $i0 = $i0 + 1;

        return $i0;
    }

    public boolean isEmpty()
    {
        kotlin.text.MatcherMatchResult$groups$1 r0;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r7;
        kotlin.sequences.Sequence $r4;
        java.util.Collection $r1;
        kotlin.jvm.functions.Function1 $r6;
        java.lang.Iterable $r3;
        kotlin.text.MatcherMatchResult$groups$1 r0;
        kotlin.text.MatcherMatchResult$groups$1$iterator$1 $r5;
        kotlin.ranges.IntRange $r2;

        r0 := @this: kotlin.text.MatcherMatchResult$groups$1;

        $r1 = (java.util.Collection) r0;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.ranges.IntRange getIndices(java.util.Collection)>($r1);

        $r3 = (java.lang.Iterable) $r2;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r3);

        $r5 = new kotlin.text.MatcherMatchResult$groups$1$iterator$1;

        specialinvoke $r5.<kotlin.text.MatcherMatchResult$groups$1$iterator$1: void <init>(kotlin.text.MatcherMatchResult$groups$1)>(r0);

        $r6 = (kotlin.jvm.functions.Function1) $r5;

        $r4 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r4, $r6);

        $r7 = interfaceinvoke $r4.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        return $r7;
    }
}
