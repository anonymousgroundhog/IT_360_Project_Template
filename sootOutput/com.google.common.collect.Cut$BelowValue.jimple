final class com.google.common.collect.Cut$BelowValue extends com.google.common.collect.Cut
{
    private static final long serialVersionUID;

    void <init>(java.lang.Comparable)
    {
        java.lang.Comparable r1;
        java.lang.Object $r2;
        com.google.common.collect.Cut$BelowValue r0;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r1 = (java.lang.Comparable) $r2;

        specialinvoke r0.<com.google.common.collect.Cut: void <init>(java.lang.Comparable)>(r1);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.google.common.collect.Cut $r2;
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.Cut$BelowValue r0;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.common.collect.Cut) $r1;

        $i0 = specialinvoke r0.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r2);

        return $i0;
    }

    void describeAsLowerBound(java.lang.StringBuilder)
    {
        java.lang.StringBuilder $r1;
        java.lang.Comparable $r2;
        com.google.common.collect.Cut$BelowValue r0;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        return;
    }

    void describeAsUpperBound(java.lang.StringBuilder)
    {
        java.lang.StringBuilder $r1;
        java.lang.Comparable $r2;
        com.google.common.collect.Cut$BelowValue r0;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        return;
    }

    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain)
    {
        java.lang.Comparable $r2;
        com.google.common.collect.Cut$BelowValue r0;
        com.google.common.collect.DiscreteDomain r1;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        $r2 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $r2 = virtualinvoke r1.<com.google.common.collect.DiscreteDomain: java.lang.Comparable previous(java.lang.Comparable)>($r2);

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Comparable $r1;
        com.google.common.collect.Cut$BelowValue r0;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        $r1 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    boolean isLessThan(java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable r1, $r2;
        com.google.common.collect.Cut$BelowValue r0;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $i0 = staticinvoke <com.google.common.collect.Range: int compareOrThrow(java.lang.Comparable,java.lang.Comparable)>($r2, r1);

        if $i0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain)
    {
        java.lang.Comparable r2;
        com.google.common.collect.Cut$BelowValue r0;
        com.google.common.collect.DiscreteDomain r1;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        r2 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        return r2;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Comparable $r2;
        java.lang.String $r3, $r4;
        com.google.common.collect.Cut$BelowValue r0;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        $r2 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    com.google.common.collect.BoundType typeAsLowerBound()
    {
        com.google.common.collect.Cut$BelowValue r0;
        com.google.common.collect.BoundType r1;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        r1 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        return r1;
    }

    com.google.common.collect.BoundType typeAsUpperBound()
    {
        com.google.common.collect.Cut$BelowValue r0;
        com.google.common.collect.BoundType r1;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        r1 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        return r1;
    }

    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut $r6;
        java.lang.AssertionError r4;
        com.google.common.collect.Cut$BelowValue r0;
        int[] r3;
        com.google.common.collect.BoundType $r1;
        com.google.common.collect.DiscreteDomain r2;
        int $i0;
        com.google.common.collect.Cut$AboveValue $r7;
        java.lang.Comparable r5;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        $r1 := @parameter0: com.google.common.collect.BoundType;

        r2 := @parameter1: com.google.common.collect.DiscreteDomain;

        r3 = <com.google.common.collect.Cut$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.BoundType: int ordinal()>();

        $i0 = r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        r4 = new java.lang.AssertionError;

        specialinvoke r4.<java.lang.AssertionError: void <init>()>();

        throw r4;

     label2:
        r5 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        r5 = virtualinvoke r2.<com.google.common.collect.DiscreteDomain: java.lang.Comparable previous(java.lang.Comparable)>(r5);

        if r5 != null goto label3;

        $r6 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        return $r6;

     label3:
        $r7 = new com.google.common.collect.Cut$AboveValue;

        specialinvoke $r7.<com.google.common.collect.Cut$AboveValue: void <init>(java.lang.Comparable)>(r5);

        return $r7;

     label4:
        return r0;
    }

    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut $r6;
        java.lang.AssertionError r4;
        com.google.common.collect.Cut$BelowValue r0;
        int[] r3;
        com.google.common.collect.BoundType $r1;
        com.google.common.collect.DiscreteDomain r2;
        int $i0;
        com.google.common.collect.Cut$AboveValue $r7;
        java.lang.Comparable r5;

        r0 := @this: com.google.common.collect.Cut$BelowValue;

        $r1 := @parameter0: com.google.common.collect.BoundType;

        r2 := @parameter1: com.google.common.collect.DiscreteDomain;

        r3 = <com.google.common.collect.Cut$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.BoundType: int ordinal()>();

        $i0 = r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        r4 = new java.lang.AssertionError;

        specialinvoke r4.<java.lang.AssertionError: void <init>()>();

        throw r4;

     label2:
        return r0;

     label3:
        r5 = r0.<com.google.common.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        r5 = virtualinvoke r2.<com.google.common.collect.DiscreteDomain: java.lang.Comparable previous(java.lang.Comparable)>(r5);

        if r5 != null goto label4;

        $r6 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        return $r6;

     label4:
        $r7 = new com.google.common.collect.Cut$AboveValue;

        specialinvoke $r7.<com.google.common.collect.Cut$AboveValue: void <init>(java.lang.Comparable)>(r5);

        return $r7;
    }
}
