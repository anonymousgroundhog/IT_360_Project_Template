public final class kotlinx.coroutines.channels.ChannelSegment extends kotlinx.coroutines.internal.Segment
{
    private final kotlinx.coroutines.channels.BufferedChannel _channel;
    private final java.util.concurrent.atomic.AtomicReferenceArray data;

    public void <init>(long, kotlinx.coroutines.channels.ChannelSegment, kotlinx.coroutines.channels.BufferedChannel, int)
    {
        int $i1;
        kotlinx.coroutines.channels.ChannelSegment r0, $r1;
        long $l0;
        kotlinx.coroutines.channels.BufferedChannel $r2;
        kotlinx.coroutines.internal.Segment $r3;
        java.util.concurrent.atomic.AtomicReferenceArray $r4;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $l0 := @parameter0: long;

        $r1 := @parameter1: kotlinx.coroutines.channels.ChannelSegment;

        $r2 := @parameter2: kotlinx.coroutines.channels.BufferedChannel;

        $i1 := @parameter3: int;

        $r3 = (kotlinx.coroutines.internal.Segment) $r1;

        specialinvoke r0.<kotlinx.coroutines.internal.Segment: void <init>(long,kotlinx.coroutines.internal.Segment,int)>($l0, $r3, $i1);

        r0.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.channels.BufferedChannel _channel> = $r2;

        $r4 = new java.util.concurrent.atomic.AtomicReferenceArray;

        $i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $i1 = $i1 * 2;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>($i1);

        r0.<kotlinx.coroutines.channels.ChannelSegment: java.util.concurrent.atomic.AtomicReferenceArray data> = $r4;

        return;
    }

    private final void setElementLazy(int, java.lang.Object)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelSegment: java.util.concurrent.atomic.AtomicReferenceArray data>;

        $i0 = $i0 * 2;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public final boolean casState$kotlinx_coroutines_core(int, java.lang.Object, java.lang.Object)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = r0.<kotlinx.coroutines.channels.ChannelSegment: java.util.concurrent.atomic.AtomicReferenceArray data>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        $z0 = staticinvoke <com.google.common.util.concurrent.Striped$SmallLazyStriped$$ExternalSyntheticBackportWithForwarding0: boolean m(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object,java.lang.Object)>($r3, $i0, $r1, $r2);

        return $z0;
    }

    public final void cleanElement$kotlinx_coroutines_core(int)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        specialinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: void setElementLazy(int,java.lang.Object)>($i0, null);

        return;
    }

    public final java.lang.Object getAndSetState$kotlinx_coroutines_core(int, java.lang.Object)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelSegment: java.util.concurrent.atomic.AtomicReferenceArray data>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i0, $r1);

        return $r1;
    }

    public final kotlinx.coroutines.channels.BufferedChannel getChannel()
    {
        kotlinx.coroutines.channels.ChannelSegment r0;
        kotlinx.coroutines.channels.BufferedChannel $r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $r1 = r0.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.channels.BufferedChannel _channel>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public final java.lang.Object getElement$kotlinx_coroutines_core(int)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelSegment: java.util.concurrent.atomic.AtomicReferenceArray data>;

        $i0 = $i0 * 2;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public int getNumberOfSlots()
    {
        int i0;
        kotlinx.coroutines.channels.ChannelSegment r0;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        i0 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        return i0;
    }

    public final java.lang.Object getState$kotlinx_coroutines_core(int)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelSegment: java.util.concurrent.atomic.AtomicReferenceArray data>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public void onCancellation(int, java.lang.Throwable, kotlin.coroutines.CoroutineContext)
    {
        java.lang.Throwable $r1;
        java.lang.IllegalStateException $r6;
        kotlinx.coroutines.channels.ChannelSegment r0;
        int $i0, i1;
        java.lang.String $r8;
        boolean $z0, z1, z2;
        kotlinx.coroutines.internal.Symbol $r5;
        kotlin.jvm.functions.Function1 $r10;
        kotlin.coroutines.CoroutineContext $r2;
        java.lang.Object $r3, $r4;
        java.lang.StringBuilder $r7;
        kotlinx.coroutines.channels.BufferedChannel $r9;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 := @parameter2: kotlin.coroutines.CoroutineContext;

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $z0 = 1;

        if $i0 < i1 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        if z1 == 0 goto label03;

        i1 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $i0 = $i0 - i1;

        goto label03;

     label03:
        $r3 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>($i0);

     label04:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getState$kotlinx_coroutines_core(int)>($i0);

        z2 = $r4 instanceof kotlinx.coroutines.Waiter;

        if z2 != 0 goto label11;

        z2 = $r4 instanceof kotlinx.coroutines.channels.WaiterEB;

        if z2 == 0 goto label05;

        goto label11;

     label05:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        if $r4 == $r5 goto label10;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

        if $r4 != $r5 goto label06;

        goto label10;

     label06:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_EB$p()>();

        if $r4 == $r5 goto label04;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getRESUMING_BY_RCV$p()>();

        if $r4 != $r5 goto label07;

        goto label04;

     label07:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getDONE_RCV$p()>();

        if $r4 == $r5 goto label16;

        $r5 = <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol BUFFERED>;

        if $r4 != $r5 goto label08;

        return;

     label08:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol getCHANNEL_CLOSED()>();

        if $r4 != $r5 goto label09;

        return;

     label09:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected state: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label10:
        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        if z1 == 0 goto label16;

        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.channels.BufferedChannel getChannel()>();

        $r10 = $r9.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r10 == null goto label16;

        staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: void callUndeliveredElement(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r10, $r3, $r2);

        return;

     label11:
        if z1 == 0 goto label12;

        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_SEND$p()>();

        goto label13;

     label12:
        $r5 = staticinvoke <kotlinx.coroutines.channels.BufferedChannelKt: kotlinx.coroutines.internal.Symbol access$getINTERRUPTED_RCV$p()>();

     label13:
        z2 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: boolean casState$kotlinx_coroutines_core(int,java.lang.Object,java.lang.Object)>($i0, $r4, $r5);

        if z2 == 0 goto label04;

        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        if z1 != 0 goto label14;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: void onCancelledRequest(int,boolean)>($i0, $z0);

        if z1 == 0 goto label16;

        $r9 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.channels.BufferedChannel getChannel()>();

        $r10 = $r9.<kotlinx.coroutines.channels.BufferedChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r10 == null goto label16;

        staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: void callUndeliveredElement(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r10, $r3, $r2);

     label16:
        return;
    }

    public final void onCancelledRequest(int, boolean)
    {
        int $i0, $i2;
        kotlinx.coroutines.channels.ChannelSegment r0;
        long $l1, $l3;
        kotlinx.coroutines.channels.BufferedChannel $r1;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: kotlinx.coroutines.channels.BufferedChannel getChannel()>();

        $l1 = r0.<kotlinx.coroutines.channels.ChannelSegment: long id>;

        $i2 = <kotlinx.coroutines.channels.BufferedChannelKt: int SEGMENT_SIZE>;

        $l3 = (long) $i2;

        $l1 = $l1 * $l3;

        $l3 = (long) $i0;

        $l1 = $l1 + $l3;

        virtualinvoke $r1.<kotlinx.coroutines.channels.BufferedChannel: void waitExpandBufferCompletion$kotlinx_coroutines_core(long)>($l1);

     label1:
        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: void onSlotCleaned()>();

        return;
    }

    public final java.lang.Object retrieveElement$kotlinx_coroutines_core(int)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: java.lang.Object getElement$kotlinx_coroutines_core(int)>($i0);

        virtualinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: void cleanElement$kotlinx_coroutines_core(int)>($i0);

        return $r1;
    }

    public final void setState$kotlinx_coroutines_core(int, java.lang.Object)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<kotlinx.coroutines.channels.ChannelSegment: java.util.concurrent.atomic.AtomicReferenceArray data>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public final void storeElement$kotlinx_coroutines_core(int, java.lang.Object)
    {
        int $i0;
        kotlinx.coroutines.channels.ChannelSegment r0;
        java.lang.Object $r1;

        r0 := @this: kotlinx.coroutines.channels.ChannelSegment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<kotlinx.coroutines.channels.ChannelSegment: void setElementLazy(int,java.lang.Object)>($i0, $r1);

        return;
    }
}
