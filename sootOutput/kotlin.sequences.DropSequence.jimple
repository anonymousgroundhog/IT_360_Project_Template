public final class kotlin.sequences.DropSequence extends java.lang.Object implements kotlin.sequences.Sequence, kotlin.sequences.DropTakeSequence
{
    private final int count;
    private final kotlin.sequences.Sequence sequence;

    public void <init>(kotlin.sequences.Sequence, int)
    {
        kotlin.sequences.DropSequence r0;
        kotlin.sequences.Sequence $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: kotlin.sequences.DropSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence> = $r1;

        r0.<kotlin.sequences.DropSequence: int count> = $i0;

        $i0 = r0.<kotlin.sequences.DropSequence: int count>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count must be non-negative, but was ");

        $i0 = r0.<kotlin.sequences.DropSequence: int count>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final int access$getCount$p(kotlin.sequences.DropSequence)
    {
        int i0;
        kotlin.sequences.DropSequence $r0;

        $r0 := @parameter0: kotlin.sequences.DropSequence;

        i0 = $r0.<kotlin.sequences.DropSequence: int count>;

        return i0;
    }

    public static final kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.DropSequence)
    {
        kotlin.sequences.DropSequence $r0;
        kotlin.sequences.Sequence r1;

        $r0 := @parameter0: kotlin.sequences.DropSequence;

        r1 = $r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence>;

        return r1;
    }

    public kotlin.sequences.Sequence drop(int)
    {
        kotlin.sequences.DropSequence r0, $r1;
        kotlin.sequences.Sequence $r2;
        int $i0, i1;

        r0 := @this: kotlin.sequences.DropSequence;

        $i0 := @parameter0: int;

        i1 = r0.<kotlin.sequences.DropSequence: int count>;

        i1 = i1 + $i0;

        $r1 = new kotlin.sequences.DropSequence;

        if i1 >= 0 goto label1;

        $r2 = (kotlin.sequences.Sequence) r0;

        specialinvoke $r1.<kotlin.sequences.DropSequence: void <init>(kotlin.sequences.Sequence,int)>($r2, $i0);

        goto label2;

     label1:
        $r2 = r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence>;

        specialinvoke $r1.<kotlin.sequences.DropSequence: void <init>(kotlin.sequences.Sequence,int)>($r2, i1);

     label2:
        $r2 = (kotlin.sequences.Sequence) $r1;

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        kotlin.sequences.DropSequence$iterator$1 $r1;
        java.util.Iterator $r2;
        kotlin.sequences.DropSequence r0;

        r0 := @this: kotlin.sequences.DropSequence;

        $r1 = new kotlin.sequences.DropSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.DropSequence$iterator$1: void <init>(kotlin.sequences.DropSequence)>(r0);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }

    public kotlin.sequences.Sequence take(int)
    {
        kotlin.sequences.TakeSequence $r3;
        kotlin.sequences.DropTakeSequence $r1;
        kotlin.sequences.DropSequence r0;
        kotlin.sequences.Sequence $r2;
        int $i0, i1;
        kotlin.sequences.SubSequence $r4;

        r0 := @this: kotlin.sequences.DropSequence;

        $i0 := @parameter0: int;

        i1 = r0.<kotlin.sequences.DropSequence: int count>;

        i1 = i1 + $i0;

        if i1 >= 0 goto label1;

        $r3 = new kotlin.sequences.TakeSequence;

        $r1 = $r3;

        $r2 = (kotlin.sequences.Sequence) r0;

        specialinvoke $r3.<kotlin.sequences.TakeSequence: void <init>(kotlin.sequences.Sequence,int)>($r2, $i0);

        goto label2;

     label1:
        $r4 = new kotlin.sequences.SubSequence;

        $r1 = $r4;

        $r2 = r0.<kotlin.sequences.DropSequence: kotlin.sequences.Sequence sequence>;

        $i0 = r0.<kotlin.sequences.DropSequence: int count>;

        specialinvoke $r4.<kotlin.sequences.SubSequence: void <init>(kotlin.sequences.Sequence,int,int)>($r2, $i0, i1);

     label2:
        $r2 = (kotlin.sequences.Sequence) $r1;

        return $r2;
    }
}
