abstract class com.google.common.collect.Maps$EntrySet extends com.google.common.collect.Sets$ImprovedAbstractSet
{

    void <init>()
    {
        com.google.common.collect.Maps$EntrySet r0;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        specialinvoke r0.<com.google.common.collect.Sets$ImprovedAbstractSet: void <init>()>();

        return;
    }

    public void clear()
    {
        com.google.common.collect.Maps$EntrySet r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map$Entry r2;
        java.util.Map $r3;
        java.lang.Object $r1, $r4, $r5;
        com.google.common.collect.Maps$EntrySet r0;
        boolean z0;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        $r1 := @parameter0: java.lang.Object;

        z0 = $r1 instanceof java.util.Map$Entry;

        if z0 == 0 goto label2;

        r2 = (java.util.Map$Entry) $r1;

        $r1 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $r4 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r1);

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r4, $r5);

        if z0 == 0 goto label2;

        if $r4 != null goto label1;

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Maps$EntrySet r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    abstract java.util.Map map();

    public boolean remove(java.lang.Object)
    {
        java.util.Map$Entry r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.lang.Object $r1;
        com.google.common.collect.Maps$EntrySet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label1;

        r2 = (java.util.Map$Entry) $r1;

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r1 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        return $z0;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException r4;
        java.util.Iterator $r5;
        java.util.Collection r1, r3;
        java.lang.Object $r2;
        com.google.common.collect.Maps$EntrySet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

     label2:
        r3 = (java.util.Collection) $r2;

     label3:
        $z0 = specialinvoke r0.<com.google.common.collect.Sets$ImprovedAbstractSet: boolean removeAll(java.util.Collection)>(r3);

     label4:
        return $z0;

     label5:
        r4 := @caughtexception;

        $r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Sets: boolean removeAllImpl(java.util.Set,java.util.Iterator)>(r0, $r5);

        return $z0;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label5;
        catch java.lang.UnsupportedOperationException from label3 to label4 with label5;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException r4;
        java.util.Map$Entry r7;
        java.util.Iterator $r6;
        java.util.Collection r1, r3;
        java.util.Set $r9;
        java.util.HashSet $r5;
        java.util.Map $r8;
        int $i0;
        java.lang.Object $r2;
        com.google.common.collect.Maps$EntrySet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

     label2:
        r3 = (java.util.Collection) $r2;

     label3:
        $z0 = specialinvoke r0.<com.google.common.collect.Sets$ImprovedAbstractSet: boolean retainAll(java.util.Collection)>(r3);

     label4:
        return $z0;

     label5:
        r4 := @caughtexception;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r5 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSetWithExpectedSize(int)>($i0);

        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r2 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label6;

        $z0 = $r2 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label6;

        r7 = (java.util.Map$Entry) $r2;

        $r2 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r2);

        goto label6;

     label7:
        $r8 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r9.<java.util.Set: boolean retainAll(java.util.Collection)>($r5);

        return $z0;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label5;
        catch java.lang.UnsupportedOperationException from label3 to label4 with label5;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.Maps$EntrySet r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
}
