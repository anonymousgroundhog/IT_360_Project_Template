public final class kotlinx.coroutines.time.TimeKt extends java.lang.Object
{

    private static final long coerceToMillis(java.time.Duration)
    {
        java.time.temporal.ChronoUnit r2;
        byte $b2;
        java.time.Duration $r0, r1;
        int $i0;
        long $l1;

        $r0 := @parameter0: java.time.Duration;

        r1 = <java.time.Duration: java.time.Duration ZERO>;

        $i0 = virtualinvoke $r0.<java.time.Duration: int compareTo(java.time.Duration)>(r1);

        if $i0 > 0 goto label1;

        return 0L;

     label1:
        r2 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MILLIS>;

        r1 = virtualinvoke r2.<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>();

        $i0 = virtualinvoke $r0.<java.time.Duration: int compareTo(java.time.Duration)>(r1);

        if $i0 > 0 goto label2;

        return 1L;

     label2:
        $l1 = virtualinvoke $r0.<java.time.Duration: long getSeconds()>();

        $b2 = $l1 cmp 9223372036854775L;

        $i0 = (int) $b2;

        if $i0 < 0 goto label4;

        $l1 = virtualinvoke $r0.<java.time.Duration: long getSeconds()>();

        $b2 = $l1 cmp 9223372036854775L;

        if $b2 != 0 goto label3;

        $i0 = virtualinvoke $r0.<java.time.Duration: int getNano()>();

        if $i0 >= 807000000 goto label3;

        goto label4;

     label3:
        return 9223372036854775807L;

     label4:
        $l1 = virtualinvoke $r0.<java.time.Duration: long toMillis()>();

        return $l1;
    }

    public static final kotlinx.coroutines.flow.Flow debounce(kotlinx.coroutines.flow.Flow, java.time.Duration)
    {
        kotlinx.coroutines.flow.Flow $r0;
        long $l0;
        java.time.Duration $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: java.time.Duration;

        $l0 = staticinvoke <kotlinx.coroutines.time.TimeKt: long coerceToMillis(java.time.Duration)>($r1);

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow debounce(kotlinx.coroutines.flow.Flow,long)>($r0, $l0);

        return $r0;
    }

    public static final java.lang.Object delay(java.time.Duration, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r1;
        kotlin.Unit r4;
        java.time.Duration $r0;
        long $l0;
        java.lang.Object $r2, $r3;

        $r0 := @parameter0: java.time.Duration;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $l0 = staticinvoke <kotlinx.coroutines.time.TimeKt: long coerceToMillis(java.time.Duration)>($r0);

        $r2 = staticinvoke <kotlinx.coroutines.DelayKt: java.lang.Object delay(long,kotlin.coroutines.Continuation)>($l0, $r1);

        $r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r2 != $r3 goto label1;

        return $r2;

     label1:
        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

    public static final void onTimeout(kotlinx.coroutines.selects.SelectBuilder, java.time.Duration, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.selects.SelectBuilder $r0;
        java.time.Duration $r1;
        kotlin.jvm.functions.Function1 $r2;
        long $l0;

        $r0 := @parameter0: kotlinx.coroutines.selects.SelectBuilder;

        $r1 := @parameter1: java.time.Duration;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $l0 = staticinvoke <kotlinx.coroutines.time.TimeKt: long coerceToMillis(java.time.Duration)>($r1);

        staticinvoke <kotlinx.coroutines.selects.OnTimeoutKt: void onTimeout(kotlinx.coroutines.selects.SelectBuilder,long,kotlin.jvm.functions.Function1)>($r0, $l0, $r2);

        return;
    }

    public static final kotlinx.coroutines.flow.Flow sample(kotlinx.coroutines.flow.Flow, java.time.Duration)
    {
        kotlinx.coroutines.flow.Flow $r0;
        long $l0;
        java.time.Duration $r1;

        $r0 := @parameter0: kotlinx.coroutines.flow.Flow;

        $r1 := @parameter1: java.time.Duration;

        $l0 = staticinvoke <kotlinx.coroutines.time.TimeKt: long coerceToMillis(java.time.Duration)>($r1);

        $r0 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow sample(kotlinx.coroutines.flow.Flow,long)>($r0, $l0);

        return $r0;
    }

    public static final java.lang.Object withTimeout(java.time.Duration, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        java.time.Duration $r0;
        long $l0;
        java.lang.Object $r3;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: java.time.Duration;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $l0 = staticinvoke <kotlinx.coroutines.time.TimeKt: long coerceToMillis(java.time.Duration)>($r0);

        $r3 = staticinvoke <kotlinx.coroutines.TimeoutKt: java.lang.Object withTimeout(long,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($l0, $r1, $r2);

        return $r3;
    }

    public static final java.lang.Object withTimeoutOrNull(java.time.Duration, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation $r2;
        java.time.Duration $r0;
        long $l0;
        java.lang.Object $r3;
        kotlin.jvm.functions.Function2 $r1;

        $r0 := @parameter0: java.time.Duration;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $l0 = staticinvoke <kotlinx.coroutines.time.TimeKt: long coerceToMillis(java.time.Duration)>($r0);

        $r3 = staticinvoke <kotlinx.coroutines.TimeoutKt: java.lang.Object withTimeoutOrNull(long,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($l0, $r1, $r2);

        return $r3;
    }
}
