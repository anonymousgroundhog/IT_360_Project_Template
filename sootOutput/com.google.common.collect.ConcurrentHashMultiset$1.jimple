class com.google.common.collect.ConcurrentHashMultiset$1 extends com.google.common.collect.ForwardingSet
{
    final java.util.Set val$delegate;

    void <init>(com.google.common.collect.ConcurrentHashMultiset, java.util.Set)
    {
        java.util.Set $r2;
        com.google.common.collect.ConcurrentHashMultiset$1 r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        $r1 := @parameter0: com.google.common.collect.ConcurrentHashMultiset;

        $r2 := @parameter1: java.util.Set;

        r0.<com.google.common.collect.ConcurrentHashMultiset$1: java.util.Set val$delegate> = $r2;

        specialinvoke r0.<com.google.common.collect.ForwardingSet: void <init>()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.ConcurrentHashMultiset$1 r0;
        java.util.Set $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = r0.<com.google.common.collect.ConcurrentHashMultiset$1: java.util.Set val$delegate>;

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean safeContains(java.util.Collection,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        com.google.common.collect.ConcurrentHashMultiset$1 r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        r1 := @parameter0: java.util.Collection;

        $z0 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$1: boolean standardContainsAll(java.util.Collection)>(r1);

        return $z0;
    }

    protected volatile java.lang.Object delegate()
    {
        java.util.Set $r1;
        com.google.common.collect.ConcurrentHashMultiset$1 r0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$1: java.util.Set delegate()>();

        return $r1;
    }

    protected volatile java.util.Collection delegate()
    {
        java.util.Set $r1;
        com.google.common.collect.ConcurrentHashMultiset$1 r0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$1: java.util.Set delegate()>();

        return $r1;
    }

    protected java.util.Set delegate()
    {
        java.util.Set r1;
        com.google.common.collect.ConcurrentHashMultiset$1 r0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$1: java.util.Set val$delegate>;

        return r1;
    }

    public boolean remove(java.lang.Object)
    {
        com.google.common.collect.ConcurrentHashMultiset$1 r0;
        java.util.Set $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = r0.<com.google.common.collect.ConcurrentHashMultiset$1: java.util.Set val$delegate>;

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean safeRemove(java.util.Collection,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        com.google.common.collect.ConcurrentHashMultiset$1 r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$1;

        r1 := @parameter0: java.util.Collection;

        $z0 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$1: boolean standardRemoveAll(java.util.Collection)>(r1);

        return $z0;
    }
}
