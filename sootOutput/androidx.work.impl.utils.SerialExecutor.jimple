public class androidx.work.impl.utils.SerialExecutor extends java.lang.Object implements java.util.concurrent.Executor
{
    private volatile java.lang.Runnable mActive;
    private final java.util.concurrent.Executor mExecutor;
    private final java.lang.Object mLock;
    private final java.util.ArrayDeque mTasks;

    public void <init>(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r1;
        androidx.work.impl.utils.SerialExecutor r0;
        java.lang.Object $r3;
        java.util.ArrayDeque $r2;

        r0 := @this: androidx.work.impl.utils.SerialExecutor;

        $r1 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutor: java.util.concurrent.Executor mExecutor> = $r1;

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutor: java.util.ArrayDeque mTasks> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.SerialExecutor: java.lang.Object mLock> = $r3;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Throwable $r5;
        androidx.work.impl.utils.SerialExecutor r0;
        java.lang.Object $r2;
        java.util.ArrayDeque $r4;
        java.lang.Runnable $r1;
        androidx.work.impl.utils.SerialExecutor$Task $r3;

        r0 := @this: androidx.work.impl.utils.SerialExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.work.impl.utils.SerialExecutor: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r4 = r0.<androidx.work.impl.utils.SerialExecutor: java.util.ArrayDeque mTasks>;

        $r3 = new androidx.work.impl.utils.SerialExecutor$Task;

        specialinvoke $r3.<androidx.work.impl.utils.SerialExecutor$Task: void <init>(androidx.work.impl.utils.SerialExecutor,java.lang.Runnable)>(r0, $r1);

        virtualinvoke $r4.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r3);

        $r1 = r0.<androidx.work.impl.utils.SerialExecutor: java.lang.Runnable mActive>;

        if $r1 != null goto label2;

        virtualinvoke r0.<androidx.work.impl.utils.SerialExecutor: void scheduleNext()>();

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.concurrent.Executor getDelegatedExecutor()
    {
        androidx.work.impl.utils.SerialExecutor r0;
        java.util.concurrent.Executor r1;

        r0 := @this: androidx.work.impl.utils.SerialExecutor;

        r1 = r0.<androidx.work.impl.utils.SerialExecutor: java.util.concurrent.Executor mExecutor>;

        return r1;
    }

    public boolean hasPendingTasks()
    {
        java.lang.Throwable $r3;
        androidx.work.impl.utils.SerialExecutor r0;
        java.lang.Object $r1;
        java.util.ArrayDeque $r2;
        boolean $z0;

        r0 := @this: androidx.work.impl.utils.SerialExecutor;

        $r1 = r0.<androidx.work.impl.utils.SerialExecutor: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<androidx.work.impl.utils.SerialExecutor: java.util.ArrayDeque mTasks>;

        $z0 = virtualinvoke $r2.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void scheduleNext()
    {
        java.lang.Throwable $r6;
        java.util.concurrent.Executor $r5;
        androidx.work.impl.utils.SerialExecutor r0;
        java.lang.Object $r1, $r3;
        java.util.ArrayDeque $r4;
        java.lang.Runnable $r2;

        r0 := @this: androidx.work.impl.utils.SerialExecutor;

        $r1 = r0.<androidx.work.impl.utils.SerialExecutor: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $r4 = r0.<androidx.work.impl.utils.SerialExecutor: java.util.ArrayDeque mTasks>;

        $r3 = virtualinvoke $r4.<java.util.ArrayDeque: java.lang.Object poll()>();

        $r2 = (java.lang.Runnable) $r3;

        r0.<androidx.work.impl.utils.SerialExecutor: java.lang.Runnable mActive> = $r2;

        if $r2 == null goto label2;

        $r5 = r0.<androidx.work.impl.utils.SerialExecutor: java.util.concurrent.Executor mExecutor>;

        $r2 = r0.<androidx.work.impl.utils.SerialExecutor: java.lang.Runnable mActive>;

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
