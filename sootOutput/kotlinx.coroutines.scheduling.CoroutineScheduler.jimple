public final class kotlinx.coroutines.scheduling.CoroutineScheduler extends java.lang.Object implements java.util.concurrent.Executor, java.io.Closeable
{
    private static final long BLOCKING_MASK;
    private static final int BLOCKING_SHIFT;
    private static final int CLAIMED;
    private static final long CPU_PERMITS_MASK;
    private static final int CPU_PERMITS_SHIFT;
    private static final long CREATED_MASK;
    public static final kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion;
    public static final int MAX_SUPPORTED_POOL_SIZE;
    public static final int MIN_SUPPORTED_POOL_SIZE;
    public static final kotlinx.coroutines.internal.Symbol NOT_IN_STACK;
    private static final int PARKED;
    private static final long PARKED_INDEX_MASK;
    private static final long PARKED_VERSION_INC;
    private static final long PARKED_VERSION_MASK;
    private static final int TERMINATED;
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU;
    private volatile int _isTerminated;
    private volatile long controlState;
    public final int corePoolSize;
    public final kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue;
    public final kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue;
    public final long idleWorkerKeepAliveNs;
    public final int maxPoolSize;
    private volatile long parkedWorkersStack;
    public final java.lang.String schedulerName;
    public final kotlinx.coroutines.internal.ResizableAtomicArray workers;

    static void <clinit>()
    {
        kotlinx.coroutines.internal.Symbol $r3;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Companion $r0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int TERMINATED> = 1;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long PARKED_VERSION_MASK> = -2097152L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long PARKED_VERSION_INC> = 2097152L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long PARKED_INDEX_MASK> = 2097151L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int PARKED> = -1;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int MIN_SUPPORTED_POOL_SIZE> = 1;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int MAX_SUPPORTED_POOL_SIZE> = 2097150;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long CREATED_MASK> = 2097151L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int CPU_PERMITS_SHIFT> = 42;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long CPU_PERMITS_MASK> = 9223367638808264704L;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int CLAIMED> = 0;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: int BLOCKING_SHIFT> = 21;

        <kotlinx.coroutines.scheduling.CoroutineScheduler: long BLOCKING_MASK> = 4398044413952L;

        $r0 = new kotlinx.coroutines.scheduling.CoroutineScheduler$Companion;

        specialinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler;", "parkedWorkersStack");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler;", "controlState");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU> = $r1;

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lkotlinx/coroutines/scheduling/CoroutineScheduler;", "_isTerminated");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU> = $r2;

        $r3 = new kotlinx.coroutines.internal.Symbol;

        specialinvoke $r3.<kotlinx.coroutines.internal.Symbol: void <init>(java.lang.String)>("NOT_IN_STACK");

        <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK> = $r3;

        return;
    }

    public void <init>(int, int, long, java.lang.String)
    {
        kotlinx.coroutines.scheduling.GlobalQueue $r3;
        long $l2;
        java.lang.IllegalArgumentException $r6;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        byte $b3;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r5;
        java.lang.String $r1;
        kotlinx.coroutines.internal.ResizableAtomicArray $r4;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize> = $i0;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize> = $i1;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs> = $l2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName> = $r1;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i0 < 1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label12;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

        $i1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i0 < $i1 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        if $z0 == 0 goto label11;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

        if $i0 > 2097150 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label10;

        $l2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        $b3 = $l2 cmp 0L;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 == 0 goto label09;

        $r3 = new kotlinx.coroutines.scheduling.GlobalQueue;

        specialinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue> = $r3;

        $r3 = new kotlinx.coroutines.scheduling.GlobalQueue;

        specialinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: void <init>()>();

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue> = $r3;

        $r4 = new kotlinx.coroutines.internal.ResizableAtomicArray;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $i0 = $i0 + 1;

        $i0 = $i0 * 2;

        specialinvoke $r4.<kotlinx.coroutines.internal.ResizableAtomicArray: void <init>(int)>($i0);

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers> = $r4;

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $l2 = (long) $i0;

        $l2 = $l2 << 42;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState> = $l2;

        r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated> = 0;

        return;

     label09:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Idle worker keep alive time ");

        $l2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be positive");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label10:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not exceed maximal supported number of threads 2097150");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label11:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be greater than or equals to core pool size ");

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label12:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Core pool size ");

        $i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be at least 1");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;
    }

    public void <init>(int, int, long, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        long $l3;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l3 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        $i2 := @parameter4: int;

        $r2 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i4 = $i2 & 4;

        if $i4 == 0 goto label1;

        $l3 = <kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS>;

        goto label1;

     label1:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label2;

        $r1 = <kotlinx.coroutines.scheduling.TasksKt: java.lang.String DEFAULT_SCHEDULER_NAME>;

        goto label2;

     label2:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l3, $r1);

        return;
    }

    public static final java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r0;

        r0 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        return r0;
    }

    private final boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.GlobalQueue $r3;
        kotlinx.coroutines.scheduling.Task $r1;
        int $i0;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

        $r2 = $r1.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        $z0 = 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r1);

        return $z0;

     label3:
        $r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.scheduling.GlobalQueue: boolean addLast(java.lang.Object)>($r1);

        return $z0;
    }

    private final int blockingTasks(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i1;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l0 = 4398044413952L & $l0;

        $l0 = $l0 >> 21;

        $i1 = (int) $l0;

        return $i1;
    }

    private final int createNewWorker()
    {
        java.lang.Throwable $r5;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r2;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r8;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r7;
        int i2, $i3, i4;
        java.lang.Object $r4;
        kotlinx.coroutines.internal.ResizableAtomicArray r1, r3;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        entermonitor r1;

     label01:
        $z0 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()>();

     label02:
        if $z0 == 0 goto label03;

        exitmonitor r1;

        return -1;

     label03:
        r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = $l0 & 2097151L;

        i2 = (int) $l1;

        $l0 = 4398044413952L & $l0;

        $l0 = $l0 >> 21;

        $i3 = (int) $l0;

        $i3 = i2 - $i3;

        $i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i3, 0);

        i4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

     label04:
        if $i3 < i4 goto label05;

        exitmonitor r1;

        return 0;

     label05:
        i4 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

     label06:
        if i2 < i4 goto label07;

        exitmonitor r1;

        return 0;

     label07:
        r2 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

     label08:
        $l0 = $l0 & 2097151L;

        i2 = (int) $l0;

        i2 = i2 + 1;

        if i2 <= 0 goto label11;

     label09:
        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r4 = virtualinvoke r3.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>(i2);

        if $r4 != null goto label11;

        $z0 = 1;

        goto label12;

     label10:
        $r5 := @caughtexception;

        goto label19;

     label11:
        $z0 = 0;

     label12:
        if $z0 == 0 goto label17;

        $r7 = new kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        specialinvoke $r7.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void <init>(kotlinx.coroutines.scheduling.CoroutineScheduler,int)>(r0, i2);

        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        virtualinvoke r3.<kotlinx.coroutines.internal.ResizableAtomicArray: void setSynchronized(int,java.lang.Object)>(i2, $r7);

        r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>(r0);

     label13:
        $l0 = $l0 & 2097151L;

        i4 = (int) $l0;

        if i2 != i4 goto label14;

        $z0 = 1;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        if $z0 == 0 goto label16;

        $i3 = $i3 + 1;

        exitmonitor r1;

        virtualinvoke $r7.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void start()>();

        return $i3;

     label16:
        $r6 = "Failed requirement.";

        $r8 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label17:
        $r6 = "Failed requirement.";

        $r8 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label18:
        $r5 := @caughtexception;

     label19:
        exitmonitor r1;

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label13 with label10;
        catch java.lang.Throwable from label16 to label18 with label10;
    }

    private final int createdWorkers(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i1;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l0 = 2097151L & $l0;

        $i1 = (int) $l0;

        return $i1;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0, $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2;
        java.lang.Thread $r1;
        boolean z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        z0 = $r1 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        if z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $r2 == null goto label3;

        $r3 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r2);

        z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, r0);

        if z0 == 0 goto label3;

        return $r2;

     label3:
        return null;
    }

    private final void decrementBlockingTasks()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, -2097152L);

        return;
    }

    private final int decrementCreatedWorkers()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int i1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(java.lang.Object)>(r0);

        $l0 = 2097151L & $l0;

        i1 = (int) $l0;

        return i1;
    }

    public static void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler, java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean, int, java.lang.Object)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0;

        $r0 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter3: boolean;

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r2 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.TaskContext NonBlockingContext>;

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $z0 = 0;

     label2:
        virtualinvoke $r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r1, $r2, $z0);

        return;
    }

    private final int getAvailableCpuPermits()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int i1;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l0 = 9223367638808264704L & $l0;

        $l0 = $l0 >> 42;

        i1 = (int) $l0;

        return i1;
    }

    private final int getCreatedWorkers()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l1 = $l1 & 2097151L;

        $i0 = (int) $l1;

        return $i0;
    }

    private final long incrementBlockingTasks()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, 2097152L);

        return $l0;
    }

    private final int incrementCreatedWorkers()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int i1;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>(r0);

        $l0 = 2097151L & $l0;

        i1 = (int) $l0;

        return i1;
    }

    private final void loop$atomicfu(java.util.concurrent.atomic.AtomicLongFieldUpdater, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.lang.Long $r4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.lang.Object $r3;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicLongFieldUpdater;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 := @parameter2: java.lang.Object;

     label1:
        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        goto label1;
    }

    private final int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.internal.Symbol r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

     label1:
        r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 != r3 goto label2;

        return -1;

     label2:
        if $r2 != null goto label3;

        return 0;

     label3:
        $r1 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r2;

        $i0 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>();

        if $i0 == 0 goto label4;

        return $i0;

     label4:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

        goto label1;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()
    {
        kotlinx.coroutines.internal.Symbol $r6;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r1, $r5;
        long l1, $l2, $l3;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r4;
        int i0;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.ResizableAtomicArray $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

     label1:
        $l2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        l1 = 2097151L & $l2;

        i0 = (int) l1;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>(i0);

        $r4 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r3;

        if $r4 != null goto label2;

        return null;

     label2:
        l1 = 2097152L + $l2;

        l1 = l1 & -2097152L;

        i0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r4);

        if i0 < 0 goto label4;

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

        $l3 = (long) i0;

        l1 = l1 | $l3;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l2, l1);

        if $z0 == 0 goto label3;

        $r6 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        virtualinvoke $r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>($r6);

        return $r4;

     label3:
        goto label1;

     label4:
        goto label1;
    }

    private final long releaseCpuPermit()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, 4398046511104L);

        return $l0;
    }

    private final void signalBlockingWork(long, boolean)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        long $l0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)>($l0);

        if $z0 == 0 goto label3;

        return;

     label3:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        return;
    }

    private final kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, kotlinx.coroutines.scheduling.Task, boolean)
    {
        kotlinx.coroutines.scheduling.Task $r2;
        kotlinx.coroutines.scheduling.TaskContext $r3;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r4, $r5;
        kotlinx.coroutines.scheduling.WorkQueue r6;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        int $i0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 := @parameter1: kotlinx.coroutines.scheduling.Task;

        $z0 := @parameter2: boolean;

        if $r1 != null goto label1;

        return $r2;

     label1:
        r4 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if r4 != $r5 goto label2;

        return $r2;

     label2:
        $r3 = $r2.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r3.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        if $i0 != 0 goto label3;

        r4 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING>;

        if r4 != $r5 goto label3;

        return $r2;

     label3:
        $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks> = 1;

        r6 = $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r2 = virtualinvoke r6.<kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task,boolean)>($r2, $z0);

        return $r2;
    }

    private final boolean tryAcquireCpuPermit()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int i2;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1, $r2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

     label1:
        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        l0 = 9223367638808264704L & $l1;

        l0 = l0 >> 42;

        i2 = (int) l0;

        if i2 != 0 goto label2;

        return 0;

     label2:
        l0 = $l1 - 4398046511104L;

        $r2 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l1, l0);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        goto label1;
    }

    private final boolean tryCreateWorker(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i1, $i3;
        long $l0, $l2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l2 = 2097151L & $l0;

        $i1 = (int) $l2;

        $l0 = 4398044413952L & $l0;

        $l0 = $l0 >> 21;

        $i3 = (int) $l0;

        $i1 = $i1 - $i3;

        $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i1, 0);

        $i3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i1 >= $i3 goto label2;

        $i3 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>();

        if $i3 != 1 goto label1;

        $i1 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if $i1 <= 1 goto label1;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()>();

     label1:
        if $i3 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    static boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler, long, int, java.lang.Object)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;
        int $i1;
        java.lang.Object $r0;
        long $l0;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r2;
        boolean $z0;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>($r1);

     label1:
        $z0 = specialinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)>($l0);

        return $z0;
    }

    private final boolean tryUnpark()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        java.lang.Thread $r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

     label1:
        $r1 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater getWorkerCtl$FU()>();

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>($r1, -1, 0);

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Thread) $r1;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r3);

        return 1;
    }

    public final int availableCpuPermits(long)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i1;
        long $l0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $l0 = 9223367638808264704L & $l0;

        $l0 = $l0 >> 42;

        $i1 = (int) $l0;

        return $i1;
    }

    public void close()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)>(10000L);

        return;
    }

    public final kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext)
    {
        kotlinx.coroutines.scheduling.TaskImpl $r5;
        kotlinx.coroutines.scheduling.Task $r4;
        long $l0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.SchedulerTimeSource r3;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        r3 = <kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource>;

        $l0 = virtualinvoke r3.<kotlinx.coroutines.scheduling.SchedulerTimeSource: long nanoTime()>();

        $z0 = $r1 instanceof kotlinx.coroutines.scheduling.Task;

        if $z0 == 0 goto label1;

        $r4 = (kotlinx.coroutines.scheduling.Task) $r1;

        $r4.<kotlinx.coroutines.scheduling.Task: long submissionTime> = $l0;

        $r4 = (kotlinx.coroutines.scheduling.Task) $r1;

        $r4.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext> = $r2;

        $r4 = (kotlinx.coroutines.scheduling.Task) $r1;

        return $r4;

     label1:
        $r5 = new kotlinx.coroutines.scheduling.TaskImpl;

        specialinvoke $r5.<kotlinx.coroutines.scheduling.TaskImpl: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.TaskContext)>($r1, $l0, $r2);

        $r4 = (kotlinx.coroutines.scheduling.Task) $r5;

        return $r4;
    }

    public final void dispatch(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean)
    {
        long $l1;
        java.lang.Runnable $r1;
        java.util.concurrent.RejectedExecutionException r7;
        int $i0;
        java.lang.String $r9;
        boolean $z0, z1, $z2, $z3;
        kotlinx.coroutines.scheduling.Task $r4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r5;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r6;
        java.lang.StringBuilder $r8;
        kotlinx.coroutines.AbstractTimeSource $r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter2: boolean;

        $r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if $r3 == null goto label01;

        virtualinvoke $r3.<kotlinx.coroutines.AbstractTimeSource: void trackTask()>();

     label01:
        $r4 = virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)>($r1, $r2);

        $r2 = $r4.<kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext>;

        $i0 = interfaceinvoke $r2.<kotlinx.coroutines.scheduling.TaskContext: int getTaskMode()>();

        z1 = 0;

        if $i0 != 1 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        if $z2 == 0 goto label04;

        r5 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(r0, 2097152L);

        goto label05;

     label04:
        $l1 = 0L;

     label05:
        $r6 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()>();

        $r4 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,kotlinx.coroutines.scheduling.Task,boolean)>($r6, $r4, $z0);

        if $r4 == null goto label07;

        $z3 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)>($r4);

        if $z3 == 0 goto label06;

        goto label07;

     label06:
        r7 = new java.util.concurrent.RejectedExecutionException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was terminated");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>($r9);

        throw r7;

     label07:
        if $z0 == 0 goto label08;

        if $r6 == null goto label08;

        z1 = 1;

     label08:
        if $z2 == 0 goto label09;

        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalBlockingWork(long,boolean)>($l1, z1);

        return;

     label09:
        if z1 == 0 goto label10;

        return;

     label10:
        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork()>();

        return;
    }

    public void execute(java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.lang.Runnable $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: java.lang.Runnable;

        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>(r0, $r1, null, 0, 6, null);

        return;
    }

    public final boolean isTerminated()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        int $i0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r0);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
    {
        kotlinx.coroutines.internal.Symbol $r3;
        long l1, $l2, $l4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r4, r7;
        java.lang.AssertionError r5;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        int i0, $i3;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.ResizableAtomicArray r6;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()>();

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK>;

        if $r2 == $r3 goto label1;

        return 0;

     label1:
        r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

     label2:
        $l2 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        l1 = 2097151L & $l2;

        i0 = (int) l1;

        l1 = 2097152L + $l2;

        l1 = l1 & -2097152L;

        $i3 = virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()>();

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label6;

        if $i3 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        goto label6;

     label5:
        r5 = new java.lang.AssertionError;

        specialinvoke r5.<java.lang.AssertionError: void <init>()>();

        throw r5;

     label6:
        r6 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r2 = virtualinvoke r6.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>(i0);

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)>($r2);

        r7 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

        $l4 = (long) $i3;

        l1 = l1 | $l4;

        $z0 = virtualinvoke r7.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l2, l1);

        if $z0 == 0 goto label7;

        return 1;

     label7:
        goto label2;
    }

    public final void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, int, int)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater r2, $r3;
        long l3, $l4, $l5;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r1;
        int $i0, $i1, i2;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

     label1:
        $l4 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        l3 = 2097151L & $l4;

        i2 = (int) l3;

        l3 = 2097152L + $l4;

        l3 = l3 & -2097152L;

        if i2 != $i0 goto label3;

        if $i1 != 0 goto label2;

        i2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)>($r1);

        goto label3;

     label2:
        i2 = $i1;

        goto label3;

     label3:
        if i2 < 0 goto label5;

        $r3 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

        $l5 = (long) i2;

        l3 = l3 | $l5;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l4, l3);

        if $z0 == 0 goto label4;

        return;

     label4:
        goto label1;

     label5:
        goto label1;
    }

    public final void runSafely(kotlinx.coroutines.scheduling.Task)
    {
        java.lang.Throwable r4, r7;
        kotlinx.coroutines.scheduling.Task $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        java.lang.Thread$UncaughtExceptionHandler $r6;
        java.lang.Thread $r5;
        kotlinx.coroutines.AbstractTimeSource $r2, r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $r1 := @parameter0: kotlinx.coroutines.scheduling.Task;

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.scheduling.Task: void run()>();

     label2:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        r3 = $r2;

        if $r2 == null goto label4;

     label3:
        virtualinvoke r3.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

     label4:
        return;

     label5:
        r4 := @caughtexception;

     label6:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = virtualinvoke $r5.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r6.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r5, r4);

     label7:
        $r2 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        r3 = $r2;

        if $r2 == null goto label4;

        goto label3;

     label8:
        r7 := @caughtexception;

        r3 = staticinvoke <kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()>();

        if r3 == null goto label9;

        virtualinvoke r3.<kotlinx.coroutines.AbstractTimeSource: void unTrackTask()>();

     label9:
        throw r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public final void shutdown(long)
    {
        java.lang.Throwable $r15;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        long $l0, $l1;
        java.lang.AssertionError $r10;
        kotlinx.coroutines.scheduling.WorkQueue $r11;
        java.lang.Thread $r7;
        int i2, i3;
        boolean $z0, $z1;
        kotlinx.coroutines.scheduling.GlobalQueue $r12;
        kotlinx.coroutines.scheduling.Task $r13, r14;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r4;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState $r8, $r9;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker $r2, $r6;
        java.lang.Object $r5;
        kotlinx.coroutines.internal.ResizableAtomicArray r3;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $l0 := @parameter0: long;

        $r1 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU>;

        $z0 = 0;

        $z1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, 0, 1);

        if $z1 != 0 goto label01;

        return;

     label01:
        $r2 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()>();

        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        entermonitor r3;

     label02:
        $r4 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater access$getControlState$FU$p()>();

        $l1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

     label03:
        $l1 = $l1 & 2097151L;

        i2 = (int) $l1;

        exitmonitor r3;

        i3 = 1;

        if 1 > i2 goto label12;

     label04:
        r3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r5 = virtualinvoke r3.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>(i3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r5;

        if $r6 == $r2 goto label11;

     label05:
        $z1 = virtualinvoke $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean isAlive()>();

        if $z1 == 0 goto label06;

        $r7 = (java.lang.Thread) $r6;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r7);

        virtualinvoke $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void join(long)>($l0);

        goto label05;

     label06:
        $r8 = $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label10;

        $r9 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        if $r8 != $r9 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        if $z1 == 0 goto label09;

        goto label10;

     label09:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label10:
        $r11 = $r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $r12 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        virtualinvoke $r11.<kotlinx.coroutines.scheduling.WorkQueue: void offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue)>($r12);

        goto label11;

     label11:
        if i3 == i2 goto label12;

        i3 = i3 + 1;

        goto label04;

     label12:
        $r12 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        virtualinvoke $r12.<kotlinx.coroutines.scheduling.GlobalQueue: void close()>();

        $r12 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        virtualinvoke $r12.<kotlinx.coroutines.scheduling.GlobalQueue: void close()>();

     label13:
        if $r2 == null goto label14;

        $r13 = virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)>(1);

        r14 = $r13;

        if $r13 != null goto label19;

     label14:
        $r12 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        $r5 = virtualinvoke $r12.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        r14 = (kotlinx.coroutines.scheduling.Task) $r5;

        if r14 != null goto label19;

        $r12 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        $r5 = virtualinvoke $r12.<kotlinx.coroutines.scheduling.GlobalQueue: java.lang.Object removeFirstOrNull()>();

        r14 = (kotlinx.coroutines.scheduling.Task) $r5;

        if r14 != null goto label19;

        if $r2 == null goto label15;

        $r8 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED>;

        virtualinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)>($r8);

     label15:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label18;

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $l0 = 9223367638808264704L & $l0;

        $l0 = $l0 >> 42;

        i2 = (int) $l0;

        i3 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        if i2 != i3 goto label16;

        $z0 = 1;

     label16:
        if $z0 == 0 goto label17;

        goto label18;

     label17:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label18:
        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: void set(java.lang.Object,long)>(r0, 0L);

        $r4 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: void set(java.lang.Object,long)>(r0, 0L);

        return;

     label19:
        virtualinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)>(r14);

        goto label13;

     label20:
        $r15 := @caughtexception;

        exitmonitor r3;

        throw $r15;

        catch java.lang.Throwable from label02 to label03 with label20;
    }

    public final void signalCpuWork()
    {
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        $z0 = specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler,long,int,java.lang.Object)>(r0, 0L, 1, null);

        if $z0 == 0 goto label2;

        return;

     label2:
        specialinvoke r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()>();

        return;
    }

    public java.lang.String toString()
    {
        long $l9, $l10;
        java.util.ArrayList r1;
        kotlinx.coroutines.scheduling.WorkQueue r5;
        int[] $r7;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.String $r10;
        kotlinx.coroutines.scheduling.GlobalQueue r13;
        java.util.Collection r8;
        java.util.concurrent.atomic.AtomicLongFieldUpdater r11;
        kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r6;
        kotlinx.coroutines.scheduling.CoroutineScheduler r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r4;
        java.lang.Object $r3;
        java.lang.StringBuilder $r9, $r12;
        kotlinx.coroutines.internal.ResizableAtomicArray $r2;

        r0 := @this: kotlinx.coroutines.scheduling.CoroutineScheduler;

        i0 = 0;

        i1 = 0;

        i2 = 0;

        i3 = 0;

        i4 = 0;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        i5 = 1;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $i6 = virtualinvoke $r2.<kotlinx.coroutines.internal.ResizableAtomicArray: int currentLength()>();

     label01:
        if i5 >= $i6 goto label10;

        $r2 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.ResizableAtomicArray workers>;

        $r3 = virtualinvoke $r2.<kotlinx.coroutines.internal.ResizableAtomicArray: java.lang.Object get(int)>(i5);

        r4 = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) $r3;

        if r4 != null goto label02;

        goto label09;

     label02:
        r5 = r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue>;

        $i7 = virtualinvoke r5.<kotlinx.coroutines.scheduling.WorkQueue: int getSize$kotlinx_coroutines_core()>();

        r6 = r4.<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state>;

        $r7 = <kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i8 = virtualinvoke r6.<kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: int ordinal()>();

        $i8 = $r7[$i8];

        lookupswitch($i8)
        {
            case 1: goto label08;
            case 2: goto label07;
            case 3: goto label06;
            case 4: goto label05;
            case 5: goto label04;
            default: goto label03;
        };

     label03:
        goto label09;

     label04:
        i4 = i4 + 1;

        goto label09;

     label05:
        i3 = i3 + 1;

        if $i7 <= 0 goto label09;

        r8 = (java.util.Collection) r1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(100);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label09;

     label06:
        i2 = i2 + 1;

        r8 = (java.util.Collection) r1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(99);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label09;

     label07:
        i1 = i1 + 1;

        r8 = (java.util.Collection) r1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(98);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label09;

     label08:
        i0 = i0 + 1;

     label09:
        i5 = i5 + 1;

        goto label01;

     label10:
        r11 = <kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU>;

        $l9 = virtualinvoke r11.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>(r0);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName>;

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r10 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Pool Size {core = ");

        i5 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", max = ");

        i5 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize>;

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, Worker States {CPU = ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blocking = ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parked = ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dormant = ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", terminated = ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, running workers queues = ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", global CPU queue size = ");

        r13 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue>;

        i0 = virtualinvoke r13.<kotlinx.coroutines.scheduling.GlobalQueue: int getSize()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", global blocking queue size = ");

        r13 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue>;

        i0 = virtualinvoke r13.<kotlinx.coroutines.scheduling.GlobalQueue: int getSize()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Control State {created workers= ");

        $l10 = 2097151L & $l9;

        i0 = (int) $l10;

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blocking tasks = ");

        $l10 = 4398044413952L & $l9;

        $l10 = $l10 >> 21;

        i0 = (int) $l10;

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", CPUs acquired = ");

        i0 = r0.<kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize>;

        $l9 = 9223367638808264704L & $l9;

        $l9 = $l9 >> 42;

        i1 = (int) $l9;

        i0 = i0 - i1;

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
