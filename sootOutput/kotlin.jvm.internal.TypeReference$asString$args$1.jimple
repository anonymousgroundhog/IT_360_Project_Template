final class kotlin.jvm.internal.TypeReference$asString$args$1 extends kotlin.jvm.internal.Lambda implements kotlin.jvm.functions.Function1
{
    final kotlin.jvm.internal.TypeReference this$0;

    void <init>(kotlin.jvm.internal.TypeReference)
    {
        kotlin.jvm.internal.TypeReference$asString$args$1 r0;
        kotlin.jvm.internal.TypeReference $r1;

        r0 := @this: kotlin.jvm.internal.TypeReference$asString$args$1;

        $r1 := @parameter0: kotlin.jvm.internal.TypeReference;

        r0.<kotlin.jvm.internal.TypeReference$asString$args$1: kotlin.jvm.internal.TypeReference this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.CharSequence invoke(kotlin.reflect.KTypeProjection)
    {
        kotlin.jvm.internal.TypeReference$asString$args$1 r0;
        java.lang.CharSequence $r4;
        kotlin.reflect.KTypeProjection $r1;
        java.lang.String $r2;
        kotlin.jvm.internal.TypeReference $r3;

        r0 := @this: kotlin.jvm.internal.TypeReference$asString$args$1;

        $r1 := @parameter0: kotlin.reflect.KTypeProjection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "it");

        $r3 = r0.<kotlin.jvm.internal.TypeReference$asString$args$1: kotlin.jvm.internal.TypeReference this$0>;

        $r2 = staticinvoke <kotlin.jvm.internal.TypeReference: java.lang.String access$asString(kotlin.jvm.internal.TypeReference,kotlin.reflect.KTypeProjection)>($r3, $r1);

        $r4 = (java.lang.CharSequence) $r2;

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        kotlin.jvm.internal.TypeReference$asString$args$1 r0;
        java.lang.CharSequence $r2;
        kotlin.reflect.KTypeProjection $r3;
        java.lang.Object $r1;

        r0 := @this: kotlin.jvm.internal.TypeReference$asString$args$1;

        $r1 := @parameter0: java.lang.Object;

        $r3 = (kotlin.reflect.KTypeProjection) $r1;

        $r2 = virtualinvoke r0.<kotlin.jvm.internal.TypeReference$asString$args$1: java.lang.CharSequence invoke(kotlin.reflect.KTypeProjection)>($r3);

        return $r2;
    }
}
