public final class kotlin.collections.AbstractList$Companion extends java.lang.Object
{

    private void <init>()
    {
        kotlin.collections.AbstractList$Companion r0;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.jvm.internal.DefaultConstructorMarker $r1;
        kotlin.collections.AbstractList$Companion r0;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<kotlin.collections.AbstractList$Companion: void <init>()>();

        return;
    }

    public final void checkBoundsIndexes$kotlin_stdlib(int, int, int)
    {
        java.lang.IndexOutOfBoundsException $r4;
        kotlin.collections.AbstractList$Companion r0;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i0 < 0 goto label2;

        if $i1 > $i2 goto label2;

        if $i0 > $i1 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > endIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", endIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public final void checkElementIndex$kotlin_stdlib(int, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        kotlin.collections.AbstractList$Companion r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 < 0 goto label1;

        if $i0 >= $i1 goto label1;

        return;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public final void checkPositionIndex$kotlin_stdlib(int, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        kotlin.collections.AbstractList$Companion r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 < 0 goto label1;

        if $i0 > $i1 goto label1;

        return;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public final void checkRangeIndexes$kotlin_stdlib(int, int, int)
    {
        java.lang.IndexOutOfBoundsException $r4;
        kotlin.collections.AbstractList$Companion r0;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i0 < 0 goto label2;

        if $i1 > $i2 goto label2;

        if $i0 > $i1 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > toIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", toIndex: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public final boolean orderedEquals$kotlin_stdlib(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r3, $r4;
        kotlin.collections.AbstractList$Companion r0;
        java.util.Collection $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r5, $r6;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "c");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "other");

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }

    public final int orderedHashCode$kotlin_stdlib(java.util.Collection)
    {
        java.util.Iterator $r2;
        kotlin.collections.AbstractList$Companion r0;
        java.util.Collection $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: kotlin.collections.AbstractList$Companion;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "c");

        $i0 = 1;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = $i0 * 31;

        if $r3 == null goto label2;

        $i1 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        goto label3;

     label2:
        $i1 = 0;

     label3:
        $i0 = $i0 + $i1;

        goto label1;

     label4:
        return $i0;
    }
}
