class kotlin.collections.GroupingKt__GroupingKt extends kotlin.collections.GroupingKt__GroupingJVMKt
{

    public void <init>()
    {
        kotlin.collections.GroupingKt__GroupingKt r0;

        r0 := @this: kotlin.collections.GroupingKt__GroupingKt;

        specialinvoke r0.<kotlin.collections.GroupingKt__GroupingJVMKt: void <init>()>();

        return;
    }

    public static final java.util.Map aggregate(kotlin.collections.Grouping, kotlin.jvm.functions.Function4)
    {
        java.util.Iterator $r4;
        kotlin.jvm.functions.Function4 $r1;
        java.util.LinkedHashMap r2;
        kotlin.collections.Grouping $r0;
        java.util.Map r3;
        java.lang.Boolean $r8;
        java.lang.Object $r5, $r6, $r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: kotlin.jvm.functions.Function4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) r2;

        $r4 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r5);

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r7 != null goto label2;

        $z0 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r5 = interfaceinvoke $r1.<kotlin.jvm.functions.Function4: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r7, $r5, $r8);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label4:
        return r3;
    }

    public static final java.util.Map aggregateTo(kotlin.collections.Grouping, java.util.Map, kotlin.jvm.functions.Function4)
    {
        java.util.Iterator $r3;
        kotlin.jvm.functions.Function4 $r2;
        kotlin.collections.Grouping $r0;
        java.util.Map $r1;
        java.lang.Boolean $r7;
        java.lang.Object $r4, $r5, $r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r3 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r4);

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 != null goto label2;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function4: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r6, $r4, $r7);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        goto label1;

     label4:
        return $r1;
    }

    public static final java.util.Map eachCountTo(kotlin.collections.Grouping, java.util.Map)
    {
        java.util.Iterator $r3;
        java.lang.Integer $r2, $r7;
        kotlin.collections.Grouping $r0;
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r4, $r5;
        java.lang.Number r6;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r4);

        $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 != null goto label2;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $r5 = $r2;

        goto label4;

     label4:
        r6 = (java.lang.Number) $r5;

        $i0 = virtualinvoke r6.<java.lang.Number: int intValue()>();

        $i0 = $i0 + 1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        goto label1;

     label5:
        return $r1;
    }

    public static final java.util.Map fold(kotlin.collections.Grouping, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r5;
        kotlin.jvm.functions.Function2 $r2;
        java.util.LinkedHashMap r3;
        kotlin.collections.Grouping $r0;
        java.util.Map r4;
        java.lang.Object $r1, $r6, $r7, $r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        r3 = new java.util.LinkedHashMap;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>()>();

        r4 = (java.util.Map) r3;

        $r5 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r6);

        $r8 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        if $r8 != null goto label2;

        $z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $r8 = $r1;

        goto label4;

     label4:
        $r6 = interfaceinvoke $r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r8, $r6);

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        goto label1;

     label5:
        return r4;
    }

    public static final java.util.Map fold(kotlin.collections.Grouping, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function3)
    {
        java.util.Iterator $r6;
        kotlin.jvm.functions.Function3 $r2;
        kotlin.jvm.functions.Function2 $r1, $r3;
        java.util.LinkedHashMap r4;
        kotlin.collections.Grouping $r0;
        java.util.Map r5;
        java.lang.Object $r7, $r8, $r9, $r10;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        $r3 = $r1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "initialValueSelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        r4 = new java.util.LinkedHashMap;

        specialinvoke r4.<java.util.LinkedHashMap: void <init>()>();

        r5 = (java.util.Map) r4;

        $r6 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r7);

        $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        if $r9 != null goto label2;

        $z0 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $r10 = $r8;

        $r9 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label5;

     label4:
        $r10 = $r8;

     label5:
        $r7 = interfaceinvoke $r2.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r10, $r9, $r7);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r3 = $r1;

        goto label1;

     label6:
        return r5;
    }

    public static final java.util.Map foldTo(kotlin.collections.Grouping, java.util.Map, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        java.util.Iterator $r4;
        kotlin.jvm.functions.Function2 $r3;
        kotlin.collections.Grouping $r0;
        java.util.Map $r1;
        java.lang.Object $r2, $r5, $r6, $r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "operation");

        $r4 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r5);

        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r7 != null goto label2;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $r7 = $r2;

        goto label4;

     label4:
        $r5 = interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r7, $r5);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label5:
        return $r1;
    }

    public static final java.util.Map foldTo(kotlin.collections.Grouping, java.util.Map, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function3)
    {
        java.util.Iterator $r5;
        kotlin.jvm.functions.Function3 $r3;
        kotlin.jvm.functions.Function2 $r2, $r4;
        kotlin.collections.Grouping $r0;
        java.util.Map $r1;
        java.lang.Object $r6, $r7, $r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function2;

        $r3 := @parameter3: kotlin.jvm.functions.Function3;

        $r4 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "initialValueSelector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "operation");

        $r5 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r6);

        $r8 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        if $r8 != null goto label2;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r4.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r7, $r6);

        goto label4;

     label4:
        $r6 = interfaceinvoke $r3.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r8, $r6);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        $r4 = $r2;

        goto label1;

     label5:
        return $r1;
    }

    public static final java.util.Map reduce(kotlin.collections.Grouping, kotlin.jvm.functions.Function3)
    {
        java.util.Iterator $r4;
        kotlin.jvm.functions.Function3 $r1;
        java.util.LinkedHashMap r2;
        kotlin.collections.Grouping $r0;
        java.util.Map r3;
        java.lang.Object $r5, $r6, $r7, r8;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        r2 = new java.util.LinkedHashMap;

        specialinvoke r2.<java.util.LinkedHashMap: void <init>()>();

        r3 = (java.util.Map) r2;

        $r4 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r5);

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r7 != null goto label2;

        $z0 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r8 = $r5;

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        r8 = interfaceinvoke $r1.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r7, $r5);

     label5:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r8);

        goto label1;

     label6:
        return r3;
    }

    public static final java.util.Map reduceTo(kotlin.collections.Grouping, java.util.Map, kotlin.jvm.functions.Function3)
    {
        java.util.Iterator $r3;
        kotlin.jvm.functions.Function3 $r2;
        kotlin.collections.Grouping $r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r5, $r6, r7;
        boolean $z0;

        $r0 := @parameter0: kotlin.collections.Grouping;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: kotlin.jvm.functions.Function3;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "operation");

        $r3 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.util.Iterator sourceIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r0.<kotlin.collections.Grouping: java.lang.Object keyOf(java.lang.Object)>($r4);

        $r6 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 != null goto label2;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r7 = $r4;

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        r7 = interfaceinvoke $r2.<kotlin.jvm.functions.Function3: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r6, $r4);

     label5:
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r7);

        goto label1;

     label6:
        return $r1;
    }
}
