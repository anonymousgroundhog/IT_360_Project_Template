final class kotlin.io.path.DirectoryEntriesReader extends java.nio.file.SimpleFileVisitor
{
    private kotlin.io.path.PathNode directoryNode;
    private kotlin.collections.ArrayDeque entries;
    private final boolean followLinks;

    public void <init>(boolean)
    {
        kotlin.io.path.DirectoryEntriesReader r0;
        kotlin.collections.ArrayDeque $r1;
        boolean $z0;

        r0 := @this: kotlin.io.path.DirectoryEntriesReader;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.nio.file.SimpleFileVisitor: void <init>()>();

        r0.<kotlin.io.path.DirectoryEntriesReader: boolean followLinks> = $z0;

        $r1 = new kotlin.collections.ArrayDeque;

        specialinvoke $r1.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.collections.ArrayDeque entries> = $r1;

        return;
    }

    public final boolean getFollowLinks()
    {
        kotlin.io.path.DirectoryEntriesReader r0;
        boolean z0;

        r0 := @this: kotlin.io.path.DirectoryEntriesReader;

        z0 = r0.<kotlin.io.path.DirectoryEntriesReader: boolean followLinks>;

        return z0;
    }

    public volatile java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.FileVisitResult $r3;
        kotlin.io.path.DirectoryEntriesReader r0;
        java.lang.Object $r1;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.Path $r4;

        r0 := @this: kotlin.io.path.DirectoryEntriesReader;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r4 = (java.nio.file.Path) $r1;

        $r3 = virtualinvoke r0.<kotlin.io.path.DirectoryEntriesReader: java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r4, $r2);

        return $r3;
    }

    public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.attribute.BasicFileAttributes $r2;
        kotlin.collections.ArrayDeque $r6;
        kotlin.io.path.PathNode r3, $r5;
        java.nio.file.FileVisitResult $r7;
        kotlin.io.path.DirectoryEntriesReader r0;
        java.lang.Object $r4;
        java.nio.file.Path $r1;

        r0 := @this: kotlin.io.path.DirectoryEntriesReader;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "dir");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "attrs");

        r3 = new kotlin.io.path.PathNode;

        $r4 = interfaceinvoke $r2.<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>();

        $r5 = r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.io.path.PathNode directoryNode>;

        specialinvoke r3.<kotlin.io.path.PathNode: void <init>(java.nio.file.Path,java.lang.Object,kotlin.io.path.PathNode)>($r1, $r4, $r5);

        $r6 = r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.collections.ArrayDeque entries>;

        virtualinvoke $r6.<kotlin.collections.ArrayDeque: boolean add(java.lang.Object)>(r3);

        $r7 = specialinvoke r0.<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "super.preVisitDirectory(dir, attrs)");

        return $r7;
    }

    public final java.util.List readEntries(kotlin.io.path.PathNode)
    {
        java.nio.file.FileVisitor $r5;
        java.util.Set $r4;
        kotlin.collections.ArrayDeque $r6, $r7;
        kotlin.io.path.PathNode $r1;
        kotlin.io.path.LinkFollowing r3;
        java.util.List $r8;
        kotlin.io.path.DirectoryEntriesReader r0;
        java.nio.file.Path $r2;
        boolean $z0;

        r0 := @this: kotlin.io.path.DirectoryEntriesReader;

        $r1 := @parameter0: kotlin.io.path.PathNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "directoryNode");

        r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.io.path.PathNode directoryNode> = $r1;

        $r2 = virtualinvoke $r1.<kotlin.io.path.PathNode: java.nio.file.Path getPath()>();

        r3 = <kotlin.io.path.LinkFollowing: kotlin.io.path.LinkFollowing INSTANCE>;

        $z0 = r0.<kotlin.io.path.DirectoryEntriesReader: boolean followLinks>;

        $r4 = virtualinvoke r3.<kotlin.io.path.LinkFollowing: java.util.Set toVisitOptions(boolean)>($z0);

        $r5 = (java.nio.file.FileVisitor) r0;

        staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>($r2, $r4, 1, $r5);

        $r6 = r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.collections.ArrayDeque entries>;

        virtualinvoke $r6.<kotlin.collections.ArrayDeque: java.lang.Object removeFirst()>();

        $r6 = r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.collections.ArrayDeque entries>;

        $r7 = new kotlin.collections.ArrayDeque;

        specialinvoke $r7.<kotlin.collections.ArrayDeque: void <init>()>();

        r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.collections.ArrayDeque entries> = $r7;

        $r8 = (java.util.List) $r6;

        return $r8;
    }

    public volatile java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.FileVisitResult $r3;
        kotlin.io.path.DirectoryEntriesReader r0;
        java.lang.Object $r1;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.Path $r4;

        r0 := @this: kotlin.io.path.DirectoryEntriesReader;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r4 = (java.nio.file.Path) $r1;

        $r3 = virtualinvoke r0.<kotlin.io.path.DirectoryEntriesReader: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r4, $r2);

        return $r3;
    }

    public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        kotlin.io.path.PathNode r4, $r5;
        java.nio.file.FileVisitResult $r3;
        kotlin.io.path.DirectoryEntriesReader r0;
        java.nio.file.attribute.BasicFileAttributes $r2;
        java.nio.file.Path $r1;
        kotlin.collections.ArrayDeque $r6;

        r0 := @this: kotlin.io.path.DirectoryEntriesReader;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "attrs");

        r4 = new kotlin.io.path.PathNode;

        $r5 = r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.io.path.PathNode directoryNode>;

        specialinvoke r4.<kotlin.io.path.PathNode: void <init>(java.nio.file.Path,java.lang.Object,kotlin.io.path.PathNode)>($r1, null, $r5);

        $r6 = r0.<kotlin.io.path.DirectoryEntriesReader: kotlin.collections.ArrayDeque entries>;

        virtualinvoke $r6.<kotlin.collections.ArrayDeque: boolean add(java.lang.Object)>(r4);

        $r3 = specialinvoke r0.<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "super.visitFile(file, attrs)");

        return $r3;
    }
}
