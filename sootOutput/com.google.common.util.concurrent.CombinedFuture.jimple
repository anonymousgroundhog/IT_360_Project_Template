final class com.google.common.util.concurrent.CombinedFuture extends com.google.common.util.concurrent.AggregateFuture
{
    private com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task;

    void <init>(com.google.common.collect.ImmutableCollection, boolean, java.util.concurrent.Executor, com.google.common.util.concurrent.AsyncCallable)
    {
        com.google.common.util.concurrent.CombinedFuture r0;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask $r4;
        com.google.common.collect.ImmutableCollection r1;
        boolean $z0;
        com.google.common.util.concurrent.AsyncCallable r3;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture;

        r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: com.google.common.util.concurrent.AsyncCallable;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void <init>(com.google.common.collect.ImmutableCollection,boolean,boolean)>(r1, $z0, 0);

        $r4 = new com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask;

        specialinvoke $r4.<com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask: void <init>(com.google.common.util.concurrent.CombinedFuture,com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)>(r0, r3, $r2);

        r0.<com.google.common.util.concurrent.CombinedFuture: com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task> = $r4;

        virtualinvoke r0.<com.google.common.util.concurrent.CombinedFuture: void init()>();

        return;
    }

    void <init>(com.google.common.collect.ImmutableCollection, boolean, java.util.concurrent.Executor, java.util.concurrent.Callable)
    {
        com.google.common.util.concurrent.CombinedFuture r0;
        java.util.concurrent.Executor $r2;
        com.google.common.collect.ImmutableCollection r1;
        com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask $r4;
        java.util.concurrent.Callable r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture;

        r1 := @parameter0: com.google.common.collect.ImmutableCollection;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: java.util.concurrent.Callable;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void <init>(com.google.common.collect.ImmutableCollection,boolean,boolean)>(r1, $z0, 0);

        $r4 = new com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask;

        specialinvoke $r4.<com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask: void <init>(com.google.common.util.concurrent.CombinedFuture,java.util.concurrent.Callable,java.util.concurrent.Executor)>(r0, r3, $r2);

        r0.<com.google.common.util.concurrent.CombinedFuture: com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task> = $r4;

        virtualinvoke r0.<com.google.common.util.concurrent.CombinedFuture: void init()>();

        return;
    }

    static com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask access$002(com.google.common.util.concurrent.CombinedFuture, com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask)
    {
        com.google.common.util.concurrent.CombinedFuture $r0;
        com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.CombinedFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask;

        $r0.<com.google.common.util.concurrent.CombinedFuture: com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task> = $r1;

        return $r1;
    }

    void collectOneValue(int, java.lang.Object)
    {
        int $i0;
        com.google.common.util.concurrent.CombinedFuture r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        return;
    }

    void handleAllCompleted()
    {
        com.google.common.util.concurrent.CombinedFuture r0;
        com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask r1;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture;

        r1 = r0.<com.google.common.util.concurrent.CombinedFuture: com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask: void execute()>();

     label1:
        return;
    }

    protected void interruptTask()
    {
        com.google.common.util.concurrent.CombinedFuture r0;
        com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask r1;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture;

        r1 = r0.<com.google.common.util.concurrent.CombinedFuture: com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask: void interruptTask()>();

     label1:
        return;
    }

    void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)
    {
        com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason $r1, $r2;
        com.google.common.util.concurrent.CombinedFuture r0;

        r0 := @this: com.google.common.util.concurrent.CombinedFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture: void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason)>($r1);

        $r2 = <com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason: com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason OUTPUT_FUTURE_DONE>;

        if $r1 != $r2 goto label1;

        r0.<com.google.common.util.concurrent.CombinedFuture: com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task> = null;

     label1:
        return;
    }
}
