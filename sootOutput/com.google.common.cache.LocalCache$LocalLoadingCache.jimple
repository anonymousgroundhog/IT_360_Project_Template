class com.google.common.cache.LocalCache$LocalLoadingCache extends com.google.common.cache.LocalCache$LocalManualCache implements com.google.common.cache.LoadingCache
{
    private static final long serialVersionUID;

    void <init>(com.google.common.cache.CacheBuilder, com.google.common.cache.CacheLoader)
    {
        com.google.common.cache.CacheLoader r2;
        com.google.common.cache.LocalCache $r3;
        com.google.common.cache.LocalCache$LocalLoadingCache r0;
        java.lang.Object $r4;
        com.google.common.cache.CacheBuilder r1;

        r0 := @this: com.google.common.cache.LocalCache$LocalLoadingCache;

        r1 := @parameter0: com.google.common.cache.CacheBuilder;

        r2 := @parameter1: com.google.common.cache.CacheLoader;

        $r3 = new com.google.common.cache.LocalCache;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r2 = (com.google.common.cache.CacheLoader) $r4;

        specialinvoke $r3.<com.google.common.cache.LocalCache: void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)>(r1, r2);

        specialinvoke r0.<com.google.common.cache.LocalCache$LocalManualCache: void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1)>($r3, null);

        return;
    }

    public final java.lang.Object apply(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.cache.LocalCache$LocalLoadingCache r0;

        r0 := @this: com.google.common.cache.LocalCache$LocalLoadingCache;

        r1 := @parameter0: java.lang.Object;

        r1 = virtualinvoke r0.<com.google.common.cache.LocalCache$LocalLoadingCache: java.lang.Object getUnchecked(java.lang.Object)>(r1);

        return r1;
    }

    public java.lang.Object get(java.lang.Object) throws java.util.concurrent.ExecutionException
    {
        java.lang.Object r1;
        com.google.common.cache.LocalCache $r2;
        com.google.common.cache.LocalCache$LocalLoadingCache r0;

        r0 := @this: com.google.common.cache.LocalCache$LocalLoadingCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.cache.LocalCache$LocalLoadingCache: com.google.common.cache.LocalCache localCache>;

        r1 = virtualinvoke $r2.<com.google.common.cache.LocalCache: java.lang.Object getOrLoad(java.lang.Object)>(r1);

        return r1;
    }

    public com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) throws java.util.concurrent.ExecutionException
    {
        com.google.common.cache.LocalCache $r3;
        com.google.common.cache.LocalCache$LocalLoadingCache r0;
        com.google.common.collect.ImmutableMap $r2;
        java.lang.Iterable r1;

        r0 := @this: com.google.common.cache.LocalCache$LocalLoadingCache;

        r1 := @parameter0: java.lang.Iterable;

        $r3 = r0.<com.google.common.cache.LocalCache$LocalLoadingCache: com.google.common.cache.LocalCache localCache>;

        $r2 = virtualinvoke $r3.<com.google.common.cache.LocalCache: com.google.common.collect.ImmutableMap getAll(java.lang.Iterable)>(r1);

        return $r2;
    }

    public java.lang.Object getUnchecked(java.lang.Object)
    {
        java.util.concurrent.ExecutionException r3;
        java.lang.Throwable $r4;
        com.google.common.cache.LocalCache$LocalLoadingCache r0;
        com.google.common.util.concurrent.UncheckedExecutionException $r2;
        java.lang.Object r1;

        r0 := @this: com.google.common.cache.LocalCache$LocalLoadingCache;

        r1 := @parameter0: java.lang.Object;

     label1:
        r1 = virtualinvoke r0.<com.google.common.cache.LocalCache$LocalLoadingCache: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return r1;

     label3:
        r3 := @caughtexception;

        $r2 = new com.google.common.util.concurrent.UncheckedExecutionException;

        $r4 = virtualinvoke r3.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r2.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r4);

        throw $r2;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public void refresh(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.cache.LocalCache $r2;
        com.google.common.cache.LocalCache$LocalLoadingCache r0;

        r0 := @this: com.google.common.cache.LocalCache$LocalLoadingCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.cache.LocalCache$LocalLoadingCache: com.google.common.cache.LocalCache localCache>;

        virtualinvoke $r2.<com.google.common.cache.LocalCache: void refresh(java.lang.Object)>(r1);

        return;
    }

    java.lang.Object writeReplace()
    {
        com.google.common.cache.LocalCache$LoadingSerializationProxy $r1;
        com.google.common.cache.LocalCache $r2;
        com.google.common.cache.LocalCache$LocalLoadingCache r0;

        r0 := @this: com.google.common.cache.LocalCache$LocalLoadingCache;

        $r1 = new com.google.common.cache.LocalCache$LoadingSerializationProxy;

        $r2 = r0.<com.google.common.cache.LocalCache$LocalLoadingCache: com.google.common.cache.LocalCache localCache>;

        specialinvoke $r1.<com.google.common.cache.LocalCache$LoadingSerializationProxy: void <init>(com.google.common.cache.LocalCache)>($r2);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.google.common.cache.LocalCache$LocalLoadingCache: long serialVersionUID> = 1L;

        return;
    }
}
