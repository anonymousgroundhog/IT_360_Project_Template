final class kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 extends kotlin.jvm.internal.FunctionReferenceImpl implements kotlin.jvm.functions.Function1
{
    public static final kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 INSTANCE;

    static void <clinit>()
    {
        kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 $r0;

        $r0 = new kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1;

        specialinvoke $r0.<kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1: void <init>()>();

        <kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1: kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 r0;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1;

        specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int)>(1, class "Lkotlin/reflect/TypesJVMKt;", "typeToString", "typeToString(Ljava/lang/reflect/Type;)Ljava/lang/String;", 1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        java.lang.reflect.Type $r3;
        kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1;

        $r1 := @parameter0: java.lang.Object;

        $r3 = (java.lang.reflect.Type) $r1;

        $r2 = virtualinvoke r0.<kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1: java.lang.String invoke(java.lang.reflect.Type)>($r3);

        return $r2;
    }

    public final java.lang.String invoke(java.lang.reflect.Type)
    {
        kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 r0;
        java.lang.String $r2;
        java.lang.reflect.Type $r1;

        r0 := @this: kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1;

        $r1 := @parameter0: java.lang.reflect.Type;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "p0");

        $r2 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.String access$typeToString(java.lang.reflect.Type)>($r1);

        return $r2;
    }
}
