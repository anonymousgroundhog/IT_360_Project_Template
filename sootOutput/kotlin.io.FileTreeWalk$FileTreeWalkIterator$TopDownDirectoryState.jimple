final class kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState extends kotlin.io.FileTreeWalk$DirectoryState
{
    private int fileIndex;
    private java.io.File[] fileList;
    private boolean rootVisited;
    final kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0;

    public void <init>(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File)
    {
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState r0;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r1;
        java.io.File $r2;

        r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState;

        $r1 := @parameter0: kotlin.io.FileTreeWalk$FileTreeWalkIterator;

        $r2 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "rootDir");

        r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0> = $r1;

        specialinvoke r0.<kotlin.io.FileTreeWalk$DirectoryState: void <init>(java.io.File)>($r2);

        return;
    }

    public java.io.File step()
    {
        kotlin.jvm.functions.Function1 $r4;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator $r2;
        kotlin.jvm.functions.Function2 $r9;
        kotlin.io.AccessDeniedException $r1;
        java.io.File $r5, $r10;
        kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState r0;
        int $i0, $i1;
        java.lang.Boolean $r7;
        java.lang.Object $r6;
        java.io.File[] $r8;
        boolean $z0, $z1;
        kotlin.io.FileTreeWalk $r3;

        r0 := @this: kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState;

        $z0 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: boolean rootVisited>;

        if $z0 != 0 goto label3;

        $r2 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnEnter$p(kotlin.io.FileTreeWalk)>($r3);

        $z0 = 0;

        if $r4 == null goto label1;

        $r5 = virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        $r6 = interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        return null;

     label2:
        r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: boolean rootVisited> = 1;

        $r5 = virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        return $r5;

     label3:
        $r8 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        if $r8 == null goto label5;

        $i0 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: int fileIndex>;

        $r8 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $i1 = lengthof $r8;

        if $i0 >= $i1 goto label4;

        goto label5;

     label4:
        $r2 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnLeave$p(kotlin.io.FileTreeWalk)>($r3);

        if $r4 == null goto label9;

        $r5 = virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        return null;

     label5:
        $r8 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        if $r8 != null goto label8;

        $r5 = virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        $r8 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>();

        r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList> = $r8;

        $r8 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        if $r8 != null goto label6;

        $r2 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r9 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function2 access$getOnFail$p(kotlin.io.FileTreeWalk)>($r3);

        if $r9 == null goto label6;

        $r5 = virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        $r1 = new kotlin.io.AccessDeniedException;

        $r10 = virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        specialinvoke $r1.<kotlin.io.AccessDeniedException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r10, null, "Cannot list files in a directory", 2, null);

        interfaceinvoke $r9.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r5, $r1);

     label6:
        $r8 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        if $r8 == null goto label7;

        $r8 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $i0 = lengthof $r8;

        if $i0 != 0 goto label8;

     label7:
        $r2 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: kotlin.io.FileTreeWalk$FileTreeWalkIterator this$0>;

        $r3 = $r2.<kotlin.io.FileTreeWalk$FileTreeWalkIterator: kotlin.io.FileTreeWalk this$0>;

        $r4 = staticinvoke <kotlin.io.FileTreeWalk: kotlin.jvm.functions.Function1 access$getOnLeave$p(kotlin.io.FileTreeWalk)>($r3);

        if $r4 == null goto label9;

        $r5 = virtualinvoke r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File getRoot()>();

        interfaceinvoke $r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        return null;

     label8:
        $r8 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: java.io.File[] fileList>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $i0 = r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: int fileIndex>;

        $i1 = $i0 + 1;

        r0.<kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState: int fileIndex> = $i1;

        $r5 = $r8[$i0];

        return $r5;

     label9:
        return null;
    }
}
