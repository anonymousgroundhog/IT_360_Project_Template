final class com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable extends java.lang.Object implements com.google.common.util.concurrent.AbstractScheduledService$Cancellable
{
    private final java.util.concurrent.Future delegate;

    void <init>(java.util.concurrent.Future)
    {
        java.util.concurrent.Future r1;
        com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable r0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable;

        r1 := @parameter0: java.util.concurrent.Future;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable: java.util.concurrent.Future delegate> = r1;

        return;
    }

    public void cancel(boolean)
    {
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable: java.util.concurrent.Future delegate>;

        interfaceinvoke $r1.<java.util.concurrent.Future: boolean cancel(boolean)>($z0);

        return;
    }

    public boolean isCancelled()
    {
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable: java.util.concurrent.Future delegate>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isCancelled()>();

        return $z0;
    }
}
