class com.google.common.hash.Funnels$SinkAsStream extends java.io.OutputStream
{
    final com.google.common.hash.PrimitiveSink sink;

    void <init>(com.google.common.hash.PrimitiveSink)
    {
        com.google.common.hash.PrimitiveSink $r1;
        java.lang.Object $r2;
        com.google.common.hash.Funnels$SinkAsStream r0;

        r0 := @this: com.google.common.hash.Funnels$SinkAsStream;

        $r1 := @parameter0: com.google.common.hash.PrimitiveSink;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (com.google.common.hash.PrimitiveSink) $r2;

        r0.<com.google.common.hash.Funnels$SinkAsStream: com.google.common.hash.PrimitiveSink sink> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        com.google.common.hash.Funnels$SinkAsStream r0;
        int $i0;
        java.lang.StringBuilder $r1;
        com.google.common.hash.PrimitiveSink $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.google.common.hash.Funnels$SinkAsStream;

        $r2 = r0.<com.google.common.hash.Funnels$SinkAsStream: com.google.common.hash.PrimitiveSink sink>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 24;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Funnels.asOutputStream(");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void write(int)
    {
        byte $b1;
        com.google.common.hash.Funnels$SinkAsStream r0;
        int $i0;
        com.google.common.hash.PrimitiveSink $r1;

        r0 := @this: com.google.common.hash.Funnels$SinkAsStream;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.hash.Funnels$SinkAsStream: com.google.common.hash.PrimitiveSink sink>;

        $b1 = (byte) $i0;

        interfaceinvoke $r1.<com.google.common.hash.PrimitiveSink: com.google.common.hash.PrimitiveSink putByte(byte)>($b1);

        return;
    }

    public void write(byte[])
    {
        byte[] $r1;
        com.google.common.hash.PrimitiveSink $r2;
        com.google.common.hash.Funnels$SinkAsStream r0;

        r0 := @this: com.google.common.hash.Funnels$SinkAsStream;

        $r1 := @parameter0: byte[];

        $r2 = r0.<com.google.common.hash.Funnels$SinkAsStream: com.google.common.hash.PrimitiveSink sink>;

        interfaceinvoke $r2.<com.google.common.hash.PrimitiveSink: com.google.common.hash.PrimitiveSink putBytes(byte[])>($r1);

        return;
    }

    public void write(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.Funnels$SinkAsStream r0;
        int $i0, $i1;
        com.google.common.hash.PrimitiveSink $r2;

        r0 := @this: com.google.common.hash.Funnels$SinkAsStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<com.google.common.hash.Funnels$SinkAsStream: com.google.common.hash.PrimitiveSink sink>;

        interfaceinvoke $r2.<com.google.common.hash.PrimitiveSink: com.google.common.hash.PrimitiveSink putBytes(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
}
