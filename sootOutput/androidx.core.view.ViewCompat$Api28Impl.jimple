class androidx.core.view.ViewCompat$Api28Impl extends java.lang.Object
{

    private void <init>()
    {
        androidx.core.view.ViewCompat$Api28Impl r0;

        r0 := @this: androidx.core.view.ViewCompat$Api28Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void addOnUnhandledKeyEventListener(android.view.View, androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
    {
        androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat $r1;
        int i0;
        android.view.View $r0;
        androidx.core.view.ViewCompat$Api28Impl$$ExternalSyntheticLambda0 r5;
        java.lang.Object $r2;
        androidx.collection.SimpleArrayMap r3, r4;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat;

        i0 = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        $r2 = virtualinvoke $r0.<android.view.View: java.lang.Object getTag(int)>(i0);

        r3 = (androidx.collection.SimpleArrayMap) $r2;

        if r3 != null goto label1;

        r4 = new androidx.collection.SimpleArrayMap;

        specialinvoke r4.<androidx.collection.SimpleArrayMap: void <init>()>();

        r3 = r4;

        i0 = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        virtualinvoke $r0.<android.view.View: void setTag(int,java.lang.Object)>(i0, r4);

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1);

        r5 = new androidx.core.view.ViewCompat$Api28Impl$$ExternalSyntheticLambda0;

        specialinvoke r5.<androidx.core.view.ViewCompat$Api28Impl$$ExternalSyntheticLambda0: void <init>(androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)>($r1);

        virtualinvoke r3.<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

        virtualinvoke $r0.<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>(r5);

        return;
    }

    static java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
    {
        android.view.View $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: android.view.View;

        $r1 = virtualinvoke $r0.<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>();

        return $r1;
    }

    static boolean isAccessibilityHeading(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isAccessibilityHeading()>();

        return $z0;
    }

    static boolean isScreenReaderFocusable(android.view.View)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isScreenReaderFocusable()>();

        return $z0;
    }

    static void removeOnUnhandledKeyEventListener(android.view.View, androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
    {
        android.view.View$OnUnhandledKeyEventListener r4;
        androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat $r1;
        int i0;
        android.view.View $r0;
        java.lang.Object $r2;
        androidx.collection.SimpleArrayMap r3;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat;

        i0 = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        $r2 = virtualinvoke $r0.<android.view.View: java.lang.Object getTag(int)>(i0);

        r3 = (androidx.collection.SimpleArrayMap) $r2;

        if r3 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r3.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (android.view.View$OnUnhandledKeyEventListener) $r2;

        if r4 == null goto label2;

        virtualinvoke $r0.<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>(r4);

     label2:
        return;
    }

    static java.lang.Object requireViewById(android.view.View, int)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r0 = virtualinvoke $r0.<android.view.View: android.view.View requireViewById(int)>($i0);

        return $r0;
    }

    static void setAccessibilityHeading(android.view.View, boolean)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        virtualinvoke $r0.<android.view.View: void setAccessibilityHeading(boolean)>($z0);

        return;
    }

    static void setAccessibilityPaneTitle(android.view.View, java.lang.CharSequence)
    {
        android.view.View $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke $r0.<android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>($r1);

        return;
    }

    static void setScreenReaderFocusable(android.view.View, boolean)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        virtualinvoke $r0.<android.view.View: void setScreenReaderFocusable(boolean)>($z0);

        return;
    }
}
