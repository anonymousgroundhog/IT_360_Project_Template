public abstract class com.google.common.collect.ImmutableMap extends java.lang.Object implements java.util.Map, java.io.Serializable
{
    static final java.util.Map$Entry[] EMPTY_ENTRY_ARRAY;
    private transient com.google.common.collect.ImmutableSet entrySet;
    private transient com.google.common.collect.ImmutableSet keySet;
    private transient com.google.common.collect.ImmutableSetMultimap multimapView;
    private transient com.google.common.collect.ImmutableCollection values;

    static void <clinit>()
    {
        java.util.Map$Entry[] $r0;

        $r0 = newarray (java.util.Map$Entry)[0];

        <com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY> = $r0;

        return;
    }

    void <init>()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableMap$Builder builder()
    {
        com.google.common.collect.ImmutableMap$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap$Builder builderWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.ImmutableMap$Builder $r0;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "expectedSize");

        $r0 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        return $r0;
    }

    static void checkNoConflict(boolean, java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: java.lang.IllegalArgumentException conflictException(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        throw $r3;
    }

    static java.lang.IllegalArgumentException conflictException(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        java.lang.Object $r1, $r2;
        java.lang.StringBuilder $r7;
        java.lang.String $r0, $r4, $r5, $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 34;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        return $r3;
    }

    public static com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableMap $r3;
        java.util.Collection r2;
        int $i0;
        com.google.common.collect.ImmutableMap$Builder r1;
        java.lang.Iterable r0;
        boolean z0;

        r0 := @parameter0: java.lang.Iterable;

        z0 = r0 instanceof java.util.Collection;

        if z0 == 0 goto label1;

        r2 = (java.util.Collection) r0;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        goto label2;

     label1:
        $i0 = 4;

     label2:
        r1 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke r1.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        virtualinvoke r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable)>(r0);

        $r3 = virtualinvoke r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        return $r3;
    }

    public static com.google.common.collect.ImmutableMap copyOf(java.util.Map)
    {
        com.google.common.collect.ImmutableMap r1;
        java.util.Map r0;
        java.util.Set $r2;
        boolean z0;

        r0 := @parameter0: java.util.Map;

        z0 = r0 instanceof com.google.common.collect.ImmutableMap;

        if z0 == 0 goto label1;

        z0 = r0 instanceof java.util.SortedMap;

        if z0 != 0 goto label1;

        r1 = (com.google.common.collect.ImmutableMap) r0;

        z0 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: boolean isPartialView()>();

        if z0 != 0 goto label1;

        return r1;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)>($r2);

        return r1;
    }

    static java.util.Map$Entry entryOf(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        $r2 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static com.google.common.collect.ImmutableMap of()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 = <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r3;
        com.google.common.collect.RegularImmutableMap $r2;
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r0;

        $r3[1] = r1;

        $r2 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(1, $r3);

        return $r2;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r5;
        com.google.common.collect.RegularImmutableMap $r4;
        java.lang.Object r0, r1, r2, r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = r0;

        $r5[1] = r1;

        $r5[2] = r2;

        $r5[3] = r3;

        $r4 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(2, $r5);

        return $r4;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r7;
        com.google.common.collect.RegularImmutableMap $r6;
        java.lang.Object r0, r1, r2, r3, r4, r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        $r7 = newarray (java.lang.Object)[6];

        $r7[0] = r0;

        $r7[1] = r1;

        $r7[2] = r2;

        $r7[3] = r3;

        $r7[4] = r4;

        $r7[5] = r5;

        $r6 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(3, $r7);

        return $r6;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r9;
        com.google.common.collect.RegularImmutableMap $r8;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r6, r7);

        $r9 = newarray (java.lang.Object)[8];

        $r9[0] = r0;

        $r9[1] = r1;

        $r9[2] = r2;

        $r9[3] = r3;

        $r9[4] = r4;

        $r9[5] = r5;

        $r9[6] = r6;

        $r9[7] = r7;

        $r8 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(4, $r9);

        return $r8;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r11;
        com.google.common.collect.RegularImmutableMap $r10;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r6, r7);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r8, r9);

        $r11 = newarray (java.lang.Object)[10];

        $r11[0] = r0;

        $r11[1] = r1;

        $r11[2] = r2;

        $r11[3] = r3;

        $r11[4] = r4;

        $r11[5] = r5;

        $r11[6] = r6;

        $r11[7] = r7;

        $r11[8] = r8;

        $r11[9] = r9;

        $r10 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(5, $r11);

        return $r10;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r13;
        com.google.common.collect.RegularImmutableMap $r12;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        r10 := @parameter10: java.lang.Object;

        r11 := @parameter11: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r6, r7);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r8, r9);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r10, r11);

        $r13 = newarray (java.lang.Object)[12];

        $r13[0] = r0;

        $r13[1] = r1;

        $r13[2] = r2;

        $r13[3] = r3;

        $r13[4] = r4;

        $r13[5] = r5;

        $r13[6] = r6;

        $r13[7] = r7;

        $r13[8] = r8;

        $r13[9] = r9;

        $r13[10] = r10;

        $r13[11] = r11;

        $r12 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(6, $r13);

        return $r12;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r15;
        com.google.common.collect.RegularImmutableMap $r14;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        r10 := @parameter10: java.lang.Object;

        r11 := @parameter11: java.lang.Object;

        r12 := @parameter12: java.lang.Object;

        r13 := @parameter13: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r6, r7);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r8, r9);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r10, r11);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r12, r13);

        $r15 = newarray (java.lang.Object)[14];

        $r15[0] = r0;

        $r15[1] = r1;

        $r15[2] = r2;

        $r15[3] = r3;

        $r15[4] = r4;

        $r15[5] = r5;

        $r15[6] = r6;

        $r15[7] = r7;

        $r15[8] = r8;

        $r15[9] = r9;

        $r15[10] = r10;

        $r15[11] = r11;

        $r15[12] = r12;

        $r15[13] = r13;

        $r14 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(7, $r15);

        return $r14;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r17;
        com.google.common.collect.RegularImmutableMap $r16;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        r10 := @parameter10: java.lang.Object;

        r11 := @parameter11: java.lang.Object;

        r12 := @parameter12: java.lang.Object;

        r13 := @parameter13: java.lang.Object;

        r14 := @parameter14: java.lang.Object;

        r15 := @parameter15: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r6, r7);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r8, r9);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r10, r11);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r12, r13);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r14, r15);

        $r17 = newarray (java.lang.Object)[16];

        $r17[0] = r0;

        $r17[1] = r1;

        $r17[2] = r2;

        $r17[3] = r3;

        $r17[4] = r4;

        $r17[5] = r5;

        $r17[6] = r6;

        $r17[7] = r7;

        $r17[8] = r8;

        $r17[9] = r9;

        $r17[10] = r10;

        $r17[11] = r11;

        $r17[12] = r12;

        $r17[13] = r13;

        $r17[14] = r14;

        $r17[15] = r15;

        $r16 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(8, $r17);

        return $r16;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r19;
        com.google.common.collect.RegularImmutableMap $r18;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        r10 := @parameter10: java.lang.Object;

        r11 := @parameter11: java.lang.Object;

        r12 := @parameter12: java.lang.Object;

        r13 := @parameter13: java.lang.Object;

        r14 := @parameter14: java.lang.Object;

        r15 := @parameter15: java.lang.Object;

        r16 := @parameter16: java.lang.Object;

        r17 := @parameter17: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r6, r7);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r8, r9);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r10, r11);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r12, r13);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r14, r15);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r16, r17);

        $r19 = newarray (java.lang.Object)[18];

        $r19[0] = r0;

        $r19[1] = r1;

        $r19[2] = r2;

        $r19[3] = r3;

        $r19[4] = r4;

        $r19[5] = r5;

        $r19[6] = r6;

        $r19[7] = r7;

        $r19[8] = r8;

        $r19[9] = r9;

        $r19[10] = r10;

        $r19[11] = r11;

        $r19[12] = r12;

        $r19[13] = r13;

        $r19[14] = r14;

        $r19[15] = r15;

        $r19[16] = r16;

        $r19[17] = r17;

        $r18 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(9, $r19);

        return $r18;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r21;
        com.google.common.collect.RegularImmutableMap $r20;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        r10 := @parameter10: java.lang.Object;

        r11 := @parameter11: java.lang.Object;

        r12 := @parameter12: java.lang.Object;

        r13 := @parameter13: java.lang.Object;

        r14 := @parameter14: java.lang.Object;

        r15 := @parameter15: java.lang.Object;

        r16 := @parameter16: java.lang.Object;

        r17 := @parameter17: java.lang.Object;

        r18 := @parameter18: java.lang.Object;

        r19 := @parameter19: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r2, r3);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r4, r5);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r6, r7);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r8, r9);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r10, r11);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r12, r13);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r14, r15);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r16, r17);

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>(r18, r19);

        $r21 = newarray (java.lang.Object)[20];

        $r21[0] = r0;

        $r21[1] = r1;

        $r21[2] = r2;

        $r21[3] = r3;

        $r21[4] = r4;

        $r21[5] = r5;

        $r21[6] = r6;

        $r21[7] = r7;

        $r21[8] = r8;

        $r21[9] = r9;

        $r21[10] = r10;

        $r21[11] = r11;

        $r21[12] = r12;

        $r21[13] = r13;

        $r21[14] = r14;

        $r21[15] = r15;

        $r21[16] = r16;

        $r21[17] = r17;

        $r21[18] = r18;

        $r21[19] = r19;

        $r20 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[])>(10, $r21);

        return $r20;
    }

    public static transient com.google.common.collect.ImmutableMap ofEntries(java.util.Map$Entry[])
    {
        java.util.List $r1;
        java.util.Map$Entry[] r0;
        com.google.common.collect.ImmutableMap $r2;

        r0 := @parameter0: java.util.Map$Entry[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }

    public com.google.common.collect.ImmutableSetMultimap asMultimap()
    {
        com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets $r1;
        com.google.common.collect.ImmutableMap r0;
        int $i0;
        boolean $z0;
        com.google.common.collect.ImmutableSetMultimap $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap of()>();

        return $r2;

     label1:
        $r2 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSetMultimap multimapView>;

        if $r2 != null goto label2;

        $r2 = new com.google.common.collect.ImmutableSetMultimap;

        $r1 = new com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets: void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableMap$1)>(r0, null);

        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: int size()>();

        specialinvoke $r2.<com.google.common.collect.ImmutableSetMultimap: void <init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)>($r1, $i0, null);

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSetMultimap multimapView> = $r2;

     label2:
        return $r2;
    }

    public final void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap r0;
        com.google.common.collect.ImmutableCollection $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    abstract com.google.common.collect.ImmutableSet createEntrySet();

    abstract com.google.common.collect.ImmutableSet createKeySet();

    abstract com.google.common.collect.ImmutableCollection createValues();

    public com.google.common.collect.ImmutableSet entrySet()
    {
        com.google.common.collect.ImmutableSet r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        r1 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createEntrySet()>();

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet> = r1;

     label1:
        return r1;
    }

    public volatile java.util.Set entrySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean equalsImpl(java.util.Map,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public abstract java.lang.Object get(java.lang.Object);

    public final java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, r2;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        return $r1;

     label1:
        return r2;
    }

    public int hashCode()
    {
        int $i0;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $i0 = staticinvoke <com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>($r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean isHashCodeFast()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        return 0;
    }

    abstract boolean isPartialView();

    com.google.common.collect.UnmodifiableIterator keyIterator()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableMap r0;
        com.google.common.collect.UnmodifiableIterator $r3;
        com.google.common.collect.ImmutableMap$1 $r1;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r1 = new com.google.common.collect.ImmutableMap$1;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$1: void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.UnmodifiableIterator)>(r0, $r3);

        return $r1;
    }

    public com.google.common.collect.ImmutableSet keySet()
    {
        com.google.common.collect.ImmutableSet r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        r1 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createKeySet()>();

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet> = r1;

     label1:
        return r1;
    }

    public volatile java.util.Set keySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r1;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object r1, r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final void putAll(java.util.Map)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.ImmutableMap r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.ImmutableMap;

        r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.String toStringImpl(java.util.Map)>(r0);

        return $r1;
    }

    public com.google.common.collect.ImmutableCollection values()
    {
        com.google.common.collect.ImmutableCollection r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        r1 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values>;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection createValues()>();

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values> = r1;

     label1:
        return r1;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableMap$SerializedForm $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = new com.google.common.collect.ImmutableMap$SerializedForm;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$SerializedForm: void <init>(com.google.common.collect.ImmutableMap)>(r0);

        return $r1;
    }
}
